   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 3
   4              		.fpu fpv4-sp-d16
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 6
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"list.c"
  22              	.Ltext0:
  23              		.cfi_sections	.debug_frame
  24              		.section	.text.vListInitialise,"ax",%progbits
  25              		.align	2
  26              		.global	vListInitialise
  27              		.thumb
  28              		.thumb_func
  30              	vListInitialise:
  31              	.LFB110:
  32              		.file 1 "FreeRTOS/Source/list.c"
   1:FreeRTOS/Source/list.c **** /*
   2:FreeRTOS/Source/list.c ****     FreeRTOS V7.0.2 - Copyright (C) 2011 Real Time Engineers Ltd.
   3:FreeRTOS/Source/list.c **** 
   4:FreeRTOS/Source/list.c **** 
   5:FreeRTOS/Source/list.c ****     ***************************************************************************
   6:FreeRTOS/Source/list.c ****      *                                                                       *
   7:FreeRTOS/Source/list.c ****      *    FreeRTOS tutorial books are available in pdf and paperback.        *
   8:FreeRTOS/Source/list.c ****      *    Complete, revised, and edited pdf reference manuals are also       *
   9:FreeRTOS/Source/list.c ****      *    available.                                                         *
  10:FreeRTOS/Source/list.c ****      *                                                                       *
  11:FreeRTOS/Source/list.c ****      *    Purchasing FreeRTOS documentation will not only help you, by       *
  12:FreeRTOS/Source/list.c ****      *    ensuring you get running as quickly as possible and with an        *
  13:FreeRTOS/Source/list.c ****      *    in-depth knowledge of how to use FreeRTOS, it will also help       *
  14:FreeRTOS/Source/list.c ****      *    the FreeRTOS project to continue with its mission of providing     *
  15:FreeRTOS/Source/list.c ****      *    professional grade, cross platform, de facto standard solutions    *
  16:FreeRTOS/Source/list.c ****      *    for microcontrollers - completely free of charge!                  *
  17:FreeRTOS/Source/list.c ****      *                                                                       *
  18:FreeRTOS/Source/list.c ****      *    >>> See http://www.FreeRTOS.org/Documentation for details. <<<     *
  19:FreeRTOS/Source/list.c ****      *                                                                       *
  20:FreeRTOS/Source/list.c ****      *    Thank you for using FreeRTOS, and thank you for your support!      *
  21:FreeRTOS/Source/list.c ****      *                                                                       *
  22:FreeRTOS/Source/list.c ****     ***************************************************************************
  23:FreeRTOS/Source/list.c **** 
  24:FreeRTOS/Source/list.c **** 
  25:FreeRTOS/Source/list.c ****     This file is part of the FreeRTOS distribution.
  26:FreeRTOS/Source/list.c **** 
  27:FreeRTOS/Source/list.c ****     FreeRTOS is free software; you can redistribute it and/or modify it under
  28:FreeRTOS/Source/list.c ****     the terms of the GNU General Public License (version 2) as published by the
  29:FreeRTOS/Source/list.c ****     Free Software Foundation AND MODIFIED BY the FreeRTOS exception.
  30:FreeRTOS/Source/list.c ****     >>>NOTE<<< The modification to the GPL is included to allow you to
  31:FreeRTOS/Source/list.c ****     distribute a combined work that includes FreeRTOS without being obliged to
  32:FreeRTOS/Source/list.c ****     provide the source code for proprietary components outside of the FreeRTOS
  33:FreeRTOS/Source/list.c ****     kernel.  FreeRTOS is distributed in the hope that it will be useful, but
  34:FreeRTOS/Source/list.c ****     WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
  35:FreeRTOS/Source/list.c ****     or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
  36:FreeRTOS/Source/list.c ****     more details. You should have received a copy of the GNU General Public
  37:FreeRTOS/Source/list.c ****     License and the FreeRTOS license exception along with FreeRTOS; if not it
  38:FreeRTOS/Source/list.c ****     can be viewed here: http://www.freertos.org/a00114.html and also obtained
  39:FreeRTOS/Source/list.c ****     by writing to Richard Barry, contact details for whom are available on the
  40:FreeRTOS/Source/list.c ****     FreeRTOS WEB site.
  41:FreeRTOS/Source/list.c **** 
  42:FreeRTOS/Source/list.c ****     1 tab == 4 spaces!
  43:FreeRTOS/Source/list.c **** 
  44:FreeRTOS/Source/list.c ****     http://www.FreeRTOS.org - Documentation, latest information, license and
  45:FreeRTOS/Source/list.c ****     contact details.
  46:FreeRTOS/Source/list.c **** 
  47:FreeRTOS/Source/list.c ****     http://www.SafeRTOS.com - A version that is certified for use in safety
  48:FreeRTOS/Source/list.c ****     critical systems.
  49:FreeRTOS/Source/list.c **** 
  50:FreeRTOS/Source/list.c ****     http://www.OpenRTOS.com - Commercial support, development, porting,
  51:FreeRTOS/Source/list.c ****     licensing and training services.
  52:FreeRTOS/Source/list.c **** */
  53:FreeRTOS/Source/list.c **** 
  54:FreeRTOS/Source/list.c **** 
  55:FreeRTOS/Source/list.c **** #include <stdlib.h>
  56:FreeRTOS/Source/list.c **** #include "FreeRTOS.h"
  57:FreeRTOS/Source/list.c **** #include "list.h"
  58:FreeRTOS/Source/list.c **** 
  59:FreeRTOS/Source/list.c **** /*-----------------------------------------------------------
  60:FreeRTOS/Source/list.c ****  * PUBLIC LIST API documented in list.h
  61:FreeRTOS/Source/list.c ****  *----------------------------------------------------------*/
  62:FreeRTOS/Source/list.c **** 
  63:FreeRTOS/Source/list.c **** void vListInitialise( xList *pxList )
  64:FreeRTOS/Source/list.c **** {
  33              		.loc 1 64 0
  34              		.cfi_startproc
  35              		@ args = 0, pretend = 0, frame = 8
  36              		@ frame_needed = 1, uses_anonymous_args = 0
  37              		@ link register save eliminated.
  38 0000 80B4     		push	{r7}
  39              	.LCFI0:
  40              		.cfi_def_cfa_offset 4
  41 0002 83B0     		sub	sp, sp, #12
  42              	.LCFI1:
  43              		.cfi_def_cfa_offset 16
  44 0004 00AF     		add	r7, sp, #0
  45              		.cfi_offset 7, -4
  46              	.LCFI2:
  47              		.cfi_def_cfa_register 7
  48 0006 7860     		str	r0, [r7, #4]
  65:FreeRTOS/Source/list.c **** 	/* The list structure contains a list item which is used to mark the
  66:FreeRTOS/Source/list.c **** 	end of the list.  To initialise the list the list end is inserted
  67:FreeRTOS/Source/list.c **** 	as the only list entry. */
  68:FreeRTOS/Source/list.c **** 	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
  49              		.loc 1 68 0
  50 0008 7B68     		ldr	r3, [r7, #4]
  51 000a 03F10803 		add	r3, r3, #8
  52 000e 1A46     		mov	r2, r3
  53 0010 7B68     		ldr	r3, [r7, #4]
  54 0012 5A60     		str	r2, [r3, #4]
  69:FreeRTOS/Source/list.c **** 
  70:FreeRTOS/Source/list.c **** 	/* The list end value is the highest possible value in the list to
  71:FreeRTOS/Source/list.c **** 	ensure it remains at the end of the list. */
  72:FreeRTOS/Source/list.c **** 	pxList->xListEnd.xItemValue = portMAX_DELAY;
  55              		.loc 1 72 0
  56 0014 7B68     		ldr	r3, [r7, #4]
  57 0016 4FF0FF32 		mov	r2, #-1
  58 001a 9A60     		str	r2, [r3, #8]
  73:FreeRTOS/Source/list.c **** 
  74:FreeRTOS/Source/list.c **** 	/* The list end next and previous pointers point to itself so we know
  75:FreeRTOS/Source/list.c **** 	when the list is empty. */
  76:FreeRTOS/Source/list.c **** 	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
  59              		.loc 1 76 0
  60 001c 7B68     		ldr	r3, [r7, #4]
  61 001e 03F10803 		add	r3, r3, #8
  62 0022 1A46     		mov	r2, r3
  63 0024 7B68     		ldr	r3, [r7, #4]
  64 0026 DA60     		str	r2, [r3, #12]
  77:FreeRTOS/Source/list.c **** 	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
  65              		.loc 1 77 0
  66 0028 7B68     		ldr	r3, [r7, #4]
  67 002a 03F10803 		add	r3, r3, #8
  68 002e 1A46     		mov	r2, r3
  69 0030 7B68     		ldr	r3, [r7, #4]
  70 0032 1A61     		str	r2, [r3, #16]
  78:FreeRTOS/Source/list.c **** 
  79:FreeRTOS/Source/list.c **** 	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
  71              		.loc 1 79 0
  72 0034 7B68     		ldr	r3, [r7, #4]
  73 0036 4FF00002 		mov	r2, #0
  74 003a 1A60     		str	r2, [r3, #0]
  80:FreeRTOS/Source/list.c **** }
  75              		.loc 1 80 0
  76 003c 07F10C07 		add	r7, r7, #12
  77 0040 BD46     		mov	sp, r7
  78 0042 80BC     		pop	{r7}
  79 0044 7047     		bx	lr
  80              		.cfi_endproc
  81              	.LFE110:
  83 0046 00BF     		.section	.text.vListInitialiseItem,"ax",%progbits
  84              		.align	2
  85              		.global	vListInitialiseItem
  86              		.thumb
  87              		.thumb_func
  89              	vListInitialiseItem:
  90              	.LFB111:
  81:FreeRTOS/Source/list.c **** /*-----------------------------------------------------------*/
  82:FreeRTOS/Source/list.c **** 
  83:FreeRTOS/Source/list.c **** void vListInitialiseItem( xListItem *pxItem )
  84:FreeRTOS/Source/list.c **** {
  91              		.loc 1 84 0
  92              		.cfi_startproc
  93              		@ args = 0, pretend = 0, frame = 8
  94              		@ frame_needed = 1, uses_anonymous_args = 0
  95              		@ link register save eliminated.
  96 0000 80B4     		push	{r7}
  97              	.LCFI3:
  98              		.cfi_def_cfa_offset 4
  99 0002 83B0     		sub	sp, sp, #12
 100              	.LCFI4:
 101              		.cfi_def_cfa_offset 16
 102 0004 00AF     		add	r7, sp, #0
 103              		.cfi_offset 7, -4
 104              	.LCFI5:
 105              		.cfi_def_cfa_register 7
 106 0006 7860     		str	r0, [r7, #4]
  85:FreeRTOS/Source/list.c **** 	/* Make sure the list item is not recorded as being on a list. */
  86:FreeRTOS/Source/list.c **** 	pxItem->pvContainer = NULL;
 107              		.loc 1 86 0
 108 0008 7B68     		ldr	r3, [r7, #4]
 109 000a 4FF00002 		mov	r2, #0
 110 000e 1A61     		str	r2, [r3, #16]
  87:FreeRTOS/Source/list.c **** }
 111              		.loc 1 87 0
 112 0010 07F10C07 		add	r7, r7, #12
 113 0014 BD46     		mov	sp, r7
 114 0016 80BC     		pop	{r7}
 115 0018 7047     		bx	lr
 116              		.cfi_endproc
 117              	.LFE111:
 119 001a 00BF     		.section	.text.vListInsertEnd,"ax",%progbits
 120              		.align	2
 121              		.global	vListInsertEnd
 122              		.thumb
 123              		.thumb_func
 125              	vListInsertEnd:
 126              	.LFB112:
  88:FreeRTOS/Source/list.c **** /*-----------------------------------------------------------*/
  89:FreeRTOS/Source/list.c **** 
  90:FreeRTOS/Source/list.c **** void vListInsertEnd( xList *pxList, xListItem *pxNewListItem )
  91:FreeRTOS/Source/list.c **** {
 127              		.loc 1 91 0
 128              		.cfi_startproc
 129              		@ args = 0, pretend = 0, frame = 16
 130              		@ frame_needed = 1, uses_anonymous_args = 0
 131              		@ link register save eliminated.
 132 0000 80B4     		push	{r7}
 133              	.LCFI6:
 134              		.cfi_def_cfa_offset 4
 135 0002 85B0     		sub	sp, sp, #20
 136              	.LCFI7:
 137              		.cfi_def_cfa_offset 24
 138 0004 00AF     		add	r7, sp, #0
 139              		.cfi_offset 7, -4
 140              	.LCFI8:
 141              		.cfi_def_cfa_register 7
 142 0006 7860     		str	r0, [r7, #4]
 143 0008 3960     		str	r1, [r7, #0]
  92:FreeRTOS/Source/list.c **** volatile xListItem * pxIndex;
  93:FreeRTOS/Source/list.c **** 
  94:FreeRTOS/Source/list.c **** 	/* Insert a new list item into pxList, but rather than sort the list,
  95:FreeRTOS/Source/list.c **** 	makes the new list item the last item to be removed by a call to
  96:FreeRTOS/Source/list.c **** 	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
  97:FreeRTOS/Source/list.c **** 	the pxIndex member. */
  98:FreeRTOS/Source/list.c **** 	pxIndex = pxList->pxIndex;
 144              		.loc 1 98 0
 145 000a 7B68     		ldr	r3, [r7, #4]
 146 000c 5B68     		ldr	r3, [r3, #4]
 147 000e FB60     		str	r3, [r7, #12]
  99:FreeRTOS/Source/list.c **** 
 100:FreeRTOS/Source/list.c **** 	pxNewListItem->pxNext = pxIndex->pxNext;
 148              		.loc 1 100 0
 149 0010 FB68     		ldr	r3, [r7, #12]
 150 0012 5A68     		ldr	r2, [r3, #4]
 151 0014 3B68     		ldr	r3, [r7, #0]
 152 0016 5A60     		str	r2, [r3, #4]
 101:FreeRTOS/Source/list.c **** 	pxNewListItem->pxPrevious = pxList->pxIndex;
 153              		.loc 1 101 0
 154 0018 7B68     		ldr	r3, [r7, #4]
 155 001a 5A68     		ldr	r2, [r3, #4]
 156 001c 3B68     		ldr	r3, [r7, #0]
 157 001e 9A60     		str	r2, [r3, #8]
 102:FreeRTOS/Source/list.c **** 	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
 158              		.loc 1 102 0
 159 0020 FB68     		ldr	r3, [r7, #12]
 160 0022 5B68     		ldr	r3, [r3, #4]
 161 0024 3A68     		ldr	r2, [r7, #0]
 162 0026 9A60     		str	r2, [r3, #8]
 103:FreeRTOS/Source/list.c **** 	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
 163              		.loc 1 103 0
 164 0028 3A68     		ldr	r2, [r7, #0]
 165 002a FB68     		ldr	r3, [r7, #12]
 166 002c 5A60     		str	r2, [r3, #4]
 104:FreeRTOS/Source/list.c **** 	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
 167              		.loc 1 104 0
 168 002e 3A68     		ldr	r2, [r7, #0]
 169 0030 7B68     		ldr	r3, [r7, #4]
 170 0032 5A60     		str	r2, [r3, #4]
 105:FreeRTOS/Source/list.c **** 
 106:FreeRTOS/Source/list.c **** 	/* Remember which list the item is in. */
 107:FreeRTOS/Source/list.c **** 	pxNewListItem->pvContainer = ( void * ) pxList;
 171              		.loc 1 107 0
 172 0034 3B68     		ldr	r3, [r7, #0]
 173 0036 7A68     		ldr	r2, [r7, #4]
 174 0038 1A61     		str	r2, [r3, #16]
 108:FreeRTOS/Source/list.c **** 
 109:FreeRTOS/Source/list.c **** 	( pxList->uxNumberOfItems )++;
 175              		.loc 1 109 0
 176 003a 7B68     		ldr	r3, [r7, #4]
 177 003c 1B68     		ldr	r3, [r3, #0]
 178 003e 03F10102 		add	r2, r3, #1
 179 0042 7B68     		ldr	r3, [r7, #4]
 180 0044 1A60     		str	r2, [r3, #0]
 110:FreeRTOS/Source/list.c **** }
 181              		.loc 1 110 0
 182 0046 07F11407 		add	r7, r7, #20
 183 004a BD46     		mov	sp, r7
 184 004c 80BC     		pop	{r7}
 185 004e 7047     		bx	lr
 186              		.cfi_endproc
 187              	.LFE112:
 189              		.section	.text.vListInsert,"ax",%progbits
 190              		.align	2
 191              		.global	vListInsert
 192              		.thumb
 193              		.thumb_func
 195              	vListInsert:
 196              	.LFB113:
 111:FreeRTOS/Source/list.c **** /*-----------------------------------------------------------*/
 112:FreeRTOS/Source/list.c **** 
 113:FreeRTOS/Source/list.c **** void vListInsert( xList *pxList, xListItem *pxNewListItem )
 114:FreeRTOS/Source/list.c **** {
 197              		.loc 1 114 0
 198              		.cfi_startproc
 199              		@ args = 0, pretend = 0, frame = 16
 200              		@ frame_needed = 1, uses_anonymous_args = 0
 201              		@ link register save eliminated.
 202 0000 80B4     		push	{r7}
 203              	.LCFI9:
 204              		.cfi_def_cfa_offset 4
 205 0002 85B0     		sub	sp, sp, #20
 206              	.LCFI10:
 207              		.cfi_def_cfa_offset 24
 208 0004 00AF     		add	r7, sp, #0
 209              		.cfi_offset 7, -4
 210              	.LCFI11:
 211              		.cfi_def_cfa_register 7
 212 0006 7860     		str	r0, [r7, #4]
 213 0008 3960     		str	r1, [r7, #0]
 115:FreeRTOS/Source/list.c **** volatile xListItem *pxIterator;
 116:FreeRTOS/Source/list.c **** portTickType xValueOfInsertion;
 117:FreeRTOS/Source/list.c **** 
 118:FreeRTOS/Source/list.c **** 	/* Insert the new list item into the list, sorted in ulListItem order. */
 119:FreeRTOS/Source/list.c **** 	xValueOfInsertion = pxNewListItem->xItemValue;
 214              		.loc 1 119 0
 215 000a 3B68     		ldr	r3, [r7, #0]
 216 000c 1B68     		ldr	r3, [r3, #0]
 217 000e BB60     		str	r3, [r7, #8]
 120:FreeRTOS/Source/list.c **** 
 121:FreeRTOS/Source/list.c **** 	/* If the list already contains a list item with the same item value then
 122:FreeRTOS/Source/list.c **** 	the new list item should be placed after it.  This ensures that TCB's which
 123:FreeRTOS/Source/list.c **** 	are stored in ready lists (all of which have the same ulListItem value)
 124:FreeRTOS/Source/list.c **** 	get an equal share of the CPU.  However, if the xItemValue is the same as
 125:FreeRTOS/Source/list.c **** 	the back marker the iteration loop below will not end.  This means we need
 126:FreeRTOS/Source/list.c **** 	to guard against this by checking the value first and modifying the
 127:FreeRTOS/Source/list.c **** 	algorithm slightly if necessary. */
 128:FreeRTOS/Source/list.c **** 	if( xValueOfInsertion == portMAX_DELAY )
 218              		.loc 1 128 0
 219 0010 BB68     		ldr	r3, [r7, #8]
 220 0012 B3F1FF3F 		cmp	r3, #-1
 221 0016 03D1     		bne	.L5
 129:FreeRTOS/Source/list.c **** 	{
 130:FreeRTOS/Source/list.c **** 		pxIterator = pxList->xListEnd.pxPrevious;
 222              		.loc 1 130 0
 223 0018 7B68     		ldr	r3, [r7, #4]
 224 001a 1B69     		ldr	r3, [r3, #16]
 225 001c FB60     		str	r3, [r7, #12]
 226 001e 0DE0     		b	.L6
 227              	.L5:
 131:FreeRTOS/Source/list.c **** 	}
 132:FreeRTOS/Source/list.c **** 	else
 133:FreeRTOS/Source/list.c **** 	{
 134:FreeRTOS/Source/list.c **** 		/* *** NOTE ***********************************************************
 135:FreeRTOS/Source/list.c **** 		If you find your application is crashing here then likely causes are:
 136:FreeRTOS/Source/list.c **** 			1) Stack overflow -
 137:FreeRTOS/Source/list.c **** 			   see http://www.freertos.org/Stacks-and-stack-overflow-checking.html
 138:FreeRTOS/Source/list.c **** 			2) Incorrect interrupt priority assignment, especially on Cortex-M3
 139:FreeRTOS/Source/list.c **** 			   parts where numerically high priority values denote low actual
 140:FreeRTOS/Source/list.c **** 			   interrupt priories, which can seem counter intuitive.  See
 141:FreeRTOS/Source/list.c **** 			   configMAX_SYSCALL_INTERRUPT_PRIORITY on http://www.freertos.org/a00110.html
 142:FreeRTOS/Source/list.c **** 			3) Calling an API function from within a critical section or when
 143:FreeRTOS/Source/list.c **** 			   the scheduler is suspended.
 144:FreeRTOS/Source/list.c **** 			4) Using a queue or semaphore before it has been initialised or
 145:FreeRTOS/Source/list.c **** 			   before the scheduler has been started (are interrupts firing
 146:FreeRTOS/Source/list.c **** 			   before vTaskStartScheduler() has been called?).
 147:FreeRTOS/Source/list.c **** 		See http://www.freertos.org/FAQHelp.html for more tips.
 148:FreeRTOS/Source/list.c **** 		**********************************************************************/
 149:FreeRTOS/Source/list.c **** 		
 150:FreeRTOS/Source/list.c **** 		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValue
 228              		.loc 1 150 0
 229 0020 7B68     		ldr	r3, [r7, #4]
 230 0022 03F10803 		add	r3, r3, #8
 231 0026 FB60     		str	r3, [r7, #12]
 232 0028 02E0     		b	.L7
 233              	.L8:
 234              		.loc 1 150 0 is_stmt 0 discriminator 2
 235 002a FB68     		ldr	r3, [r7, #12]
 236 002c 5B68     		ldr	r3, [r3, #4]
 237 002e FB60     		str	r3, [r7, #12]
 238              	.L7:
 239              		.loc 1 150 0 discriminator 1
 240 0030 FB68     		ldr	r3, [r7, #12]
 241 0032 5B68     		ldr	r3, [r3, #4]
 242 0034 1A68     		ldr	r2, [r3, #0]
 243 0036 BB68     		ldr	r3, [r7, #8]
 244 0038 9A42     		cmp	r2, r3
 245 003a F6D9     		bls	.L8
 246              	.L6:
 151:FreeRTOS/Source/list.c **** 		{
 152:FreeRTOS/Source/list.c **** 			/* There is nothing to do here, we are just iterating to the
 153:FreeRTOS/Source/list.c **** 			wanted insertion position. */
 154:FreeRTOS/Source/list.c **** 		}
 155:FreeRTOS/Source/list.c **** 	}
 156:FreeRTOS/Source/list.c **** 
 157:FreeRTOS/Source/list.c **** 	pxNewListItem->pxNext = pxIterator->pxNext;
 247              		.loc 1 157 0 is_stmt 1
 248 003c FB68     		ldr	r3, [r7, #12]
 249 003e 5A68     		ldr	r2, [r3, #4]
 250 0040 3B68     		ldr	r3, [r7, #0]
 251 0042 5A60     		str	r2, [r3, #4]
 158:FreeRTOS/Source/list.c **** 	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
 252              		.loc 1 158 0
 253 0044 3B68     		ldr	r3, [r7, #0]
 254 0046 5B68     		ldr	r3, [r3, #4]
 255 0048 3A68     		ldr	r2, [r7, #0]
 256 004a 9A60     		str	r2, [r3, #8]
 159:FreeRTOS/Source/list.c **** 	pxNewListItem->pxPrevious = pxIterator;
 257              		.loc 1 159 0
 258 004c 3B68     		ldr	r3, [r7, #0]
 259 004e FA68     		ldr	r2, [r7, #12]
 260 0050 9A60     		str	r2, [r3, #8]
 160:FreeRTOS/Source/list.c **** 	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
 261              		.loc 1 160 0
 262 0052 3A68     		ldr	r2, [r7, #0]
 263 0054 FB68     		ldr	r3, [r7, #12]
 264 0056 5A60     		str	r2, [r3, #4]
 161:FreeRTOS/Source/list.c **** 
 162:FreeRTOS/Source/list.c **** 	/* Remember which list the item is in.  This allows fast removal of the
 163:FreeRTOS/Source/list.c **** 	item later. */
 164:FreeRTOS/Source/list.c **** 	pxNewListItem->pvContainer = ( void * ) pxList;
 265              		.loc 1 164 0
 266 0058 3B68     		ldr	r3, [r7, #0]
 267 005a 7A68     		ldr	r2, [r7, #4]
 268 005c 1A61     		str	r2, [r3, #16]
 165:FreeRTOS/Source/list.c **** 
 166:FreeRTOS/Source/list.c **** 	( pxList->uxNumberOfItems )++;
 269              		.loc 1 166 0
 270 005e 7B68     		ldr	r3, [r7, #4]
 271 0060 1B68     		ldr	r3, [r3, #0]
 272 0062 03F10102 		add	r2, r3, #1
 273 0066 7B68     		ldr	r3, [r7, #4]
 274 0068 1A60     		str	r2, [r3, #0]
 167:FreeRTOS/Source/list.c **** }
 275              		.loc 1 167 0
 276 006a 07F11407 		add	r7, r7, #20
 277 006e BD46     		mov	sp, r7
 278 0070 80BC     		pop	{r7}
 279 0072 7047     		bx	lr
 280              		.cfi_endproc
 281              	.LFE113:
 283              		.section	.text.vListRemove,"ax",%progbits
 284              		.align	2
 285              		.global	vListRemove
 286              		.thumb
 287              		.thumb_func
 289              	vListRemove:
 290              	.LFB114:
 168:FreeRTOS/Source/list.c **** /*-----------------------------------------------------------*/
 169:FreeRTOS/Source/list.c **** 
 170:FreeRTOS/Source/list.c **** void vListRemove( xListItem *pxItemToRemove )
 171:FreeRTOS/Source/list.c **** {
 291              		.loc 1 171 0
 292              		.cfi_startproc
 293              		@ args = 0, pretend = 0, frame = 16
 294              		@ frame_needed = 1, uses_anonymous_args = 0
 295              		@ link register save eliminated.
 296 0000 80B4     		push	{r7}
 297              	.LCFI12:
 298              		.cfi_def_cfa_offset 4
 299 0002 85B0     		sub	sp, sp, #20
 300              	.LCFI13:
 301              		.cfi_def_cfa_offset 24
 302 0004 00AF     		add	r7, sp, #0
 303              		.cfi_offset 7, -4
 304              	.LCFI14:
 305              		.cfi_def_cfa_register 7
 306 0006 7860     		str	r0, [r7, #4]
 172:FreeRTOS/Source/list.c **** xList * pxList;
 173:FreeRTOS/Source/list.c **** 
 174:FreeRTOS/Source/list.c **** 	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 307              		.loc 1 174 0
 308 0008 7B68     		ldr	r3, [r7, #4]
 309 000a 5B68     		ldr	r3, [r3, #4]
 310 000c 7A68     		ldr	r2, [r7, #4]
 311 000e 9268     		ldr	r2, [r2, #8]
 312 0010 9A60     		str	r2, [r3, #8]
 175:FreeRTOS/Source/list.c **** 	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 313              		.loc 1 175 0
 314 0012 7B68     		ldr	r3, [r7, #4]
 315 0014 9B68     		ldr	r3, [r3, #8]
 316 0016 7A68     		ldr	r2, [r7, #4]
 317 0018 5268     		ldr	r2, [r2, #4]
 318 001a 5A60     		str	r2, [r3, #4]
 176:FreeRTOS/Source/list.c **** 	
 177:FreeRTOS/Source/list.c **** 	/* The list item knows which list it is in.  Obtain the list from the list
 178:FreeRTOS/Source/list.c **** 	item. */
 179:FreeRTOS/Source/list.c **** 	pxList = ( xList * ) pxItemToRemove->pvContainer;
 319              		.loc 1 179 0
 320 001c 7B68     		ldr	r3, [r7, #4]
 321 001e 1B69     		ldr	r3, [r3, #16]
 322 0020 FB60     		str	r3, [r7, #12]
 180:FreeRTOS/Source/list.c **** 
 181:FreeRTOS/Source/list.c **** 	/* Make sure the index is left pointing to a valid item. */
 182:FreeRTOS/Source/list.c **** 	if( pxList->pxIndex == pxItemToRemove )
 323              		.loc 1 182 0
 324 0022 FB68     		ldr	r3, [r7, #12]
 325 0024 5A68     		ldr	r2, [r3, #4]
 326 0026 7B68     		ldr	r3, [r7, #4]
 327 0028 9A42     		cmp	r2, r3
 328 002a 03D1     		bne	.L10
 183:FreeRTOS/Source/list.c **** 	{
 184:FreeRTOS/Source/list.c **** 		pxList->pxIndex = pxItemToRemove->pxPrevious;
 329              		.loc 1 184 0
 330 002c 7B68     		ldr	r3, [r7, #4]
 331 002e 9A68     		ldr	r2, [r3, #8]
 332 0030 FB68     		ldr	r3, [r7, #12]
 333 0032 5A60     		str	r2, [r3, #4]
 334              	.L10:
 185:FreeRTOS/Source/list.c **** 	}
 186:FreeRTOS/Source/list.c **** 
 187:FreeRTOS/Source/list.c **** 	pxItemToRemove->pvContainer = NULL;
 335              		.loc 1 187 0
 336 0034 7B68     		ldr	r3, [r7, #4]
 337 0036 4FF00002 		mov	r2, #0
 338 003a 1A61     		str	r2, [r3, #16]
 188:FreeRTOS/Source/list.c **** 	( pxList->uxNumberOfItems )--;
 339              		.loc 1 188 0
 340 003c FB68     		ldr	r3, [r7, #12]
 341 003e 1B68     		ldr	r3, [r3, #0]
 342 0040 03F1FF32 		add	r2, r3, #-1
 343 0044 FB68     		ldr	r3, [r7, #12]
 344 0046 1A60     		str	r2, [r3, #0]
 189:FreeRTOS/Source/list.c **** }
 345              		.loc 1 189 0
 346 0048 07F11407 		add	r7, r7, #20
 347 004c BD46     		mov	sp, r7
 348 004e 80BC     		pop	{r7}
 349 0050 7047     		bx	lr
 350              		.cfi_endproc
 351              	.LFE114:
 353 0052 00BF     		.text
 354              	.Letext0:
DEFINED SYMBOLS
                            *ABS*:00000000 list.c
     /tmp/ccaEpKHo.s:25     .text.vListInitialise:00000000 $t
     /tmp/ccaEpKHo.s:30     .text.vListInitialise:00000000 vListInitialise
     /tmp/ccaEpKHo.s:84     .text.vListInitialiseItem:00000000 $t
     /tmp/ccaEpKHo.s:89     .text.vListInitialiseItem:00000000 vListInitialiseItem
     /tmp/ccaEpKHo.s:120    .text.vListInsertEnd:00000000 $t
     /tmp/ccaEpKHo.s:125    .text.vListInsertEnd:00000000 vListInsertEnd
     /tmp/ccaEpKHo.s:190    .text.vListInsert:00000000 $t
     /tmp/ccaEpKHo.s:195    .text.vListInsert:00000000 vListInsert
     /tmp/ccaEpKHo.s:284    .text.vListRemove:00000000 $t
     /tmp/ccaEpKHo.s:289    .text.vListRemove:00000000 vListRemove
                     .debug_frame:00000010 $d

NO UNDEFINED SYMBOLS
