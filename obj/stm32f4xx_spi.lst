   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 3
   4              		.fpu fpv4-sp-d16
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 6
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"stm32f4xx_spi.c"
  22              	.Ltext0:
  23              		.cfi_sections	.debug_frame
  24              		.section	.text.SPI_I2S_DeInit,"ax",%progbits
  25              		.align	2
  26              		.global	SPI_I2S_DeInit
  27              		.thumb
  28              		.thumb_func
  30              	SPI_I2S_DeInit:
  31              	.LFB110:
  32              		.file 1 "libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c"
   1:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /**
   2:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   ******************************************************************************
   3:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @file    stm32f4xx_spi.c
   4:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @author  MCD Application Team
   5:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @version V1.0.0RC1
   6:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @date    25-August-2011
   7:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @brief   This file provides firmware functions to manage the following 
   8:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          functionalities of the Serial peripheral interface (SPI):           
   9:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *           - Initialization and Configuration
  10:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *           - Data transfers functions
  11:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *           - Hardware CRC Calculation
  12:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *           - DMA transfers management
  13:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *           - Interrupts and flags management 
  14:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *           
  15:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *  @verbatim
  16:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          
  17:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *                    
  18:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          ===================================================================
  19:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *                                 How to use this driver
  20:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          ===================================================================        
  21:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *    
  22:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          1. Enable peripheral clock using the following functions 
  23:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *             RCC_APB2PeriphClockCmd(RCC_APB2Periph_SPI1, ENABLE) for SPI1
  24:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *             RCC_APB1PeriphClockCmd(RCC_APB1Periph_SPI2, ENABLE) for SPI2
  25:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *             RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, ENABLE) for SPI3.
  26:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *
  27:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          2. Enable SCK, MOSI, MISO and NSS GPIO clocks using RCC_AHB1PeriphClockCmd()
  28:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *             function.
  29:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *             In I2S mode, if an external clock source is used then the I2S CKIN pin GPIO
  30:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *             clock should also be enabled.
  31:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *
  32:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          3. Peripherals alternate function: 
  33:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *                 - Connect the pin to the desired peripherals' Alternate 
  34:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *                   Function (AF) using GPIO_PinAFConfig() function
  35:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *                 - Configure the desired pin in alternate function by:
  36:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *                   GPIO_InitStruct->GPIO_Mode = GPIO_Mode_AF
  37:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *                 - Select the type, pull-up/pull-down and output speed via 
  38:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *                   GPIO_PuPd, GPIO_OType and GPIO_Speed members
  39:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *                 - Call GPIO_Init() function
  40:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *              In I2S mode, if an external clock source is used then the I2S CKIN pin
  41:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *              should be also configured in Alternate function Push-pull pull-up mode. 
  42:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *        
  43:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          4. Program the Polarity, Phase, First Data, Baud Rate Prescaler, Slave 
  44:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *             Management, Peripheral Mode and CRC Polynomial values using the SPI_Init()
  45:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *             function.
  46:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *             In I2S mode, program the Mode, Standard, Data Format, MCLK Output, Audio 
  47:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *             frequency and Polarity using I2S_Init() function.
  48:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *             For I2S mode, make sure that either:
  49:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *              - I2S PLL is configured using the functions RCC_I2SCLKConfig(RCC_I2S2CLKSource_PLL
  50:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *                RCC_PLLI2SCmd(ENABLE) and RCC_GetFlagStatus(RCC_FLAG_PLLI2SRDY).
  51:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *              or 
  52:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *              - External clock source is configured using the function 
  53:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *                RCC_I2SCLKConfig(RCC_I2S2CLKSource_Ext) and after setting correctly the define c
  54:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *                I2S_EXTERNAL_CLOCK_VAL in the stm32f4xx_conf.h file. 
  55:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *
  56:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          5. Enable the NVIC and the corresponding interrupt using the function 
  57:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *             SPI_ITConfig() if you need to use interrupt mode. 
  58:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *
  59:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          6. When using the DMA mode 
  60:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *                   - Configure the DMA using DMA_Init() function
  61:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *                   - Active the needed channel Request using SPI_I2S_DMACmd() function
  62:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * 
  63:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          7. Enable the SPI using the SPI_Cmd() function or enable the I2S using
  64:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *             I2S_Cmd().
  65:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * 
  66:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          8. Enable the DMA using the DMA_Cmd() function when using DMA mode. 
  67:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *
  68:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          9. Optionally, you can enable/configure the following parameters without
  69:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *             re-initialization (i.e there is no need to call again SPI_Init() function):
  70:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *              - When bidirectional mode (SPI_Direction_1Line_Rx or SPI_Direction_1Line_Tx)
  71:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *                is programmed as Data direction parameter using the SPI_Init() function
  72:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *                it can be possible to switch between SPI_Direction_Tx or SPI_Direction_Rx
  73:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *                using the SPI_BiDirectionalLineConfig() function.
  74:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *              - When SPI_NSS_Soft is selected as Slave Select Management parameter 
  75:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *                using the SPI_Init() function it can be possible to manage the 
  76:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *                NSS internal signal using the SPI_NSSInternalSoftwareConfig() function.
  77:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *              - Reconfigure the data size using the SPI_DataSizeConfig() function  
  78:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *              - Enable or disable the SS output using the SPI_SSOutputCmd() function  
  79:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          
  80:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          10. To use the CRC Hardware calculation feature refer to the Peripheral 
  81:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *              CRC hardware Calculation subsection.
  82:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *   
  83:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *
  84:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          It is possible to use SPI in I2S full duplex mode, in this case, each SPI 
  85:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          peripheral is able to manage sending and receiving data simultaneously
  86:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          using two data lines. Each SPI peripheral has an extended block called I2Sxext
  87:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          (ie. I2S2ext for SPI2 and I2S3ext for SPI3).
  88:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          The extension block is not a full SPI IP, it is used only as I2S slave to
  89:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          implement full duplex mode. The extension block uses the same clock sources
  90:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          as its master.          
  91:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          To configure I2S full duplex you have to:
  92:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *            
  93:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          1. Configure SPIx in I2S mode (I2S_Init() function) as described above. 
  94:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *           
  95:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          2. Call the I2S_FullDuplexConfig() function using the same strucutre passed to  
  96:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *             I2S_Init() function.
  97:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *            
  98:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          3. Call I2S_Cmd() for SPIx then for its extended block.
  99:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          
 100:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          4. To configure interrupts or DMA requests and to get/clear flag status, 
 101:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *             use I2Sxext instance for the extension block.
 102:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *             
 103:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          Functions that can be called with I2Sxext instances are:
 104:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          I2S_Cmd(), I2S_FullDuplexConfig(), SPI_I2S_ReceiveData(), SPI_I2S_SendData(), 
 105:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          SPI_I2S_DMACmd(), SPI_I2S_ITConfig(), SPI_I2S_GetFlagStatus(), SPI_I2S_ClearFlag(),
 106:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          SPI_I2S_GetITStatus() and SPI_I2S_ClearITPendingBit().
 107:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *                 
 108:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          Example: To use SPI3 in Full duplex mode (SPI3 is Master Tx, I2S3ext is Slave Rx):
 109:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *            
 110:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          RCC_APB1PeriphClockCmd(RCC_APB1Periph_SPI3, ENABLE);   
 111:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          I2S_StructInit(&I2SInitStruct);
 112:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          I2SInitStruct.Mode = I2S_Mode_MasterTx;     
 113:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          I2S_Init(SPI3, &I2SInitStruct);
 114:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          I2S_FullDuplexConfig(SPI3ext, &I2SInitStruct)
 115:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          I2S_Cmd(SPI3, ENABLE);
 116:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          I2S_Cmd(SPI3ext, ENABLE);
 117:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          ...
 118:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          while (SPI_I2S_GetFlagStatus(SPI2, SPI_FLAG_TXE) == RESET)
 119:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          {}
 120:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          SPI_I2S_SendData(SPI3, txdata[i]);
 121:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          ...  
 122:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          while (SPI_I2S_GetFlagStatus(I2S3ext, SPI_FLAG_RXNE) == RESET)
 123:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          {}
 124:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          rxdata[i] = SPI_I2S_ReceiveData(I2S3ext);
 125:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          ...          
 126:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *              
 127:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *       
 128:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *    
 129:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @note    This driver supports only the I2S clock scheme available in Silicon
 130:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          RevisionB and RevisionY.
 131:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *     
 132:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @note    In I2S mode: if an external clock is used as source clock for the I2S,  
 133:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          then the define I2S_EXTERNAL_CLOCK_VAL in file stm32f4xx_conf.h should 
 134:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          be enabled and set to the value of the source clock frequency (in Hz).
 135:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * 
 136:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @note    In SPI mode: To use the SPI TI mode, call the function SPI_TIModeCmd() 
 137:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          just after calling the function SPI_Init().
 138:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *
 139:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *  @endverbatim  
 140:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *                                  
 141:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   ******************************************************************************
 142:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @attention
 143:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *
 144:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
 145:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
 146:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
 147:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
 148:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
 149:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
 150:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *
 151:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * <h2><center>&copy; COPYRIGHT 2011 STMicroelectronics</center></h2>
 152:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   ******************************************************************************  
 153:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */ 
 154:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 155:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /* Includes ------------------------------------------------------------------*/
 156:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** #include "stm32f4xx_spi.h"
 157:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** #include "stm32f4xx_rcc.h"
 158:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 159:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /** @addtogroup STM32F4xx_StdPeriph_Driver
 160:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @{
 161:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
 162:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 163:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /** @defgroup SPI 
 164:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @brief SPI driver modules
 165:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @{
 166:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */ 
 167:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 168:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /* Private typedef -----------------------------------------------------------*/
 169:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /* Private define ------------------------------------------------------------*/
 170:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 171:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /* SPI registers Masks */
 172:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** #define CR1_CLEAR_MASK            ((uint16_t)0x3040)
 173:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** #define I2SCFGR_CLEAR_MASK        ((uint16_t)0xF040)
 174:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 175:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /* RCC PLLs masks */
 176:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** #define PLLCFGR_PPLR_MASK         ((uint32_t)0x70000000)
 177:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** #define PLLCFGR_PPLN_MASK         ((uint32_t)0x00007FC0)
 178:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 179:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** #define SPI_CR2_FRF               ((uint16_t)0x0010)
 180:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** #define SPI_SR_TIFRFE             ((uint16_t)0x0100)
 181:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 182:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /* Private macro -------------------------------------------------------------*/
 183:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /* Private variables ---------------------------------------------------------*/
 184:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /* Private function prototypes -----------------------------------------------*/
 185:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /* Private functions ---------------------------------------------------------*/
 186:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 187:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /** @defgroup SPI_Private_Functions
 188:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @{
 189:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
 190:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 191:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /** @defgroup SPI_Group1 Initialization and Configuration functions
 192:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****  *  @brief   Initialization and Configuration functions 
 193:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****  *
 194:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** @verbatim   
 195:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****  ===============================================================================
 196:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****                   Initialization and Configuration functions
 197:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****  ===============================================================================  
 198:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 199:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   This section provides a set of functions allowing to initialize the SPI Direction,
 200:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   SPI Mode, SPI Data Size, SPI Polarity, SPI Phase, SPI NSS Management, SPI Baud
 201:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   Rate Prescaler, SPI First Bit and SPI CRC Polynomial.
 202:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   
 203:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   The SPI_Init() function follows the SPI configuration procedures for Master mode
 204:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   and Slave mode (details for these procedures are available in reference manual
 205:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   (RM0090)).
 206:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   
 207:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** @endverbatim
 208:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @{
 209:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
 210:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 211:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /**
 212:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @brief  Deinitialize the SPIx peripheral registers to their default reset values.
 213:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPIx: To select the SPIx/I2Sx peripheral, where x can be: 1, 2 or 3 
 214:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         in SPI mode or 2 or 3 in I2S mode.   
 215:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         
 216:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @note   The extended I2S blocks (ie. I2S2ext and I2S3ext blocks) are deinitialized
 217:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         when the relative I2S peripheral is deinitialized (the extended block's clock
 218:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         is managed by the I2S peripheral clock).
 219:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *             
 220:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @retval None
 221:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
 222:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** void SPI_I2S_DeInit(SPI_TypeDef* SPIx)
 223:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** {
  33              		.loc 1 223 0
  34              		.cfi_startproc
  35              		@ args = 0, pretend = 0, frame = 8
  36              		@ frame_needed = 1, uses_anonymous_args = 0
  37 0000 80B5     		push	{r7, lr}
  38              	.LCFI0:
  39              		.cfi_def_cfa_offset 8
  40 0002 82B0     		sub	sp, sp, #8
  41              	.LCFI1:
  42              		.cfi_def_cfa_offset 16
  43 0004 00AF     		add	r7, sp, #0
  44              		.cfi_offset 14, -4
  45              		.cfi_offset 7, -8
  46              	.LCFI2:
  47              		.cfi_def_cfa_register 7
  48 0006 7860     		str	r0, [r7, #4]
 224:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Check the parameters */
 225:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH(SPIx));
 226:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 227:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   if (SPIx == SPI1)
  49              		.loc 1 227 0
  50 0008 7A68     		ldr	r2, [r7, #4]
  51 000a 1A4B     		ldr	r3, .L5
  52 000c 9A42     		cmp	r2, r3
  53 000e 0CD1     		bne	.L2
 228:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   {
 229:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Enable SPI1 reset state */
 230:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, ENABLE);
  54              		.loc 1 230 0
  55 0010 4FF48050 		mov	r0, #4096
  56 0014 4FF00101 		mov	r1, #1
  57 0018 FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
 231:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Release SPI1 from reset state */
 232:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, DISABLE);
  58              		.loc 1 232 0
  59 001c 4FF48050 		mov	r0, #4096
  60 0020 4FF00001 		mov	r1, #0
  61 0024 FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
  62 0028 20E0     		b	.L1
  63              	.L2:
 233:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   }
 234:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   else if (SPIx == SPI2)
  64              		.loc 1 234 0
  65 002a 7A68     		ldr	r2, [r7, #4]
  66 002c 124B     		ldr	r3, .L5+4
  67 002e 9A42     		cmp	r2, r3
  68 0030 0CD1     		bne	.L4
 235:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   {
 236:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Enable SPI2 reset state */
 237:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, ENABLE);
  69              		.loc 1 237 0
  70 0032 4FF48040 		mov	r0, #16384
  71 0036 4FF00101 		mov	r1, #1
  72 003a FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 238:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Release SPI2 from reset state */
 239:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, DISABLE);
  73              		.loc 1 239 0
  74 003e 4FF48040 		mov	r0, #16384
  75 0042 4FF00001 		mov	r1, #0
  76 0046 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
  77 004a 0FE0     		b	.L1
  78              	.L4:
 240:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     }
 241:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   else
 242:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   {
 243:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     if (SPIx == SPI3)
  79              		.loc 1 243 0
  80 004c 7A68     		ldr	r2, [r7, #4]
  81 004e 0B4B     		ldr	r3, .L5+8
  82 0050 9A42     		cmp	r2, r3
  83 0052 0BD1     		bne	.L1
 244:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     {
 245:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       /* Enable SPI3 reset state */
 246:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, ENABLE);
  84              		.loc 1 246 0
  85 0054 4FF40040 		mov	r0, #32768
  86 0058 4FF00101 		mov	r1, #1
  87 005c FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 247:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       /* Release SPI3 from reset state */
 248:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, DISABLE);
  88              		.loc 1 248 0
  89 0060 4FF40040 		mov	r0, #32768
  90 0064 4FF00001 		mov	r1, #0
  91 0068 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
  92              	.L1:
 249:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     }
 250:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   }
 251:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** }
  93              		.loc 1 251 0
  94 006c 07F10807 		add	r7, r7, #8
  95 0070 BD46     		mov	sp, r7
  96 0072 80BD     		pop	{r7, pc}
  97              	.L6:
  98              		.align	2
  99              	.L5:
 100 0074 00300140 		.word	1073819648
 101 0078 00380040 		.word	1073756160
 102 007c 003C0040 		.word	1073757184
 103              		.cfi_endproc
 104              	.LFE110:
 106              		.section	.text.SPI_Init,"ax",%progbits
 107              		.align	2
 108              		.global	SPI_Init
 109              		.thumb
 110              		.thumb_func
 112              	SPI_Init:
 113              	.LFB111:
 252:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 253:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /**
 254:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @brief  Initializes the SPIx peripheral according to the specified 
 255:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         parameters in the SPI_InitStruct.
 256:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPIx: where x can be 1, 2 or 3 to select the SPI peripheral.
 257:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPI_InitStruct: pointer to a SPI_InitTypeDef structure that
 258:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         contains the configuration information for the specified SPI peripheral.
 259:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @retval None
 260:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
 261:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** void SPI_Init(SPI_TypeDef* SPIx, SPI_InitTypeDef* SPI_InitStruct)
 262:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** {
 114              		.loc 1 262 0
 115              		.cfi_startproc
 116              		@ args = 0, pretend = 0, frame = 16
 117              		@ frame_needed = 1, uses_anonymous_args = 0
 118              		@ link register save eliminated.
 119 0000 80B4     		push	{r7}
 120              	.LCFI3:
 121              		.cfi_def_cfa_offset 4
 122 0002 85B0     		sub	sp, sp, #20
 123              	.LCFI4:
 124              		.cfi_def_cfa_offset 24
 125 0004 00AF     		add	r7, sp, #0
 126              		.cfi_offset 7, -4
 127              	.LCFI5:
 128              		.cfi_def_cfa_register 7
 129 0006 7860     		str	r0, [r7, #4]
 130 0008 3960     		str	r1, [r7, #0]
 263:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   uint16_t tmpreg = 0;
 131              		.loc 1 263 0
 132 000a 4FF00003 		mov	r3, #0
 133 000e FB81     		strh	r3, [r7, #14]	@ movhi
 264:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   
 265:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* check the parameters */
 266:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH(SPIx));
 267:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   
 268:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Check the SPI parameters */
 269:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_DIRECTION_MODE(SPI_InitStruct->SPI_Direction));
 270:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_MODE(SPI_InitStruct->SPI_Mode));
 271:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_DATASIZE(SPI_InitStruct->SPI_DataSize));
 272:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_CPOL(SPI_InitStruct->SPI_CPOL));
 273:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_CPHA(SPI_InitStruct->SPI_CPHA));
 274:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_NSS(SPI_InitStruct->SPI_NSS));
 275:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_BAUDRATE_PRESCALER(SPI_InitStruct->SPI_BaudRatePrescaler));
 276:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_FIRST_BIT(SPI_InitStruct->SPI_FirstBit));
 277:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_CRC_POLYNOMIAL(SPI_InitStruct->SPI_CRCPolynomial));
 278:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 279:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /*---------------------------- SPIx CR1 Configuration ------------------------*/
 280:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Get the SPIx CR1 value */
 281:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   tmpreg = SPIx->CR1;
 134              		.loc 1 281 0
 135 0010 7B68     		ldr	r3, [r7, #4]
 136 0012 1B88     		ldrh	r3, [r3, #0]	@ movhi
 137 0014 FB81     		strh	r3, [r7, #14]	@ movhi
 282:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Clear BIDIMode, BIDIOE, RxONLY, SSM, SSI, LSBFirst, BR, MSTR, CPOL and CPHA bits */
 283:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   tmpreg &= CR1_CLEAR_MASK;
 138              		.loc 1 283 0
 139 0016 FB89     		ldrh	r3, [r7, #14]	@ movhi
 140 0018 03F44153 		and	r3, r3, #12352
 141 001c FB81     		strh	r3, [r7, #14]	@ movhi
 284:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Configure SPIx: direction, NSS management, first transmitted bit, BaudRate prescaler
 285:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****      master/salve mode, CPOL and CPHA */
 286:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Set BIDImode, BIDIOE and RxONLY bits according to SPI_Direction value */
 287:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
 288:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Set LSBFirst bit according to SPI_FirstBit value */
 289:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Set BR bits according to SPI_BaudRatePrescaler value */
 290:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Set CPOL bit according to SPI_CPOL value */
 291:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Set CPHA bit according to SPI_CPHA value */
 292:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 142              		.loc 1 292 0
 143 001e 3B68     		ldr	r3, [r7, #0]
 144 0020 1A88     		ldrh	r2, [r3, #0]
 145 0022 3B68     		ldr	r3, [r7, #0]
 146 0024 5B88     		ldrh	r3, [r3, #2]
 147 0026 42EA0303 		orr	r3, r2, r3
 148 002a 9AB2     		uxth	r2, r3
 293:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****                   SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 149              		.loc 1 293 0
 150 002c 3B68     		ldr	r3, [r7, #0]
 151 002e 9B88     		ldrh	r3, [r3, #4]
 292:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 152              		.loc 1 292 0
 153 0030 42EA0303 		orr	r3, r2, r3
 154 0034 9AB2     		uxth	r2, r3
 155              		.loc 1 293 0
 156 0036 3B68     		ldr	r3, [r7, #0]
 157 0038 DB88     		ldrh	r3, [r3, #6]
 292:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 158              		.loc 1 292 0
 159 003a 42EA0303 		orr	r3, r2, r3
 160 003e 9AB2     		uxth	r2, r3
 294:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****                   SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
 161              		.loc 1 294 0
 162 0040 3B68     		ldr	r3, [r7, #0]
 163 0042 1B89     		ldrh	r3, [r3, #8]
 292:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 164              		.loc 1 292 0
 165 0044 42EA0303 		orr	r3, r2, r3
 166 0048 9AB2     		uxth	r2, r3
 167              		.loc 1 294 0
 168 004a 3B68     		ldr	r3, [r7, #0]
 169 004c 5B89     		ldrh	r3, [r3, #10]
 292:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 170              		.loc 1 292 0
 171 004e 42EA0303 		orr	r3, r2, r3
 172 0052 9AB2     		uxth	r2, r3
 295:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****                   SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 173              		.loc 1 295 0
 174 0054 3B68     		ldr	r3, [r7, #0]
 175 0056 9B89     		ldrh	r3, [r3, #12]
 292:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 176              		.loc 1 292 0
 177 0058 42EA0303 		orr	r3, r2, r3
 178 005c 9AB2     		uxth	r2, r3
 179              		.loc 1 295 0
 180 005e 3B68     		ldr	r3, [r7, #0]
 181 0060 DB89     		ldrh	r3, [r3, #14]
 292:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 182              		.loc 1 292 0
 183 0062 42EA0303 		orr	r3, r2, r3
 184 0066 9AB2     		uxth	r2, r3
 185 0068 FB89     		ldrh	r3, [r7, #14]	@ movhi
 186 006a 42EA0303 		orr	r3, r2, r3
 187 006e FB81     		strh	r3, [r7, #14]	@ movhi
 296:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Write to SPIx CR1 */
 297:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   SPIx->CR1 = tmpreg;
 188              		.loc 1 297 0
 189 0070 7B68     		ldr	r3, [r7, #4]
 190 0072 FA89     		ldrh	r2, [r7, #14]	@ movhi
 191 0074 1A80     		strh	r2, [r3, #0]	@ movhi
 298:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 299:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
 300:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   SPIx->I2SCFGR &= (uint16_t)~((uint16_t)SPI_I2SCFGR_I2SMOD);
 192              		.loc 1 300 0
 193 0076 7B68     		ldr	r3, [r7, #4]
 194 0078 9B8B     		ldrh	r3, [r3, #28]	@ movhi
 195 007a 9BB2     		uxth	r3, r3
 196 007c 23F40063 		bic	r3, r3, #2048
 197 0080 9AB2     		uxth	r2, r3
 198 0082 7B68     		ldr	r3, [r7, #4]
 199 0084 9A83     		strh	r2, [r3, #28]	@ movhi
 301:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /*---------------------------- SPIx CRCPOLY Configuration --------------------*/
 302:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Write to SPIx CRCPOLY */
 303:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   SPIx->CRCPR = SPI_InitStruct->SPI_CRCPolynomial;
 200              		.loc 1 303 0
 201 0086 3B68     		ldr	r3, [r7, #0]
 202 0088 1A8A     		ldrh	r2, [r3, #16]
 203 008a 7B68     		ldr	r3, [r7, #4]
 204 008c 1A82     		strh	r2, [r3, #16]	@ movhi
 304:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** }
 205              		.loc 1 304 0
 206 008e 07F11407 		add	r7, r7, #20
 207 0092 BD46     		mov	sp, r7
 208 0094 80BC     		pop	{r7}
 209 0096 7047     		bx	lr
 210              		.cfi_endproc
 211              	.LFE111:
 213              		.section	.text.I2S_Init,"ax",%progbits
 214              		.align	2
 215              		.global	I2S_Init
 216              		.thumb
 217              		.thumb_func
 219              	I2S_Init:
 220              	.LFB112:
 305:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 306:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /**
 307:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @brief  Initializes the SPIx peripheral according to the specified 
 308:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         parameters in the I2S_InitStruct.
 309:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPIx: where x can be  2 or 3 to select the SPI peripheral (configured in I2S mode).
 310:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  I2S_InitStruct: pointer to an I2S_InitTypeDef structure that
 311:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         contains the configuration information for the specified SPI peripheral
 312:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         configured in I2S mode.
 313:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *           
 314:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @note   The function calculates the optimal prescaler needed to obtain the most 
 315:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         accurate audio frequency (depending on the I2S clock source, the PLL values 
 316:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         and the product configuration). But in case the prescaler value is greater 
 317:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         than 511, the default value (0x02) will be configured instead.    
 318:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * 
 319:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @note   if an external clock is used as source clock for the I2S, then the define
 320:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         I2S_EXTERNAL_CLOCK_VAL in file stm32f4xx_conf.h should be enabled and set
 321:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         to the value of the the source clock frequency (in Hz).
 322:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *  
 323:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @retval None
 324:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
 325:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** void I2S_Init(SPI_TypeDef* SPIx, I2S_InitTypeDef* I2S_InitStruct)
 326:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** {
 221              		.loc 1 326 0
 222              		.cfi_startproc
 223              		@ args = 0, pretend = 0, frame = 40
 224              		@ frame_needed = 1, uses_anonymous_args = 0
 225              		@ link register save eliminated.
 226 0000 80B4     		push	{r7}
 227              	.LCFI6:
 228              		.cfi_def_cfa_offset 4
 229 0002 8BB0     		sub	sp, sp, #44
 230              	.LCFI7:
 231              		.cfi_def_cfa_offset 48
 232 0004 00AF     		add	r7, sp, #0
 233              		.cfi_offset 7, -4
 234              	.LCFI8:
 235              		.cfi_def_cfa_register 7
 236 0006 7860     		str	r0, [r7, #4]
 237 0008 3960     		str	r1, [r7, #0]
 327:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   uint16_t tmpreg = 0, i2sdiv = 2, i2sodd = 0, packetlength = 1;
 238              		.loc 1 327 0
 239 000a 4FF00003 		mov	r3, #0
 240 000e 7B83     		strh	r3, [r7, #26]	@ movhi
 241 0010 4FF00203 		mov	r3, #2
 242 0014 FB84     		strh	r3, [r7, #38]	@ movhi
 243 0016 4FF00003 		mov	r3, #0
 244 001a BB84     		strh	r3, [r7, #36]	@ movhi
 245 001c 4FF00103 		mov	r3, #1
 246 0020 7B84     		strh	r3, [r7, #34]	@ movhi
 328:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   uint32_t tmp = 0, i2sclk = 0;
 247              		.loc 1 328 0
 248 0022 4FF00003 		mov	r3, #0
 249 0026 FB61     		str	r3, [r7, #28]
 250 0028 4FF00003 		mov	r3, #0
 251 002c 7B61     		str	r3, [r7, #20]
 329:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** #ifndef I2S_EXTERNAL_CLOCK_VAL
 330:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   uint32_t pllm = 0, plln = 0, pllr = 0;
 252              		.loc 1 330 0
 253 002e 4FF00003 		mov	r3, #0
 254 0032 3B61     		str	r3, [r7, #16]
 255 0034 4FF00003 		mov	r3, #0
 256 0038 FB60     		str	r3, [r7, #12]
 257 003a 4FF00003 		mov	r3, #0
 258 003e BB60     		str	r3, [r7, #8]
 331:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** #endif /* I2S_EXTERNAL_CLOCK_VAL */
 332:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   
 333:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Check the I2S parameters */
 334:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_23_PERIPH(SPIx));
 335:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_I2S_MODE(I2S_InitStruct->I2S_Mode));
 336:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_I2S_STANDARD(I2S_InitStruct->I2S_Standard));
 337:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_I2S_DATA_FORMAT(I2S_InitStruct->I2S_DataFormat));
 338:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_I2S_MCLK_OUTPUT(I2S_InitStruct->I2S_MCLKOutput));
 339:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_I2S_AUDIO_FREQ(I2S_InitStruct->I2S_AudioFreq));
 340:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_I2S_CPOL(I2S_InitStruct->I2S_CPOL));  
 341:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 342:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /*----------------------- SPIx I2SCFGR & I2SPR Configuration -----------------*/
 343:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
 344:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   SPIx->I2SCFGR &= I2SCFGR_CLEAR_MASK; 
 259              		.loc 1 344 0
 260 0040 7B68     		ldr	r3, [r7, #4]
 261 0042 9B8B     		ldrh	r3, [r3, #28]	@ movhi
 262 0044 9BB2     		uxth	r3, r3
 263 0046 23F47A63 		bic	r3, r3, #4000
 264 004a 23F01F03 		bic	r3, r3, #31
 265 004e 9AB2     		uxth	r2, r3
 266 0050 7B68     		ldr	r3, [r7, #4]
 267 0052 9A83     		strh	r2, [r3, #28]	@ movhi
 345:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   SPIx->I2SPR = 0x0002;
 268              		.loc 1 345 0
 269 0054 7B68     		ldr	r3, [r7, #4]
 270 0056 4FF00202 		mov	r2, #2
 271 005a 1A84     		strh	r2, [r3, #32]	@ movhi
 346:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   
 347:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Get the I2SCFGR register value */
 348:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   tmpreg = SPIx->I2SCFGR;
 272              		.loc 1 348 0
 273 005c 7B68     		ldr	r3, [r7, #4]
 274 005e 9B8B     		ldrh	r3, [r3, #28]	@ movhi
 275 0060 7B83     		strh	r3, [r7, #26]	@ movhi
 349:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   
 350:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* If the default value has to be written, reinitialize i2sdiv and i2sodd*/
 351:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   if(I2S_InitStruct->I2S_AudioFreq == I2S_AudioFreq_Default)
 276              		.loc 1 351 0
 277 0062 3B68     		ldr	r3, [r7, #0]
 278 0064 9B68     		ldr	r3, [r3, #8]
 279 0066 022B     		cmp	r3, #2
 280 0068 06D1     		bne	.L9
 352:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   {
 353:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     i2sodd = (uint16_t)0;
 281              		.loc 1 353 0
 282 006a 4FF00003 		mov	r3, #0
 283 006e BB84     		strh	r3, [r7, #36]	@ movhi
 354:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     i2sdiv = (uint16_t)2;   
 284              		.loc 1 354 0
 285 0070 4FF00203 		mov	r3, #2
 286 0074 FB84     		strh	r3, [r7, #38]	@ movhi
 287 0076 83E0     		b	.L10
 288              	.L9:
 355:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   }
 356:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* If the requested audio frequency is not the default, compute the prescaler */
 357:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   else
 358:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   {
 359:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Check the frame length (For the Prescaler computing) *******************/
 360:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     if(I2S_InitStruct->I2S_DataFormat == I2S_DataFormat_16b)
 289              		.loc 1 360 0
 290 0078 3B68     		ldr	r3, [r7, #0]
 291 007a 9B88     		ldrh	r3, [r3, #4]
 292 007c 002B     		cmp	r3, #0
 293 007e 03D1     		bne	.L11
 361:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     {
 362:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       /* Packet length is 16 bits */
 363:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       packetlength = 1;
 294              		.loc 1 363 0
 295 0080 4FF00103 		mov	r3, #1
 296 0084 7B84     		strh	r3, [r7, #34]	@ movhi
 297 0086 02E0     		b	.L12
 298              	.L11:
 364:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     }
 365:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     else
 366:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     {
 367:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       /* Packet length is 32 bits */
 368:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       packetlength = 2;
 299              		.loc 1 368 0
 300 0088 4FF00203 		mov	r3, #2
 301 008c 7B84     		strh	r3, [r7, #34]	@ movhi
 302              	.L12:
 369:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     }
 370:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 371:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Get I2S source Clock frequency (only in Silicon RevisionB and RevisionY) */
 372:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       
 373:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* If an external I2S clock has to be used, this define should be set  
 374:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****        in the project configuration or in the stm32f4xx_conf.h file */
 375:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   #ifdef I2S_EXTERNAL_CLOCK_VAL     
 376:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Set external clock as I2S clock source */
 377:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     if ((RCC->CFGR & RCC_CFGR_I2SSRC) == 0)
 378:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     {
 379:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       RCC->CFGR |= (uint32_t)RCC_CFGR_I2SSRC;
 380:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     }
 381:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     
 382:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Set the I2S clock to the external clock  value */
 383:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     i2sclk = I2S_EXTERNAL_CLOCK_VAL;
 384:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 385:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   #else /* There is no define for External I2S clock source */
 386:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Set PLLI2S as I2S clock source */
 387:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     if ((RCC->CFGR & RCC_CFGR_I2SSRC) != 0)
 303              		.loc 1 387 0
 304 008e 584B     		ldr	r3, .L18
 305 0090 9B68     		ldr	r3, [r3, #8]
 306 0092 03F40003 		and	r3, r3, #8388608
 307 0096 002B     		cmp	r3, #0
 308 0098 05D0     		beq	.L13
 388:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     {
 389:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       RCC->CFGR &= ~(uint32_t)RCC_CFGR_I2SSRC;
 309              		.loc 1 389 0
 310 009a 554B     		ldr	r3, .L18
 311 009c 544A     		ldr	r2, .L18
 312 009e 9268     		ldr	r2, [r2, #8]
 313 00a0 22F40002 		bic	r2, r2, #8388608
 314 00a4 9A60     		str	r2, [r3, #8]
 315              	.L13:
 390:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     }    
 391:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     
 392:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Get the PLLI2SN value */
 393:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     plln = (uint32_t)(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6) & \
 316              		.loc 1 393 0
 317 00a6 524B     		ldr	r3, .L18
 318 00a8 D3F88420 		ldr	r2, [r3, #132]
 319 00ac 47F6C073 		movw	r3, #32704
 320 00b0 02EA0303 		and	r3, r2, r3
 321 00b4 4FEA9313 		lsr	r3, r3, #6
 322 00b8 4FEAC353 		lsl	r3, r3, #23
 323 00bc 4FEAD353 		lsr	r3, r3, #23
 324 00c0 FB60     		str	r3, [r7, #12]
 394:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****                       (RCC_PLLI2SCFGR_PLLI2SN >> 6));
 395:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     
 396:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Get the PLLI2SR value */
 397:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     pllr = (uint32_t)(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28) & \
 325              		.loc 1 397 0
 326 00c2 4B4B     		ldr	r3, .L18
 327 00c4 D3F88430 		ldr	r3, [r3, #132]
 328 00c8 03F0E043 		and	r3, r3, #1879048192
 329 00cc 4FEA1373 		lsr	r3, r3, #28
 330 00d0 03F00703 		and	r3, r3, #7
 331 00d4 BB60     		str	r3, [r7, #8]
 398:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****                       (RCC_PLLI2SCFGR_PLLI2SR >> 28));
 399:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     
 400:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Get the PLLM value */
 401:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     pllm = (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM);      
 332              		.loc 1 401 0
 333 00d6 464B     		ldr	r3, .L18
 334 00d8 5B68     		ldr	r3, [r3, #4]
 335 00da 03F03F03 		and	r3, r3, #63
 336 00de 3B61     		str	r3, [r7, #16]
 402:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     
 403:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Get the I2S source clock value */
 404:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     i2sclk = (uint32_t)(((HSE_VALUE / pllm) * plln) / pllr);
 337              		.loc 1 404 0
 338 00e0 444A     		ldr	r2, .L18+4
 339 00e2 3B69     		ldr	r3, [r7, #16]
 340 00e4 B2FBF3F3 		udiv	r3, r2, r3
 341 00e8 FA68     		ldr	r2, [r7, #12]
 342 00ea 02FB03F2 		mul	r2, r2, r3
 343 00ee BB68     		ldr	r3, [r7, #8]
 344 00f0 B2FBF3F3 		udiv	r3, r2, r3
 345 00f4 7B61     		str	r3, [r7, #20]
 405:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   #endif /* I2S_EXTERNAL_CLOCK_VAL */
 406:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     
 407:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Compute the Real divider depending on the MCLK output state, with a floating point */
 408:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     if(I2S_InitStruct->I2S_MCLKOutput == I2S_MCLKOutput_Enable)
 346              		.loc 1 408 0
 347 00f6 3B68     		ldr	r3, [r7, #0]
 348 00f8 DB88     		ldrh	r3, [r3, #6]
 349 00fa B3F5007F 		cmp	r3, #512
 350 00fe 13D1     		bne	.L14
 409:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     {
 410:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       /* MCLK output is enabled */
 411:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       tmp = (uint16_t)(((((i2sclk / 256) * 10) / I2S_InitStruct->I2S_AudioFreq)) + 5);
 351              		.loc 1 411 0
 352 0100 7B69     		ldr	r3, [r7, #20]
 353 0102 4FEA1322 		lsr	r2, r3, #8
 354 0106 1346     		mov	r3, r2
 355 0108 4FEA8303 		lsl	r3, r3, #2
 356 010c 9B18     		adds	r3, r3, r2
 357 010e 4FEA4303 		lsl	r3, r3, #1
 358 0112 1A46     		mov	r2, r3
 359 0114 3B68     		ldr	r3, [r7, #0]
 360 0116 9B68     		ldr	r3, [r3, #8]
 361 0118 B2FBF3F3 		udiv	r3, r2, r3
 362 011c 9BB2     		uxth	r3, r3
 363 011e 03F10503 		add	r3, r3, #5
 364 0122 9BB2     		uxth	r3, r3
 365 0124 FB61     		str	r3, [r7, #28]
 366 0126 15E0     		b	.L15
 367              	.L14:
 412:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     }
 413:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     else
 414:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     {
 415:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       /* MCLK output is disabled */
 416:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       tmp = (uint16_t)(((((i2sclk / (32 * packetlength)) *10 ) / I2S_InitStruct->I2S_AudioFreq)) + 
 368              		.loc 1 416 0
 369 0128 7B8C     		ldrh	r3, [r7, #34]
 370 012a 4FEA4313 		lsl	r3, r3, #5
 371 012e 7A69     		ldr	r2, [r7, #20]
 372 0130 B2FBF3F2 		udiv	r2, r2, r3
 373 0134 1346     		mov	r3, r2
 374 0136 4FEA8303 		lsl	r3, r3, #2
 375 013a 9B18     		adds	r3, r3, r2
 376 013c 4FEA4303 		lsl	r3, r3, #1
 377 0140 1A46     		mov	r2, r3
 378 0142 3B68     		ldr	r3, [r7, #0]
 379 0144 9B68     		ldr	r3, [r3, #8]
 380 0146 B2FBF3F3 		udiv	r3, r2, r3
 381 014a 9BB2     		uxth	r3, r3
 382 014c 03F10503 		add	r3, r3, #5
 383 0150 9BB2     		uxth	r3, r3
 384 0152 FB61     		str	r3, [r7, #28]
 385              	.L15:
 417:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     }
 418:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     
 419:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Remove the flatting point */
 420:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     tmp = tmp / 10;  
 386              		.loc 1 420 0
 387 0154 FA69     		ldr	r2, [r7, #28]
 388 0156 284B     		ldr	r3, .L18+8
 389 0158 A3FB0213 		umull	r1, r3, r3, r2
 390 015c 4FEAD303 		lsr	r3, r3, #3
 391 0160 FB61     		str	r3, [r7, #28]
 421:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       
 422:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Check the parity of the divider */
 423:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     i2sodd = (uint16_t)(tmp & (uint16_t)0x0001);
 392              		.loc 1 423 0
 393 0162 FB69     		ldr	r3, [r7, #28]
 394 0164 9BB2     		uxth	r3, r3
 395 0166 03F00103 		and	r3, r3, #1
 396 016a BB84     		strh	r3, [r7, #36]	@ movhi
 424:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****    
 425:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Compute the i2sdiv prescaler */
 426:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     i2sdiv = (uint16_t)((tmp - i2sodd) / 2);
 397              		.loc 1 426 0
 398 016c BB8C     		ldrh	r3, [r7, #36]
 399 016e FA69     		ldr	r2, [r7, #28]
 400 0170 D31A     		subs	r3, r2, r3
 401 0172 4FEA5303 		lsr	r3, r3, #1
 402 0176 FB84     		strh	r3, [r7, #38]	@ movhi
 427:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****    
 428:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
 429:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     i2sodd = (uint16_t) (i2sodd << 8);
 403              		.loc 1 429 0
 404 0178 BB8C     		ldrh	r3, [r7, #36]	@ movhi
 405 017a 4FEA0323 		lsl	r3, r3, #8
 406 017e BB84     		strh	r3, [r7, #36]	@ movhi
 407              	.L10:
 430:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   }
 431:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 432:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Test if the divider is 1 or 0 or greater than 0xFF */
 433:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   if ((i2sdiv < 2) || (i2sdiv > 0xFF))
 408              		.loc 1 433 0
 409 0180 FB8C     		ldrh	r3, [r7, #38]
 410 0182 012B     		cmp	r3, #1
 411 0184 02D9     		bls	.L16
 412              		.loc 1 433 0 is_stmt 0 discriminator 1
 413 0186 FB8C     		ldrh	r3, [r7, #38]
 414 0188 FF2B     		cmp	r3, #255
 415 018a 05D9     		bls	.L17
 416              	.L16:
 434:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   {
 435:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Set the default values */
 436:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     i2sdiv = 2;
 417              		.loc 1 436 0 is_stmt 1
 418 018c 4FF00203 		mov	r3, #2
 419 0190 FB84     		strh	r3, [r7, #38]	@ movhi
 437:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     i2sodd = 0;
 420              		.loc 1 437 0
 421 0192 4FF00003 		mov	r3, #0
 422 0196 BB84     		strh	r3, [r7, #36]	@ movhi
 423              	.L17:
 438:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   }
 439:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 440:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Write to SPIx I2SPR register the computed value */
 441:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   SPIx->I2SPR = (uint16_t)((uint16_t)i2sdiv | (uint16_t)(i2sodd | (uint16_t)I2S_InitStruct->I2S_MCL
 424              		.loc 1 441 0
 425 0198 3B68     		ldr	r3, [r7, #0]
 426 019a DA88     		ldrh	r2, [r3, #6]
 427 019c BB8C     		ldrh	r3, [r7, #36]	@ movhi
 428 019e 42EA0303 		orr	r3, r2, r3
 429 01a2 9AB2     		uxth	r2, r3
 430 01a4 FB8C     		ldrh	r3, [r7, #38]	@ movhi
 431 01a6 42EA0303 		orr	r3, r2, r3
 432 01aa 9AB2     		uxth	r2, r3
 433 01ac 7B68     		ldr	r3, [r7, #4]
 434 01ae 1A84     		strh	r2, [r3, #32]	@ movhi
 442:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****  
 443:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Configure the I2S with the SPI_InitStruct values */
 444:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(I2S_InitStruct->I2S_Mode | \
 435              		.loc 1 444 0
 436 01b0 3B68     		ldr	r3, [r7, #0]
 437 01b2 1A88     		ldrh	r2, [r3, #0]
 445:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****                   (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataForm
 438              		.loc 1 445 0
 439 01b4 3B68     		ldr	r3, [r7, #0]
 440 01b6 5988     		ldrh	r1, [r3, #2]
 441 01b8 3B68     		ldr	r3, [r7, #0]
 442 01ba 9888     		ldrh	r0, [r3, #4]
 446:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****                   (uint16_t)I2S_InitStruct->I2S_CPOL))));
 443              		.loc 1 446 0
 444 01bc 3B68     		ldr	r3, [r7, #0]
 445 01be 9B89     		ldrh	r3, [r3, #12]
 445:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****                   (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataForm
 446              		.loc 1 445 0
 447 01c0 40EA0303 		orr	r3, r0, r3
 448 01c4 9BB2     		uxth	r3, r3
 449 01c6 41EA0303 		orr	r3, r1, r3
 450 01ca 9BB2     		uxth	r3, r3
 444:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(I2S_InitStruct->I2S_Mode | \
 451              		.loc 1 444 0
 452 01cc 42EA0303 		orr	r3, r2, r3
 453 01d0 9AB2     		uxth	r2, r3
 454 01d2 7B8B     		ldrh	r3, [r7, #26]	@ movhi
 455 01d4 42EA0303 		orr	r3, r2, r3
 456 01d8 9BB2     		uxth	r3, r3
 457 01da 43F40063 		orr	r3, r3, #2048
 458 01de 7B83     		strh	r3, [r7, #26]	@ movhi
 447:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****  
 448:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Write to SPIx I2SCFGR */  
 449:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   SPIx->I2SCFGR = tmpreg;
 459              		.loc 1 449 0
 460 01e0 7B68     		ldr	r3, [r7, #4]
 461 01e2 7A8B     		ldrh	r2, [r7, #26]	@ movhi
 462 01e4 9A83     		strh	r2, [r3, #28]	@ movhi
 450:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** }
 463              		.loc 1 450 0
 464 01e6 07F12C07 		add	r7, r7, #44
 465 01ea BD46     		mov	sp, r7
 466 01ec 80BC     		pop	{r7}
 467 01ee 7047     		bx	lr
 468              	.L19:
 469              		.align	2
 470              	.L18:
 471 01f0 00380240 		.word	1073887232
 472 01f4 00127A00 		.word	8000000
 473 01f8 CDCCCCCC 		.word	-858993459
 474              		.cfi_endproc
 475              	.LFE112:
 477              		.section	.text.SPI_StructInit,"ax",%progbits
 478              		.align	2
 479              		.global	SPI_StructInit
 480              		.thumb
 481              		.thumb_func
 483              	SPI_StructInit:
 484              	.LFB113:
 451:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 452:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /**
 453:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @brief  Fills each SPI_InitStruct member with its default value.
 454:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPI_InitStruct: pointer to a SPI_InitTypeDef structure which will be initialized.
 455:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @retval None
 456:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
 457:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** void SPI_StructInit(SPI_InitTypeDef* SPI_InitStruct)
 458:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** {
 485              		.loc 1 458 0
 486              		.cfi_startproc
 487              		@ args = 0, pretend = 0, frame = 8
 488              		@ frame_needed = 1, uses_anonymous_args = 0
 489              		@ link register save eliminated.
 490 0000 80B4     		push	{r7}
 491              	.LCFI9:
 492              		.cfi_def_cfa_offset 4
 493 0002 83B0     		sub	sp, sp, #12
 494              	.LCFI10:
 495              		.cfi_def_cfa_offset 16
 496 0004 00AF     		add	r7, sp, #0
 497              		.cfi_offset 7, -4
 498              	.LCFI11:
 499              		.cfi_def_cfa_register 7
 500 0006 7860     		str	r0, [r7, #4]
 459:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /*--------------- Reset SPI init structure parameters values -----------------*/
 460:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Initialize the SPI_Direction member */
 461:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   SPI_InitStruct->SPI_Direction = SPI_Direction_2Lines_FullDuplex;
 501              		.loc 1 461 0
 502 0008 7B68     		ldr	r3, [r7, #4]
 503 000a 4FF00002 		mov	r2, #0
 504 000e 1A80     		strh	r2, [r3, #0]	@ movhi
 462:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* initialize the SPI_Mode member */
 463:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   SPI_InitStruct->SPI_Mode = SPI_Mode_Slave;
 505              		.loc 1 463 0
 506 0010 7B68     		ldr	r3, [r7, #4]
 507 0012 4FF00002 		mov	r2, #0
 508 0016 5A80     		strh	r2, [r3, #2]	@ movhi
 464:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* initialize the SPI_DataSize member */
 465:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   SPI_InitStruct->SPI_DataSize = SPI_DataSize_8b;
 509              		.loc 1 465 0
 510 0018 7B68     		ldr	r3, [r7, #4]
 511 001a 4FF00002 		mov	r2, #0
 512 001e 9A80     		strh	r2, [r3, #4]	@ movhi
 466:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Initialize the SPI_CPOL member */
 467:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   SPI_InitStruct->SPI_CPOL = SPI_CPOL_Low;
 513              		.loc 1 467 0
 514 0020 7B68     		ldr	r3, [r7, #4]
 515 0022 4FF00002 		mov	r2, #0
 516 0026 DA80     		strh	r2, [r3, #6]	@ movhi
 468:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Initialize the SPI_CPHA member */
 469:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   SPI_InitStruct->SPI_CPHA = SPI_CPHA_1Edge;
 517              		.loc 1 469 0
 518 0028 7B68     		ldr	r3, [r7, #4]
 519 002a 4FF00002 		mov	r2, #0
 520 002e 1A81     		strh	r2, [r3, #8]	@ movhi
 470:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Initialize the SPI_NSS member */
 471:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   SPI_InitStruct->SPI_NSS = SPI_NSS_Hard;
 521              		.loc 1 471 0
 522 0030 7B68     		ldr	r3, [r7, #4]
 523 0032 4FF00002 		mov	r2, #0
 524 0036 5A81     		strh	r2, [r3, #10]	@ movhi
 472:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Initialize the SPI_BaudRatePrescaler member */
 473:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   SPI_InitStruct->SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_2;
 525              		.loc 1 473 0
 526 0038 7B68     		ldr	r3, [r7, #4]
 527 003a 4FF00002 		mov	r2, #0
 528 003e 9A81     		strh	r2, [r3, #12]	@ movhi
 474:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Initialize the SPI_FirstBit member */
 475:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   SPI_InitStruct->SPI_FirstBit = SPI_FirstBit_MSB;
 529              		.loc 1 475 0
 530 0040 7B68     		ldr	r3, [r7, #4]
 531 0042 4FF00002 		mov	r2, #0
 532 0046 DA81     		strh	r2, [r3, #14]	@ movhi
 476:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Initialize the SPI_CRCPolynomial member */
 477:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   SPI_InitStruct->SPI_CRCPolynomial = 7;
 533              		.loc 1 477 0
 534 0048 7B68     		ldr	r3, [r7, #4]
 535 004a 4FF00702 		mov	r2, #7
 536 004e 1A82     		strh	r2, [r3, #16]	@ movhi
 478:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** }
 537              		.loc 1 478 0
 538 0050 07F10C07 		add	r7, r7, #12
 539 0054 BD46     		mov	sp, r7
 540 0056 80BC     		pop	{r7}
 541 0058 7047     		bx	lr
 542              		.cfi_endproc
 543              	.LFE113:
 545 005a 00BF     		.section	.text.I2S_StructInit,"ax",%progbits
 546              		.align	2
 547              		.global	I2S_StructInit
 548              		.thumb
 549              		.thumb_func
 551              	I2S_StructInit:
 552              	.LFB114:
 479:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 480:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /**
 481:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @brief  Fills each I2S_InitStruct member with its default value.
 482:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  I2S_InitStruct: pointer to a I2S_InitTypeDef structure which will be initialized.
 483:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @retval None
 484:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
 485:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** void I2S_StructInit(I2S_InitTypeDef* I2S_InitStruct)
 486:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** {
 553              		.loc 1 486 0
 554              		.cfi_startproc
 555              		@ args = 0, pretend = 0, frame = 8
 556              		@ frame_needed = 1, uses_anonymous_args = 0
 557              		@ link register save eliminated.
 558 0000 80B4     		push	{r7}
 559              	.LCFI12:
 560              		.cfi_def_cfa_offset 4
 561 0002 83B0     		sub	sp, sp, #12
 562              	.LCFI13:
 563              		.cfi_def_cfa_offset 16
 564 0004 00AF     		add	r7, sp, #0
 565              		.cfi_offset 7, -4
 566              	.LCFI14:
 567              		.cfi_def_cfa_register 7
 568 0006 7860     		str	r0, [r7, #4]
 487:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /*--------------- Reset I2S init structure parameters values -----------------*/
 488:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Initialize the I2S_Mode member */
 489:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   I2S_InitStruct->I2S_Mode = I2S_Mode_SlaveTx;
 569              		.loc 1 489 0
 570 0008 7B68     		ldr	r3, [r7, #4]
 571 000a 4FF00002 		mov	r2, #0
 572 000e 1A80     		strh	r2, [r3, #0]	@ movhi
 490:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   
 491:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Initialize the I2S_Standard member */
 492:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   I2S_InitStruct->I2S_Standard = I2S_Standard_Phillips;
 573              		.loc 1 492 0
 574 0010 7B68     		ldr	r3, [r7, #4]
 575 0012 4FF00002 		mov	r2, #0
 576 0016 5A80     		strh	r2, [r3, #2]	@ movhi
 493:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   
 494:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Initialize the I2S_DataFormat member */
 495:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   I2S_InitStruct->I2S_DataFormat = I2S_DataFormat_16b;
 577              		.loc 1 495 0
 578 0018 7B68     		ldr	r3, [r7, #4]
 579 001a 4FF00002 		mov	r2, #0
 580 001e 9A80     		strh	r2, [r3, #4]	@ movhi
 496:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   
 497:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Initialize the I2S_MCLKOutput member */
 498:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   I2S_InitStruct->I2S_MCLKOutput = I2S_MCLKOutput_Disable;
 581              		.loc 1 498 0
 582 0020 7B68     		ldr	r3, [r7, #4]
 583 0022 4FF00002 		mov	r2, #0
 584 0026 DA80     		strh	r2, [r3, #6]	@ movhi
 499:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   
 500:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Initialize the I2S_AudioFreq member */
 501:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   I2S_InitStruct->I2S_AudioFreq = I2S_AudioFreq_Default;
 585              		.loc 1 501 0
 586 0028 7B68     		ldr	r3, [r7, #4]
 587 002a 4FF00202 		mov	r2, #2
 588 002e 9A60     		str	r2, [r3, #8]
 502:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   
 503:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Initialize the I2S_CPOL member */
 504:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   I2S_InitStruct->I2S_CPOL = I2S_CPOL_Low;
 589              		.loc 1 504 0
 590 0030 7B68     		ldr	r3, [r7, #4]
 591 0032 4FF00002 		mov	r2, #0
 592 0036 9A81     		strh	r2, [r3, #12]	@ movhi
 505:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** }
 593              		.loc 1 505 0
 594 0038 07F10C07 		add	r7, r7, #12
 595 003c BD46     		mov	sp, r7
 596 003e 80BC     		pop	{r7}
 597 0040 7047     		bx	lr
 598              		.cfi_endproc
 599              	.LFE114:
 601 0042 00BF     		.section	.text.SPI_Cmd,"ax",%progbits
 602              		.align	2
 603              		.global	SPI_Cmd
 604              		.thumb
 605              		.thumb_func
 607              	SPI_Cmd:
 608              	.LFB115:
 506:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 507:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /**
 508:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @brief  Enables or disables the specified SPI peripheral.
 509:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPIx: where x can be 1, 2 or 3 to select the SPI peripheral.
 510:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  NewState: new state of the SPIx peripheral. 
 511:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          This parameter can be: ENABLE or DISABLE.
 512:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @retval None
 513:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
 514:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** void SPI_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
 515:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** {
 609              		.loc 1 515 0
 610              		.cfi_startproc
 611              		@ args = 0, pretend = 0, frame = 8
 612              		@ frame_needed = 1, uses_anonymous_args = 0
 613              		@ link register save eliminated.
 614 0000 80B4     		push	{r7}
 615              	.LCFI15:
 616              		.cfi_def_cfa_offset 4
 617 0002 83B0     		sub	sp, sp, #12
 618              	.LCFI16:
 619              		.cfi_def_cfa_offset 16
 620 0004 00AF     		add	r7, sp, #0
 621              		.cfi_offset 7, -4
 622              	.LCFI17:
 623              		.cfi_def_cfa_register 7
 624 0006 7860     		str	r0, [r7, #4]
 625 0008 0B46     		mov	r3, r1
 626 000a FB70     		strb	r3, [r7, #3]
 516:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Check the parameters */
 517:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH(SPIx));
 518:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 519:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   if (NewState != DISABLE)
 627              		.loc 1 519 0
 628 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 629 000e 002B     		cmp	r3, #0
 630 0010 08D0     		beq	.L23
 520:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   {
 521:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Enable the selected SPI peripheral */
 522:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     SPIx->CR1 |= SPI_CR1_SPE;
 631              		.loc 1 522 0
 632 0012 7B68     		ldr	r3, [r7, #4]
 633 0014 1B88     		ldrh	r3, [r3, #0]	@ movhi
 634 0016 9BB2     		uxth	r3, r3
 635 0018 43F04003 		orr	r3, r3, #64
 636 001c 9AB2     		uxth	r2, r3
 637 001e 7B68     		ldr	r3, [r7, #4]
 638 0020 1A80     		strh	r2, [r3, #0]	@ movhi
 639 0022 07E0     		b	.L22
 640              	.L23:
 523:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   }
 524:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   else
 525:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   {
 526:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Disable the selected SPI peripheral */
 527:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_SPE);
 641              		.loc 1 527 0
 642 0024 7B68     		ldr	r3, [r7, #4]
 643 0026 1B88     		ldrh	r3, [r3, #0]	@ movhi
 644 0028 9BB2     		uxth	r3, r3
 645 002a 23F04003 		bic	r3, r3, #64
 646 002e 9AB2     		uxth	r2, r3
 647 0030 7B68     		ldr	r3, [r7, #4]
 648 0032 1A80     		strh	r2, [r3, #0]	@ movhi
 649              	.L22:
 528:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   }
 529:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** }
 650              		.loc 1 529 0
 651 0034 07F10C07 		add	r7, r7, #12
 652 0038 BD46     		mov	sp, r7
 653 003a 80BC     		pop	{r7}
 654 003c 7047     		bx	lr
 655              		.cfi_endproc
 656              	.LFE115:
 658 003e 00BF     		.section	.text.I2S_Cmd,"ax",%progbits
 659              		.align	2
 660              		.global	I2S_Cmd
 661              		.thumb
 662              		.thumb_func
 664              	I2S_Cmd:
 665              	.LFB116:
 530:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 531:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /**
 532:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @brief  Enables or disables the specified SPI peripheral (in I2S mode).
 533:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPIx: where x can be 2 or 3 to select the SPI peripheral (or I2Sxext 
 534:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         for full duplex mode).
 535:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  NewState: new state of the SPIx peripheral. 
 536:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         This parameter can be: ENABLE or DISABLE.
 537:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @retval None
 538:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
 539:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** void I2S_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
 540:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** {
 666              		.loc 1 540 0
 667              		.cfi_startproc
 668              		@ args = 0, pretend = 0, frame = 8
 669              		@ frame_needed = 1, uses_anonymous_args = 0
 670              		@ link register save eliminated.
 671 0000 80B4     		push	{r7}
 672              	.LCFI18:
 673              		.cfi_def_cfa_offset 4
 674 0002 83B0     		sub	sp, sp, #12
 675              	.LCFI19:
 676              		.cfi_def_cfa_offset 16
 677 0004 00AF     		add	r7, sp, #0
 678              		.cfi_offset 7, -4
 679              	.LCFI20:
 680              		.cfi_def_cfa_register 7
 681 0006 7860     		str	r0, [r7, #4]
 682 0008 0B46     		mov	r3, r1
 683 000a FB70     		strb	r3, [r7, #3]
 541:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Check the parameters */
 542:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_23_PERIPH_EXT(SPIx));
 543:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 544:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   
 545:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   if (NewState != DISABLE)
 684              		.loc 1 545 0
 685 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 686 000e 002B     		cmp	r3, #0
 687 0010 08D0     		beq	.L26
 546:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   {
 547:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Enable the selected SPI peripheral (in I2S mode) */
 548:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     SPIx->I2SCFGR |= SPI_I2SCFGR_I2SE;
 688              		.loc 1 548 0
 689 0012 7B68     		ldr	r3, [r7, #4]
 690 0014 9B8B     		ldrh	r3, [r3, #28]	@ movhi
 691 0016 9BB2     		uxth	r3, r3
 692 0018 43F48063 		orr	r3, r3, #1024
 693 001c 9AB2     		uxth	r2, r3
 694 001e 7B68     		ldr	r3, [r7, #4]
 695 0020 9A83     		strh	r2, [r3, #28]	@ movhi
 696 0022 07E0     		b	.L25
 697              	.L26:
 549:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   }
 550:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   else
 551:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   {
 552:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Disable the selected SPI peripheral in I2S mode */
 553:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     SPIx->I2SCFGR &= (uint16_t)~((uint16_t)SPI_I2SCFGR_I2SE);
 698              		.loc 1 553 0
 699 0024 7B68     		ldr	r3, [r7, #4]
 700 0026 9B8B     		ldrh	r3, [r3, #28]	@ movhi
 701 0028 9BB2     		uxth	r3, r3
 702 002a 23F48063 		bic	r3, r3, #1024
 703 002e 9AB2     		uxth	r2, r3
 704 0030 7B68     		ldr	r3, [r7, #4]
 705 0032 9A83     		strh	r2, [r3, #28]	@ movhi
 706              	.L25:
 554:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   }
 555:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** }
 707              		.loc 1 555 0
 708 0034 07F10C07 		add	r7, r7, #12
 709 0038 BD46     		mov	sp, r7
 710 003a 80BC     		pop	{r7}
 711 003c 7047     		bx	lr
 712              		.cfi_endproc
 713              	.LFE116:
 715 003e 00BF     		.section	.text.SPI_DataSizeConfig,"ax",%progbits
 716              		.align	2
 717              		.global	SPI_DataSizeConfig
 718              		.thumb
 719              		.thumb_func
 721              	SPI_DataSizeConfig:
 722              	.LFB117:
 556:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 557:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /**
 558:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @brief  Configures the data size for the selected SPI.
 559:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPIx: where x can be 1, 2 or 3 to select the SPI peripheral.
 560:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPI_DataSize: specifies the SPI data size.
 561:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          This parameter can be one of the following values:
 562:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *            @arg SPI_DataSize_16b: Set data frame format to 16bit
 563:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *            @arg SPI_DataSize_8b: Set data frame format to 8bit
 564:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @retval None
 565:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
 566:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** void SPI_DataSizeConfig(SPI_TypeDef* SPIx, uint16_t SPI_DataSize)
 567:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** {
 723              		.loc 1 567 0
 724              		.cfi_startproc
 725              		@ args = 0, pretend = 0, frame = 8
 726              		@ frame_needed = 1, uses_anonymous_args = 0
 727              		@ link register save eliminated.
 728 0000 80B4     		push	{r7}
 729              	.LCFI21:
 730              		.cfi_def_cfa_offset 4
 731 0002 83B0     		sub	sp, sp, #12
 732              	.LCFI22:
 733              		.cfi_def_cfa_offset 16
 734 0004 00AF     		add	r7, sp, #0
 735              		.cfi_offset 7, -4
 736              	.LCFI23:
 737              		.cfi_def_cfa_register 7
 738 0006 7860     		str	r0, [r7, #4]
 739 0008 0B46     		mov	r3, r1
 740 000a 7B80     		strh	r3, [r7, #2]	@ movhi
 568:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Check the parameters */
 569:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH(SPIx));
 570:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_DATASIZE(SPI_DataSize));
 571:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Clear DFF bit */
 572:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   SPIx->CR1 &= (uint16_t)~SPI_DataSize_16b;
 741              		.loc 1 572 0
 742 000c 7B68     		ldr	r3, [r7, #4]
 743 000e 1B88     		ldrh	r3, [r3, #0]	@ movhi
 744 0010 9BB2     		uxth	r3, r3
 745 0012 23F40063 		bic	r3, r3, #2048
 746 0016 9AB2     		uxth	r2, r3
 747 0018 7B68     		ldr	r3, [r7, #4]
 748 001a 1A80     		strh	r2, [r3, #0]	@ movhi
 573:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Set new DFF bit value */
 574:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   SPIx->CR1 |= SPI_DataSize;
 749              		.loc 1 574 0
 750 001c 7B68     		ldr	r3, [r7, #4]
 751 001e 1B88     		ldrh	r3, [r3, #0]	@ movhi
 752 0020 9AB2     		uxth	r2, r3
 753 0022 7B88     		ldrh	r3, [r7, #2]	@ movhi
 754 0024 42EA0303 		orr	r3, r2, r3
 755 0028 9AB2     		uxth	r2, r3
 756 002a 7B68     		ldr	r3, [r7, #4]
 757 002c 1A80     		strh	r2, [r3, #0]	@ movhi
 575:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** }
 758              		.loc 1 575 0
 759 002e 07F10C07 		add	r7, r7, #12
 760 0032 BD46     		mov	sp, r7
 761 0034 80BC     		pop	{r7}
 762 0036 7047     		bx	lr
 763              		.cfi_endproc
 764              	.LFE117:
 766              		.section	.text.SPI_BiDirectionalLineConfig,"ax",%progbits
 767              		.align	2
 768              		.global	SPI_BiDirectionalLineConfig
 769              		.thumb
 770              		.thumb_func
 772              	SPI_BiDirectionalLineConfig:
 773              	.LFB118:
 576:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 577:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /**
 578:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @brief  Selects the data transfer direction in bidirectional mode for the specified SPI.
 579:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPIx: where x can be 1, 2 or 3 to select the SPI peripheral.
 580:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPI_Direction: specifies the data transfer direction in bidirectional mode. 
 581:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          This parameter can be one of the following values:
 582:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *            @arg SPI_Direction_Tx: Selects Tx transmission direction
 583:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *            @arg SPI_Direction_Rx: Selects Rx receive direction
 584:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @retval None
 585:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
 586:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** void SPI_BiDirectionalLineConfig(SPI_TypeDef* SPIx, uint16_t SPI_Direction)
 587:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** {
 774              		.loc 1 587 0
 775              		.cfi_startproc
 776              		@ args = 0, pretend = 0, frame = 8
 777              		@ frame_needed = 1, uses_anonymous_args = 0
 778              		@ link register save eliminated.
 779 0000 80B4     		push	{r7}
 780              	.LCFI24:
 781              		.cfi_def_cfa_offset 4
 782 0002 83B0     		sub	sp, sp, #12
 783              	.LCFI25:
 784              		.cfi_def_cfa_offset 16
 785 0004 00AF     		add	r7, sp, #0
 786              		.cfi_offset 7, -4
 787              	.LCFI26:
 788              		.cfi_def_cfa_register 7
 789 0006 7860     		str	r0, [r7, #4]
 790 0008 0B46     		mov	r3, r1
 791 000a 7B80     		strh	r3, [r7, #2]	@ movhi
 588:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Check the parameters */
 589:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH(SPIx));
 590:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_DIRECTION(SPI_Direction));
 591:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   if (SPI_Direction == SPI_Direction_Tx)
 792              		.loc 1 591 0
 793 000c 7B88     		ldrh	r3, [r7, #2]
 794 000e B3F5804F 		cmp	r3, #16384
 795 0012 08D1     		bne	.L30
 592:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   {
 593:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Set the Tx only mode */
 594:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     SPIx->CR1 |= SPI_Direction_Tx;
 796              		.loc 1 594 0
 797 0014 7B68     		ldr	r3, [r7, #4]
 798 0016 1B88     		ldrh	r3, [r3, #0]	@ movhi
 799 0018 9BB2     		uxth	r3, r3
 800 001a 43F48043 		orr	r3, r3, #16384
 801 001e 9AB2     		uxth	r2, r3
 802 0020 7B68     		ldr	r3, [r7, #4]
 803 0022 1A80     		strh	r2, [r3, #0]	@ movhi
 804 0024 07E0     		b	.L29
 805              	.L30:
 595:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   }
 596:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   else
 597:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   {
 598:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Set the Rx only mode */
 599:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     SPIx->CR1 &= SPI_Direction_Rx;
 806              		.loc 1 599 0
 807 0026 7B68     		ldr	r3, [r7, #4]
 808 0028 1B88     		ldrh	r3, [r3, #0]	@ movhi
 809 002a 9BB2     		uxth	r3, r3
 810 002c 23F48043 		bic	r3, r3, #16384
 811 0030 9AB2     		uxth	r2, r3
 812 0032 7B68     		ldr	r3, [r7, #4]
 813 0034 1A80     		strh	r2, [r3, #0]	@ movhi
 814              	.L29:
 600:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   }
 601:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** }
 815              		.loc 1 601 0
 816 0036 07F10C07 		add	r7, r7, #12
 817 003a BD46     		mov	sp, r7
 818 003c 80BC     		pop	{r7}
 819 003e 7047     		bx	lr
 820              		.cfi_endproc
 821              	.LFE118:
 823              		.section	.text.SPI_NSSInternalSoftwareConfig,"ax",%progbits
 824              		.align	2
 825              		.global	SPI_NSSInternalSoftwareConfig
 826              		.thumb
 827              		.thumb_func
 829              	SPI_NSSInternalSoftwareConfig:
 830              	.LFB119:
 602:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 603:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /**
 604:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @brief  Configures internally by software the NSS pin for the selected SPI.
 605:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPIx: where x can be 1, 2 or 3 to select the SPI peripheral.
 606:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPI_NSSInternalSoft: specifies the SPI NSS internal state.
 607:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          This parameter can be one of the following values:
 608:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *            @arg SPI_NSSInternalSoft_Set: Set NSS pin internally
 609:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *            @arg SPI_NSSInternalSoft_Reset: Reset NSS pin internally
 610:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @retval None
 611:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
 612:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** void SPI_NSSInternalSoftwareConfig(SPI_TypeDef* SPIx, uint16_t SPI_NSSInternalSoft)
 613:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** {
 831              		.loc 1 613 0
 832              		.cfi_startproc
 833              		@ args = 0, pretend = 0, frame = 8
 834              		@ frame_needed = 1, uses_anonymous_args = 0
 835              		@ link register save eliminated.
 836 0000 80B4     		push	{r7}
 837              	.LCFI27:
 838              		.cfi_def_cfa_offset 4
 839 0002 83B0     		sub	sp, sp, #12
 840              	.LCFI28:
 841              		.cfi_def_cfa_offset 16
 842 0004 00AF     		add	r7, sp, #0
 843              		.cfi_offset 7, -4
 844              	.LCFI29:
 845              		.cfi_def_cfa_register 7
 846 0006 7860     		str	r0, [r7, #4]
 847 0008 0B46     		mov	r3, r1
 848 000a 7B80     		strh	r3, [r7, #2]	@ movhi
 614:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Check the parameters */
 615:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH(SPIx));
 616:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_NSS_INTERNAL(SPI_NSSInternalSoft));
 617:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   if (SPI_NSSInternalSoft != SPI_NSSInternalSoft_Reset)
 849              		.loc 1 617 0
 850 000c 7A88     		ldrh	r2, [r7, #2]
 851 000e 4FF6FF63 		movw	r3, #65279
 852 0012 9A42     		cmp	r2, r3
 853 0014 08D0     		beq	.L33
 618:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   {
 619:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Set NSS pin internally by software */
 620:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     SPIx->CR1 |= SPI_NSSInternalSoft_Set;
 854              		.loc 1 620 0
 855 0016 7B68     		ldr	r3, [r7, #4]
 856 0018 1B88     		ldrh	r3, [r3, #0]	@ movhi
 857 001a 9BB2     		uxth	r3, r3
 858 001c 43F48073 		orr	r3, r3, #256
 859 0020 9AB2     		uxth	r2, r3
 860 0022 7B68     		ldr	r3, [r7, #4]
 861 0024 1A80     		strh	r2, [r3, #0]	@ movhi
 862 0026 07E0     		b	.L32
 863              	.L33:
 621:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   }
 622:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   else
 623:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   {
 624:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Reset NSS pin internally by software */
 625:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     SPIx->CR1 &= SPI_NSSInternalSoft_Reset;
 864              		.loc 1 625 0
 865 0028 7B68     		ldr	r3, [r7, #4]
 866 002a 1B88     		ldrh	r3, [r3, #0]	@ movhi
 867 002c 9BB2     		uxth	r3, r3
 868 002e 23F48073 		bic	r3, r3, #256
 869 0032 9AB2     		uxth	r2, r3
 870 0034 7B68     		ldr	r3, [r7, #4]
 871 0036 1A80     		strh	r2, [r3, #0]	@ movhi
 872              	.L32:
 626:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   }
 627:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** }
 873              		.loc 1 627 0
 874 0038 07F10C07 		add	r7, r7, #12
 875 003c BD46     		mov	sp, r7
 876 003e 80BC     		pop	{r7}
 877 0040 7047     		bx	lr
 878              		.cfi_endproc
 879              	.LFE119:
 881 0042 00BF     		.section	.text.SPI_SSOutputCmd,"ax",%progbits
 882              		.align	2
 883              		.global	SPI_SSOutputCmd
 884              		.thumb
 885              		.thumb_func
 887              	SPI_SSOutputCmd:
 888              	.LFB120:
 628:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 629:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /**
 630:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @brief  Enables or disables the SS output for the selected SPI.
 631:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPIx: where x can be 1, 2 or 3 to select the SPI peripheral.
 632:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  NewState: new state of the SPIx SS output. 
 633:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          This parameter can be: ENABLE or DISABLE.
 634:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @retval None
 635:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
 636:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** void SPI_SSOutputCmd(SPI_TypeDef* SPIx, FunctionalState NewState)
 637:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** {
 889              		.loc 1 637 0
 890              		.cfi_startproc
 891              		@ args = 0, pretend = 0, frame = 8
 892              		@ frame_needed = 1, uses_anonymous_args = 0
 893              		@ link register save eliminated.
 894 0000 80B4     		push	{r7}
 895              	.LCFI30:
 896              		.cfi_def_cfa_offset 4
 897 0002 83B0     		sub	sp, sp, #12
 898              	.LCFI31:
 899              		.cfi_def_cfa_offset 16
 900 0004 00AF     		add	r7, sp, #0
 901              		.cfi_offset 7, -4
 902              	.LCFI32:
 903              		.cfi_def_cfa_register 7
 904 0006 7860     		str	r0, [r7, #4]
 905 0008 0B46     		mov	r3, r1
 906 000a FB70     		strb	r3, [r7, #3]
 638:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Check the parameters */
 639:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH(SPIx));
 640:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 641:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   if (NewState != DISABLE)
 907              		.loc 1 641 0
 908 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 909 000e 002B     		cmp	r3, #0
 910 0010 08D0     		beq	.L36
 642:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   {
 643:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Enable the selected SPI SS output */
 644:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     SPIx->CR2 |= (uint16_t)SPI_CR2_SSOE;
 911              		.loc 1 644 0
 912 0012 7B68     		ldr	r3, [r7, #4]
 913 0014 9B88     		ldrh	r3, [r3, #4]	@ movhi
 914 0016 9BB2     		uxth	r3, r3
 915 0018 43F00403 		orr	r3, r3, #4
 916 001c 9AB2     		uxth	r2, r3
 917 001e 7B68     		ldr	r3, [r7, #4]
 918 0020 9A80     		strh	r2, [r3, #4]	@ movhi
 919 0022 07E0     		b	.L35
 920              	.L36:
 645:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   }
 646:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   else
 647:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   {
 648:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Disable the selected SPI SS output */
 649:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     SPIx->CR2 &= (uint16_t)~((uint16_t)SPI_CR2_SSOE);
 921              		.loc 1 649 0
 922 0024 7B68     		ldr	r3, [r7, #4]
 923 0026 9B88     		ldrh	r3, [r3, #4]	@ movhi
 924 0028 9BB2     		uxth	r3, r3
 925 002a 23F00403 		bic	r3, r3, #4
 926 002e 9AB2     		uxth	r2, r3
 927 0030 7B68     		ldr	r3, [r7, #4]
 928 0032 9A80     		strh	r2, [r3, #4]	@ movhi
 929              	.L35:
 650:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   }
 651:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** }
 930              		.loc 1 651 0
 931 0034 07F10C07 		add	r7, r7, #12
 932 0038 BD46     		mov	sp, r7
 933 003a 80BC     		pop	{r7}
 934 003c 7047     		bx	lr
 935              		.cfi_endproc
 936              	.LFE120:
 938 003e 00BF     		.section	.text.SPI_TIModeCmd,"ax",%progbits
 939              		.align	2
 940              		.global	SPI_TIModeCmd
 941              		.thumb
 942              		.thumb_func
 944              	SPI_TIModeCmd:
 945              	.LFB121:
 652:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 653:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /**
 654:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @brief  Enables or disables the SPIx/I2Sx DMA interface.
 655:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *   
 656:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @note   This function can be called only after the SPI_Init() function has 
 657:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         been called. 
 658:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @note   When TI mode is selected, the control bits SSM, SSI, CPOL and CPHA 
 659:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         are not taken into consideration and are configured by hardware
 660:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         respectively to the TI mode requirements.  
 661:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * 
 662:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPIx: where x can be 1, 2 or 3 
 663:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  NewState: new state of the selected SPI TI communication mode.
 664:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          This parameter can be: ENABLE or DISABLE.
 665:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @retval None
 666:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
 667:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** void SPI_TIModeCmd(SPI_TypeDef* SPIx, FunctionalState NewState)
 668:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** {
 946              		.loc 1 668 0
 947              		.cfi_startproc
 948              		@ args = 0, pretend = 0, frame = 8
 949              		@ frame_needed = 1, uses_anonymous_args = 0
 950              		@ link register save eliminated.
 951 0000 80B4     		push	{r7}
 952              	.LCFI33:
 953              		.cfi_def_cfa_offset 4
 954 0002 83B0     		sub	sp, sp, #12
 955              	.LCFI34:
 956              		.cfi_def_cfa_offset 16
 957 0004 00AF     		add	r7, sp, #0
 958              		.cfi_offset 7, -4
 959              	.LCFI35:
 960              		.cfi_def_cfa_register 7
 961 0006 7860     		str	r0, [r7, #4]
 962 0008 0B46     		mov	r3, r1
 963 000a FB70     		strb	r3, [r7, #3]
 669:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Check the parameters */
 670:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH(SPIx));
 671:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 672:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 673:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   if (NewState != DISABLE)
 964              		.loc 1 673 0
 965 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 966 000e 002B     		cmp	r3, #0
 967 0010 08D0     		beq	.L39
 674:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   {
 675:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Enable the TI mode for the selected SPI peripheral */
 676:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     SPIx->CR2 |= SPI_CR2_FRF;
 968              		.loc 1 676 0
 969 0012 7B68     		ldr	r3, [r7, #4]
 970 0014 9B88     		ldrh	r3, [r3, #4]	@ movhi
 971 0016 9BB2     		uxth	r3, r3
 972 0018 43F01003 		orr	r3, r3, #16
 973 001c 9AB2     		uxth	r2, r3
 974 001e 7B68     		ldr	r3, [r7, #4]
 975 0020 9A80     		strh	r2, [r3, #4]	@ movhi
 976 0022 07E0     		b	.L38
 977              	.L39:
 677:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   }
 678:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   else
 679:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   {
 680:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Disable the TI mode for the selected SPI peripheral */
 681:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     SPIx->CR2 &= (uint16_t)~SPI_CR2_FRF;
 978              		.loc 1 681 0
 979 0024 7B68     		ldr	r3, [r7, #4]
 980 0026 9B88     		ldrh	r3, [r3, #4]	@ movhi
 981 0028 9BB2     		uxth	r3, r3
 982 002a 23F01003 		bic	r3, r3, #16
 983 002e 9AB2     		uxth	r2, r3
 984 0030 7B68     		ldr	r3, [r7, #4]
 985 0032 9A80     		strh	r2, [r3, #4]	@ movhi
 986              	.L38:
 682:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   }
 683:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** }
 987              		.loc 1 683 0
 988 0034 07F10C07 		add	r7, r7, #12
 989 0038 BD46     		mov	sp, r7
 990 003a 80BC     		pop	{r7}
 991 003c 7047     		bx	lr
 992              		.cfi_endproc
 993              	.LFE121:
 995 003e 00BF     		.section	.text.I2S_FullDuplexConfig,"ax",%progbits
 996              		.align	2
 997              		.global	I2S_FullDuplexConfig
 998              		.thumb
 999              		.thumb_func
 1001              	I2S_FullDuplexConfig:
 1002              	.LFB122:
 684:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 685:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /**
 686:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @brief  Configures the full duplex mode for the I2Sx peripheral using its
 687:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         extension I2Sxext according to the specified parameters in the 
 688:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         I2S_InitStruct.
 689:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  I2Sxext: where x can be  2 or 3 to select the I2S peripheral extension block.
 690:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  I2S_InitStruct: pointer to an I2S_InitTypeDef structure that
 691:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         contains the configuration information for the specified I2S peripheral
 692:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         extension.
 693:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * 
 694:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @note   The structure pointed by I2S_InitStruct parameter should be the same
 695:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         used for the master I2S peripheral. In this case, if the master is 
 696:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         configured as transmitter, the slave will be receiver and vice versa.
 697:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         Or you can force a different mode by modifying the field I2S_Mode to the
 698:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         value I2S_SlaveRx or I2S_SlaveTx indepedently of the master configuration.    
 699:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         
 700:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @note   The I2S full duplex extension can be configured in slave mode only.    
 701:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *  
 702:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @retval None
 703:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
 704:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** void I2S_FullDuplexConfig(SPI_TypeDef* I2Sxext, I2S_InitTypeDef* I2S_InitStruct)
 705:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** {
 1003              		.loc 1 705 0
 1004              		.cfi_startproc
 1005              		@ args = 0, pretend = 0, frame = 16
 1006              		@ frame_needed = 1, uses_anonymous_args = 0
 1007              		@ link register save eliminated.
 1008 0000 80B4     		push	{r7}
 1009              	.LCFI36:
 1010              		.cfi_def_cfa_offset 4
 1011 0002 85B0     		sub	sp, sp, #20
 1012              	.LCFI37:
 1013              		.cfi_def_cfa_offset 24
 1014 0004 00AF     		add	r7, sp, #0
 1015              		.cfi_offset 7, -4
 1016              	.LCFI38:
 1017              		.cfi_def_cfa_register 7
 1018 0006 7860     		str	r0, [r7, #4]
 1019 0008 3960     		str	r1, [r7, #0]
 706:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   uint16_t tmpreg = 0, tmp = 0;
 1020              		.loc 1 706 0
 1021 000a 4FF00003 		mov	r3, #0
 1022 000e BB81     		strh	r3, [r7, #12]	@ movhi
 1023 0010 4FF00003 		mov	r3, #0
 1024 0014 FB81     		strh	r3, [r7, #14]	@ movhi
 707:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   
 708:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Check the I2S parameters */
 709:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_I2S_EXT_PERIPH(I2Sxext));
 710:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_I2S_MODE(I2S_InitStruct->I2S_Mode));
 711:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_I2S_STANDARD(I2S_InitStruct->I2S_Standard));
 712:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_I2S_DATA_FORMAT(I2S_InitStruct->I2S_DataFormat));
 713:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_I2S_CPOL(I2S_InitStruct->I2S_CPOL));  
 714:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 715:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /*----------------------- SPIx I2SCFGR & I2SPR Configuration -----------------*/
 716:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
 717:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   I2Sxext->I2SCFGR &= I2SCFGR_CLEAR_MASK; 
 1025              		.loc 1 717 0
 1026 0016 7B68     		ldr	r3, [r7, #4]
 1027 0018 9B8B     		ldrh	r3, [r3, #28]	@ movhi
 1028 001a 9BB2     		uxth	r3, r3
 1029 001c 23F47A63 		bic	r3, r3, #4000
 1030 0020 23F01F03 		bic	r3, r3, #31
 1031 0024 9AB2     		uxth	r2, r3
 1032 0026 7B68     		ldr	r3, [r7, #4]
 1033 0028 9A83     		strh	r2, [r3, #28]	@ movhi
 718:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   I2Sxext->I2SPR = 0x0002;
 1034              		.loc 1 718 0
 1035 002a 7B68     		ldr	r3, [r7, #4]
 1036 002c 4FF00202 		mov	r2, #2
 1037 0030 1A84     		strh	r2, [r3, #32]	@ movhi
 719:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   
 720:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Get the I2SCFGR register value */
 721:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   tmpreg = I2Sxext->I2SCFGR;
 1038              		.loc 1 721 0
 1039 0032 7B68     		ldr	r3, [r7, #4]
 1040 0034 9B8B     		ldrh	r3, [r3, #28]	@ movhi
 1041 0036 BB81     		strh	r3, [r7, #12]	@ movhi
 722:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   
 723:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Get the mode to be configured for the extended I2S */
 724:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   if ((I2S_InitStruct->I2S_Mode == I2S_Mode_MasterTx) || (I2S_InitStruct->I2S_Mode == I2S_Mode_Slav
 1042              		.loc 1 724 0
 1043 0038 3B68     		ldr	r3, [r7, #0]
 1044 003a 1B88     		ldrh	r3, [r3, #0]
 1045 003c B3F5007F 		cmp	r3, #512
 1046 0040 03D0     		beq	.L42
 1047              		.loc 1 724 0 is_stmt 0 discriminator 1
 1048 0042 3B68     		ldr	r3, [r7, #0]
 1049 0044 1B88     		ldrh	r3, [r3, #0]
 1050 0046 002B     		cmp	r3, #0
 1051 0048 03D1     		bne	.L43
 1052              	.L42:
 725:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   {
 726:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     tmp = I2S_Mode_SlaveRx;
 1053              		.loc 1 726 0 is_stmt 1
 1054 004a 4FF48073 		mov	r3, #256
 1055 004e FB81     		strh	r3, [r7, #14]	@ movhi
 1056 0050 0CE0     		b	.L44
 1057              	.L43:
 727:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   }
 728:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   else
 729:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   {
 730:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     if ((I2S_InitStruct->I2S_Mode == I2S_Mode_MasterRx) || (I2S_InitStruct->I2S_Mode == I2S_Mode_Sl
 1058              		.loc 1 730 0
 1059 0052 3B68     		ldr	r3, [r7, #0]
 1060 0054 1B88     		ldrh	r3, [r3, #0]
 1061 0056 B3F5407F 		cmp	r3, #768
 1062 005a 04D0     		beq	.L45
 1063              		.loc 1 730 0 is_stmt 0 discriminator 1
 1064 005c 3B68     		ldr	r3, [r7, #0]
 1065 005e 1B88     		ldrh	r3, [r3, #0]
 1066 0060 B3F5807F 		cmp	r3, #256
 1067 0064 02D1     		bne	.L44
 1068              	.L45:
 731:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     {
 732:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       tmp = I2S_Mode_SlaveTx;
 1069              		.loc 1 732 0 is_stmt 1
 1070 0066 4FF00003 		mov	r3, #0
 1071 006a FB81     		strh	r3, [r7, #14]	@ movhi
 1072              	.L44:
 733:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     }
 734:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   }
 735:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 736:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****  
 737:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Configure the I2S with the SPI_InitStruct values */
 738:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 739:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****                   (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataForm
 1073              		.loc 1 739 0
 1074 006c 3B68     		ldr	r3, [r7, #0]
 1075 006e 5A88     		ldrh	r2, [r3, #2]
 1076 0070 3B68     		ldr	r3, [r7, #0]
 1077 0072 9988     		ldrh	r1, [r3, #4]
 740:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****                   (uint16_t)I2S_InitStruct->I2S_CPOL))));
 1078              		.loc 1 740 0
 1079 0074 3B68     		ldr	r3, [r7, #0]
 1080 0076 9B89     		ldrh	r3, [r3, #12]
 739:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****                   (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataForm
 1081              		.loc 1 739 0
 1082 0078 41EA0303 		orr	r3, r1, r3
 1083 007c 9BB2     		uxth	r3, r3
 1084 007e 42EA0303 		orr	r3, r2, r3
 1085 0082 9AB2     		uxth	r2, r3
 738:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 1086              		.loc 1 738 0
 1087 0084 FB89     		ldrh	r3, [r7, #14]	@ movhi
 1088 0086 42EA0303 		orr	r3, r2, r3
 1089 008a 9AB2     		uxth	r2, r3
 1090 008c BB89     		ldrh	r3, [r7, #12]	@ movhi
 1091 008e 42EA0303 		orr	r3, r2, r3
 1092 0092 9BB2     		uxth	r3, r3
 1093 0094 43F40063 		orr	r3, r3, #2048
 1094 0098 BB81     		strh	r3, [r7, #12]	@ movhi
 741:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****  
 742:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Write to SPIx I2SCFGR */  
 743:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   I2Sxext->I2SCFGR = tmpreg;
 1095              		.loc 1 743 0
 1096 009a 7B68     		ldr	r3, [r7, #4]
 1097 009c BA89     		ldrh	r2, [r7, #12]	@ movhi
 1098 009e 9A83     		strh	r2, [r3, #28]	@ movhi
 744:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** }
 1099              		.loc 1 744 0
 1100 00a0 07F11407 		add	r7, r7, #20
 1101 00a4 BD46     		mov	sp, r7
 1102 00a6 80BC     		pop	{r7}
 1103 00a8 7047     		bx	lr
 1104              		.cfi_endproc
 1105              	.LFE122:
 1107 00aa 00BF     		.section	.text.SPI_I2S_ReceiveData,"ax",%progbits
 1108              		.align	2
 1109              		.global	SPI_I2S_ReceiveData
 1110              		.thumb
 1111              		.thumb_func
 1113              	SPI_I2S_ReceiveData:
 1114              	.LFB123:
 745:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 746:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /**
 747:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @}
 748:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
 749:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 750:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /** @defgroup SPI_Group2 Data transfers functions
 751:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****  *  @brief   Data transfers functions
 752:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****  *
 753:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** @verbatim   
 754:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****  ===============================================================================
 755:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****                          Data transfers functions
 756:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****  ===============================================================================  
 757:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 758:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   This section provides a set of functions allowing to manage the SPI data transfers
 759:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   
 760:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   In reception, data are received and then stored into an internal Rx buffer while 
 761:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   In transmission, data are first stored into an internal Tx buffer before being 
 762:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   transmitted.
 763:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 764:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   The read access of the SPI_DR register can be done using the SPI_I2S_ReceiveData()
 765:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   function and returns the Rx buffered value. Whereas a write access to the SPI_DR 
 766:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   can be done using SPI_I2S_SendData() function and stores the written data into 
 767:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   Tx buffer.
 768:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 769:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** @endverbatim
 770:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @{
 771:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
 772:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 773:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /**
 774:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @brief  Returns the most recent received data by the SPIx/I2Sx peripheral. 
 775:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPIx: To select the SPIx/I2Sx peripheral, where x can be: 1, 2 or 3 
 776:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode. 
 777:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @retval The value of the received data.
 778:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
 779:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** uint16_t SPI_I2S_ReceiveData(SPI_TypeDef* SPIx)
 780:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** {
 1115              		.loc 1 780 0
 1116              		.cfi_startproc
 1117              		@ args = 0, pretend = 0, frame = 8
 1118              		@ frame_needed = 1, uses_anonymous_args = 0
 1119              		@ link register save eliminated.
 1120 0000 80B4     		push	{r7}
 1121              	.LCFI39:
 1122              		.cfi_def_cfa_offset 4
 1123 0002 83B0     		sub	sp, sp, #12
 1124              	.LCFI40:
 1125              		.cfi_def_cfa_offset 16
 1126 0004 00AF     		add	r7, sp, #0
 1127              		.cfi_offset 7, -4
 1128              	.LCFI41:
 1129              		.cfi_def_cfa_register 7
 1130 0006 7860     		str	r0, [r7, #4]
 781:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Check the parameters */
 782:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
 783:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   
 784:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Return the data in the DR register */
 785:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   return SPIx->DR;
 1131              		.loc 1 785 0
 1132 0008 7B68     		ldr	r3, [r7, #4]
 1133 000a 9B89     		ldrh	r3, [r3, #12]	@ movhi
 1134 000c 9BB2     		uxth	r3, r3
 786:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** }
 1135              		.loc 1 786 0
 1136 000e 1846     		mov	r0, r3
 1137 0010 07F10C07 		add	r7, r7, #12
 1138 0014 BD46     		mov	sp, r7
 1139 0016 80BC     		pop	{r7}
 1140 0018 7047     		bx	lr
 1141              		.cfi_endproc
 1142              	.LFE123:
 1144 001a 00BF     		.section	.text.SPI_I2S_SendData,"ax",%progbits
 1145              		.align	2
 1146              		.global	SPI_I2S_SendData
 1147              		.thumb
 1148              		.thumb_func
 1150              	SPI_I2S_SendData:
 1151              	.LFB124:
 787:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 788:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /**
 789:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @brief  Transmits a Data through the SPIx/I2Sx peripheral.
 790:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPIx: To select the SPIx/I2Sx peripheral, where x can be: 1, 2 or 3 
 791:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode.     
 792:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  Data: Data to be transmitted.
 793:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @retval None
 794:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
 795:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** void SPI_I2S_SendData(SPI_TypeDef* SPIx, uint16_t Data)
 796:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** {
 1152              		.loc 1 796 0
 1153              		.cfi_startproc
 1154              		@ args = 0, pretend = 0, frame = 8
 1155              		@ frame_needed = 1, uses_anonymous_args = 0
 1156              		@ link register save eliminated.
 1157 0000 80B4     		push	{r7}
 1158              	.LCFI42:
 1159              		.cfi_def_cfa_offset 4
 1160 0002 83B0     		sub	sp, sp, #12
 1161              	.LCFI43:
 1162              		.cfi_def_cfa_offset 16
 1163 0004 00AF     		add	r7, sp, #0
 1164              		.cfi_offset 7, -4
 1165              	.LCFI44:
 1166              		.cfi_def_cfa_register 7
 1167 0006 7860     		str	r0, [r7, #4]
 1168 0008 0B46     		mov	r3, r1
 1169 000a 7B80     		strh	r3, [r7, #2]	@ movhi
 797:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Check the parameters */
 798:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
 799:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   
 800:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Write in the DR register the data to be sent */
 801:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   SPIx->DR = Data;
 1170              		.loc 1 801 0
 1171 000c 7B68     		ldr	r3, [r7, #4]
 1172 000e 7A88     		ldrh	r2, [r7, #2]	@ movhi
 1173 0010 9A81     		strh	r2, [r3, #12]	@ movhi
 802:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** }
 1174              		.loc 1 802 0
 1175 0012 07F10C07 		add	r7, r7, #12
 1176 0016 BD46     		mov	sp, r7
 1177 0018 80BC     		pop	{r7}
 1178 001a 7047     		bx	lr
 1179              		.cfi_endproc
 1180              	.LFE124:
 1182              		.section	.text.SPI_CalculateCRC,"ax",%progbits
 1183              		.align	2
 1184              		.global	SPI_CalculateCRC
 1185              		.thumb
 1186              		.thumb_func
 1188              	SPI_CalculateCRC:
 1189              	.LFB125:
 803:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 804:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /**
 805:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @}
 806:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
 807:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 808:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /** @defgroup SPI_Group3 Hardware CRC Calculation functions
 809:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****  *  @brief   Hardware CRC Calculation functions
 810:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****  *
 811:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** @verbatim   
 812:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****  ===============================================================================
 813:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****                          Hardware CRC Calculation functions
 814:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****  ===============================================================================  
 815:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 816:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   This section provides a set of functions allowing to manage the SPI CRC hardware 
 817:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   calculation
 818:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 819:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   SPI communication using CRC is possible through the following procedure:
 820:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****      1. Program the Data direction, Polarity, Phase, First Data, Baud Rate Prescaler, 
 821:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****         Slave Management, Peripheral Mode and CRC Polynomial values using the SPI_Init()
 822:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****         function.
 823:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****      2. Enable the CRC calculation using the SPI_CalculateCRC() function.
 824:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****      3. Enable the SPI using the SPI_Cmd() function
 825:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****      4. Before writing the last data to the TX buffer, set the CRCNext bit using the 
 826:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       SPI_TransmitCRC() function to indicate that after transmission of the last 
 827:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       data, the CRC should be transmitted.
 828:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****      5. After transmitting the last data, the SPI transmits the CRC. The SPI_CR1_CRCNEXT
 829:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****         bit is reset. The CRC is also received and compared against the SPI_RXCRCR 
 830:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****         value. 
 831:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****         If the value does not match, the SPI_FLAG_CRCERR flag is set and an interrupt
 832:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****         can be generated when the SPI_I2S_IT_ERR interrupt is enabled.
 833:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 834:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** @note It is advised not to read the calculated CRC values during the communication.
 835:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 836:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** @note When the SPI is in slave mode, be careful to enable CRC calculation only 
 837:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       when the clock is stable, that is, when the clock is in the steady state. 
 838:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       If not, a wrong CRC calculation may be done. In fact, the CRC is sensitive 
 839:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       to the SCK slave input clock as soon as CRCEN is set, and this, whatever 
 840:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       the value of the SPE bit.
 841:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 842:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** @note With high bitrate frequencies, be careful when transmitting the CRC.
 843:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       As the number of used CPU cycles has to be as low as possible in the CRC 
 844:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       transfer phase, it is forbidden to call software functions in the CRC 
 845:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       transmission sequence to avoid errors in the last data and CRC reception. 
 846:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       In fact, CRCNEXT bit has to be written before the end of the transmission/reception 
 847:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       of the last data.
 848:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 849:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** @note For high bit rate frequencies, it is advised to use the DMA mode to avoid the
 850:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       degradation of the SPI speed performance due to CPU accesses impacting the 
 851:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       SPI bandwidth.
 852:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 853:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** @note When the STM32F4xx is configured as slave and the NSS hardware mode is 
 854:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       used, the NSS pin needs to be kept low between the data phase and the CRC 
 855:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       phase.
 856:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 857:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** @note When the SPI is configured in slave mode with the CRC feature enabled, CRC
 858:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       calculation takes place even if a high level is applied on the NSS pin. 
 859:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       This may happen for example in case of a multi-slave environment where the 
 860:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       communication master addresses slaves alternately.
 861:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 862:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** @note Between a slave de-selection (high level on NSS) and a new slave selection 
 863:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       (low level on NSS), the CRC value should be cleared on both master and slave
 864:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       sides in order to resynchronize the master and slave for their respective 
 865:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       CRC calculation.
 866:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 867:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** @note To clear the CRC, follow the procedure below:
 868:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****         1. Disable SPI using the SPI_Cmd() function
 869:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****         2. Disable the CRC calculation using the SPI_CalculateCRC() function.
 870:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****         3. Enable the CRC calculation using the SPI_CalculateCRC() function.
 871:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****         4. Enable SPI using the SPI_Cmd() function.
 872:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 873:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** @endverbatim
 874:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @{
 875:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
 876:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 877:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /**
 878:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @brief  Enables or disables the CRC value calculation of the transferred bytes.
 879:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPIx: where x can be 1, 2 or 3 to select the SPI peripheral.
 880:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  NewState: new state of the SPIx CRC value calculation.
 881:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          This parameter can be: ENABLE or DISABLE.
 882:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @retval None
 883:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
 884:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** void SPI_CalculateCRC(SPI_TypeDef* SPIx, FunctionalState NewState)
 885:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** {
 1190              		.loc 1 885 0
 1191              		.cfi_startproc
 1192              		@ args = 0, pretend = 0, frame = 8
 1193              		@ frame_needed = 1, uses_anonymous_args = 0
 1194              		@ link register save eliminated.
 1195 0000 80B4     		push	{r7}
 1196              	.LCFI45:
 1197              		.cfi_def_cfa_offset 4
 1198 0002 83B0     		sub	sp, sp, #12
 1199              	.LCFI46:
 1200              		.cfi_def_cfa_offset 16
 1201 0004 00AF     		add	r7, sp, #0
 1202              		.cfi_offset 7, -4
 1203              	.LCFI47:
 1204              		.cfi_def_cfa_register 7
 1205 0006 7860     		str	r0, [r7, #4]
 1206 0008 0B46     		mov	r3, r1
 1207 000a FB70     		strb	r3, [r7, #3]
 886:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Check the parameters */
 887:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH(SPIx));
 888:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 889:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   if (NewState != DISABLE)
 1208              		.loc 1 889 0
 1209 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1210 000e 002B     		cmp	r3, #0
 1211 0010 08D0     		beq	.L49
 890:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   {
 891:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Enable the selected SPI CRC calculation */
 892:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     SPIx->CR1 |= SPI_CR1_CRCEN;
 1212              		.loc 1 892 0
 1213 0012 7B68     		ldr	r3, [r7, #4]
 1214 0014 1B88     		ldrh	r3, [r3, #0]	@ movhi
 1215 0016 9BB2     		uxth	r3, r3
 1216 0018 43F40053 		orr	r3, r3, #8192
 1217 001c 9AB2     		uxth	r2, r3
 1218 001e 7B68     		ldr	r3, [r7, #4]
 1219 0020 1A80     		strh	r2, [r3, #0]	@ movhi
 1220 0022 07E0     		b	.L48
 1221              	.L49:
 893:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   }
 894:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   else
 895:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   {
 896:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Disable the selected SPI CRC calculation */
 897:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_CRCEN);
 1222              		.loc 1 897 0
 1223 0024 7B68     		ldr	r3, [r7, #4]
 1224 0026 1B88     		ldrh	r3, [r3, #0]	@ movhi
 1225 0028 9BB2     		uxth	r3, r3
 1226 002a 23F40053 		bic	r3, r3, #8192
 1227 002e 9AB2     		uxth	r2, r3
 1228 0030 7B68     		ldr	r3, [r7, #4]
 1229 0032 1A80     		strh	r2, [r3, #0]	@ movhi
 1230              	.L48:
 898:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   }
 899:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** }
 1231              		.loc 1 899 0
 1232 0034 07F10C07 		add	r7, r7, #12
 1233 0038 BD46     		mov	sp, r7
 1234 003a 80BC     		pop	{r7}
 1235 003c 7047     		bx	lr
 1236              		.cfi_endproc
 1237              	.LFE125:
 1239 003e 00BF     		.section	.text.SPI_TransmitCRC,"ax",%progbits
 1240              		.align	2
 1241              		.global	SPI_TransmitCRC
 1242              		.thumb
 1243              		.thumb_func
 1245              	SPI_TransmitCRC:
 1246              	.LFB126:
 900:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 901:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /**
 902:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @brief  Transmit the SPIx CRC value.
 903:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPIx: where x can be 1, 2 or 3 to select the SPI peripheral.
 904:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @retval None
 905:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
 906:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** void SPI_TransmitCRC(SPI_TypeDef* SPIx)
 907:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** {
 1247              		.loc 1 907 0
 1248              		.cfi_startproc
 1249              		@ args = 0, pretend = 0, frame = 8
 1250              		@ frame_needed = 1, uses_anonymous_args = 0
 1251              		@ link register save eliminated.
 1252 0000 80B4     		push	{r7}
 1253              	.LCFI48:
 1254              		.cfi_def_cfa_offset 4
 1255 0002 83B0     		sub	sp, sp, #12
 1256              	.LCFI49:
 1257              		.cfi_def_cfa_offset 16
 1258 0004 00AF     		add	r7, sp, #0
 1259              		.cfi_offset 7, -4
 1260              	.LCFI50:
 1261              		.cfi_def_cfa_register 7
 1262 0006 7860     		str	r0, [r7, #4]
 908:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Check the parameters */
 909:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH(SPIx));
 910:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   
 911:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Enable the selected SPI CRC transmission */
 912:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   SPIx->CR1 |= SPI_CR1_CRCNEXT;
 1263              		.loc 1 912 0
 1264 0008 7B68     		ldr	r3, [r7, #4]
 1265 000a 1B88     		ldrh	r3, [r3, #0]	@ movhi
 1266 000c 9BB2     		uxth	r3, r3
 1267 000e 43F48053 		orr	r3, r3, #4096
 1268 0012 9AB2     		uxth	r2, r3
 1269 0014 7B68     		ldr	r3, [r7, #4]
 1270 0016 1A80     		strh	r2, [r3, #0]	@ movhi
 913:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** }
 1271              		.loc 1 913 0
 1272 0018 07F10C07 		add	r7, r7, #12
 1273 001c BD46     		mov	sp, r7
 1274 001e 80BC     		pop	{r7}
 1275 0020 7047     		bx	lr
 1276              		.cfi_endproc
 1277              	.LFE126:
 1279 0022 00BF     		.section	.text.SPI_GetCRC,"ax",%progbits
 1280              		.align	2
 1281              		.global	SPI_GetCRC
 1282              		.thumb
 1283              		.thumb_func
 1285              	SPI_GetCRC:
 1286              	.LFB127:
 914:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 915:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /**
 916:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @brief  Returns the transmit or the receive CRC register value for the specified SPI.
 917:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPIx: where x can be 1, 2 or 3 to select the SPI peripheral.
 918:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPI_CRC: specifies the CRC register to be read.
 919:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          This parameter can be one of the following values:
 920:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *            @arg SPI_CRC_Tx: Selects Tx CRC register
 921:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *            @arg SPI_CRC_Rx: Selects Rx CRC register
 922:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @retval The selected CRC register value..
 923:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
 924:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** uint16_t SPI_GetCRC(SPI_TypeDef* SPIx, uint8_t SPI_CRC)
 925:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** {
 1287              		.loc 1 925 0
 1288              		.cfi_startproc
 1289              		@ args = 0, pretend = 0, frame = 16
 1290              		@ frame_needed = 1, uses_anonymous_args = 0
 1291              		@ link register save eliminated.
 1292 0000 80B4     		push	{r7}
 1293              	.LCFI51:
 1294              		.cfi_def_cfa_offset 4
 1295 0002 85B0     		sub	sp, sp, #20
 1296              	.LCFI52:
 1297              		.cfi_def_cfa_offset 24
 1298 0004 00AF     		add	r7, sp, #0
 1299              		.cfi_offset 7, -4
 1300              	.LCFI53:
 1301              		.cfi_def_cfa_register 7
 1302 0006 7860     		str	r0, [r7, #4]
 1303 0008 0B46     		mov	r3, r1
 1304 000a FB70     		strb	r3, [r7, #3]
 926:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   uint16_t crcreg = 0;
 1305              		.loc 1 926 0
 1306 000c 4FF00003 		mov	r3, #0
 1307 0010 FB81     		strh	r3, [r7, #14]	@ movhi
 927:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Check the parameters */
 928:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH(SPIx));
 929:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_CRC(SPI_CRC));
 930:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   if (SPI_CRC != SPI_CRC_Rx)
 1308              		.loc 1 930 0
 1309 0012 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1310 0014 012B     		cmp	r3, #1
 1311 0016 03D0     		beq	.L53
 931:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   {
 932:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Get the Tx CRC register */
 933:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     crcreg = SPIx->TXCRCR;
 1312              		.loc 1 933 0
 1313 0018 7B68     		ldr	r3, [r7, #4]
 1314 001a 1B8B     		ldrh	r3, [r3, #24]	@ movhi
 1315 001c FB81     		strh	r3, [r7, #14]	@ movhi
 1316 001e 02E0     		b	.L54
 1317              	.L53:
 934:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   }
 935:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   else
 936:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   {
 937:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Get the Rx CRC register */
 938:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     crcreg = SPIx->RXCRCR;
 1318              		.loc 1 938 0
 1319 0020 7B68     		ldr	r3, [r7, #4]
 1320 0022 9B8A     		ldrh	r3, [r3, #20]	@ movhi
 1321 0024 FB81     		strh	r3, [r7, #14]	@ movhi
 1322              	.L54:
 939:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   }
 940:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Return the selected CRC register */
 941:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   return crcreg;
 1323              		.loc 1 941 0
 1324 0026 FB89     		ldrh	r3, [r7, #14]
 942:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** }
 1325              		.loc 1 942 0
 1326 0028 1846     		mov	r0, r3
 1327 002a 07F11407 		add	r7, r7, #20
 1328 002e BD46     		mov	sp, r7
 1329 0030 80BC     		pop	{r7}
 1330 0032 7047     		bx	lr
 1331              		.cfi_endproc
 1332              	.LFE127:
 1334              		.section	.text.SPI_GetCRCPolynomial,"ax",%progbits
 1335              		.align	2
 1336              		.global	SPI_GetCRCPolynomial
 1337              		.thumb
 1338              		.thumb_func
 1340              	SPI_GetCRCPolynomial:
 1341              	.LFB128:
 943:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 944:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /**
 945:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @brief  Returns the CRC Polynomial register value for the specified SPI.
 946:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPIx: where x can be 1, 2 or 3 to select the SPI peripheral.
 947:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @retval The CRC Polynomial register value.
 948:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
 949:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** uint16_t SPI_GetCRCPolynomial(SPI_TypeDef* SPIx)
 950:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** {
 1342              		.loc 1 950 0
 1343              		.cfi_startproc
 1344              		@ args = 0, pretend = 0, frame = 8
 1345              		@ frame_needed = 1, uses_anonymous_args = 0
 1346              		@ link register save eliminated.
 1347 0000 80B4     		push	{r7}
 1348              	.LCFI54:
 1349              		.cfi_def_cfa_offset 4
 1350 0002 83B0     		sub	sp, sp, #12
 1351              	.LCFI55:
 1352              		.cfi_def_cfa_offset 16
 1353 0004 00AF     		add	r7, sp, #0
 1354              		.cfi_offset 7, -4
 1355              	.LCFI56:
 1356              		.cfi_def_cfa_register 7
 1357 0006 7860     		str	r0, [r7, #4]
 951:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Check the parameters */
 952:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH(SPIx));
 953:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   
 954:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Return the CRC polynomial register */
 955:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   return SPIx->CRCPR;
 1358              		.loc 1 955 0
 1359 0008 7B68     		ldr	r3, [r7, #4]
 1360 000a 1B8A     		ldrh	r3, [r3, #16]	@ movhi
 1361 000c 9BB2     		uxth	r3, r3
 956:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** }
 1362              		.loc 1 956 0
 1363 000e 1846     		mov	r0, r3
 1364 0010 07F10C07 		add	r7, r7, #12
 1365 0014 BD46     		mov	sp, r7
 1366 0016 80BC     		pop	{r7}
 1367 0018 7047     		bx	lr
 1368              		.cfi_endproc
 1369              	.LFE128:
 1371 001a 00BF     		.section	.text.SPI_I2S_DMACmd,"ax",%progbits
 1372              		.align	2
 1373              		.global	SPI_I2S_DMACmd
 1374              		.thumb
 1375              		.thumb_func
 1377              	SPI_I2S_DMACmd:
 1378              	.LFB129:
 957:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 958:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /**
 959:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @}
 960:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
 961:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 962:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /** @defgroup SPI_Group4 DMA transfers management functions
 963:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****  *  @brief   DMA transfers management functions
 964:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *
 965:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** @verbatim   
 966:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****  ===============================================================================
 967:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****                          DMA transfers management functions
 968:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****  ===============================================================================  
 969:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 970:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** @endverbatim
 971:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @{
 972:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
 973:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 974:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /**
 975:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @brief  Enables or disables the SPIx/I2Sx DMA interface.
 976:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPIx: To select the SPIx/I2Sx peripheral, where x can be: 1, 2 or 3 
 977:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode. 
 978:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPI_I2S_DMAReq: specifies the SPI DMA transfer request to be enabled or disabled. 
 979:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          This parameter can be any combination of the following values:
 980:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *            @arg SPI_I2S_DMAReq_Tx: Tx buffer DMA transfer request
 981:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *            @arg SPI_I2S_DMAReq_Rx: Rx buffer DMA transfer request
 982:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  NewState: new state of the selected SPI DMA transfer request.
 983:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          This parameter can be: ENABLE or DISABLE.
 984:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @retval None
 985:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
 986:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** void SPI_I2S_DMACmd(SPI_TypeDef* SPIx, uint16_t SPI_I2S_DMAReq, FunctionalState NewState)
 987:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** {
 1379              		.loc 1 987 0
 1380              		.cfi_startproc
 1381              		@ args = 0, pretend = 0, frame = 8
 1382              		@ frame_needed = 1, uses_anonymous_args = 0
 1383              		@ link register save eliminated.
 1384 0000 80B4     		push	{r7}
 1385              	.LCFI57:
 1386              		.cfi_def_cfa_offset 4
 1387 0002 83B0     		sub	sp, sp, #12
 1388              	.LCFI58:
 1389              		.cfi_def_cfa_offset 16
 1390 0004 00AF     		add	r7, sp, #0
 1391              		.cfi_offset 7, -4
 1392              	.LCFI59:
 1393              		.cfi_def_cfa_register 7
 1394 0006 7860     		str	r0, [r7, #4]
 1395 0008 1346     		mov	r3, r2
 1396 000a 0A46     		mov	r2, r1	@ movhi
 1397 000c 7A80     		strh	r2, [r7, #2]	@ movhi
 1398 000e 7B70     		strb	r3, [r7, #1]
 988:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Check the parameters */
 989:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
 990:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 991:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_I2S_DMAREQ(SPI_I2S_DMAReq));
 992:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 993:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   if (NewState != DISABLE)
 1399              		.loc 1 993 0
 1400 0010 7B78     		ldrb	r3, [r7, #1]	@ zero_extendqisi2
 1401 0012 002B     		cmp	r3, #0
 1402 0014 09D0     		beq	.L57
 994:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   {
 995:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Enable the selected SPI DMA requests */
 996:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     SPIx->CR2 |= SPI_I2S_DMAReq;
 1403              		.loc 1 996 0
 1404 0016 7B68     		ldr	r3, [r7, #4]
 1405 0018 9B88     		ldrh	r3, [r3, #4]	@ movhi
 1406 001a 9AB2     		uxth	r2, r3
 1407 001c 7B88     		ldrh	r3, [r7, #2]	@ movhi
 1408 001e 42EA0303 		orr	r3, r2, r3
 1409 0022 9AB2     		uxth	r2, r3
 1410 0024 7B68     		ldr	r3, [r7, #4]
 1411 0026 9A80     		strh	r2, [r3, #4]	@ movhi
 1412 0028 0BE0     		b	.L56
 1413              	.L57:
 997:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   }
 998:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   else
 999:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   {
1000:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Disable the selected SPI DMA requests */
1001:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     SPIx->CR2 &= (uint16_t)~SPI_I2S_DMAReq;
 1414              		.loc 1 1001 0
 1415 002a 7B68     		ldr	r3, [r7, #4]
 1416 002c 9B88     		ldrh	r3, [r3, #4]	@ movhi
 1417 002e 9AB2     		uxth	r2, r3
 1418 0030 7B88     		ldrh	r3, [r7, #2]	@ movhi
 1419 0032 6FEA0303 		mvn	r3, r3
 1420 0036 9BB2     		uxth	r3, r3
 1421 0038 02EA0303 		and	r3, r2, r3
 1422 003c 9AB2     		uxth	r2, r3
 1423 003e 7B68     		ldr	r3, [r7, #4]
 1424 0040 9A80     		strh	r2, [r3, #4]	@ movhi
 1425              	.L56:
1002:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   }
1003:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** }
 1426              		.loc 1 1003 0
 1427 0042 07F10C07 		add	r7, r7, #12
 1428 0046 BD46     		mov	sp, r7
 1429 0048 80BC     		pop	{r7}
 1430 004a 7047     		bx	lr
 1431              		.cfi_endproc
 1432              	.LFE129:
 1434              		.section	.text.SPI_I2S_ITConfig,"ax",%progbits
 1435              		.align	2
 1436              		.global	SPI_I2S_ITConfig
 1437              		.thumb
 1438              		.thumb_func
 1440              	SPI_I2S_ITConfig:
 1441              	.LFB130:
1004:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
1005:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /**
1006:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @}
1007:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
1008:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
1009:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /** @defgroup SPI_Group5 Interrupts and flags management functions
1010:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****  *  @brief   Interrupts and flags management functions
1011:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *
1012:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** @verbatim   
1013:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****  ===============================================================================
1014:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****                          Interrupts and flags management functions
1015:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****  ===============================================================================  
1016:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
1017:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   This section provides a set of functions allowing to configure the SPI Interrupts 
1018:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   sources and check or clear the flags or pending bits status.
1019:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   The user should identify which mode will be used in his application to manage 
1020:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   the communication: Polling mode, Interrupt mode or DMA mode. 
1021:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     
1022:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   Polling Mode
1023:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   =============
1024:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   In Polling Mode, the SPI/I2S communication can be managed by 9 flags:
1025:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****      1. SPI_I2S_FLAG_TXE : to indicate the status of the transmit buffer register
1026:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****      2. SPI_I2S_FLAG_RXNE : to indicate the status of the receive buffer register
1027:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****      3. SPI_I2S_FLAG_BSY : to indicate the state of the communication layer of the SPI.
1028:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****      4. SPI_FLAG_CRCERR : to indicate if a CRC Calculation error occur              
1029:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****      5. SPI_FLAG_MODF : to indicate if a Mode Fault error occur
1030:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****      6. SPI_I2S_FLAG_OVR : to indicate if an Overrun error occur
1031:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****      7. I2S_FLAG_TIFRFE: to indicate a Frame Format error occurs.
1032:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****      8. I2S_FLAG_UDR: to indicate an Underrun error occurs.
1033:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****      9. I2S_FLAG_CHSIDE: to indicate Channel Side.
1034:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
1035:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** @note Do not use the BSY flag to handle each data transmission or reception.  It is
1036:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       better to use the TXE and RXNE flags instead.
1037:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
1038:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   In this Mode it is advised to use the following functions:
1039:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****      - FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG);
1040:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****      - void SPI_I2S_ClearFlag(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG);
1041:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
1042:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   Interrupt Mode
1043:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   ===============
1044:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   In Interrupt Mode, the SPI communication can be managed by 3 interrupt sources
1045:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   and 7 pending bits: 
1046:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   Pending Bits:
1047:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   ------------- 
1048:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****      1. SPI_I2S_IT_TXE : to indicate the status of the transmit buffer register
1049:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****      2. SPI_I2S_IT_RXNE : to indicate the status of the receive buffer register
1050:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****      3. SPI_IT_CRCERR : to indicate if a CRC Calculation error occur (available in SPI mode only)  
1051:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****      4. SPI_IT_MODF : to indicate if a Mode Fault error occur (available in SPI mode only)
1052:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****      5. SPI_I2S_IT_OVR : to indicate if an Overrun error occur
1053:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****      6. I2S_IT_UDR : to indicate an Underrun Error occurs (available in I2S mode only).
1054:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****      7. I2S_FLAG_TIFRFE : to indicate a Frame Format error occurs (available in TI mode only).
1055:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
1056:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   Interrupt Source:
1057:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   -----------------
1058:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****      1. SPI_I2S_IT_TXE: specifies the interrupt source for the Tx buffer empty 
1059:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****                         interrupt.  
1060:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****      2. SPI_I2S_IT_RXNE : specifies the interrupt source for the Rx buffer not 
1061:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****                           empty interrupt.
1062:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****      3. SPI_I2S_IT_ERR : specifies the interrupt source for the errors interrupt.
1063:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
1064:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   In this Mode it is advised to use the following functions:
1065:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****      - void SPI_I2S_ITConfig(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT, FunctionalState NewState);
1066:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****      - ITStatus SPI_I2S_GetITStatus(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT);
1067:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****      - void SPI_I2S_ClearITPendingBit(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT);
1068:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
1069:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   DMA Mode
1070:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   ========
1071:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   In DMA Mode, the SPI communication can be managed by 2 DMA Channel requests:
1072:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****      1. SPI_I2S_DMAReq_Tx: specifies the Tx buffer DMA transfer request
1073:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****      2. SPI_I2S_DMAReq_Rx: specifies the Rx buffer DMA transfer request
1074:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
1075:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   In this Mode it is advised to use the following function:
1076:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     - void SPI_I2S_DMACmd(SPI_TypeDef* SPIx, uint16_t SPI_I2S_DMAReq, FunctionalState NewState);
1077:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
1078:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** @endverbatim
1079:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @{
1080:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
1081:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
1082:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /**
1083:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @brief  Enables or disables the specified SPI/I2S interrupts.
1084:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPIx: To select the SPIx/I2Sx peripheral, where x can be: 1, 2 or 3 
1085:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode. 
1086:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPI_I2S_IT: specifies the SPI interrupt source to be enabled or disabled. 
1087:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          This parameter can be one of the following values:
1088:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *            @arg SPI_I2S_IT_TXE: Tx buffer empty interrupt mask
1089:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *            @arg SPI_I2S_IT_RXNE: Rx buffer not empty interrupt mask
1090:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *            @arg SPI_I2S_IT_ERR: Error interrupt mask
1091:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  NewState: new state of the specified SPI interrupt.
1092:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          This parameter can be: ENABLE or DISABLE.
1093:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @retval None
1094:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
1095:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** void SPI_I2S_ITConfig(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT, FunctionalState NewState)
1096:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** {
 1442              		.loc 1 1096 0
 1443              		.cfi_startproc
 1444              		@ args = 0, pretend = 0, frame = 16
 1445              		@ frame_needed = 1, uses_anonymous_args = 0
 1446              		@ link register save eliminated.
 1447 0000 80B4     		push	{r7}
 1448              	.LCFI60:
 1449              		.cfi_def_cfa_offset 4
 1450 0002 85B0     		sub	sp, sp, #20
 1451              	.LCFI61:
 1452              		.cfi_def_cfa_offset 24
 1453 0004 00AF     		add	r7, sp, #0
 1454              		.cfi_offset 7, -4
 1455              	.LCFI62:
 1456              		.cfi_def_cfa_register 7
 1457 0006 7860     		str	r0, [r7, #4]
 1458 0008 1346     		mov	r3, r2
 1459 000a 0A46     		mov	r2, r1
 1460 000c FA70     		strb	r2, [r7, #3]
 1461 000e BB70     		strb	r3, [r7, #2]
1097:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   uint16_t itpos = 0, itmask = 0 ;
 1462              		.loc 1 1097 0
 1463 0010 4FF00003 		mov	r3, #0
 1464 0014 FB81     		strh	r3, [r7, #14]	@ movhi
 1465 0016 4FF00003 		mov	r3, #0
 1466 001a BB81     		strh	r3, [r7, #12]	@ movhi
1098:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   
1099:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Check the parameters */
1100:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
1101:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1102:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_I2S_CONFIG_IT(SPI_I2S_IT));
1103:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
1104:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Get the SPI IT index */
1105:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   itpos = SPI_I2S_IT >> 4;
 1467              		.loc 1 1105 0
 1468 001c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1469 001e 4FEA1313 		lsr	r3, r3, #4
 1470 0022 DBB2     		uxtb	r3, r3
 1471 0024 FB81     		strh	r3, [r7, #14]	@ movhi
1106:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
1107:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Set the IT mask */
1108:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   itmask = (uint16_t)1 << (uint16_t)itpos;
 1472              		.loc 1 1108 0
 1473 0026 FB89     		ldrh	r3, [r7, #14]
 1474 0028 4FF00102 		mov	r2, #1
 1475 002c 02FA03F3 		lsl	r3, r2, r3
 1476 0030 BB81     		strh	r3, [r7, #12]	@ movhi
1109:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
1110:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   if (NewState != DISABLE)
 1477              		.loc 1 1110 0
 1478 0032 BB78     		ldrb	r3, [r7, #2]	@ zero_extendqisi2
 1479 0034 002B     		cmp	r3, #0
 1480 0036 09D0     		beq	.L60
1111:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   {
1112:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Enable the selected SPI interrupt */
1113:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     SPIx->CR2 |= itmask;
 1481              		.loc 1 1113 0
 1482 0038 7B68     		ldr	r3, [r7, #4]
 1483 003a 9B88     		ldrh	r3, [r3, #4]	@ movhi
 1484 003c 9AB2     		uxth	r2, r3
 1485 003e BB89     		ldrh	r3, [r7, #12]	@ movhi
 1486 0040 42EA0303 		orr	r3, r2, r3
 1487 0044 9AB2     		uxth	r2, r3
 1488 0046 7B68     		ldr	r3, [r7, #4]
 1489 0048 9A80     		strh	r2, [r3, #4]	@ movhi
 1490 004a 0BE0     		b	.L59
 1491              	.L60:
1114:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   }
1115:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   else
1116:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   {
1117:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Disable the selected SPI interrupt */
1118:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     SPIx->CR2 &= (uint16_t)~itmask;
 1492              		.loc 1 1118 0
 1493 004c 7B68     		ldr	r3, [r7, #4]
 1494 004e 9B88     		ldrh	r3, [r3, #4]	@ movhi
 1495 0050 9AB2     		uxth	r2, r3
 1496 0052 BB89     		ldrh	r3, [r7, #12]	@ movhi
 1497 0054 6FEA0303 		mvn	r3, r3
 1498 0058 9BB2     		uxth	r3, r3
 1499 005a 02EA0303 		and	r3, r2, r3
 1500 005e 9AB2     		uxth	r2, r3
 1501 0060 7B68     		ldr	r3, [r7, #4]
 1502 0062 9A80     		strh	r2, [r3, #4]	@ movhi
 1503              	.L59:
1119:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   }
1120:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** }
 1504              		.loc 1 1120 0
 1505 0064 07F11407 		add	r7, r7, #20
 1506 0068 BD46     		mov	sp, r7
 1507 006a 80BC     		pop	{r7}
 1508 006c 7047     		bx	lr
 1509              		.cfi_endproc
 1510              	.LFE130:
 1512 006e 00BF     		.section	.text.SPI_I2S_GetFlagStatus,"ax",%progbits
 1513              		.align	2
 1514              		.global	SPI_I2S_GetFlagStatus
 1515              		.thumb
 1516              		.thumb_func
 1518              	SPI_I2S_GetFlagStatus:
 1519              	.LFB131:
1121:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
1122:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /**
1123:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @brief  Checks whether the specified SPIx/I2Sx flag is set or not.
1124:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPIx: To select the SPIx/I2Sx peripheral, where x can be: 1, 2 or 3 
1125:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode. 
1126:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPI_I2S_FLAG: specifies the SPI flag to check. 
1127:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          This parameter can be one of the following values:
1128:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *            @arg SPI_I2S_FLAG_TXE: Transmit buffer empty flag.
1129:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *            @arg SPI_I2S_FLAG_RXNE: Receive buffer not empty flag.
1130:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *            @arg SPI_I2S_FLAG_BSY: Busy flag.
1131:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *            @arg SPI_I2S_FLAG_OVR: Overrun flag.
1132:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *            @arg SPI_FLAG_MODF: Mode Fault flag.
1133:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *            @arg SPI_FLAG_CRCERR: CRC Error flag.
1134:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *            @arg SPI_I2S_FLAG_TIFRFE: Format Error.
1135:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *            @arg I2S_FLAG_UDR: Underrun Error flag.
1136:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *            @arg I2S_FLAG_CHSIDE: Channel Side flag.  
1137:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @retval The new state of SPI_I2S_FLAG (SET or RESET).
1138:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
1139:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
1140:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** {
 1520              		.loc 1 1140 0
 1521              		.cfi_startproc
 1522              		@ args = 0, pretend = 0, frame = 16
 1523              		@ frame_needed = 1, uses_anonymous_args = 0
 1524              		@ link register save eliminated.
 1525 0000 80B4     		push	{r7}
 1526              	.LCFI63:
 1527              		.cfi_def_cfa_offset 4
 1528 0002 85B0     		sub	sp, sp, #20
 1529              	.LCFI64:
 1530              		.cfi_def_cfa_offset 24
 1531 0004 00AF     		add	r7, sp, #0
 1532              		.cfi_offset 7, -4
 1533              	.LCFI65:
 1534              		.cfi_def_cfa_register 7
 1535 0006 7860     		str	r0, [r7, #4]
 1536 0008 0B46     		mov	r3, r1
 1537 000a 7B80     		strh	r3, [r7, #2]	@ movhi
1141:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   FlagStatus bitstatus = RESET;
 1538              		.loc 1 1141 0
 1539 000c 4FF00003 		mov	r3, #0
 1540 0010 FB73     		strb	r3, [r7, #15]
1142:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Check the parameters */
1143:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
1144:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
1145:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   
1146:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Check the status of the specified SPI flag */
1147:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 1541              		.loc 1 1147 0
 1542 0012 7B68     		ldr	r3, [r7, #4]
 1543 0014 1B89     		ldrh	r3, [r3, #8]	@ movhi
 1544 0016 9AB2     		uxth	r2, r3
 1545 0018 7B88     		ldrh	r3, [r7, #2]	@ movhi
 1546 001a 02EA0303 		and	r3, r2, r3
 1547 001e 9BB2     		uxth	r3, r3
 1548 0020 002B     		cmp	r3, #0
 1549 0022 03D0     		beq	.L63
1148:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   {
1149:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* SPI_I2S_FLAG is set */
1150:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     bitstatus = SET;
 1550              		.loc 1 1150 0
 1551 0024 4FF00103 		mov	r3, #1
 1552 0028 FB73     		strb	r3, [r7, #15]
 1553 002a 02E0     		b	.L64
 1554              	.L63:
1151:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   }
1152:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   else
1153:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   {
1154:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* SPI_I2S_FLAG is reset */
1155:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     bitstatus = RESET;
 1555              		.loc 1 1155 0
 1556 002c 4FF00003 		mov	r3, #0
 1557 0030 FB73     		strb	r3, [r7, #15]
 1558              	.L64:
1156:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   }
1157:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Return the SPI_I2S_FLAG status */
1158:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   return  bitstatus;
 1559              		.loc 1 1158 0
 1560 0032 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
1159:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** }
 1561              		.loc 1 1159 0
 1562 0034 1846     		mov	r0, r3
 1563 0036 07F11407 		add	r7, r7, #20
 1564 003a BD46     		mov	sp, r7
 1565 003c 80BC     		pop	{r7}
 1566 003e 7047     		bx	lr
 1567              		.cfi_endproc
 1568              	.LFE131:
 1570              		.section	.text.SPI_I2S_ClearFlag,"ax",%progbits
 1571              		.align	2
 1572              		.global	SPI_I2S_ClearFlag
 1573              		.thumb
 1574              		.thumb_func
 1576              	SPI_I2S_ClearFlag:
 1577              	.LFB132:
1160:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
1161:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /**
1162:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @brief  Clears the SPIx CRC Error (CRCERR) flag.
1163:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPIx: To select the SPIx/I2Sx peripheral, where x can be: 1, 2 or 3 
1164:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode. 
1165:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPI_I2S_FLAG: specifies the SPI flag to clear. 
1166:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          This function clears only CRCERR flag.
1167:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *            @arg SPI_FLAG_CRCERR: CRC Error flag.  
1168:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *  
1169:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @note   OVR (OverRun error) flag is cleared by software sequence: a read 
1170:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          operation to SPI_DR register (SPI_I2S_ReceiveData()) followed by a read 
1171:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          operation to SPI_SR register (SPI_I2S_GetFlagStatus()).
1172:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @note   UDR (UnderRun error) flag is cleared by a read operation to 
1173:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          SPI_SR register (SPI_I2S_GetFlagStatus()).   
1174:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @note   MODF (Mode Fault) flag is cleared by software sequence: a read/write 
1175:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          operation to SPI_SR register (SPI_I2S_GetFlagStatus()) followed by a 
1176:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          write operation to SPI_CR1 register (SPI_Cmd() to enable the SPI).
1177:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *  
1178:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @retval None
1179:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
1180:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** void SPI_I2S_ClearFlag(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
1181:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** {
 1578              		.loc 1 1181 0
 1579              		.cfi_startproc
 1580              		@ args = 0, pretend = 0, frame = 8
 1581              		@ frame_needed = 1, uses_anonymous_args = 0
 1582              		@ link register save eliminated.
 1583 0000 80B4     		push	{r7}
 1584              	.LCFI66:
 1585              		.cfi_def_cfa_offset 4
 1586 0002 83B0     		sub	sp, sp, #12
 1587              	.LCFI67:
 1588              		.cfi_def_cfa_offset 16
 1589 0004 00AF     		add	r7, sp, #0
 1590              		.cfi_offset 7, -4
 1591              	.LCFI68:
 1592              		.cfi_def_cfa_register 7
 1593 0006 7860     		str	r0, [r7, #4]
 1594 0008 0B46     		mov	r3, r1
 1595 000a 7B80     		strh	r3, [r7, #2]	@ movhi
1182:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Check the parameters */
1183:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
1184:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_I2S_CLEAR_FLAG(SPI_I2S_FLAG));
1185:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     
1186:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Clear the selected SPI CRC Error (CRCERR) flag */
1187:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   SPIx->SR = (uint16_t)~SPI_I2S_FLAG;
 1596              		.loc 1 1187 0
 1597 000c 7B88     		ldrh	r3, [r7, #2]	@ movhi
 1598 000e 6FEA0303 		mvn	r3, r3
 1599 0012 9AB2     		uxth	r2, r3
 1600 0014 7B68     		ldr	r3, [r7, #4]
 1601 0016 1A81     		strh	r2, [r3, #8]	@ movhi
1188:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** }
 1602              		.loc 1 1188 0
 1603 0018 07F10C07 		add	r7, r7, #12
 1604 001c BD46     		mov	sp, r7
 1605 001e 80BC     		pop	{r7}
 1606 0020 7047     		bx	lr
 1607              		.cfi_endproc
 1608              	.LFE132:
 1610 0022 00BF     		.section	.text.SPI_I2S_GetITStatus,"ax",%progbits
 1611              		.align	2
 1612              		.global	SPI_I2S_GetITStatus
 1613              		.thumb
 1614              		.thumb_func
 1616              	SPI_I2S_GetITStatus:
 1617              	.LFB133:
1189:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
1190:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /**
1191:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @brief  Checks whether the specified SPIx/I2Sx interrupt has occurred or not.
1192:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPIx: To select the SPIx/I2Sx peripheral, where x can be: 1, 2 or 3 
1193:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode.  
1194:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPI_I2S_IT: specifies the SPI interrupt source to check. 
1195:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          This parameter can be one of the following values:
1196:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *            @arg SPI_I2S_IT_TXE: Transmit buffer empty interrupt.
1197:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *            @arg SPI_I2S_IT_RXNE: Receive buffer not empty interrupt.
1198:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *            @arg SPI_I2S_IT_OVR: Overrun interrupt.
1199:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *            @arg SPI_IT_MODF: Mode Fault interrupt.
1200:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *            @arg SPI_IT_CRCERR: CRC Error interrupt.
1201:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *            @arg I2S_IT_UDR: Underrun interrupt.  
1202:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *            @arg SPI_I2S_IT_TIFRFE: Format Error interrupt.  
1203:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @retval The new state of SPI_I2S_IT (SET or RESET).
1204:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
1205:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** ITStatus SPI_I2S_GetITStatus(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT)
1206:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** {
 1618              		.loc 1 1206 0
 1619              		.cfi_startproc
 1620              		@ args = 0, pretend = 0, frame = 16
 1621              		@ frame_needed = 1, uses_anonymous_args = 0
 1622              		@ link register save eliminated.
 1623 0000 80B4     		push	{r7}
 1624              	.LCFI69:
 1625              		.cfi_def_cfa_offset 4
 1626 0002 85B0     		sub	sp, sp, #20
 1627              	.LCFI70:
 1628              		.cfi_def_cfa_offset 24
 1629 0004 00AF     		add	r7, sp, #0
 1630              		.cfi_offset 7, -4
 1631              	.LCFI71:
 1632              		.cfi_def_cfa_register 7
 1633 0006 7860     		str	r0, [r7, #4]
 1634 0008 0B46     		mov	r3, r1
 1635 000a FB70     		strb	r3, [r7, #3]
1207:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   ITStatus bitstatus = RESET;
 1636              		.loc 1 1207 0
 1637 000c 4FF00003 		mov	r3, #0
 1638 0010 FB73     		strb	r3, [r7, #15]
1208:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   uint16_t itpos = 0, itmask = 0, enablestatus = 0;
 1639              		.loc 1 1208 0
 1640 0012 4FF00003 		mov	r3, #0
 1641 0016 BB81     		strh	r3, [r7, #12]	@ movhi
 1642 0018 4FF00003 		mov	r3, #0
 1643 001c 7B81     		strh	r3, [r7, #10]	@ movhi
 1644 001e 4FF00003 		mov	r3, #0
 1645 0022 3B81     		strh	r3, [r7, #8]	@ movhi
1209:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
1210:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Check the parameters */
1211:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
1212:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_I2S_GET_IT(SPI_I2S_IT));
1213:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
1214:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Get the SPI_I2S_IT index */
1215:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   itpos = 0x01 << (SPI_I2S_IT & 0x0F);
 1646              		.loc 1 1215 0
 1647 0024 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1648 0026 03F00F03 		and	r3, r3, #15
 1649 002a 4FF00102 		mov	r2, #1
 1650 002e 02FA03F3 		lsl	r3, r2, r3
 1651 0032 BB81     		strh	r3, [r7, #12]	@ movhi
1216:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
1217:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Get the SPI_I2S_IT IT mask */
1218:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   itmask = SPI_I2S_IT >> 4;
 1652              		.loc 1 1218 0
 1653 0034 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1654 0036 4FEA1313 		lsr	r3, r3, #4
 1655 003a DBB2     		uxtb	r3, r3
 1656 003c 7B81     		strh	r3, [r7, #10]	@ movhi
1219:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
1220:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Set the IT mask */
1221:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   itmask = 0x01 << itmask;
 1657              		.loc 1 1221 0
 1658 003e 7B89     		ldrh	r3, [r7, #10]
 1659 0040 4FF00102 		mov	r2, #1
 1660 0044 02FA03F3 		lsl	r3, r2, r3
 1661 0048 7B81     		strh	r3, [r7, #10]	@ movhi
1222:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
1223:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Get the SPI_I2S_IT enable bit status */
1224:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   enablestatus = (SPIx->CR2 & itmask) ;
 1662              		.loc 1 1224 0
 1663 004a 7B68     		ldr	r3, [r7, #4]
 1664 004c 9B88     		ldrh	r3, [r3, #4]	@ movhi
 1665 004e 9AB2     		uxth	r2, r3
 1666 0050 7B89     		ldrh	r3, [r7, #10]	@ movhi
 1667 0052 02EA0303 		and	r3, r2, r3
 1668 0056 3B81     		strh	r3, [r7, #8]	@ movhi
1225:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
1226:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Check the status of the specified SPI interrupt */
1227:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   if (((SPIx->SR & itpos) != (uint16_t)RESET) && enablestatus)
 1669              		.loc 1 1227 0
 1670 0058 7B68     		ldr	r3, [r7, #4]
 1671 005a 1B89     		ldrh	r3, [r3, #8]	@ movhi
 1672 005c 9AB2     		uxth	r2, r3
 1673 005e BB89     		ldrh	r3, [r7, #12]	@ movhi
 1674 0060 02EA0303 		and	r3, r2, r3
 1675 0064 9BB2     		uxth	r3, r3
 1676 0066 002B     		cmp	r3, #0
 1677 0068 06D0     		beq	.L67
 1678              		.loc 1 1227 0 is_stmt 0 discriminator 1
 1679 006a 3B89     		ldrh	r3, [r7, #8]
 1680 006c 002B     		cmp	r3, #0
 1681 006e 03D0     		beq	.L67
1228:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   {
1229:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* SPI_I2S_IT is set */
1230:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     bitstatus = SET;
 1682              		.loc 1 1230 0 is_stmt 1
 1683 0070 4FF00103 		mov	r3, #1
 1684 0074 FB73     		strb	r3, [r7, #15]
 1685 0076 02E0     		b	.L68
 1686              	.L67:
1231:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   }
1232:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   else
1233:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   {
1234:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* SPI_I2S_IT is reset */
1235:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     bitstatus = RESET;
 1687              		.loc 1 1235 0
 1688 0078 4FF00003 		mov	r3, #0
 1689 007c FB73     		strb	r3, [r7, #15]
 1690              	.L68:
1236:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   }
1237:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Return the SPI_I2S_IT status */
1238:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   return bitstatus;
 1691              		.loc 1 1238 0
 1692 007e FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
1239:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** }
 1693              		.loc 1 1239 0
 1694 0080 1846     		mov	r0, r3
 1695 0082 07F11407 		add	r7, r7, #20
 1696 0086 BD46     		mov	sp, r7
 1697 0088 80BC     		pop	{r7}
 1698 008a 7047     		bx	lr
 1699              		.cfi_endproc
 1700              	.LFE133:
 1702              		.section	.text.SPI_I2S_ClearITPendingBit,"ax",%progbits
 1703              		.align	2
 1704              		.global	SPI_I2S_ClearITPendingBit
 1705              		.thumb
 1706              		.thumb_func
 1708              	SPI_I2S_ClearITPendingBit:
 1709              	.LFB134:
1240:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
1241:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /**
1242:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @brief  Clears the SPIx CRC Error (CRCERR) interrupt pending bit.
1243:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPIx: To select the SPIx/I2Sx peripheral, where x can be: 1, 2 or 3 
1244:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode.  
1245:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPI_I2S_IT: specifies the SPI interrupt pending bit to clear.
1246:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         This function clears only CRCERR interrupt pending bit.   
1247:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *            @arg SPI_IT_CRCERR: CRC Error interrupt.
1248:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *   
1249:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @note   OVR (OverRun Error) interrupt pending bit is cleared by software 
1250:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          sequence: a read operation to SPI_DR register (SPI_I2S_ReceiveData()) 
1251:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          followed by a read operation to SPI_SR register (SPI_I2S_GetITStatus()).
1252:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @note   UDR (UnderRun Error) interrupt pending bit is cleared by a read 
1253:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          operation to SPI_SR register (SPI_I2S_GetITStatus()).   
1254:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @note   MODF (Mode Fault) interrupt pending bit is cleared by software sequence:
1255:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          a read/write operation to SPI_SR register (SPI_I2S_GetITStatus()) 
1256:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          followed by a write operation to SPI_CR1 register (SPI_Cmd() to enable 
1257:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          the SPI).
1258:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @retval None
1259:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
1260:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** void SPI_I2S_ClearITPendingBit(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT)
1261:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** {
 1710              		.loc 1 1261 0
 1711              		.cfi_startproc
 1712              		@ args = 0, pretend = 0, frame = 16
 1713              		@ frame_needed = 1, uses_anonymous_args = 0
 1714              		@ link register save eliminated.
 1715 0000 80B4     		push	{r7}
 1716              	.LCFI72:
 1717              		.cfi_def_cfa_offset 4
 1718 0002 85B0     		sub	sp, sp, #20
 1719              	.LCFI73:
 1720              		.cfi_def_cfa_offset 24
 1721 0004 00AF     		add	r7, sp, #0
 1722              		.cfi_offset 7, -4
 1723              	.LCFI74:
 1724              		.cfi_def_cfa_register 7
 1725 0006 7860     		str	r0, [r7, #4]
 1726 0008 0B46     		mov	r3, r1
 1727 000a FB70     		strb	r3, [r7, #3]
1262:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   uint16_t itpos = 0;
 1728              		.loc 1 1262 0
 1729 000c 4FF00003 		mov	r3, #0
 1730 0010 FB81     		strh	r3, [r7, #14]	@ movhi
1263:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Check the parameters */
1264:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
1265:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_I2S_CLEAR_IT(SPI_I2S_IT));
1266:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
1267:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Get the SPI_I2S IT index */
1268:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   itpos = 0x01 << (SPI_I2S_IT & 0x0F);
 1731              		.loc 1 1268 0
 1732 0012 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1733 0014 03F00F03 		and	r3, r3, #15
 1734 0018 4FF00102 		mov	r2, #1
 1735 001c 02FA03F3 		lsl	r3, r2, r3
 1736 0020 FB81     		strh	r3, [r7, #14]	@ movhi
1269:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
1270:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Clear the selected SPI CRC Error (CRCERR) interrupt pending bit */
1271:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   SPIx->SR = (uint16_t)~itpos;
 1737              		.loc 1 1271 0
 1738 0022 FB89     		ldrh	r3, [r7, #14]	@ movhi
 1739 0024 6FEA0303 		mvn	r3, r3
 1740 0028 9AB2     		uxth	r2, r3
 1741 002a 7B68     		ldr	r3, [r7, #4]
 1742 002c 1A81     		strh	r2, [r3, #8]	@ movhi
1272:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** }
 1743              		.loc 1 1272 0
 1744 002e 07F11407 		add	r7, r7, #20
 1745 0032 BD46     		mov	sp, r7
 1746 0034 80BC     		pop	{r7}
 1747 0036 7047     		bx	lr
 1748              		.cfi_endproc
 1749              	.LFE134:
 1751              		.text
 1752              	.Letext0:
DEFINED SYMBOLS
                            *ABS*:00000000 stm32f4xx_spi.c
     /tmp/ccQmX1j4.s:25     .text.SPI_I2S_DeInit:00000000 $t
     /tmp/ccQmX1j4.s:30     .text.SPI_I2S_DeInit:00000000 SPI_I2S_DeInit
     /tmp/ccQmX1j4.s:100    .text.SPI_I2S_DeInit:00000074 $d
     /tmp/ccQmX1j4.s:107    .text.SPI_Init:00000000 $t
     /tmp/ccQmX1j4.s:112    .text.SPI_Init:00000000 SPI_Init
     /tmp/ccQmX1j4.s:214    .text.I2S_Init:00000000 $t
     /tmp/ccQmX1j4.s:219    .text.I2S_Init:00000000 I2S_Init
     /tmp/ccQmX1j4.s:471    .text.I2S_Init:000001f0 $d
     /tmp/ccQmX1j4.s:478    .text.SPI_StructInit:00000000 $t
     /tmp/ccQmX1j4.s:483    .text.SPI_StructInit:00000000 SPI_StructInit
     /tmp/ccQmX1j4.s:546    .text.I2S_StructInit:00000000 $t
     /tmp/ccQmX1j4.s:551    .text.I2S_StructInit:00000000 I2S_StructInit
     /tmp/ccQmX1j4.s:602    .text.SPI_Cmd:00000000 $t
     /tmp/ccQmX1j4.s:607    .text.SPI_Cmd:00000000 SPI_Cmd
     /tmp/ccQmX1j4.s:659    .text.I2S_Cmd:00000000 $t
     /tmp/ccQmX1j4.s:664    .text.I2S_Cmd:00000000 I2S_Cmd
     /tmp/ccQmX1j4.s:716    .text.SPI_DataSizeConfig:00000000 $t
     /tmp/ccQmX1j4.s:721    .text.SPI_DataSizeConfig:00000000 SPI_DataSizeConfig
     /tmp/ccQmX1j4.s:767    .text.SPI_BiDirectionalLineConfig:00000000 $t
     /tmp/ccQmX1j4.s:772    .text.SPI_BiDirectionalLineConfig:00000000 SPI_BiDirectionalLineConfig
     /tmp/ccQmX1j4.s:824    .text.SPI_NSSInternalSoftwareConfig:00000000 $t
     /tmp/ccQmX1j4.s:829    .text.SPI_NSSInternalSoftwareConfig:00000000 SPI_NSSInternalSoftwareConfig
     /tmp/ccQmX1j4.s:882    .text.SPI_SSOutputCmd:00000000 $t
     /tmp/ccQmX1j4.s:887    .text.SPI_SSOutputCmd:00000000 SPI_SSOutputCmd
     /tmp/ccQmX1j4.s:939    .text.SPI_TIModeCmd:00000000 $t
     /tmp/ccQmX1j4.s:944    .text.SPI_TIModeCmd:00000000 SPI_TIModeCmd
     /tmp/ccQmX1j4.s:996    .text.I2S_FullDuplexConfig:00000000 $t
     /tmp/ccQmX1j4.s:1001   .text.I2S_FullDuplexConfig:00000000 I2S_FullDuplexConfig
     /tmp/ccQmX1j4.s:1108   .text.SPI_I2S_ReceiveData:00000000 $t
     /tmp/ccQmX1j4.s:1113   .text.SPI_I2S_ReceiveData:00000000 SPI_I2S_ReceiveData
     /tmp/ccQmX1j4.s:1145   .text.SPI_I2S_SendData:00000000 $t
     /tmp/ccQmX1j4.s:1150   .text.SPI_I2S_SendData:00000000 SPI_I2S_SendData
     /tmp/ccQmX1j4.s:1183   .text.SPI_CalculateCRC:00000000 $t
     /tmp/ccQmX1j4.s:1188   .text.SPI_CalculateCRC:00000000 SPI_CalculateCRC
     /tmp/ccQmX1j4.s:1240   .text.SPI_TransmitCRC:00000000 $t
     /tmp/ccQmX1j4.s:1245   .text.SPI_TransmitCRC:00000000 SPI_TransmitCRC
     /tmp/ccQmX1j4.s:1280   .text.SPI_GetCRC:00000000 $t
     /tmp/ccQmX1j4.s:1285   .text.SPI_GetCRC:00000000 SPI_GetCRC
     /tmp/ccQmX1j4.s:1335   .text.SPI_GetCRCPolynomial:00000000 $t
     /tmp/ccQmX1j4.s:1340   .text.SPI_GetCRCPolynomial:00000000 SPI_GetCRCPolynomial
     /tmp/ccQmX1j4.s:1372   .text.SPI_I2S_DMACmd:00000000 $t
     /tmp/ccQmX1j4.s:1377   .text.SPI_I2S_DMACmd:00000000 SPI_I2S_DMACmd
     /tmp/ccQmX1j4.s:1435   .text.SPI_I2S_ITConfig:00000000 $t
     /tmp/ccQmX1j4.s:1440   .text.SPI_I2S_ITConfig:00000000 SPI_I2S_ITConfig
     /tmp/ccQmX1j4.s:1513   .text.SPI_I2S_GetFlagStatus:00000000 $t
     /tmp/ccQmX1j4.s:1518   .text.SPI_I2S_GetFlagStatus:00000000 SPI_I2S_GetFlagStatus
     /tmp/ccQmX1j4.s:1571   .text.SPI_I2S_ClearFlag:00000000 $t
     /tmp/ccQmX1j4.s:1576   .text.SPI_I2S_ClearFlag:00000000 SPI_I2S_ClearFlag
     /tmp/ccQmX1j4.s:1611   .text.SPI_I2S_GetITStatus:00000000 $t
     /tmp/ccQmX1j4.s:1616   .text.SPI_I2S_GetITStatus:00000000 SPI_I2S_GetITStatus
     /tmp/ccQmX1j4.s:1703   .text.SPI_I2S_ClearITPendingBit:00000000 $t
     /tmp/ccQmX1j4.s:1708   .text.SPI_I2S_ClearITPendingBit:00000000 SPI_I2S_ClearITPendingBit
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
RCC_APB2PeriphResetCmd
RCC_APB1PeriphResetCmd
