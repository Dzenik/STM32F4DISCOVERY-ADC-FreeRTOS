   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 3
   4              		.fpu fpv4-sp-d16
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 6
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"stm32f4xx_i2c.c"
  22              	.Ltext0:
  23              		.cfi_sections	.debug_frame
  24              		.section	.text.I2C_DeInit,"ax",%progbits
  25              		.align	2
  26              		.global	I2C_DeInit
  27              		.thumb
  28              		.thumb_func
  30              	I2C_DeInit:
  31              	.LFB110:
  32              		.file 1 "libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c"
   1:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
   2:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   ******************************************************************************
   3:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @file    stm32f4xx_i2c.c
   4:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @author  MCD Application Team
   5:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @version V1.0.0RC1
   6:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @date    25-August-2011
   7:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief   This file provides firmware functions to manage the following 
   8:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          functionalities of the Inter-integrated circuit (I2C)
   9:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *           - Initialization and Configuration
  10:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *           - Data transfers
  11:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *           - PEC management
  12:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *           - DMA transfers management
  13:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *           - Interrupts, events and flags management 
  14:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *           
  15:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *  @verbatim
  16:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *    
  17:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          ===================================================================
  18:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *                                 How to use this driver
  19:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          ===================================================================
  20:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          1. Enable peripheral clock using RCC_APB1PeriphClockCmd(RCC_APB1Periph_I2Cx, ENABLE)
  21:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *             function for I2C1, I2C2 or I2C3.
  22:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *
  23:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          2. Enable SDA, SCL  and SMBA (when used) GPIO clocks using 
  24:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *             RCC_AHBPeriphClockCmd() function. 
  25:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *
  26:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          3. Peripherals alternate function: 
  27:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *                 - Connect the pin to the desired peripherals' Alternate 
  28:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *                   Function (AF) using GPIO_PinAFConfig() function
  29:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *                 - Configure the desired pin in alternate function by:
  30:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *                   GPIO_InitStruct->GPIO_Mode = GPIO_Mode_AF
  31:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *                 - Select the type, pull-up/pull-down and output speed via 
  32:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *                   GPIO_PuPd, GPIO_OType and GPIO_Speed members
  33:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *                 - Call GPIO_Init() function
  34:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *                 Recommended configuration is Push-Pull, Pull-up, Open-Drain.
  35:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *                 Add an external pull up if necessary (typically 4.7 KOhm).      
  36:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *        
  37:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          4. Program the Mode, duty cycle , Own address, Ack, Speed and Acknowledged
  38:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *             Address using the I2C_Init() function.
  39:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *
  40:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          5. Optionally you can enable/configure the following parameters without
  41:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *             re-initialization (i.e there is no need to call again I2C_Init() function):
  42:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *              - Enable the acknowledge feature using I2C_AcknowledgeConfig() function
  43:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *              - Enable the dual addressing mode using I2C_DualAddressCmd() function
  44:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *              - Enable the general call using the I2C_GeneralCallCmd() function
  45:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *              - Enable the clock stretching using I2C_StretchClockCmd() function
  46:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *              - Enable the fast mode duty cycle using the I2C_FastModeDutyCycleConfig()
  47:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *                function.
  48:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *              - Configure the NACK position for Master Receiver mode in case of 
  49:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *                2 bytes reception using the function I2C_NACKPositionConfig().  
  50:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *              - Enable the PEC Calculation using I2C_CalculatePEC() function
  51:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *              - For SMBus Mode: 
  52:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *                   - Enable the Address Resolution Protocol (ARP) using I2C_ARPCmd() function
  53:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *                   - Configure the SMBusAlert pin using I2C_SMBusAlertConfig() function
  54:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *
  55:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          6. Enable the NVIC and the corresponding interrupt using the function 
  56:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *             I2C_ITConfig() if you need to use interrupt mode. 
  57:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *
  58:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          7. When using the DMA mode 
  59:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *                   - Configure the DMA using DMA_Init() function
  60:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *                   - Active the needed channel Request using I2C_DMACmd() or
  61:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *                     I2C_DMALastTransferCmd() function.
  62:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *              @note When using DMA mode, I2C interrupts may be used at the same time to
  63:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *                    control the communication flow (Start/Stop/Ack... events and errors).
  64:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * 
  65:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          8. Enable the I2C using the I2C_Cmd() function.
  66:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * 
  67:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          9. Enable the DMA using the DMA_Cmd() function when using DMA mode in the 
  68:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *             transfers. 
  69:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *
  70:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *  @endverbatim
  71:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *  
  72:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   ******************************************************************************
  73:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @attention
  74:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *
  75:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
  76:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
  77:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
  78:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
  79:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
  80:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
  81:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *
  82:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * <h2><center>&copy; COPYRIGHT 2011 STMicroelectronics</center></h2>
  83:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   ******************************************************************************  
  84:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */ 
  85:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
  86:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /* Includes ------------------------------------------------------------------*/
  87:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** #include "stm32f4xx_i2c.h"
  88:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** #include "stm32f4xx_rcc.h"
  89:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
  90:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /** @addtogroup STM32F4xx_StdPeriph_Driver
  91:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @{
  92:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
  93:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
  94:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /** @defgroup I2C 
  95:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief I2C driver modules
  96:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @{
  97:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */ 
  98:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
  99:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /* Private typedef -----------------------------------------------------------*/
 100:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /* Private define ------------------------------------------------------------*/
 101:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 102:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** #define CR1_CLEAR_MASK    ((uint16_t)0xFBF5)      /*<! I2C registers Masks */
 103:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** #define FLAG_MASK         ((uint32_t)0x00FFFFFF)  /*<! I2C FLAG mask */
 104:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** #define ITEN_MASK         ((uint32_t)0x07000000)  /*<! I2C Interrupt Enable mask */
 105:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 106:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /* Private macro -------------------------------------------------------------*/
 107:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /* Private variables ---------------------------------------------------------*/
 108:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /* Private function prototypes -----------------------------------------------*/
 109:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /* Private functions ---------------------------------------------------------*/
 110:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 111:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /** @defgroup I2C_Private_Functions
 112:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @{
 113:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 114:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 115:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /** @defgroup I2C_Group1 Initialization and Configuration functions
 116:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  *  @brief   Initialization and Configuration functions 
 117:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  *
 118:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** @verbatim   
 119:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  ===============================================================================
 120:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****                    Initialization and Configuration functions
 121:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  ===============================================================================  
 122:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 123:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** @endverbatim
 124:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @{
 125:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 126:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 127:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
 128:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Deinitialize the I2Cx peripheral registers to their default reset values.
 129:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 130:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval None
 131:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 132:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** void I2C_DeInit(I2C_TypeDef* I2Cx)
 133:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
  33              		.loc 1 133 0
  34              		.cfi_startproc
  35              		@ args = 0, pretend = 0, frame = 8
  36              		@ frame_needed = 1, uses_anonymous_args = 0
  37 0000 80B5     		push	{r7, lr}
  38              	.LCFI0:
  39              		.cfi_def_cfa_offset 8
  40 0002 82B0     		sub	sp, sp, #8
  41              	.LCFI1:
  42              		.cfi_def_cfa_offset 16
  43 0004 00AF     		add	r7, sp, #0
  44              		.cfi_offset 14, -4
  45              		.cfi_offset 7, -8
  46              	.LCFI2:
  47              		.cfi_def_cfa_register 7
  48 0006 7860     		str	r0, [r7, #4]
 134:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
 135:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 136:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 137:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   if (I2Cx == I2C1)
  49              		.loc 1 137 0
  50 0008 7A68     		ldr	r2, [r7, #4]
  51 000a 1A4B     		ldr	r3, .L5
  52 000c 9A42     		cmp	r2, r3
  53 000e 0CD1     		bne	.L2
 138:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 139:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Enable I2C1 reset state */
 140:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, ENABLE);
  54              		.loc 1 140 0
  55 0010 4FF40010 		mov	r0, #2097152
  56 0014 4FF00101 		mov	r1, #1
  57 0018 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 141:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Release I2C1 from reset state */
 142:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, DISABLE);    
  58              		.loc 1 142 0
  59 001c 4FF40010 		mov	r0, #2097152
  60 0020 4FF00001 		mov	r1, #0
  61 0024 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
  62 0028 20E0     		b	.L1
  63              	.L2:
 143:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 144:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   else if (I2Cx == I2C2)
  64              		.loc 1 144 0
  65 002a 7A68     		ldr	r2, [r7, #4]
  66 002c 124B     		ldr	r3, .L5+4
  67 002e 9A42     		cmp	r2, r3
  68 0030 0CD1     		bne	.L4
 145:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 146:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Enable I2C2 reset state */
 147:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, ENABLE);
  69              		.loc 1 147 0
  70 0032 4FF48000 		mov	r0, #4194304
  71 0036 4FF00101 		mov	r1, #1
  72 003a FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 148:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Release I2C2 from reset state */
 149:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, DISABLE);      
  73              		.loc 1 149 0
  74 003e 4FF48000 		mov	r0, #4194304
  75 0042 4FF00001 		mov	r1, #0
  76 0046 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
  77 004a 0FE0     		b	.L1
  78              	.L4:
 150:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 151:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   else 
 152:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 153:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     if (I2Cx == I2C3)
  79              		.loc 1 153 0
  80 004c 7A68     		ldr	r2, [r7, #4]
  81 004e 0B4B     		ldr	r3, .L5+8
  82 0050 9A42     		cmp	r2, r3
  83 0052 0BD1     		bne	.L1
 154:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     {
 155:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****       /* Enable I2C3 reset state */
 156:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****       RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, ENABLE);
  84              		.loc 1 156 0
  85 0054 4FF40000 		mov	r0, #8388608
  86 0058 4FF00101 		mov	r1, #1
  87 005c FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 157:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****       /* Release I2C3 from reset state */
 158:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****       RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, DISABLE);     
  88              		.loc 1 158 0
  89 0060 4FF40000 		mov	r0, #8388608
  90 0064 4FF00001 		mov	r1, #0
  91 0068 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
  92              	.L1:
 159:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     }
 160:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 161:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
  93              		.loc 1 161 0
  94 006c 07F10807 		add	r7, r7, #8
  95 0070 BD46     		mov	sp, r7
  96 0072 80BD     		pop	{r7, pc}
  97              	.L6:
  98              		.align	2
  99              	.L5:
 100 0074 00540040 		.word	1073763328
 101 0078 00580040 		.word	1073764352
 102 007c 005C0040 		.word	1073765376
 103              		.cfi_endproc
 104              	.LFE110:
 106              		.section	.text.I2C_Init,"ax",%progbits
 107              		.align	2
 108              		.global	I2C_Init
 109              		.thumb
 110              		.thumb_func
 112              	I2C_Init:
 113              	.LFB111:
 162:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 163:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
 164:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Initializes the I2Cx peripheral according to the specified 
 165:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *         parameters in the I2C_InitStruct.
 166:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *           
 167:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @note   To use the I2C at 400 KHz (in fast mode), the PCLK1 frequency 
 168:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *         (I2C peripheral input clock) must be a multiple of 10 MHz.  
 169:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *           
 170:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 171:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2C_InitStruct: pointer to a I2C_InitTypeDef structure that contains 
 172:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *         the configuration information for the specified I2C peripheral.
 173:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval None
 174:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 175:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** void I2C_Init(I2C_TypeDef* I2Cx, I2C_InitTypeDef* I2C_InitStruct)
 176:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 114              		.loc 1 176 0
 115              		.cfi_startproc
 116              		@ args = 0, pretend = 0, frame = 40
 117              		@ frame_needed = 1, uses_anonymous_args = 0
 118 0000 80B5     		push	{r7, lr}
 119              	.LCFI3:
 120              		.cfi_def_cfa_offset 8
 121 0002 8AB0     		sub	sp, sp, #40
 122              	.LCFI4:
 123              		.cfi_def_cfa_offset 48
 124 0004 00AF     		add	r7, sp, #0
 125              		.cfi_offset 14, -4
 126              		.cfi_offset 7, -8
 127              	.LCFI5:
 128              		.cfi_def_cfa_register 7
 129 0006 7860     		str	r0, [r7, #4]
 130 0008 3960     		str	r1, [r7, #0]
 177:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   uint16_t tmpreg = 0, freqrange = 0;
 131              		.loc 1 177 0
 132 000a 4FF00003 		mov	r3, #0
 133 000e FB84     		strh	r3, [r7, #38]	@ movhi
 134 0010 4FF00003 		mov	r3, #0
 135 0014 7B84     		strh	r3, [r7, #34]	@ movhi
 178:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   uint16_t result = 0x04;
 136              		.loc 1 178 0
 137 0016 4FF00403 		mov	r3, #4
 138 001a BB84     		strh	r3, [r7, #36]	@ movhi
 179:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   uint32_t pclk1 = 8000000;
 139              		.loc 1 179 0
 140 001c 604B     		ldr	r3, .L14
 141 001e FB61     		str	r3, [r7, #28]
 180:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   RCC_ClocksTypeDef  rcc_clocks;
 181:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
 182:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 183:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_CLOCK_SPEED(I2C_InitStruct->I2C_ClockSpeed));
 184:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_MODE(I2C_InitStruct->I2C_Mode));
 185:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_DUTY_CYCLE(I2C_InitStruct->I2C_DutyCycle));
 186:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_OWN_ADDRESS1(I2C_InitStruct->I2C_OwnAddress1));
 187:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ACK_STATE(I2C_InitStruct->I2C_Ack));
 188:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ACKNOWLEDGE_ADDRESS(I2C_InitStruct->I2C_AcknowledgedAddress));
 189:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 190:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /*---------------------------- I2Cx CR2 Configuration ------------------------*/
 191:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Get the I2Cx CR2 value */
 192:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   tmpreg = I2Cx->CR2;
 142              		.loc 1 192 0
 143 0020 7B68     		ldr	r3, [r7, #4]
 144 0022 9B88     		ldrh	r3, [r3, #4]	@ movhi
 145 0024 FB84     		strh	r3, [r7, #38]	@ movhi
 193:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Clear frequency FREQ[5:0] bits */
 194:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   tmpreg &= (uint16_t)~((uint16_t)I2C_CR2_FREQ);
 146              		.loc 1 194 0
 147 0026 FB8C     		ldrh	r3, [r7, #38]	@ movhi
 148 0028 23F03F03 		bic	r3, r3, #63
 149 002c FB84     		strh	r3, [r7, #38]	@ movhi
 195:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Get pclk1 frequency value */
 196:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   RCC_GetClocksFreq(&rcc_clocks);
 150              		.loc 1 196 0
 151 002e 07F10C03 		add	r3, r7, #12
 152 0032 1846     		mov	r0, r3
 153 0034 FFF7FEFF 		bl	RCC_GetClocksFreq
 197:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   pclk1 = rcc_clocks.PCLK1_Frequency;
 154              		.loc 1 197 0
 155 0038 7B69     		ldr	r3, [r7, #20]
 156 003a FB61     		str	r3, [r7, #28]
 198:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Set frequency bits depending on pclk1 value */
 199:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   freqrange = (uint16_t)(pclk1 / 1000000);
 157              		.loc 1 199 0
 158 003c FA69     		ldr	r2, [r7, #28]
 159 003e 594B     		ldr	r3, .L14+4
 160 0040 A3FB0213 		umull	r1, r3, r3, r2
 161 0044 4FEA9343 		lsr	r3, r3, #18
 162 0048 7B84     		strh	r3, [r7, #34]	@ movhi
 200:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   tmpreg |= freqrange;
 163              		.loc 1 200 0
 164 004a FA8C     		ldrh	r2, [r7, #38]	@ movhi
 165 004c 7B8C     		ldrh	r3, [r7, #34]	@ movhi
 166 004e 42EA0303 		orr	r3, r2, r3
 167 0052 FB84     		strh	r3, [r7, #38]	@ movhi
 201:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Write to I2Cx CR2 */
 202:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   I2Cx->CR2 = tmpreg;
 168              		.loc 1 202 0
 169 0054 7B68     		ldr	r3, [r7, #4]
 170 0056 FA8C     		ldrh	r2, [r7, #38]	@ movhi
 171 0058 9A80     		strh	r2, [r3, #4]	@ movhi
 203:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 204:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /*---------------------------- I2Cx CCR Configuration ------------------------*/
 205:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Disable the selected I2C peripheral to configure TRISE */
 206:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PE);
 172              		.loc 1 206 0
 173 005a 7B68     		ldr	r3, [r7, #4]
 174 005c 1B88     		ldrh	r3, [r3, #0]	@ movhi
 175 005e 9BB2     		uxth	r3, r3
 176 0060 23F00103 		bic	r3, r3, #1
 177 0064 9AB2     		uxth	r2, r3
 178 0066 7B68     		ldr	r3, [r7, #4]
 179 0068 1A80     		strh	r2, [r3, #0]	@ movhi
 207:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Reset tmpreg value */
 208:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Clear F/S, DUTY and CCR[11:0] bits */
 209:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   tmpreg = 0;
 180              		.loc 1 209 0
 181 006a 4FF00003 		mov	r3, #0
 182 006e FB84     		strh	r3, [r7, #38]	@ movhi
 210:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 211:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Configure speed in standard mode */
 212:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   if (I2C_InitStruct->I2C_ClockSpeed <= 100000)
 183              		.loc 1 212 0
 184 0070 3B68     		ldr	r3, [r7, #0]
 185 0072 1A68     		ldr	r2, [r3, #0]
 186 0074 4C4B     		ldr	r3, .L14+8
 187 0076 9A42     		cmp	r2, r3
 188 0078 19D8     		bhi	.L8
 213:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 214:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Standard mode speed calculate */
 215:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed << 1));
 189              		.loc 1 215 0
 190 007a 3B68     		ldr	r3, [r7, #0]
 191 007c 1B68     		ldr	r3, [r3, #0]
 192 007e 4FEA4303 		lsl	r3, r3, #1
 193 0082 FA69     		ldr	r2, [r7, #28]
 194 0084 B2FBF3F3 		udiv	r3, r2, r3
 195 0088 BB84     		strh	r3, [r7, #36]	@ movhi
 216:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Test if CCR value is under 0x4*/
 217:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     if (result < 0x04)
 196              		.loc 1 217 0
 197 008a BB8C     		ldrh	r3, [r7, #36]
 198 008c 032B     		cmp	r3, #3
 199 008e 02D8     		bhi	.L9
 218:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     {
 219:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****       /* Set minimum allowed value */
 220:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****       result = 0x04;  
 200              		.loc 1 220 0
 201 0090 4FF00403 		mov	r3, #4
 202 0094 BB84     		strh	r3, [r7, #36]	@ movhi
 203              	.L9:
 221:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     }
 222:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Set speed value for standard mode */
 223:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     tmpreg |= result;	  
 204              		.loc 1 223 0
 205 0096 FA8C     		ldrh	r2, [r7, #38]	@ movhi
 206 0098 BB8C     		ldrh	r3, [r7, #36]	@ movhi
 207 009a 42EA0303 		orr	r3, r2, r3
 208 009e FB84     		strh	r3, [r7, #38]	@ movhi
 224:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Set Maximum Rise Time for standard mode */
 225:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->TRISE = freqrange + 1; 
 209              		.loc 1 225 0
 210 00a0 7B8C     		ldrh	r3, [r7, #34]	@ movhi
 211 00a2 03F10103 		add	r3, r3, #1
 212 00a6 9AB2     		uxth	r2, r3
 213 00a8 7B68     		ldr	r3, [r7, #4]
 214 00aa 1A84     		strh	r2, [r3, #32]	@ movhi
 215 00ac 49E0     		b	.L10
 216              	.L8:
 226:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 227:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Configure speed in fast mode */
 228:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* To use the I2C at 400 KHz (in fast mode), the PCLK1 frequency (I2C peripheral
 229:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****      input clock) must be a multiple of 10 MHz */
 230:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   else /*(I2C_InitStruct->I2C_ClockSpeed <= 400000)*/
 231:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 232:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     if (I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_2)
 217              		.loc 1 232 0
 218 00ae 3B68     		ldr	r3, [r7, #0]
 219 00b0 DA88     		ldrh	r2, [r3, #6]
 220 00b2 4BF6FF73 		movw	r3, #49151
 221 00b6 9A42     		cmp	r2, r3
 222 00b8 0AD1     		bne	.L11
 233:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     {
 234:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****       /* Fast mode speed calculate: Tlow/Thigh = 2 */
 235:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****       result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 3));
 223              		.loc 1 235 0
 224 00ba 3B68     		ldr	r3, [r7, #0]
 225 00bc 1A68     		ldr	r2, [r3, #0]
 226 00be 1346     		mov	r3, r2
 227 00c0 4FEA4303 		lsl	r3, r3, #1
 228 00c4 9B18     		adds	r3, r3, r2
 229 00c6 FA69     		ldr	r2, [r7, #28]
 230 00c8 B2FBF3F3 		udiv	r3, r2, r3
 231 00cc BB84     		strh	r3, [r7, #36]	@ movhi
 232 00ce 10E0     		b	.L12
 233              	.L11:
 236:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     }
 237:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     else /*I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_16_9*/
 238:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     {
 239:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****       /* Fast mode speed calculate: Tlow/Thigh = 16/9 */
 240:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****       result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 25));
 234              		.loc 1 240 0
 235 00d0 3B68     		ldr	r3, [r7, #0]
 236 00d2 1A68     		ldr	r2, [r3, #0]
 237 00d4 1346     		mov	r3, r2
 238 00d6 4FEA8303 		lsl	r3, r3, #2
 239 00da 9B18     		adds	r3, r3, r2
 240 00dc 4FEA8302 		lsl	r2, r3, #2
 241 00e0 9B18     		adds	r3, r3, r2
 242 00e2 FA69     		ldr	r2, [r7, #28]
 243 00e4 B2FBF3F3 		udiv	r3, r2, r3
 244 00e8 BB84     		strh	r3, [r7, #36]	@ movhi
 241:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****       /* Set DUTY bit */
 242:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****       result |= I2C_DutyCycle_16_9;
 245              		.loc 1 242 0
 246 00ea BB8C     		ldrh	r3, [r7, #36]	@ movhi
 247 00ec 43F48043 		orr	r3, r3, #16384
 248 00f0 BB84     		strh	r3, [r7, #36]	@ movhi
 249              	.L12:
 243:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     }
 244:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 245:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Test if CCR value is under 0x1*/
 246:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     if ((result & I2C_CCR_CCR) == 0)
 250              		.loc 1 246 0
 251 00f2 BB8C     		ldrh	r3, [r7, #36]
 252 00f4 4FEA0353 		lsl	r3, r3, #20
 253 00f8 4FEA1353 		lsr	r3, r3, #20
 254 00fc 002B     		cmp	r3, #0
 255 00fe 03D1     		bne	.L13
 247:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     {
 248:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****       /* Set minimum allowed value */
 249:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****       result |= (uint16_t)0x0001;  
 256              		.loc 1 249 0
 257 0100 BB8C     		ldrh	r3, [r7, #36]	@ movhi
 258 0102 43F00103 		orr	r3, r3, #1
 259 0106 BB84     		strh	r3, [r7, #36]	@ movhi
 260              	.L13:
 250:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     }
 251:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Set speed value and set F/S bit for fast mode */
 252:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     tmpreg |= (uint16_t)(result | I2C_CCR_FS);
 261              		.loc 1 252 0
 262 0108 BA8C     		ldrh	r2, [r7, #36]	@ movhi
 263 010a FB8C     		ldrh	r3, [r7, #38]	@ movhi
 264 010c 42EA0303 		orr	r3, r2, r3
 265 0110 9BB2     		uxth	r3, r3
 266 0112 6FEA4343 		mvn	r3, r3, lsl #17
 267 0116 6FEA5343 		mvn	r3, r3, lsr #17
 268 011a FB84     		strh	r3, [r7, #38]	@ movhi
 253:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Set Maximum Rise Time for fast mode */
 254:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->TRISE = (uint16_t)(((freqrange * (uint16_t)300) / (uint16_t)1000) + (uint16_t)1);  
 269              		.loc 1 254 0
 270 011c 7B8C     		ldrh	r3, [r7, #34]
 271 011e 4FF49672 		mov	r2, #300
 272 0122 02FB03F3 		mul	r3, r2, r3
 273 0126 214A     		ldr	r2, .L14+12
 274 0128 82FB0312 		smull	r1, r2, r2, r3
 275 012c 4FEAA212 		asr	r2, r2, #6
 276 0130 4FEAE373 		asr	r3, r3, #31
 277 0134 D31A     		subs	r3, r2, r3
 278 0136 9BB2     		uxth	r3, r3
 279 0138 03F10103 		add	r3, r3, #1
 280 013c 9AB2     		uxth	r2, r3
 281 013e 7B68     		ldr	r3, [r7, #4]
 282 0140 1A84     		strh	r2, [r3, #32]	@ movhi
 283              	.L10:
 255:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 256:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 257:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Write to I2Cx CCR */
 258:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   I2Cx->CCR = tmpreg;
 284              		.loc 1 258 0
 285 0142 7B68     		ldr	r3, [r7, #4]
 286 0144 FA8C     		ldrh	r2, [r7, #38]	@ movhi
 287 0146 9A83     		strh	r2, [r3, #28]	@ movhi
 259:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Enable the selected I2C peripheral */
 260:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   I2Cx->CR1 |= I2C_CR1_PE;
 288              		.loc 1 260 0
 289 0148 7B68     		ldr	r3, [r7, #4]
 290 014a 1B88     		ldrh	r3, [r3, #0]	@ movhi
 291 014c 9BB2     		uxth	r3, r3
 292 014e 43F00103 		orr	r3, r3, #1
 293 0152 9AB2     		uxth	r2, r3
 294 0154 7B68     		ldr	r3, [r7, #4]
 295 0156 1A80     		strh	r2, [r3, #0]	@ movhi
 261:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 262:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /*---------------------------- I2Cx CR1 Configuration ------------------------*/
 263:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Get the I2Cx CR1 value */
 264:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   tmpreg = I2Cx->CR1;
 296              		.loc 1 264 0
 297 0158 7B68     		ldr	r3, [r7, #4]
 298 015a 1B88     		ldrh	r3, [r3, #0]	@ movhi
 299 015c FB84     		strh	r3, [r7, #38]	@ movhi
 265:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Clear ACK, SMBTYPE and  SMBUS bits */
 266:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   tmpreg &= CR1_CLEAR_MASK;
 300              		.loc 1 266 0
 301 015e FB8C     		ldrh	r3, [r7, #38]	@ movhi
 302 0160 23F48063 		bic	r3, r3, #1024
 303 0164 23F00A03 		bic	r3, r3, #10
 304 0168 FB84     		strh	r3, [r7, #38]	@ movhi
 267:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Configure I2Cx: mode and acknowledgement */
 268:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Set SMBTYPE and SMBUS bits according to I2C_Mode value */
 269:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Set ACK bit according to I2C_Ack value */
 270:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   tmpreg |= (uint16_t)((uint32_t)I2C_InitStruct->I2C_Mode | I2C_InitStruct->I2C_Ack);
 305              		.loc 1 270 0
 306 016a 3B68     		ldr	r3, [r7, #0]
 307 016c 9A88     		ldrh	r2, [r3, #4]
 308 016e 3B68     		ldr	r3, [r7, #0]
 309 0170 5B89     		ldrh	r3, [r3, #10]
 310 0172 42EA0303 		orr	r3, r2, r3
 311 0176 9AB2     		uxth	r2, r3
 312 0178 FB8C     		ldrh	r3, [r7, #38]	@ movhi
 313 017a 42EA0303 		orr	r3, r2, r3
 314 017e FB84     		strh	r3, [r7, #38]	@ movhi
 271:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Write to I2Cx CR1 */
 272:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   I2Cx->CR1 = tmpreg;
 315              		.loc 1 272 0
 316 0180 7B68     		ldr	r3, [r7, #4]
 317 0182 FA8C     		ldrh	r2, [r7, #38]	@ movhi
 318 0184 1A80     		strh	r2, [r3, #0]	@ movhi
 273:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 274:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /*---------------------------- I2Cx OAR1 Configuration -----------------------*/
 275:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Set I2Cx Own Address1 and acknowledged address */
 276:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   I2Cx->OAR1 = (I2C_InitStruct->I2C_AcknowledgedAddress | I2C_InitStruct->I2C_OwnAddress1);
 319              		.loc 1 276 0
 320 0186 3B68     		ldr	r3, [r7, #0]
 321 0188 9A89     		ldrh	r2, [r3, #12]
 322 018a 3B68     		ldr	r3, [r7, #0]
 323 018c 1B89     		ldrh	r3, [r3, #8]
 324 018e 42EA0303 		orr	r3, r2, r3
 325 0192 9AB2     		uxth	r2, r3
 326 0194 7B68     		ldr	r3, [r7, #4]
 327 0196 1A81     		strh	r2, [r3, #8]	@ movhi
 277:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 328              		.loc 1 277 0
 329 0198 07F12807 		add	r7, r7, #40
 330 019c BD46     		mov	sp, r7
 331 019e 80BD     		pop	{r7, pc}
 332              	.L15:
 333              		.align	2
 334              	.L14:
 335 01a0 00127A00 		.word	8000000
 336 01a4 83DE1B43 		.word	1125899907
 337 01a8 A0860100 		.word	100000
 338 01ac D34D6210 		.word	274877907
 339              		.cfi_endproc
 340              	.LFE111:
 342              		.section	.text.I2C_StructInit,"ax",%progbits
 343              		.align	2
 344              		.global	I2C_StructInit
 345              		.thumb
 346              		.thumb_func
 348              	I2C_StructInit:
 349              	.LFB112:
 278:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 279:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
 280:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Fills each I2C_InitStruct member with its default value.
 281:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2C_InitStruct: pointer to an I2C_InitTypeDef structure which will be initialized.
 282:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval None
 283:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 284:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** void I2C_StructInit(I2C_InitTypeDef* I2C_InitStruct)
 285:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 350              		.loc 1 285 0
 351              		.cfi_startproc
 352              		@ args = 0, pretend = 0, frame = 8
 353              		@ frame_needed = 1, uses_anonymous_args = 0
 354              		@ link register save eliminated.
 355 0000 80B4     		push	{r7}
 356              	.LCFI6:
 357              		.cfi_def_cfa_offset 4
 358 0002 83B0     		sub	sp, sp, #12
 359              	.LCFI7:
 360              		.cfi_def_cfa_offset 16
 361 0004 00AF     		add	r7, sp, #0
 362              		.cfi_offset 7, -4
 363              	.LCFI8:
 364              		.cfi_def_cfa_register 7
 365 0006 7860     		str	r0, [r7, #4]
 286:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /*---------------- Reset I2C init structure parameters values ----------------*/
 287:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* initialize the I2C_ClockSpeed member */
 288:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   I2C_InitStruct->I2C_ClockSpeed = 5000;
 366              		.loc 1 288 0
 367 0008 7B68     		ldr	r3, [r7, #4]
 368 000a 41F28832 		movw	r2, #5000
 369 000e 1A60     		str	r2, [r3, #0]
 289:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Initialize the I2C_Mode member */
 290:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   I2C_InitStruct->I2C_Mode = I2C_Mode_I2C;
 370              		.loc 1 290 0
 371 0010 7B68     		ldr	r3, [r7, #4]
 372 0012 4FF00002 		mov	r2, #0
 373 0016 9A80     		strh	r2, [r3, #4]	@ movhi
 291:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Initialize the I2C_DutyCycle member */
 292:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   I2C_InitStruct->I2C_DutyCycle = I2C_DutyCycle_2;
 374              		.loc 1 292 0
 375 0018 7B68     		ldr	r3, [r7, #4]
 376 001a 4BF6FF72 		movw	r2, #49151
 377 001e DA80     		strh	r2, [r3, #6]	@ movhi
 293:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Initialize the I2C_OwnAddress1 member */
 294:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   I2C_InitStruct->I2C_OwnAddress1 = 0;
 378              		.loc 1 294 0
 379 0020 7B68     		ldr	r3, [r7, #4]
 380 0022 4FF00002 		mov	r2, #0
 381 0026 1A81     		strh	r2, [r3, #8]	@ movhi
 295:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Initialize the I2C_Ack member */
 296:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   I2C_InitStruct->I2C_Ack = I2C_Ack_Disable;
 382              		.loc 1 296 0
 383 0028 7B68     		ldr	r3, [r7, #4]
 384 002a 4FF00002 		mov	r2, #0
 385 002e 5A81     		strh	r2, [r3, #10]	@ movhi
 297:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Initialize the I2C_AcknowledgedAddress member */
 298:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   I2C_InitStruct->I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
 386              		.loc 1 298 0
 387 0030 7B68     		ldr	r3, [r7, #4]
 388 0032 4FF48042 		mov	r2, #16384
 389 0036 9A81     		strh	r2, [r3, #12]	@ movhi
 299:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 390              		.loc 1 299 0
 391 0038 07F10C07 		add	r7, r7, #12
 392 003c BD46     		mov	sp, r7
 393 003e 80BC     		pop	{r7}
 394 0040 7047     		bx	lr
 395              		.cfi_endproc
 396              	.LFE112:
 398 0042 00BF     		.section	.text.I2C_Cmd,"ax",%progbits
 399              		.align	2
 400              		.global	I2C_Cmd
 401              		.thumb
 402              		.thumb_func
 404              	I2C_Cmd:
 405              	.LFB113:
 300:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 301:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
 302:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Enables or disables the specified I2C peripheral.
 303:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 304:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  NewState: new state of the I2Cx peripheral. 
 305:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          This parameter can be: ENABLE or DISABLE.
 306:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval None
 307:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 308:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** void I2C_Cmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
 309:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 406              		.loc 1 309 0
 407              		.cfi_startproc
 408              		@ args = 0, pretend = 0, frame = 8
 409              		@ frame_needed = 1, uses_anonymous_args = 0
 410              		@ link register save eliminated.
 411 0000 80B4     		push	{r7}
 412              	.LCFI9:
 413              		.cfi_def_cfa_offset 4
 414 0002 83B0     		sub	sp, sp, #12
 415              	.LCFI10:
 416              		.cfi_def_cfa_offset 16
 417 0004 00AF     		add	r7, sp, #0
 418              		.cfi_offset 7, -4
 419              	.LCFI11:
 420              		.cfi_def_cfa_register 7
 421 0006 7860     		str	r0, [r7, #4]
 422 0008 0B46     		mov	r3, r1
 423 000a FB70     		strb	r3, [r7, #3]
 310:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
 311:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 312:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 313:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   if (NewState != DISABLE)
 424              		.loc 1 313 0
 425 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 426 000e 002B     		cmp	r3, #0
 427 0010 08D0     		beq	.L18
 314:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 315:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Enable the selected I2C peripheral */
 316:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR1 |= I2C_CR1_PE;
 428              		.loc 1 316 0
 429 0012 7B68     		ldr	r3, [r7, #4]
 430 0014 1B88     		ldrh	r3, [r3, #0]	@ movhi
 431 0016 9BB2     		uxth	r3, r3
 432 0018 43F00103 		orr	r3, r3, #1
 433 001c 9AB2     		uxth	r2, r3
 434 001e 7B68     		ldr	r3, [r7, #4]
 435 0020 1A80     		strh	r2, [r3, #0]	@ movhi
 436 0022 07E0     		b	.L17
 437              	.L18:
 317:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 318:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   else
 319:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 320:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Disable the selected I2C peripheral */
 321:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PE);
 438              		.loc 1 321 0
 439 0024 7B68     		ldr	r3, [r7, #4]
 440 0026 1B88     		ldrh	r3, [r3, #0]	@ movhi
 441 0028 9BB2     		uxth	r3, r3
 442 002a 23F00103 		bic	r3, r3, #1
 443 002e 9AB2     		uxth	r2, r3
 444 0030 7B68     		ldr	r3, [r7, #4]
 445 0032 1A80     		strh	r2, [r3, #0]	@ movhi
 446              	.L17:
 322:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 323:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 447              		.loc 1 323 0
 448 0034 07F10C07 		add	r7, r7, #12
 449 0038 BD46     		mov	sp, r7
 450 003a 80BC     		pop	{r7}
 451 003c 7047     		bx	lr
 452              		.cfi_endproc
 453              	.LFE113:
 455 003e 00BF     		.section	.text.I2C_GenerateSTART,"ax",%progbits
 456              		.align	2
 457              		.global	I2C_GenerateSTART
 458              		.thumb
 459              		.thumb_func
 461              	I2C_GenerateSTART:
 462              	.LFB114:
 324:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 325:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
 326:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Generates I2Cx communication START condition.
 327:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 328:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  NewState: new state of the I2C START condition generation.
 329:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          This parameter can be: ENABLE or DISABLE.
 330:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval None.
 331:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 332:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** void I2C_GenerateSTART(I2C_TypeDef* I2Cx, FunctionalState NewState)
 333:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 463              		.loc 1 333 0
 464              		.cfi_startproc
 465              		@ args = 0, pretend = 0, frame = 8
 466              		@ frame_needed = 1, uses_anonymous_args = 0
 467              		@ link register save eliminated.
 468 0000 80B4     		push	{r7}
 469              	.LCFI12:
 470              		.cfi_def_cfa_offset 4
 471 0002 83B0     		sub	sp, sp, #12
 472              	.LCFI13:
 473              		.cfi_def_cfa_offset 16
 474 0004 00AF     		add	r7, sp, #0
 475              		.cfi_offset 7, -4
 476              	.LCFI14:
 477              		.cfi_def_cfa_register 7
 478 0006 7860     		str	r0, [r7, #4]
 479 0008 0B46     		mov	r3, r1
 480 000a FB70     		strb	r3, [r7, #3]
 334:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
 335:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 336:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 337:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   if (NewState != DISABLE)
 481              		.loc 1 337 0
 482 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 483 000e 002B     		cmp	r3, #0
 484 0010 08D0     		beq	.L21
 338:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 339:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Generate a START condition */
 340:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR1 |= I2C_CR1_START;
 485              		.loc 1 340 0
 486 0012 7B68     		ldr	r3, [r7, #4]
 487 0014 1B88     		ldrh	r3, [r3, #0]	@ movhi
 488 0016 9BB2     		uxth	r3, r3
 489 0018 43F48073 		orr	r3, r3, #256
 490 001c 9AB2     		uxth	r2, r3
 491 001e 7B68     		ldr	r3, [r7, #4]
 492 0020 1A80     		strh	r2, [r3, #0]	@ movhi
 493 0022 07E0     		b	.L20
 494              	.L21:
 341:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 342:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   else
 343:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 344:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Disable the START condition generation */
 345:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_START);
 495              		.loc 1 345 0
 496 0024 7B68     		ldr	r3, [r7, #4]
 497 0026 1B88     		ldrh	r3, [r3, #0]	@ movhi
 498 0028 9BB2     		uxth	r3, r3
 499 002a 23F48073 		bic	r3, r3, #256
 500 002e 9AB2     		uxth	r2, r3
 501 0030 7B68     		ldr	r3, [r7, #4]
 502 0032 1A80     		strh	r2, [r3, #0]	@ movhi
 503              	.L20:
 346:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 347:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 504              		.loc 1 347 0
 505 0034 07F10C07 		add	r7, r7, #12
 506 0038 BD46     		mov	sp, r7
 507 003a 80BC     		pop	{r7}
 508 003c 7047     		bx	lr
 509              		.cfi_endproc
 510              	.LFE114:
 512 003e 00BF     		.section	.text.I2C_GenerateSTOP,"ax",%progbits
 513              		.align	2
 514              		.global	I2C_GenerateSTOP
 515              		.thumb
 516              		.thumb_func
 518              	I2C_GenerateSTOP:
 519              	.LFB115:
 348:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 349:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
 350:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Generates I2Cx communication STOP condition.
 351:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 352:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  NewState: new state of the I2C STOP condition generation.
 353:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          This parameter can be: ENABLE or DISABLE.
 354:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval None.
 355:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 356:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** void I2C_GenerateSTOP(I2C_TypeDef* I2Cx, FunctionalState NewState)
 357:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 520              		.loc 1 357 0
 521              		.cfi_startproc
 522              		@ args = 0, pretend = 0, frame = 8
 523              		@ frame_needed = 1, uses_anonymous_args = 0
 524              		@ link register save eliminated.
 525 0000 80B4     		push	{r7}
 526              	.LCFI15:
 527              		.cfi_def_cfa_offset 4
 528 0002 83B0     		sub	sp, sp, #12
 529              	.LCFI16:
 530              		.cfi_def_cfa_offset 16
 531 0004 00AF     		add	r7, sp, #0
 532              		.cfi_offset 7, -4
 533              	.LCFI17:
 534              		.cfi_def_cfa_register 7
 535 0006 7860     		str	r0, [r7, #4]
 536 0008 0B46     		mov	r3, r1
 537 000a FB70     		strb	r3, [r7, #3]
 358:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
 359:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 360:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 361:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   if (NewState != DISABLE)
 538              		.loc 1 361 0
 539 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 540 000e 002B     		cmp	r3, #0
 541 0010 08D0     		beq	.L24
 362:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 363:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Generate a STOP condition */
 364:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR1 |= I2C_CR1_STOP;
 542              		.loc 1 364 0
 543 0012 7B68     		ldr	r3, [r7, #4]
 544 0014 1B88     		ldrh	r3, [r3, #0]	@ movhi
 545 0016 9BB2     		uxth	r3, r3
 546 0018 43F40073 		orr	r3, r3, #512
 547 001c 9AB2     		uxth	r2, r3
 548 001e 7B68     		ldr	r3, [r7, #4]
 549 0020 1A80     		strh	r2, [r3, #0]	@ movhi
 550 0022 07E0     		b	.L23
 551              	.L24:
 365:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 366:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   else
 367:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 368:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Disable the STOP condition generation */
 369:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_STOP);
 552              		.loc 1 369 0
 553 0024 7B68     		ldr	r3, [r7, #4]
 554 0026 1B88     		ldrh	r3, [r3, #0]	@ movhi
 555 0028 9BB2     		uxth	r3, r3
 556 002a 23F40073 		bic	r3, r3, #512
 557 002e 9AB2     		uxth	r2, r3
 558 0030 7B68     		ldr	r3, [r7, #4]
 559 0032 1A80     		strh	r2, [r3, #0]	@ movhi
 560              	.L23:
 370:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 371:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 561              		.loc 1 371 0
 562 0034 07F10C07 		add	r7, r7, #12
 563 0038 BD46     		mov	sp, r7
 564 003a 80BC     		pop	{r7}
 565 003c 7047     		bx	lr
 566              		.cfi_endproc
 567              	.LFE115:
 569 003e 00BF     		.section	.text.I2C_Send7bitAddress,"ax",%progbits
 570              		.align	2
 571              		.global	I2C_Send7bitAddress
 572              		.thumb
 573              		.thumb_func
 575              	I2C_Send7bitAddress:
 576              	.LFB116:
 372:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 373:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
 374:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Transmits the address byte to select the slave device.
 375:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 376:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  Address: specifies the slave address which will be transmitted
 377:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2C_Direction: specifies whether the I2C device will be a Transmitter
 378:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *         or a Receiver. 
 379:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          This parameter can be one of the following values
 380:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_Direction_Transmitter: Transmitter mode
 381:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_Direction_Receiver: Receiver mode
 382:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval None.
 383:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 384:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** void I2C_Send7bitAddress(I2C_TypeDef* I2Cx, uint8_t Address, uint8_t I2C_Direction)
 385:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 577              		.loc 1 385 0
 578              		.cfi_startproc
 579              		@ args = 0, pretend = 0, frame = 8
 580              		@ frame_needed = 1, uses_anonymous_args = 0
 581              		@ link register save eliminated.
 582 0000 80B4     		push	{r7}
 583              	.LCFI18:
 584              		.cfi_def_cfa_offset 4
 585 0002 83B0     		sub	sp, sp, #12
 586              	.LCFI19:
 587              		.cfi_def_cfa_offset 16
 588 0004 00AF     		add	r7, sp, #0
 589              		.cfi_offset 7, -4
 590              	.LCFI20:
 591              		.cfi_def_cfa_register 7
 592 0006 7860     		str	r0, [r7, #4]
 593 0008 1346     		mov	r3, r2
 594 000a 0A46     		mov	r2, r1
 595 000c FA70     		strb	r2, [r7, #3]
 596 000e BB70     		strb	r3, [r7, #2]
 386:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
 387:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 388:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_DIRECTION(I2C_Direction));
 389:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Test on the direction to set/reset the read/write bit */
 390:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   if (I2C_Direction != I2C_Direction_Transmitter)
 597              		.loc 1 390 0
 598 0010 BB78     		ldrb	r3, [r7, #2]	@ zero_extendqisi2
 599 0012 002B     		cmp	r3, #0
 600 0014 04D0     		beq	.L27
 391:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 392:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Set the address bit0 for read */
 393:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     Address |= I2C_OAR1_ADD0;
 601              		.loc 1 393 0
 602 0016 FB78     		ldrb	r3, [r7, #3]
 603 0018 43F00103 		orr	r3, r3, #1
 604 001c FB70     		strb	r3, [r7, #3]
 605 001e 03E0     		b	.L28
 606              	.L27:
 394:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 395:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   else
 396:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 397:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Reset the address bit0 for write */
 398:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     Address &= (uint8_t)~((uint8_t)I2C_OAR1_ADD0);
 607              		.loc 1 398 0
 608 0020 FB78     		ldrb	r3, [r7, #3]
 609 0022 23F00103 		bic	r3, r3, #1
 610 0026 FB70     		strb	r3, [r7, #3]
 611              	.L28:
 399:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 400:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Send the address */
 401:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   I2Cx->DR = Address;
 612              		.loc 1 401 0
 613 0028 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 614 002a 9AB2     		uxth	r2, r3
 615 002c 7B68     		ldr	r3, [r7, #4]
 616 002e 1A82     		strh	r2, [r3, #16]	@ movhi
 402:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 617              		.loc 1 402 0
 618 0030 07F10C07 		add	r7, r7, #12
 619 0034 BD46     		mov	sp, r7
 620 0036 80BC     		pop	{r7}
 621 0038 7047     		bx	lr
 622              		.cfi_endproc
 623              	.LFE116:
 625 003a 00BF     		.section	.text.I2C_AcknowledgeConfig,"ax",%progbits
 626              		.align	2
 627              		.global	I2C_AcknowledgeConfig
 628              		.thumb
 629              		.thumb_func
 631              	I2C_AcknowledgeConfig:
 632              	.LFB117:
 403:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 404:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
 405:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Enables or disables the specified I2C acknowledge feature.
 406:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 407:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  NewState: new state of the I2C Acknowledgement.
 408:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          This parameter can be: ENABLE or DISABLE.
 409:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval None.
 410:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 411:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** void I2C_AcknowledgeConfig(I2C_TypeDef* I2Cx, FunctionalState NewState)
 412:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 633              		.loc 1 412 0
 634              		.cfi_startproc
 635              		@ args = 0, pretend = 0, frame = 8
 636              		@ frame_needed = 1, uses_anonymous_args = 0
 637              		@ link register save eliminated.
 638 0000 80B4     		push	{r7}
 639              	.LCFI21:
 640              		.cfi_def_cfa_offset 4
 641 0002 83B0     		sub	sp, sp, #12
 642              	.LCFI22:
 643              		.cfi_def_cfa_offset 16
 644 0004 00AF     		add	r7, sp, #0
 645              		.cfi_offset 7, -4
 646              	.LCFI23:
 647              		.cfi_def_cfa_register 7
 648 0006 7860     		str	r0, [r7, #4]
 649 0008 0B46     		mov	r3, r1
 650 000a FB70     		strb	r3, [r7, #3]
 413:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
 414:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 415:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 416:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   if (NewState != DISABLE)
 651              		.loc 1 416 0
 652 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 653 000e 002B     		cmp	r3, #0
 654 0010 08D0     		beq	.L30
 417:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 418:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Enable the acknowledgement */
 419:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR1 |= I2C_CR1_ACK;
 655              		.loc 1 419 0
 656 0012 7B68     		ldr	r3, [r7, #4]
 657 0014 1B88     		ldrh	r3, [r3, #0]	@ movhi
 658 0016 9BB2     		uxth	r3, r3
 659 0018 43F48063 		orr	r3, r3, #1024
 660 001c 9AB2     		uxth	r2, r3
 661 001e 7B68     		ldr	r3, [r7, #4]
 662 0020 1A80     		strh	r2, [r3, #0]	@ movhi
 663 0022 07E0     		b	.L29
 664              	.L30:
 420:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 421:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   else
 422:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 423:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Disable the acknowledgement */
 424:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ACK);
 665              		.loc 1 424 0
 666 0024 7B68     		ldr	r3, [r7, #4]
 667 0026 1B88     		ldrh	r3, [r3, #0]	@ movhi
 668 0028 9BB2     		uxth	r3, r3
 669 002a 23F48063 		bic	r3, r3, #1024
 670 002e 9AB2     		uxth	r2, r3
 671 0030 7B68     		ldr	r3, [r7, #4]
 672 0032 1A80     		strh	r2, [r3, #0]	@ movhi
 673              	.L29:
 425:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 426:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 674              		.loc 1 426 0
 675 0034 07F10C07 		add	r7, r7, #12
 676 0038 BD46     		mov	sp, r7
 677 003a 80BC     		pop	{r7}
 678 003c 7047     		bx	lr
 679              		.cfi_endproc
 680              	.LFE117:
 682 003e 00BF     		.section	.text.I2C_OwnAddress2Config,"ax",%progbits
 683              		.align	2
 684              		.global	I2C_OwnAddress2Config
 685              		.thumb
 686              		.thumb_func
 688              	I2C_OwnAddress2Config:
 689              	.LFB118:
 427:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 428:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
 429:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Configures the specified I2C own address2.
 430:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 431:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  Address: specifies the 7bit I2C own address2.
 432:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval None.
 433:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 434:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** void I2C_OwnAddress2Config(I2C_TypeDef* I2Cx, uint8_t Address)
 435:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 690              		.loc 1 435 0
 691              		.cfi_startproc
 692              		@ args = 0, pretend = 0, frame = 16
 693              		@ frame_needed = 1, uses_anonymous_args = 0
 694              		@ link register save eliminated.
 695 0000 80B4     		push	{r7}
 696              	.LCFI24:
 697              		.cfi_def_cfa_offset 4
 698 0002 85B0     		sub	sp, sp, #20
 699              	.LCFI25:
 700              		.cfi_def_cfa_offset 24
 701 0004 00AF     		add	r7, sp, #0
 702              		.cfi_offset 7, -4
 703              	.LCFI26:
 704              		.cfi_def_cfa_register 7
 705 0006 7860     		str	r0, [r7, #4]
 706 0008 0B46     		mov	r3, r1
 707 000a FB70     		strb	r3, [r7, #3]
 436:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   uint16_t tmpreg = 0;
 708              		.loc 1 436 0
 709 000c 4FF00003 		mov	r3, #0
 710 0010 FB81     		strh	r3, [r7, #14]	@ movhi
 437:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 438:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
 439:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 440:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 441:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Get the old register value */
 442:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   tmpreg = I2Cx->OAR2;
 711              		.loc 1 442 0
 712 0012 7B68     		ldr	r3, [r7, #4]
 713 0014 9B89     		ldrh	r3, [r3, #12]	@ movhi
 714 0016 FB81     		strh	r3, [r7, #14]	@ movhi
 443:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 444:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Reset I2Cx Own address2 bit [7:1] */
 445:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   tmpreg &= (uint16_t)~((uint16_t)I2C_OAR2_ADD2);
 715              		.loc 1 445 0
 716 0018 FB89     		ldrh	r3, [r7, #14]	@ movhi
 717 001a 23F0FE03 		bic	r3, r3, #254
 718 001e FB81     		strh	r3, [r7, #14]	@ movhi
 446:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 447:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Set I2Cx Own address2 */
 448:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   tmpreg |= (uint16_t)((uint16_t)Address & (uint16_t)0x00FE);
 719              		.loc 1 448 0
 720 0020 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 721 0022 9BB2     		uxth	r3, r3
 722 0024 03F0FE03 		and	r3, r3, #254
 723 0028 9AB2     		uxth	r2, r3
 724 002a FB89     		ldrh	r3, [r7, #14]
 725 002c 42EA0303 		orr	r3, r2, r3
 726 0030 9BB2     		uxth	r3, r3
 727 0032 FB81     		strh	r3, [r7, #14]	@ movhi
 449:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 450:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Store the new register value */
 451:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   I2Cx->OAR2 = tmpreg;
 728              		.loc 1 451 0
 729 0034 7B68     		ldr	r3, [r7, #4]
 730 0036 FA89     		ldrh	r2, [r7, #14]	@ movhi
 731 0038 9A81     		strh	r2, [r3, #12]	@ movhi
 452:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 732              		.loc 1 452 0
 733 003a 07F11407 		add	r7, r7, #20
 734 003e BD46     		mov	sp, r7
 735 0040 80BC     		pop	{r7}
 736 0042 7047     		bx	lr
 737              		.cfi_endproc
 738              	.LFE118:
 740              		.section	.text.I2C_DualAddressCmd,"ax",%progbits
 741              		.align	2
 742              		.global	I2C_DualAddressCmd
 743              		.thumb
 744              		.thumb_func
 746              	I2C_DualAddressCmd:
 747              	.LFB119:
 453:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 454:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
 455:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Enables or disables the specified I2C dual addressing mode.
 456:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 457:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  NewState: new state of the I2C dual addressing mode.
 458:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          This parameter can be: ENABLE or DISABLE.
 459:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval None
 460:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 461:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** void I2C_DualAddressCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
 462:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 748              		.loc 1 462 0
 749              		.cfi_startproc
 750              		@ args = 0, pretend = 0, frame = 8
 751              		@ frame_needed = 1, uses_anonymous_args = 0
 752              		@ link register save eliminated.
 753 0000 80B4     		push	{r7}
 754              	.LCFI27:
 755              		.cfi_def_cfa_offset 4
 756 0002 83B0     		sub	sp, sp, #12
 757              	.LCFI28:
 758              		.cfi_def_cfa_offset 16
 759 0004 00AF     		add	r7, sp, #0
 760              		.cfi_offset 7, -4
 761              	.LCFI29:
 762              		.cfi_def_cfa_register 7
 763 0006 7860     		str	r0, [r7, #4]
 764 0008 0B46     		mov	r3, r1
 765 000a FB70     		strb	r3, [r7, #3]
 463:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
 464:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 465:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 466:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   if (NewState != DISABLE)
 766              		.loc 1 466 0
 767 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 768 000e 002B     		cmp	r3, #0
 769 0010 08D0     		beq	.L34
 467:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 468:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Enable dual addressing mode */
 469:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->OAR2 |= I2C_OAR2_ENDUAL;
 770              		.loc 1 469 0
 771 0012 7B68     		ldr	r3, [r7, #4]
 772 0014 9B89     		ldrh	r3, [r3, #12]	@ movhi
 773 0016 9BB2     		uxth	r3, r3
 774 0018 43F00103 		orr	r3, r3, #1
 775 001c 9AB2     		uxth	r2, r3
 776 001e 7B68     		ldr	r3, [r7, #4]
 777 0020 9A81     		strh	r2, [r3, #12]	@ movhi
 778 0022 07E0     		b	.L33
 779              	.L34:
 470:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 471:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   else
 472:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 473:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Disable dual addressing mode */
 474:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->OAR2 &= (uint16_t)~((uint16_t)I2C_OAR2_ENDUAL);
 780              		.loc 1 474 0
 781 0024 7B68     		ldr	r3, [r7, #4]
 782 0026 9B89     		ldrh	r3, [r3, #12]	@ movhi
 783 0028 9BB2     		uxth	r3, r3
 784 002a 23F00103 		bic	r3, r3, #1
 785 002e 9AB2     		uxth	r2, r3
 786 0030 7B68     		ldr	r3, [r7, #4]
 787 0032 9A81     		strh	r2, [r3, #12]	@ movhi
 788              	.L33:
 475:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 476:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 789              		.loc 1 476 0
 790 0034 07F10C07 		add	r7, r7, #12
 791 0038 BD46     		mov	sp, r7
 792 003a 80BC     		pop	{r7}
 793 003c 7047     		bx	lr
 794              		.cfi_endproc
 795              	.LFE119:
 797 003e 00BF     		.section	.text.I2C_GeneralCallCmd,"ax",%progbits
 798              		.align	2
 799              		.global	I2C_GeneralCallCmd
 800              		.thumb
 801              		.thumb_func
 803              	I2C_GeneralCallCmd:
 804              	.LFB120:
 477:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 478:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
 479:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Enables or disables the specified I2C general call feature.
 480:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 481:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  NewState: new state of the I2C General call.
 482:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          This parameter can be: ENABLE or DISABLE.
 483:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval None
 484:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 485:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** void I2C_GeneralCallCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
 486:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 805              		.loc 1 486 0
 806              		.cfi_startproc
 807              		@ args = 0, pretend = 0, frame = 8
 808              		@ frame_needed = 1, uses_anonymous_args = 0
 809              		@ link register save eliminated.
 810 0000 80B4     		push	{r7}
 811              	.LCFI30:
 812              		.cfi_def_cfa_offset 4
 813 0002 83B0     		sub	sp, sp, #12
 814              	.LCFI31:
 815              		.cfi_def_cfa_offset 16
 816 0004 00AF     		add	r7, sp, #0
 817              		.cfi_offset 7, -4
 818              	.LCFI32:
 819              		.cfi_def_cfa_register 7
 820 0006 7860     		str	r0, [r7, #4]
 821 0008 0B46     		mov	r3, r1
 822 000a FB70     		strb	r3, [r7, #3]
 487:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
 488:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 489:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 490:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   if (NewState != DISABLE)
 823              		.loc 1 490 0
 824 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 825 000e 002B     		cmp	r3, #0
 826 0010 08D0     		beq	.L37
 491:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 492:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Enable generall call */
 493:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR1 |= I2C_CR1_ENGC;
 827              		.loc 1 493 0
 828 0012 7B68     		ldr	r3, [r7, #4]
 829 0014 1B88     		ldrh	r3, [r3, #0]	@ movhi
 830 0016 9BB2     		uxth	r3, r3
 831 0018 43F04003 		orr	r3, r3, #64
 832 001c 9AB2     		uxth	r2, r3
 833 001e 7B68     		ldr	r3, [r7, #4]
 834 0020 1A80     		strh	r2, [r3, #0]	@ movhi
 835 0022 07E0     		b	.L36
 836              	.L37:
 494:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 495:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   else
 496:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 497:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Disable generall call */
 498:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ENGC);
 837              		.loc 1 498 0
 838 0024 7B68     		ldr	r3, [r7, #4]
 839 0026 1B88     		ldrh	r3, [r3, #0]	@ movhi
 840 0028 9BB2     		uxth	r3, r3
 841 002a 23F04003 		bic	r3, r3, #64
 842 002e 9AB2     		uxth	r2, r3
 843 0030 7B68     		ldr	r3, [r7, #4]
 844 0032 1A80     		strh	r2, [r3, #0]	@ movhi
 845              	.L36:
 499:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 500:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 846              		.loc 1 500 0
 847 0034 07F10C07 		add	r7, r7, #12
 848 0038 BD46     		mov	sp, r7
 849 003a 80BC     		pop	{r7}
 850 003c 7047     		bx	lr
 851              		.cfi_endproc
 852              	.LFE120:
 854 003e 00BF     		.section	.text.I2C_SoftwareResetCmd,"ax",%progbits
 855              		.align	2
 856              		.global	I2C_SoftwareResetCmd
 857              		.thumb
 858              		.thumb_func
 860              	I2C_SoftwareResetCmd:
 861              	.LFB121:
 501:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 502:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
 503:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Enables or disables the specified I2C software reset.
 504:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @note   When software reset is enabled, the I2C IOs are released (this can
 505:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *         be useful to recover from bus errors).  
 506:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 507:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  NewState: new state of the I2C software reset.
 508:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          This parameter can be: ENABLE or DISABLE.
 509:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval None
 510:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 511:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** void I2C_SoftwareResetCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
 512:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 862              		.loc 1 512 0
 863              		.cfi_startproc
 864              		@ args = 0, pretend = 0, frame = 8
 865              		@ frame_needed = 1, uses_anonymous_args = 0
 866              		@ link register save eliminated.
 867 0000 80B4     		push	{r7}
 868              	.LCFI33:
 869              		.cfi_def_cfa_offset 4
 870 0002 83B0     		sub	sp, sp, #12
 871              	.LCFI34:
 872              		.cfi_def_cfa_offset 16
 873 0004 00AF     		add	r7, sp, #0
 874              		.cfi_offset 7, -4
 875              	.LCFI35:
 876              		.cfi_def_cfa_register 7
 877 0006 7860     		str	r0, [r7, #4]
 878 0008 0B46     		mov	r3, r1
 879 000a FB70     		strb	r3, [r7, #3]
 513:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
 514:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 515:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 516:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   if (NewState != DISABLE)
 880              		.loc 1 516 0
 881 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 882 000e 002B     		cmp	r3, #0
 883 0010 0AD0     		beq	.L40
 517:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 518:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Peripheral under reset */
 519:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR1 |= I2C_CR1_SWRST;
 884              		.loc 1 519 0
 885 0012 7B68     		ldr	r3, [r7, #4]
 886 0014 1B88     		ldrh	r3, [r3, #0]	@ movhi
 887 0016 9BB2     		uxth	r3, r3
 888 0018 6FEA4343 		mvn	r3, r3, lsl #17
 889 001c 6FEA5343 		mvn	r3, r3, lsr #17
 890 0020 9AB2     		uxth	r2, r3
 891 0022 7B68     		ldr	r3, [r7, #4]
 892 0024 1A80     		strh	r2, [r3, #0]	@ movhi
 893 0026 09E0     		b	.L39
 894              	.L40:
 520:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 521:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   else
 522:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 523:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Peripheral not under reset */
 524:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_SWRST);
 895              		.loc 1 524 0
 896 0028 7B68     		ldr	r3, [r7, #4]
 897 002a 1B88     		ldrh	r3, [r3, #0]	@ movhi
 898 002c 9BB2     		uxth	r3, r3
 899 002e 4FEA4343 		lsl	r3, r3, #17
 900 0032 4FEA5343 		lsr	r3, r3, #17
 901 0036 9AB2     		uxth	r2, r3
 902 0038 7B68     		ldr	r3, [r7, #4]
 903 003a 1A80     		strh	r2, [r3, #0]	@ movhi
 904              	.L39:
 525:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 526:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 905              		.loc 1 526 0
 906 003c 07F10C07 		add	r7, r7, #12
 907 0040 BD46     		mov	sp, r7
 908 0042 80BC     		pop	{r7}
 909 0044 7047     		bx	lr
 910              		.cfi_endproc
 911              	.LFE121:
 913 0046 00BF     		.section	.text.I2C_StretchClockCmd,"ax",%progbits
 914              		.align	2
 915              		.global	I2C_StretchClockCmd
 916              		.thumb
 917              		.thumb_func
 919              	I2C_StretchClockCmd:
 920              	.LFB122:
 527:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 528:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
 529:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Enables or disables the specified I2C Clock stretching.
 530:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 531:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  NewState: new state of the I2Cx Clock stretching.
 532:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          This parameter can be: ENABLE or DISABLE.
 533:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval None
 534:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 535:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** void I2C_StretchClockCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
 536:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 921              		.loc 1 536 0
 922              		.cfi_startproc
 923              		@ args = 0, pretend = 0, frame = 8
 924              		@ frame_needed = 1, uses_anonymous_args = 0
 925              		@ link register save eliminated.
 926 0000 80B4     		push	{r7}
 927              	.LCFI36:
 928              		.cfi_def_cfa_offset 4
 929 0002 83B0     		sub	sp, sp, #12
 930              	.LCFI37:
 931              		.cfi_def_cfa_offset 16
 932 0004 00AF     		add	r7, sp, #0
 933              		.cfi_offset 7, -4
 934              	.LCFI38:
 935              		.cfi_def_cfa_register 7
 936 0006 7860     		str	r0, [r7, #4]
 937 0008 0B46     		mov	r3, r1
 938 000a FB70     		strb	r3, [r7, #3]
 537:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
 538:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 539:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 540:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   if (NewState == DISABLE)
 939              		.loc 1 540 0
 940 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 941 000e 002B     		cmp	r3, #0
 942 0010 08D1     		bne	.L43
 541:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 542:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Enable the selected I2C Clock stretching */
 543:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR1 |= I2C_CR1_NOSTRETCH;
 943              		.loc 1 543 0
 944 0012 7B68     		ldr	r3, [r7, #4]
 945 0014 1B88     		ldrh	r3, [r3, #0]	@ movhi
 946 0016 9BB2     		uxth	r3, r3
 947 0018 43F08003 		orr	r3, r3, #128
 948 001c 9AB2     		uxth	r2, r3
 949 001e 7B68     		ldr	r3, [r7, #4]
 950 0020 1A80     		strh	r2, [r3, #0]	@ movhi
 951 0022 07E0     		b	.L42
 952              	.L43:
 544:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 545:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   else
 546:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 547:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Disable the selected I2C Clock stretching */
 548:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_NOSTRETCH);
 953              		.loc 1 548 0
 954 0024 7B68     		ldr	r3, [r7, #4]
 955 0026 1B88     		ldrh	r3, [r3, #0]	@ movhi
 956 0028 9BB2     		uxth	r3, r3
 957 002a 23F08003 		bic	r3, r3, #128
 958 002e 9AB2     		uxth	r2, r3
 959 0030 7B68     		ldr	r3, [r7, #4]
 960 0032 1A80     		strh	r2, [r3, #0]	@ movhi
 961              	.L42:
 549:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 550:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 962              		.loc 1 550 0
 963 0034 07F10C07 		add	r7, r7, #12
 964 0038 BD46     		mov	sp, r7
 965 003a 80BC     		pop	{r7}
 966 003c 7047     		bx	lr
 967              		.cfi_endproc
 968              	.LFE122:
 970 003e 00BF     		.section	.text.I2C_FastModeDutyCycleConfig,"ax",%progbits
 971              		.align	2
 972              		.global	I2C_FastModeDutyCycleConfig
 973              		.thumb
 974              		.thumb_func
 976              	I2C_FastModeDutyCycleConfig:
 977              	.LFB123:
 551:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 552:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
 553:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Selects the specified I2C fast mode duty cycle.
 554:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 555:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2C_DutyCycle: specifies the fast mode duty cycle.
 556:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          This parameter can be one of the following values:
 557:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_DutyCycle_2: I2C fast mode Tlow/Thigh = 2
 558:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_DutyCycle_16_9: I2C fast mode Tlow/Thigh = 16/9
 559:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval None
 560:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 561:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** void I2C_FastModeDutyCycleConfig(I2C_TypeDef* I2Cx, uint16_t I2C_DutyCycle)
 562:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 978              		.loc 1 562 0
 979              		.cfi_startproc
 980              		@ args = 0, pretend = 0, frame = 8
 981              		@ frame_needed = 1, uses_anonymous_args = 0
 982              		@ link register save eliminated.
 983 0000 80B4     		push	{r7}
 984              	.LCFI39:
 985              		.cfi_def_cfa_offset 4
 986 0002 83B0     		sub	sp, sp, #12
 987              	.LCFI40:
 988              		.cfi_def_cfa_offset 16
 989 0004 00AF     		add	r7, sp, #0
 990              		.cfi_offset 7, -4
 991              	.LCFI41:
 992              		.cfi_def_cfa_register 7
 993 0006 7860     		str	r0, [r7, #4]
 994 0008 0B46     		mov	r3, r1
 995 000a 7B80     		strh	r3, [r7, #2]	@ movhi
 563:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
 564:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 565:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_DUTY_CYCLE(I2C_DutyCycle));
 566:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   if (I2C_DutyCycle != I2C_DutyCycle_16_9)
 996              		.loc 1 566 0
 997 000c 7B88     		ldrh	r3, [r7, #2]
 998 000e B3F5804F 		cmp	r3, #16384
 999 0012 08D0     		beq	.L46
 567:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 568:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* I2C fast mode Tlow/Thigh=2 */
 569:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CCR &= I2C_DutyCycle_2;
 1000              		.loc 1 569 0
 1001 0014 7B68     		ldr	r3, [r7, #4]
 1002 0016 9B8B     		ldrh	r3, [r3, #28]	@ movhi
 1003 0018 9BB2     		uxth	r3, r3
 1004 001a 23F48043 		bic	r3, r3, #16384
 1005 001e 9AB2     		uxth	r2, r3
 1006 0020 7B68     		ldr	r3, [r7, #4]
 1007 0022 9A83     		strh	r2, [r3, #28]	@ movhi
 1008 0024 07E0     		b	.L45
 1009              	.L46:
 570:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 571:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   else
 572:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 573:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* I2C fast mode Tlow/Thigh=16/9 */
 574:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CCR |= I2C_DutyCycle_16_9;
 1010              		.loc 1 574 0
 1011 0026 7B68     		ldr	r3, [r7, #4]
 1012 0028 9B8B     		ldrh	r3, [r3, #28]	@ movhi
 1013 002a 9BB2     		uxth	r3, r3
 1014 002c 43F48043 		orr	r3, r3, #16384
 1015 0030 9AB2     		uxth	r2, r3
 1016 0032 7B68     		ldr	r3, [r7, #4]
 1017 0034 9A83     		strh	r2, [r3, #28]	@ movhi
 1018              	.L45:
 575:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 576:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 1019              		.loc 1 576 0
 1020 0036 07F10C07 		add	r7, r7, #12
 1021 003a BD46     		mov	sp, r7
 1022 003c 80BC     		pop	{r7}
 1023 003e 7047     		bx	lr
 1024              		.cfi_endproc
 1025              	.LFE123:
 1027              		.section	.text.I2C_NACKPositionConfig,"ax",%progbits
 1028              		.align	2
 1029              		.global	I2C_NACKPositionConfig
 1030              		.thumb
 1031              		.thumb_func
 1033              	I2C_NACKPositionConfig:
 1034              	.LFB124:
 577:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 578:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
 579:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Selects the specified I2C NACK position in master receiver mode.
 580:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @note   This function is useful in I2C Master Receiver mode when the number
 581:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *         of data to be received is equal to 2. In this case, this function 
 582:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *         should be called (with parameter I2C_NACKPosition_Next) before data 
 583:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *         reception starts,as described in the 2-byte reception procedure 
 584:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *         recommended in Reference Manual in Section: Master receiver.                
 585:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 586:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2C_NACKPosition: specifies the NACK position. 
 587:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          This parameter can be one of the following values:
 588:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_NACKPosition_Next: indicates that the next byte will be the last
 589:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *                                        received byte.  
 590:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_NACKPosition_Current: indicates that current byte is the last 
 591:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *                                           received byte.
 592:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            
 593:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @note    This function configures the same bit (POS) as I2C_PECPositionConfig() 
 594:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          but is intended to be used in I2C mode while I2C_PECPositionConfig() 
 595:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          is intended to used in SMBUS mode. 
 596:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            
 597:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval None
 598:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 599:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** void I2C_NACKPositionConfig(I2C_TypeDef* I2Cx, uint16_t I2C_NACKPosition)
 600:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 1035              		.loc 1 600 0
 1036              		.cfi_startproc
 1037              		@ args = 0, pretend = 0, frame = 8
 1038              		@ frame_needed = 1, uses_anonymous_args = 0
 1039              		@ link register save eliminated.
 1040 0000 80B4     		push	{r7}
 1041              	.LCFI42:
 1042              		.cfi_def_cfa_offset 4
 1043 0002 83B0     		sub	sp, sp, #12
 1044              	.LCFI43:
 1045              		.cfi_def_cfa_offset 16
 1046 0004 00AF     		add	r7, sp, #0
 1047              		.cfi_offset 7, -4
 1048              	.LCFI44:
 1049              		.cfi_def_cfa_register 7
 1050 0006 7860     		str	r0, [r7, #4]
 1051 0008 0B46     		mov	r3, r1
 1052 000a 7B80     		strh	r3, [r7, #2]	@ movhi
 601:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
 602:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 603:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_NACK_POSITION(I2C_NACKPosition));
 604:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   
 605:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the input parameter */
 606:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   if (I2C_NACKPosition == I2C_NACKPosition_Next)
 1053              		.loc 1 606 0
 1054 000c 7B88     		ldrh	r3, [r7, #2]
 1055 000e B3F5006F 		cmp	r3, #2048
 1056 0012 08D1     		bne	.L49
 607:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 608:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Next byte in shift register is the last received byte */
 609:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR1 |= I2C_NACKPosition_Next;
 1057              		.loc 1 609 0
 1058 0014 7B68     		ldr	r3, [r7, #4]
 1059 0016 1B88     		ldrh	r3, [r3, #0]	@ movhi
 1060 0018 9BB2     		uxth	r3, r3
 1061 001a 43F40063 		orr	r3, r3, #2048
 1062 001e 9AB2     		uxth	r2, r3
 1063 0020 7B68     		ldr	r3, [r7, #4]
 1064 0022 1A80     		strh	r2, [r3, #0]	@ movhi
 1065 0024 07E0     		b	.L48
 1066              	.L49:
 610:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 611:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   else
 612:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 613:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Current byte in shift register is the last received byte */
 614:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR1 &= I2C_NACKPosition_Current;
 1067              		.loc 1 614 0
 1068 0026 7B68     		ldr	r3, [r7, #4]
 1069 0028 1B88     		ldrh	r3, [r3, #0]	@ movhi
 1070 002a 9BB2     		uxth	r3, r3
 1071 002c 23F40063 		bic	r3, r3, #2048
 1072 0030 9AB2     		uxth	r2, r3
 1073 0032 7B68     		ldr	r3, [r7, #4]
 1074 0034 1A80     		strh	r2, [r3, #0]	@ movhi
 1075              	.L48:
 615:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 616:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 1076              		.loc 1 616 0
 1077 0036 07F10C07 		add	r7, r7, #12
 1078 003a BD46     		mov	sp, r7
 1079 003c 80BC     		pop	{r7}
 1080 003e 7047     		bx	lr
 1081              		.cfi_endproc
 1082              	.LFE124:
 1084              		.section	.text.I2C_SMBusAlertConfig,"ax",%progbits
 1085              		.align	2
 1086              		.global	I2C_SMBusAlertConfig
 1087              		.thumb
 1088              		.thumb_func
 1090              	I2C_SMBusAlertConfig:
 1091              	.LFB125:
 617:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 618:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
 619:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Drives the SMBusAlert pin high or low for the specified I2C.
 620:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 621:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2C_SMBusAlert: specifies SMBAlert pin level. 
 622:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          This parameter can be one of the following values:
 623:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_SMBusAlert_Low: SMBAlert pin driven low
 624:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_SMBusAlert_High: SMBAlert pin driven high
 625:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval None
 626:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 627:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** void I2C_SMBusAlertConfig(I2C_TypeDef* I2Cx, uint16_t I2C_SMBusAlert)
 628:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 1092              		.loc 1 628 0
 1093              		.cfi_startproc
 1094              		@ args = 0, pretend = 0, frame = 8
 1095              		@ frame_needed = 1, uses_anonymous_args = 0
 1096              		@ link register save eliminated.
 1097 0000 80B4     		push	{r7}
 1098              	.LCFI45:
 1099              		.cfi_def_cfa_offset 4
 1100 0002 83B0     		sub	sp, sp, #12
 1101              	.LCFI46:
 1102              		.cfi_def_cfa_offset 16
 1103 0004 00AF     		add	r7, sp, #0
 1104              		.cfi_offset 7, -4
 1105              	.LCFI47:
 1106              		.cfi_def_cfa_register 7
 1107 0006 7860     		str	r0, [r7, #4]
 1108 0008 0B46     		mov	r3, r1
 1109 000a 7B80     		strh	r3, [r7, #2]	@ movhi
 629:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
 630:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 631:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_SMBUS_ALERT(I2C_SMBusAlert));
 632:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   if (I2C_SMBusAlert == I2C_SMBusAlert_Low)
 1110              		.loc 1 632 0
 1111 000c 7B88     		ldrh	r3, [r7, #2]
 1112 000e B3F5005F 		cmp	r3, #8192
 1113 0012 08D1     		bne	.L52
 633:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 634:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Drive the SMBusAlert pin Low */
 635:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR1 |= I2C_SMBusAlert_Low;
 1114              		.loc 1 635 0
 1115 0014 7B68     		ldr	r3, [r7, #4]
 1116 0016 1B88     		ldrh	r3, [r3, #0]	@ movhi
 1117 0018 9BB2     		uxth	r3, r3
 1118 001a 43F40053 		orr	r3, r3, #8192
 1119 001e 9AB2     		uxth	r2, r3
 1120 0020 7B68     		ldr	r3, [r7, #4]
 1121 0022 1A80     		strh	r2, [r3, #0]	@ movhi
 1122 0024 07E0     		b	.L51
 1123              	.L52:
 636:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 637:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   else
 638:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 639:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Drive the SMBusAlert pin High  */
 640:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR1 &= I2C_SMBusAlert_High;
 1124              		.loc 1 640 0
 1125 0026 7B68     		ldr	r3, [r7, #4]
 1126 0028 1B88     		ldrh	r3, [r3, #0]	@ movhi
 1127 002a 9BB2     		uxth	r3, r3
 1128 002c 23F40053 		bic	r3, r3, #8192
 1129 0030 9AB2     		uxth	r2, r3
 1130 0032 7B68     		ldr	r3, [r7, #4]
 1131 0034 1A80     		strh	r2, [r3, #0]	@ movhi
 1132              	.L51:
 641:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 642:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 1133              		.loc 1 642 0
 1134 0036 07F10C07 		add	r7, r7, #12
 1135 003a BD46     		mov	sp, r7
 1136 003c 80BC     		pop	{r7}
 1137 003e 7047     		bx	lr
 1138              		.cfi_endproc
 1139              	.LFE125:
 1141              		.section	.text.I2C_ARPCmd,"ax",%progbits
 1142              		.align	2
 1143              		.global	I2C_ARPCmd
 1144              		.thumb
 1145              		.thumb_func
 1147              	I2C_ARPCmd:
 1148              	.LFB126:
 643:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 644:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
 645:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Enables or disables the specified I2C ARP.
 646:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 647:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  NewState: new state of the I2Cx ARP. 
 648:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          This parameter can be: ENABLE or DISABLE.
 649:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval None
 650:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 651:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** void I2C_ARPCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
 652:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 1149              		.loc 1 652 0
 1150              		.cfi_startproc
 1151              		@ args = 0, pretend = 0, frame = 8
 1152              		@ frame_needed = 1, uses_anonymous_args = 0
 1153              		@ link register save eliminated.
 1154 0000 80B4     		push	{r7}
 1155              	.LCFI48:
 1156              		.cfi_def_cfa_offset 4
 1157 0002 83B0     		sub	sp, sp, #12
 1158              	.LCFI49:
 1159              		.cfi_def_cfa_offset 16
 1160 0004 00AF     		add	r7, sp, #0
 1161              		.cfi_offset 7, -4
 1162              	.LCFI50:
 1163              		.cfi_def_cfa_register 7
 1164 0006 7860     		str	r0, [r7, #4]
 1165 0008 0B46     		mov	r3, r1
 1166 000a FB70     		strb	r3, [r7, #3]
 653:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
 654:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 655:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 656:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   if (NewState != DISABLE)
 1167              		.loc 1 656 0
 1168 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1169 000e 002B     		cmp	r3, #0
 1170 0010 08D0     		beq	.L55
 657:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 658:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Enable the selected I2C ARP */
 659:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR1 |= I2C_CR1_ENARP;
 1171              		.loc 1 659 0
 1172 0012 7B68     		ldr	r3, [r7, #4]
 1173 0014 1B88     		ldrh	r3, [r3, #0]	@ movhi
 1174 0016 9BB2     		uxth	r3, r3
 1175 0018 43F01003 		orr	r3, r3, #16
 1176 001c 9AB2     		uxth	r2, r3
 1177 001e 7B68     		ldr	r3, [r7, #4]
 1178 0020 1A80     		strh	r2, [r3, #0]	@ movhi
 1179 0022 07E0     		b	.L54
 1180              	.L55:
 660:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 661:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   else
 662:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 663:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Disable the selected I2C ARP */
 664:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ENARP);
 1181              		.loc 1 664 0
 1182 0024 7B68     		ldr	r3, [r7, #4]
 1183 0026 1B88     		ldrh	r3, [r3, #0]	@ movhi
 1184 0028 9BB2     		uxth	r3, r3
 1185 002a 23F01003 		bic	r3, r3, #16
 1186 002e 9AB2     		uxth	r2, r3
 1187 0030 7B68     		ldr	r3, [r7, #4]
 1188 0032 1A80     		strh	r2, [r3, #0]	@ movhi
 1189              	.L54:
 665:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 666:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 1190              		.loc 1 666 0
 1191 0034 07F10C07 		add	r7, r7, #12
 1192 0038 BD46     		mov	sp, r7
 1193 003a 80BC     		pop	{r7}
 1194 003c 7047     		bx	lr
 1195              		.cfi_endproc
 1196              	.LFE126:
 1198 003e 00BF     		.section	.text.I2C_SendData,"ax",%progbits
 1199              		.align	2
 1200              		.global	I2C_SendData
 1201              		.thumb
 1202              		.thumb_func
 1204              	I2C_SendData:
 1205              	.LFB127:
 667:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
 668:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @}
 669:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 670:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 671:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /** @defgroup I2C_Group2 Data transfers functions
 672:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  *  @brief   Data transfers functions 
 673:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  *
 674:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** @verbatim   
 675:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  ===============================================================================
 676:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****                         Data transfers functions
 677:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  ===============================================================================  
 678:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 679:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** @endverbatim
 680:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @{
 681:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 682:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 683:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
 684:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Sends a data byte through the I2Cx peripheral.
 685:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 686:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  Data: Byte to be transmitted..
 687:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval None
 688:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 689:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** void I2C_SendData(I2C_TypeDef* I2Cx, uint8_t Data)
 690:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 1206              		.loc 1 690 0
 1207              		.cfi_startproc
 1208              		@ args = 0, pretend = 0, frame = 8
 1209              		@ frame_needed = 1, uses_anonymous_args = 0
 1210              		@ link register save eliminated.
 1211 0000 80B4     		push	{r7}
 1212              	.LCFI51:
 1213              		.cfi_def_cfa_offset 4
 1214 0002 83B0     		sub	sp, sp, #12
 1215              	.LCFI52:
 1216              		.cfi_def_cfa_offset 16
 1217 0004 00AF     		add	r7, sp, #0
 1218              		.cfi_offset 7, -4
 1219              	.LCFI53:
 1220              		.cfi_def_cfa_register 7
 1221 0006 7860     		str	r0, [r7, #4]
 1222 0008 0B46     		mov	r3, r1
 1223 000a FB70     		strb	r3, [r7, #3]
 691:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
 692:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 693:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Write in the DR register the data to be sent */
 694:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   I2Cx->DR = Data;
 1224              		.loc 1 694 0
 1225 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1226 000e 9AB2     		uxth	r2, r3
 1227 0010 7B68     		ldr	r3, [r7, #4]
 1228 0012 1A82     		strh	r2, [r3, #16]	@ movhi
 695:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 1229              		.loc 1 695 0
 1230 0014 07F10C07 		add	r7, r7, #12
 1231 0018 BD46     		mov	sp, r7
 1232 001a 80BC     		pop	{r7}
 1233 001c 7047     		bx	lr
 1234              		.cfi_endproc
 1235              	.LFE127:
 1237 001e 00BF     		.section	.text.I2C_ReceiveData,"ax",%progbits
 1238              		.align	2
 1239              		.global	I2C_ReceiveData
 1240              		.thumb
 1241              		.thumb_func
 1243              	I2C_ReceiveData:
 1244              	.LFB128:
 696:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 697:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
 698:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Returns the most recent received data by the I2Cx peripheral.
 699:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 700:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval The value of the received data.
 701:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 702:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** uint8_t I2C_ReceiveData(I2C_TypeDef* I2Cx)
 703:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 1245              		.loc 1 703 0
 1246              		.cfi_startproc
 1247              		@ args = 0, pretend = 0, frame = 8
 1248              		@ frame_needed = 1, uses_anonymous_args = 0
 1249              		@ link register save eliminated.
 1250 0000 80B4     		push	{r7}
 1251              	.LCFI54:
 1252              		.cfi_def_cfa_offset 4
 1253 0002 83B0     		sub	sp, sp, #12
 1254              	.LCFI55:
 1255              		.cfi_def_cfa_offset 16
 1256 0004 00AF     		add	r7, sp, #0
 1257              		.cfi_offset 7, -4
 1258              	.LCFI56:
 1259              		.cfi_def_cfa_register 7
 1260 0006 7860     		str	r0, [r7, #4]
 704:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
 705:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 706:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Return the data in the DR register */
 707:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   return (uint8_t)I2Cx->DR;
 1261              		.loc 1 707 0
 1262 0008 7B68     		ldr	r3, [r7, #4]
 1263 000a 1B8A     		ldrh	r3, [r3, #16]	@ movhi
 1264 000c 9BB2     		uxth	r3, r3
 1265 000e DBB2     		uxtb	r3, r3
 708:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 1266              		.loc 1 708 0
 1267 0010 1846     		mov	r0, r3
 1268 0012 07F10C07 		add	r7, r7, #12
 1269 0016 BD46     		mov	sp, r7
 1270 0018 80BC     		pop	{r7}
 1271 001a 7047     		bx	lr
 1272              		.cfi_endproc
 1273              	.LFE128:
 1275              		.section	.text.I2C_TransmitPEC,"ax",%progbits
 1276              		.align	2
 1277              		.global	I2C_TransmitPEC
 1278              		.thumb
 1279              		.thumb_func
 1281              	I2C_TransmitPEC:
 1282              	.LFB129:
 709:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 710:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
 711:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @}
 712:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 713:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 714:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /** @defgroup I2C_Group3 PEC management functions
 715:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  *  @brief   PEC management functions 
 716:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  *
 717:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** @verbatim   
 718:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  ===============================================================================
 719:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****                          PEC management functions
 720:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  ===============================================================================  
 721:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 722:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** @endverbatim
 723:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @{
 724:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 725:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 726:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
 727:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Enables or disables the specified I2C PEC transfer.
 728:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 729:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  NewState: new state of the I2C PEC transmission.
 730:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          This parameter can be: ENABLE or DISABLE.
 731:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval None
 732:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 733:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** void I2C_TransmitPEC(I2C_TypeDef* I2Cx, FunctionalState NewState)
 734:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 1283              		.loc 1 734 0
 1284              		.cfi_startproc
 1285              		@ args = 0, pretend = 0, frame = 8
 1286              		@ frame_needed = 1, uses_anonymous_args = 0
 1287              		@ link register save eliminated.
 1288 0000 80B4     		push	{r7}
 1289              	.LCFI57:
 1290              		.cfi_def_cfa_offset 4
 1291 0002 83B0     		sub	sp, sp, #12
 1292              	.LCFI58:
 1293              		.cfi_def_cfa_offset 16
 1294 0004 00AF     		add	r7, sp, #0
 1295              		.cfi_offset 7, -4
 1296              	.LCFI59:
 1297              		.cfi_def_cfa_register 7
 1298 0006 7860     		str	r0, [r7, #4]
 1299 0008 0B46     		mov	r3, r1
 1300 000a FB70     		strb	r3, [r7, #3]
 735:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
 736:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 737:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 738:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   if (NewState != DISABLE)
 1301              		.loc 1 738 0
 1302 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1303 000e 002B     		cmp	r3, #0
 1304 0010 08D0     		beq	.L60
 739:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 740:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Enable the selected I2C PEC transmission */
 741:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR1 |= I2C_CR1_PEC;
 1305              		.loc 1 741 0
 1306 0012 7B68     		ldr	r3, [r7, #4]
 1307 0014 1B88     		ldrh	r3, [r3, #0]	@ movhi
 1308 0016 9BB2     		uxth	r3, r3
 1309 0018 43F48053 		orr	r3, r3, #4096
 1310 001c 9AB2     		uxth	r2, r3
 1311 001e 7B68     		ldr	r3, [r7, #4]
 1312 0020 1A80     		strh	r2, [r3, #0]	@ movhi
 1313 0022 07E0     		b	.L59
 1314              	.L60:
 742:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 743:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   else
 744:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 745:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Disable the selected I2C PEC transmission */
 746:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PEC);
 1315              		.loc 1 746 0
 1316 0024 7B68     		ldr	r3, [r7, #4]
 1317 0026 1B88     		ldrh	r3, [r3, #0]	@ movhi
 1318 0028 9BB2     		uxth	r3, r3
 1319 002a 23F48053 		bic	r3, r3, #4096
 1320 002e 9AB2     		uxth	r2, r3
 1321 0030 7B68     		ldr	r3, [r7, #4]
 1322 0032 1A80     		strh	r2, [r3, #0]	@ movhi
 1323              	.L59:
 747:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 748:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 1324              		.loc 1 748 0
 1325 0034 07F10C07 		add	r7, r7, #12
 1326 0038 BD46     		mov	sp, r7
 1327 003a 80BC     		pop	{r7}
 1328 003c 7047     		bx	lr
 1329              		.cfi_endproc
 1330              	.LFE129:
 1332 003e 00BF     		.section	.text.I2C_PECPositionConfig,"ax",%progbits
 1333              		.align	2
 1334              		.global	I2C_PECPositionConfig
 1335              		.thumb
 1336              		.thumb_func
 1338              	I2C_PECPositionConfig:
 1339              	.LFB130:
 749:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 750:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
 751:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Selects the specified I2C PEC position.
 752:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 753:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2C_PECPosition: specifies the PEC position. 
 754:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          This parameter can be one of the following values:
 755:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_PECPosition_Next: indicates that the next byte is PEC
 756:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_PECPosition_Current: indicates that current byte is PEC
 757:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *       
 758:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @note    This function configures the same bit (POS) as I2C_NACKPositionConfig()
 759:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          but is intended to be used in SMBUS mode while I2C_NACKPositionConfig() 
 760:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          is intended to used in I2C mode.
 761:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *                
 762:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval None
 763:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 764:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** void I2C_PECPositionConfig(I2C_TypeDef* I2Cx, uint16_t I2C_PECPosition)
 765:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 1340              		.loc 1 765 0
 1341              		.cfi_startproc
 1342              		@ args = 0, pretend = 0, frame = 8
 1343              		@ frame_needed = 1, uses_anonymous_args = 0
 1344              		@ link register save eliminated.
 1345 0000 80B4     		push	{r7}
 1346              	.LCFI60:
 1347              		.cfi_def_cfa_offset 4
 1348 0002 83B0     		sub	sp, sp, #12
 1349              	.LCFI61:
 1350              		.cfi_def_cfa_offset 16
 1351 0004 00AF     		add	r7, sp, #0
 1352              		.cfi_offset 7, -4
 1353              	.LCFI62:
 1354              		.cfi_def_cfa_register 7
 1355 0006 7860     		str	r0, [r7, #4]
 1356 0008 0B46     		mov	r3, r1
 1357 000a 7B80     		strh	r3, [r7, #2]	@ movhi
 766:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
 767:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 768:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_PEC_POSITION(I2C_PECPosition));
 769:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   if (I2C_PECPosition == I2C_PECPosition_Next)
 1358              		.loc 1 769 0
 1359 000c 7B88     		ldrh	r3, [r7, #2]
 1360 000e B3F5006F 		cmp	r3, #2048
 1361 0012 08D1     		bne	.L63
 770:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 771:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Next byte in shift register is PEC */
 772:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR1 |= I2C_PECPosition_Next;
 1362              		.loc 1 772 0
 1363 0014 7B68     		ldr	r3, [r7, #4]
 1364 0016 1B88     		ldrh	r3, [r3, #0]	@ movhi
 1365 0018 9BB2     		uxth	r3, r3
 1366 001a 43F40063 		orr	r3, r3, #2048
 1367 001e 9AB2     		uxth	r2, r3
 1368 0020 7B68     		ldr	r3, [r7, #4]
 1369 0022 1A80     		strh	r2, [r3, #0]	@ movhi
 1370 0024 07E0     		b	.L62
 1371              	.L63:
 773:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 774:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   else
 775:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 776:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Current byte in shift register is PEC */
 777:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR1 &= I2C_PECPosition_Current;
 1372              		.loc 1 777 0
 1373 0026 7B68     		ldr	r3, [r7, #4]
 1374 0028 1B88     		ldrh	r3, [r3, #0]	@ movhi
 1375 002a 9BB2     		uxth	r3, r3
 1376 002c 23F40063 		bic	r3, r3, #2048
 1377 0030 9AB2     		uxth	r2, r3
 1378 0032 7B68     		ldr	r3, [r7, #4]
 1379 0034 1A80     		strh	r2, [r3, #0]	@ movhi
 1380              	.L62:
 778:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 779:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 1381              		.loc 1 779 0
 1382 0036 07F10C07 		add	r7, r7, #12
 1383 003a BD46     		mov	sp, r7
 1384 003c 80BC     		pop	{r7}
 1385 003e 7047     		bx	lr
 1386              		.cfi_endproc
 1387              	.LFE130:
 1389              		.section	.text.I2C_CalculatePEC,"ax",%progbits
 1390              		.align	2
 1391              		.global	I2C_CalculatePEC
 1392              		.thumb
 1393              		.thumb_func
 1395              	I2C_CalculatePEC:
 1396              	.LFB131:
 780:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 781:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
 782:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Enables or disables the PEC value calculation of the transferred bytes.
 783:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 784:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  NewState: new state of the I2Cx PEC value calculation.
 785:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          This parameter can be: ENABLE or DISABLE.
 786:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval None
 787:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 788:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** void I2C_CalculatePEC(I2C_TypeDef* I2Cx, FunctionalState NewState)
 789:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 1397              		.loc 1 789 0
 1398              		.cfi_startproc
 1399              		@ args = 0, pretend = 0, frame = 8
 1400              		@ frame_needed = 1, uses_anonymous_args = 0
 1401              		@ link register save eliminated.
 1402 0000 80B4     		push	{r7}
 1403              	.LCFI63:
 1404              		.cfi_def_cfa_offset 4
 1405 0002 83B0     		sub	sp, sp, #12
 1406              	.LCFI64:
 1407              		.cfi_def_cfa_offset 16
 1408 0004 00AF     		add	r7, sp, #0
 1409              		.cfi_offset 7, -4
 1410              	.LCFI65:
 1411              		.cfi_def_cfa_register 7
 1412 0006 7860     		str	r0, [r7, #4]
 1413 0008 0B46     		mov	r3, r1
 1414 000a FB70     		strb	r3, [r7, #3]
 790:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
 791:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 792:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 793:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   if (NewState != DISABLE)
 1415              		.loc 1 793 0
 1416 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1417 000e 002B     		cmp	r3, #0
 1418 0010 08D0     		beq	.L66
 794:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 795:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Enable the selected I2C PEC calculation */
 796:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR1 |= I2C_CR1_ENPEC;
 1419              		.loc 1 796 0
 1420 0012 7B68     		ldr	r3, [r7, #4]
 1421 0014 1B88     		ldrh	r3, [r3, #0]	@ movhi
 1422 0016 9BB2     		uxth	r3, r3
 1423 0018 43F02003 		orr	r3, r3, #32
 1424 001c 9AB2     		uxth	r2, r3
 1425 001e 7B68     		ldr	r3, [r7, #4]
 1426 0020 1A80     		strh	r2, [r3, #0]	@ movhi
 1427 0022 07E0     		b	.L65
 1428              	.L66:
 797:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 798:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   else
 799:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 800:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Disable the selected I2C PEC calculation */
 801:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ENPEC);
 1429              		.loc 1 801 0
 1430 0024 7B68     		ldr	r3, [r7, #4]
 1431 0026 1B88     		ldrh	r3, [r3, #0]	@ movhi
 1432 0028 9BB2     		uxth	r3, r3
 1433 002a 23F02003 		bic	r3, r3, #32
 1434 002e 9AB2     		uxth	r2, r3
 1435 0030 7B68     		ldr	r3, [r7, #4]
 1436 0032 1A80     		strh	r2, [r3, #0]	@ movhi
 1437              	.L65:
 802:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 803:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 1438              		.loc 1 803 0
 1439 0034 07F10C07 		add	r7, r7, #12
 1440 0038 BD46     		mov	sp, r7
 1441 003a 80BC     		pop	{r7}
 1442 003c 7047     		bx	lr
 1443              		.cfi_endproc
 1444              	.LFE131:
 1446 003e 00BF     		.section	.text.I2C_GetPEC,"ax",%progbits
 1447              		.align	2
 1448              		.global	I2C_GetPEC
 1449              		.thumb
 1450              		.thumb_func
 1452              	I2C_GetPEC:
 1453              	.LFB132:
 804:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 805:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
 806:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Returns the PEC value for the specified I2C.
 807:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 808:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval The PEC value.
 809:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 810:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** uint8_t I2C_GetPEC(I2C_TypeDef* I2Cx)
 811:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 1454              		.loc 1 811 0
 1455              		.cfi_startproc
 1456              		@ args = 0, pretend = 0, frame = 8
 1457              		@ frame_needed = 1, uses_anonymous_args = 0
 1458              		@ link register save eliminated.
 1459 0000 80B4     		push	{r7}
 1460              	.LCFI66:
 1461              		.cfi_def_cfa_offset 4
 1462 0002 83B0     		sub	sp, sp, #12
 1463              	.LCFI67:
 1464              		.cfi_def_cfa_offset 16
 1465 0004 00AF     		add	r7, sp, #0
 1466              		.cfi_offset 7, -4
 1467              	.LCFI68:
 1468              		.cfi_def_cfa_register 7
 1469 0006 7860     		str	r0, [r7, #4]
 812:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
 813:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 814:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Return the selected I2C PEC value */
 815:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   return ((I2Cx->SR2) >> 8);
 1470              		.loc 1 815 0
 1471 0008 7B68     		ldr	r3, [r7, #4]
 1472 000a 1B8B     		ldrh	r3, [r3, #24]	@ movhi
 1473 000c 9BB2     		uxth	r3, r3
 1474 000e 4FEA1323 		lsr	r3, r3, #8
 1475 0012 9BB2     		uxth	r3, r3
 1476 0014 DBB2     		uxtb	r3, r3
 816:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 1477              		.loc 1 816 0
 1478 0016 1846     		mov	r0, r3
 1479 0018 07F10C07 		add	r7, r7, #12
 1480 001c BD46     		mov	sp, r7
 1481 001e 80BC     		pop	{r7}
 1482 0020 7047     		bx	lr
 1483              		.cfi_endproc
 1484              	.LFE132:
 1486 0022 00BF     		.section	.text.I2C_DMACmd,"ax",%progbits
 1487              		.align	2
 1488              		.global	I2C_DMACmd
 1489              		.thumb
 1490              		.thumb_func
 1492              	I2C_DMACmd:
 1493              	.LFB133:
 817:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 818:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
 819:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @}
 820:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 821:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 822:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /** @defgroup I2C_Group4 DMA transfers management functions
 823:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  *  @brief   DMA transfers management functions 
 824:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  *
 825:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** @verbatim   
 826:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  ===============================================================================
 827:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****                          DMA transfers management functions
 828:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  ===============================================================================  
 829:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   This section provides functions allowing to configure the I2C DMA channels 
 830:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   requests.
 831:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   
 832:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** @endverbatim
 833:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @{
 834:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 835:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 836:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
 837:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Enables or disables the specified I2C DMA requests.
 838:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 839:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  NewState: new state of the I2C DMA transfer.
 840:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          This parameter can be: ENABLE or DISABLE.
 841:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval None
 842:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 843:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** void I2C_DMACmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
 844:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 1494              		.loc 1 844 0
 1495              		.cfi_startproc
 1496              		@ args = 0, pretend = 0, frame = 8
 1497              		@ frame_needed = 1, uses_anonymous_args = 0
 1498              		@ link register save eliminated.
 1499 0000 80B4     		push	{r7}
 1500              	.LCFI69:
 1501              		.cfi_def_cfa_offset 4
 1502 0002 83B0     		sub	sp, sp, #12
 1503              	.LCFI70:
 1504              		.cfi_def_cfa_offset 16
 1505 0004 00AF     		add	r7, sp, #0
 1506              		.cfi_offset 7, -4
 1507              	.LCFI71:
 1508              		.cfi_def_cfa_register 7
 1509 0006 7860     		str	r0, [r7, #4]
 1510 0008 0B46     		mov	r3, r1
 1511 000a FB70     		strb	r3, [r7, #3]
 845:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
 846:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 847:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 848:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   if (NewState != DISABLE)
 1512              		.loc 1 848 0
 1513 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1514 000e 002B     		cmp	r3, #0
 1515 0010 08D0     		beq	.L70
 849:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 850:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Enable the selected I2C DMA requests */
 851:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR2 |= I2C_CR2_DMAEN;
 1516              		.loc 1 851 0
 1517 0012 7B68     		ldr	r3, [r7, #4]
 1518 0014 9B88     		ldrh	r3, [r3, #4]	@ movhi
 1519 0016 9BB2     		uxth	r3, r3
 1520 0018 43F40063 		orr	r3, r3, #2048
 1521 001c 9AB2     		uxth	r2, r3
 1522 001e 7B68     		ldr	r3, [r7, #4]
 1523 0020 9A80     		strh	r2, [r3, #4]	@ movhi
 1524 0022 07E0     		b	.L69
 1525              	.L70:
 852:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 853:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   else
 854:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 855:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Disable the selected I2C DMA requests */
 856:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR2 &= (uint16_t)~((uint16_t)I2C_CR2_DMAEN);
 1526              		.loc 1 856 0
 1527 0024 7B68     		ldr	r3, [r7, #4]
 1528 0026 9B88     		ldrh	r3, [r3, #4]	@ movhi
 1529 0028 9BB2     		uxth	r3, r3
 1530 002a 23F40063 		bic	r3, r3, #2048
 1531 002e 9AB2     		uxth	r2, r3
 1532 0030 7B68     		ldr	r3, [r7, #4]
 1533 0032 9A80     		strh	r2, [r3, #4]	@ movhi
 1534              	.L69:
 857:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 858:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 1535              		.loc 1 858 0
 1536 0034 07F10C07 		add	r7, r7, #12
 1537 0038 BD46     		mov	sp, r7
 1538 003a 80BC     		pop	{r7}
 1539 003c 7047     		bx	lr
 1540              		.cfi_endproc
 1541              	.LFE133:
 1543 003e 00BF     		.section	.text.I2C_DMALastTransferCmd,"ax",%progbits
 1544              		.align	2
 1545              		.global	I2C_DMALastTransferCmd
 1546              		.thumb
 1547              		.thumb_func
 1549              	I2C_DMALastTransferCmd:
 1550              	.LFB134:
 859:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 860:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
 861:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Specifies that the next DMA transfer is the last one.
 862:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 863:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  NewState: new state of the I2C DMA last transfer.
 864:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          This parameter can be: ENABLE or DISABLE.
 865:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval None
 866:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 867:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** void I2C_DMALastTransferCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
 868:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 1551              		.loc 1 868 0
 1552              		.cfi_startproc
 1553              		@ args = 0, pretend = 0, frame = 8
 1554              		@ frame_needed = 1, uses_anonymous_args = 0
 1555              		@ link register save eliminated.
 1556 0000 80B4     		push	{r7}
 1557              	.LCFI72:
 1558              		.cfi_def_cfa_offset 4
 1559 0002 83B0     		sub	sp, sp, #12
 1560              	.LCFI73:
 1561              		.cfi_def_cfa_offset 16
 1562 0004 00AF     		add	r7, sp, #0
 1563              		.cfi_offset 7, -4
 1564              	.LCFI74:
 1565              		.cfi_def_cfa_register 7
 1566 0006 7860     		str	r0, [r7, #4]
 1567 0008 0B46     		mov	r3, r1
 1568 000a FB70     		strb	r3, [r7, #3]
 869:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
 870:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 871:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 872:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   if (NewState != DISABLE)
 1569              		.loc 1 872 0
 1570 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1571 000e 002B     		cmp	r3, #0
 1572 0010 08D0     		beq	.L73
 873:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 874:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Next DMA transfer is the last transfer */
 875:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR2 |= I2C_CR2_LAST;
 1573              		.loc 1 875 0
 1574 0012 7B68     		ldr	r3, [r7, #4]
 1575 0014 9B88     		ldrh	r3, [r3, #4]	@ movhi
 1576 0016 9BB2     		uxth	r3, r3
 1577 0018 43F48053 		orr	r3, r3, #4096
 1578 001c 9AB2     		uxth	r2, r3
 1579 001e 7B68     		ldr	r3, [r7, #4]
 1580 0020 9A80     		strh	r2, [r3, #4]	@ movhi
 1581 0022 07E0     		b	.L72
 1582              	.L73:
 876:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 877:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   else
 878:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 879:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Next DMA transfer is not the last transfer */
 880:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR2 &= (uint16_t)~((uint16_t)I2C_CR2_LAST);
 1583              		.loc 1 880 0
 1584 0024 7B68     		ldr	r3, [r7, #4]
 1585 0026 9B88     		ldrh	r3, [r3, #4]	@ movhi
 1586 0028 9BB2     		uxth	r3, r3
 1587 002a 23F48053 		bic	r3, r3, #4096
 1588 002e 9AB2     		uxth	r2, r3
 1589 0030 7B68     		ldr	r3, [r7, #4]
 1590 0032 9A80     		strh	r2, [r3, #4]	@ movhi
 1591              	.L72:
 881:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 882:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 1592              		.loc 1 882 0
 1593 0034 07F10C07 		add	r7, r7, #12
 1594 0038 BD46     		mov	sp, r7
 1595 003a 80BC     		pop	{r7}
 1596 003c 7047     		bx	lr
 1597              		.cfi_endproc
 1598              	.LFE134:
 1600 003e 00BF     		.section	.text.I2C_ReadRegister,"ax",%progbits
 1601              		.align	2
 1602              		.global	I2C_ReadRegister
 1603              		.thumb
 1604              		.thumb_func
 1606              	I2C_ReadRegister:
 1607              	.LFB135:
 883:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 884:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
 885:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @}
 886:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 887:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 888:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /** @defgroup I2C_Group5 Interrupts events and flags management functions
 889:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  *  @brief   Interrupts, events and flags management functions
 890:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  *
 891:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** @verbatim   
 892:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  ===============================================================================
 893:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****                 Interrupts, events and flags management functions
 894:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  ===============================================================================  
 895:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   This section provides functions allowing to configure the I2C Interrupts 
 896:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   sources and check or clear the flags or pending bits status.
 897:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   The user should identify which mode will be used in his application to manage 
 898:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   the communication: Polling mode, Interrupt mode or DMA mode. 
 899:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 900:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  ===============================================================================
 901:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****                           I2C State Monitoring Functions                    
 902:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  ===============================================================================   
 903:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   This I2C driver provides three different ways for I2C state monitoring
 904:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   depending on the application requirements and constraints:
 905:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****          
 906:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****    
 907:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****      1. Basic state monitoring (Using I2C_CheckEvent() function)
 908:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****      -----------------------------------------------------------
 909:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****         It compares the status registers (SR1 and SR2) content to a given event
 910:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****         (can be the combination of one or more flags).
 911:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****         It returns SUCCESS if the current status includes the given flags 
 912:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****         and returns ERROR if one or more flags are missing in the current status.
 913:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 914:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****           - When to use
 915:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****              - This function is suitable for most applications as well as for startup 
 916:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****                activity since the events are fully described in the product reference 
 917:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****                manual (RM0090).
 918:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****              - It is also suitable for users who need to define their own events.
 919:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 920:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****           - Limitations
 921:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****              - If an error occurs (ie. error flags are set besides to the monitored 
 922:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****                flags), the I2C_CheckEvent() function may return SUCCESS despite 
 923:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****                the communication hold or corrupted real state. 
 924:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****                In this case, it is advised to use error interrupts to monitor 
 925:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****                the error events and handle them in the interrupt IRQ handler.
 926:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****          
 927:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****      @note 
 928:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****          For error management, it is advised to use the following functions:
 929:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****            - I2C_ITConfig() to configure and enable the error interrupts (I2C_IT_ERR).
 930:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****            - I2Cx_ER_IRQHandler() which is called when the error interrupt occurs.
 931:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****              Where x is the peripheral instance (I2C1, I2C2 ...)
 932:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****            - I2C_GetFlagStatus() or I2C_GetITStatus()  to be called into the 
 933:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****              I2Cx_ER_IRQHandler() function in order to determine which error occurred.
 934:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****            - I2C_ClearFlag() or I2C_ClearITPendingBit() and/or I2C_SoftwareResetCmd() 
 935:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****              and/or I2C_GenerateStop() in order to clear the error flag and source 
 936:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****              and return to correct  communication status.
 937:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****              
 938:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  
 939:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****      2. Advanced state monitoring (Using the function I2C_GetLastEvent())
 940:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****      -------------------------------------------------------------------- 
 941:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****         Using the function I2C_GetLastEvent() which returns the image of both status 
 942:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****         registers in a single word (uint32_t) (Status Register 2 value is shifted left 
 943:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****         by 16 bits and concatenated to Status Register 1).
 944:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 945:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****           - When to use
 946:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****              - This function is suitable for the same applications above but it 
 947:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****                allows to overcome the mentioned limitation of I2C_GetFlagStatus() 
 948:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****                function.
 949:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****              - The returned value could be compared to events already defined in 
 950:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****                the library (stm32f4xx_i2c.h) or to custom values defined by user.
 951:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****                This function is suitable when multiple flags are monitored at the 
 952:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****                same time.
 953:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****              - At the opposite of I2C_CheckEvent() function, this function allows 
 954:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****                user to choose when an event is accepted (when all events flags are 
 955:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****                set and no other flags are set or just when the needed flags are set 
 956:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****                like I2C_CheckEvent() function.
 957:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 958:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****           - Limitations
 959:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****              - User may need to define his own events.
 960:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****              - Same remark concerning the error management is applicable for this 
 961:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****                function if user decides to check only regular communication flags 
 962:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****                (and ignores error flags).
 963:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****       
 964:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  
 965:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****      3. Flag-based state monitoring (Using the function I2C_GetFlagStatus())
 966:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****      -----------------------------------------------------------------------
 967:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****      
 968:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****       Using the function I2C_GetFlagStatus() which simply returns the status of 
 969:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****       one single flag (ie. I2C_FLAG_RXNE ...). 
 970:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 971:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****           - When to use
 972:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****              - This function could be used for specific applications or in debug 
 973:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****                phase.
 974:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****              - It is suitable when only one flag checking is needed (most I2C 
 975:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****                events are monitored through multiple flags).
 976:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****           - Limitations: 
 977:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****              - When calling this function, the Status register is accessed. 
 978:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****                Some flags are cleared when the status register is accessed. 
 979:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****                So checking the status of one Flag, may clear other ones.
 980:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****              - Function may need to be called twice or more in order to monitor 
 981:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****                one single event.
 982:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  
 983:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****    For detailed description of Events, please refer to section I2C_Events in 
 984:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****    stm32f4xx_i2c.h file.
 985:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****        
 986:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** @endverbatim
 987:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @{
 988:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 989:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****    
 990:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
 991:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Reads the specified I2C register and returns its value.
 992:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2C_Register: specifies the register to read.
 993:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          This parameter can be one of the following values:
 994:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_Register_CR1:  CR1 register.
 995:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_Register_CR2:   CR2 register.
 996:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_Register_OAR1:  OAR1 register.
 997:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_Register_OAR2:  OAR2 register.
 998:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_Register_DR:    DR register.
 999:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_Register_SR1:   SR1 register.
1000:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_Register_SR2:   SR2 register.
1001:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_Register_CCR:   CCR register.
1002:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_Register_TRISE: TRISE register.
1003:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval The value of the read register.
1004:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
1005:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** uint16_t I2C_ReadRegister(I2C_TypeDef* I2Cx, uint8_t I2C_Register)
1006:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 1608              		.loc 1 1006 0
 1609              		.cfi_startproc
 1610              		@ args = 0, pretend = 0, frame = 16
 1611              		@ frame_needed = 1, uses_anonymous_args = 0
 1612              		@ link register save eliminated.
 1613 0000 80B4     		push	{r7}
 1614              	.LCFI75:
 1615              		.cfi_def_cfa_offset 4
 1616 0002 85B0     		sub	sp, sp, #20
 1617              	.LCFI76:
 1618              		.cfi_def_cfa_offset 24
 1619 0004 00AF     		add	r7, sp, #0
 1620              		.cfi_offset 7, -4
 1621              	.LCFI77:
 1622              		.cfi_def_cfa_register 7
 1623 0006 7860     		str	r0, [r7, #4]
 1624 0008 0B46     		mov	r3, r1
 1625 000a FB70     		strb	r3, [r7, #3]
1007:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   __IO uint32_t tmp = 0;
 1626              		.loc 1 1007 0
 1627 000c 4FF00003 		mov	r3, #0
 1628 0010 FB60     		str	r3, [r7, #12]
1008:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
1009:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
1010:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
1011:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_REGISTER(I2C_Register));
1012:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
1013:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   tmp = (uint32_t) I2Cx;
 1629              		.loc 1 1013 0
 1630 0012 7B68     		ldr	r3, [r7, #4]
 1631 0014 FB60     		str	r3, [r7, #12]
1014:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   tmp += I2C_Register;
 1632              		.loc 1 1014 0
 1633 0016 FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 1634 0018 FB68     		ldr	r3, [r7, #12]
 1635 001a D318     		adds	r3, r2, r3
 1636 001c FB60     		str	r3, [r7, #12]
1015:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
1016:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Return the selected register value */
1017:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   return (*(__IO uint16_t *) tmp);
 1637              		.loc 1 1017 0
 1638 001e FB68     		ldr	r3, [r7, #12]
 1639 0020 1B88     		ldrh	r3, [r3, #0]	@ movhi
 1640 0022 9BB2     		uxth	r3, r3
1018:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 1641              		.loc 1 1018 0
 1642 0024 1846     		mov	r0, r3
 1643 0026 07F11407 		add	r7, r7, #20
 1644 002a BD46     		mov	sp, r7
 1645 002c 80BC     		pop	{r7}
 1646 002e 7047     		bx	lr
 1647              		.cfi_endproc
 1648              	.LFE135:
 1650              		.section	.text.I2C_ITConfig,"ax",%progbits
 1651              		.align	2
 1652              		.global	I2C_ITConfig
 1653              		.thumb
 1654              		.thumb_func
 1656              	I2C_ITConfig:
 1657              	.LFB136:
1019:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
1020:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
1021:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Enables or disables the specified I2C interrupts.
1022:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
1023:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2C_IT: specifies the I2C interrupts sources to be enabled or disabled. 
1024:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          This parameter can be any combination of the following values:
1025:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_IT_BUF: Buffer interrupt mask
1026:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_IT_EVT: Event interrupt mask
1027:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_IT_ERR: Error interrupt mask
1028:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  NewState: new state of the specified I2C interrupts.
1029:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          This parameter can be: ENABLE or DISABLE.
1030:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval None
1031:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
1032:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** void I2C_ITConfig(I2C_TypeDef* I2Cx, uint16_t I2C_IT, FunctionalState NewState)
1033:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 1658              		.loc 1 1033 0
 1659              		.cfi_startproc
 1660              		@ args = 0, pretend = 0, frame = 8
 1661              		@ frame_needed = 1, uses_anonymous_args = 0
 1662              		@ link register save eliminated.
 1663 0000 80B4     		push	{r7}
 1664              	.LCFI78:
 1665              		.cfi_def_cfa_offset 4
 1666 0002 83B0     		sub	sp, sp, #12
 1667              	.LCFI79:
 1668              		.cfi_def_cfa_offset 16
 1669 0004 00AF     		add	r7, sp, #0
 1670              		.cfi_offset 7, -4
 1671              	.LCFI80:
 1672              		.cfi_def_cfa_register 7
 1673 0006 7860     		str	r0, [r7, #4]
 1674 0008 1346     		mov	r3, r2
 1675 000a 0A46     		mov	r2, r1	@ movhi
 1676 000c 7A80     		strh	r2, [r7, #2]	@ movhi
 1677 000e 7B70     		strb	r3, [r7, #1]
1034:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
1035:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
1036:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1037:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_CONFIG_IT(I2C_IT));
1038:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   
1039:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   if (NewState != DISABLE)
 1678              		.loc 1 1039 0
 1679 0010 7B78     		ldrb	r3, [r7, #1]	@ zero_extendqisi2
 1680 0012 002B     		cmp	r3, #0
 1681 0014 09D0     		beq	.L77
1040:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
1041:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Enable the selected I2C interrupts */
1042:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR2 |= I2C_IT;
 1682              		.loc 1 1042 0
 1683 0016 7B68     		ldr	r3, [r7, #4]
 1684 0018 9B88     		ldrh	r3, [r3, #4]	@ movhi
 1685 001a 9AB2     		uxth	r2, r3
 1686 001c 7B88     		ldrh	r3, [r7, #2]	@ movhi
 1687 001e 42EA0303 		orr	r3, r2, r3
 1688 0022 9AB2     		uxth	r2, r3
 1689 0024 7B68     		ldr	r3, [r7, #4]
 1690 0026 9A80     		strh	r2, [r3, #4]	@ movhi
 1691 0028 0BE0     		b	.L76
 1692              	.L77:
1043:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
1044:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   else
1045:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
1046:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Disable the selected I2C interrupts */
1047:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR2 &= (uint16_t)~I2C_IT;
 1693              		.loc 1 1047 0
 1694 002a 7B68     		ldr	r3, [r7, #4]
 1695 002c 9B88     		ldrh	r3, [r3, #4]	@ movhi
 1696 002e 9AB2     		uxth	r2, r3
 1697 0030 7B88     		ldrh	r3, [r7, #2]	@ movhi
 1698 0032 6FEA0303 		mvn	r3, r3
 1699 0036 9BB2     		uxth	r3, r3
 1700 0038 02EA0303 		and	r3, r2, r3
 1701 003c 9AB2     		uxth	r2, r3
 1702 003e 7B68     		ldr	r3, [r7, #4]
 1703 0040 9A80     		strh	r2, [r3, #4]	@ movhi
 1704              	.L76:
1048:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
1049:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 1705              		.loc 1 1049 0
 1706 0042 07F10C07 		add	r7, r7, #12
 1707 0046 BD46     		mov	sp, r7
 1708 0048 80BC     		pop	{r7}
 1709 004a 7047     		bx	lr
 1710              		.cfi_endproc
 1711              	.LFE136:
 1713              		.section	.text.I2C_CheckEvent,"ax",%progbits
 1714              		.align	2
 1715              		.global	I2C_CheckEvent
 1716              		.thumb
 1717              		.thumb_func
 1719              	I2C_CheckEvent:
 1720              	.LFB137:
1050:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
1051:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /*
1052:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  ===============================================================================
1053:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****                           1. Basic state monitoring                    
1054:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  ===============================================================================  
1055:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  */
1056:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
1057:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
1058:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Checks whether the last I2Cx Event is equal to the one passed
1059:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *         as parameter.
1060:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
1061:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2C_EVENT: specifies the event to be checked. 
1062:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          This parameter can be one of the following values:
1063:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_EVENT_SLAVE_TRANSMITTER_ADDRESS_MATCHED: EV1
1064:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_EVENT_SLAVE_RECEIVER_ADDRESS_MATCHED: EV1
1065:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_EVENT_SLAVE_TRANSMITTER_SECONDADDRESS_MATCHED: EV1
1066:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_EVENT_SLAVE_RECEIVER_SECONDADDRESS_MATCHED: EV1
1067:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_EVENT_SLAVE_GENERALCALLADDRESS_MATCHED: EV1
1068:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_EVENT_SLAVE_BYTE_RECEIVED: EV2
1069:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg (I2C_EVENT_SLAVE_BYTE_RECEIVED | I2C_FLAG_DUALF): EV2
1070:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg (I2C_EVENT_SLAVE_BYTE_RECEIVED | I2C_FLAG_GENCALL): EV2
1071:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_EVENT_SLAVE_BYTE_TRANSMITTED: EV3
1072:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg (I2C_EVENT_SLAVE_BYTE_TRANSMITTED | I2C_FLAG_DUALF): EV3
1073:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg (I2C_EVENT_SLAVE_BYTE_TRANSMITTED | I2C_FLAG_GENCALL): EV3
1074:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_EVENT_SLAVE_ACK_FAILURE: EV3_2
1075:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_EVENT_SLAVE_STOP_DETECTED: EV4
1076:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_EVENT_MASTER_MODE_SELECT: EV5
1077:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED: EV6     
1078:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED: EV6
1079:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_EVENT_MASTER_BYTE_RECEIVED: EV7
1080:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_EVENT_MASTER_BYTE_TRANSMITTING: EV8
1081:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_EVENT_MASTER_BYTE_TRANSMITTED: EV8_2
1082:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_EVENT_MASTER_MODE_ADDRESS10: EV9
1083:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *     
1084:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @note   For detailed description of Events, please refer to section I2C_Events
1085:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *         in stm32f4xx_i2c.h file.
1086:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *    
1087:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval An ErrorStatus enumeration value:
1088:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *           - SUCCESS: Last event is equal to the I2C_EVENT
1089:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *           - ERROR: Last event is different from the I2C_EVENT
1090:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
1091:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** ErrorStatus I2C_CheckEvent(I2C_TypeDef* I2Cx, uint32_t I2C_EVENT)
1092:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 1721              		.loc 1 1092 0
 1722              		.cfi_startproc
 1723              		@ args = 0, pretend = 0, frame = 24
 1724              		@ frame_needed = 1, uses_anonymous_args = 0
 1725              		@ link register save eliminated.
 1726 0000 80B4     		push	{r7}
 1727              	.LCFI81:
 1728              		.cfi_def_cfa_offset 4
 1729 0002 87B0     		sub	sp, sp, #28
 1730              	.LCFI82:
 1731              		.cfi_def_cfa_offset 32
 1732 0004 00AF     		add	r7, sp, #0
 1733              		.cfi_offset 7, -4
 1734              	.LCFI83:
 1735              		.cfi_def_cfa_register 7
 1736 0006 7860     		str	r0, [r7, #4]
 1737 0008 3960     		str	r1, [r7, #0]
1093:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   uint32_t lastevent = 0;
 1738              		.loc 1 1093 0
 1739 000a 4FF00003 		mov	r3, #0
 1740 000e 3B61     		str	r3, [r7, #16]
1094:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   uint32_t flag1 = 0, flag2 = 0;
 1741              		.loc 1 1094 0
 1742 0010 4FF00003 		mov	r3, #0
 1743 0014 FB60     		str	r3, [r7, #12]
 1744 0016 4FF00003 		mov	r3, #0
 1745 001a BB60     		str	r3, [r7, #8]
1095:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   ErrorStatus status = ERROR;
 1746              		.loc 1 1095 0
 1747 001c 4FF00003 		mov	r3, #0
 1748 0020 FB75     		strb	r3, [r7, #23]
1096:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
1097:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
1098:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
1099:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_EVENT(I2C_EVENT));
1100:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
1101:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Read the I2Cx status register */
1102:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   flag1 = I2Cx->SR1;
 1749              		.loc 1 1102 0
 1750 0022 7B68     		ldr	r3, [r7, #4]
 1751 0024 9B8A     		ldrh	r3, [r3, #20]	@ movhi
 1752 0026 9BB2     		uxth	r3, r3
 1753 0028 FB60     		str	r3, [r7, #12]
1103:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   flag2 = I2Cx->SR2;
 1754              		.loc 1 1103 0
 1755 002a 7B68     		ldr	r3, [r7, #4]
 1756 002c 1B8B     		ldrh	r3, [r3, #24]	@ movhi
 1757 002e 9BB2     		uxth	r3, r3
 1758 0030 BB60     		str	r3, [r7, #8]
1104:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   flag2 = flag2 << 16;
 1759              		.loc 1 1104 0
 1760 0032 BB68     		ldr	r3, [r7, #8]
 1761 0034 4FEA0343 		lsl	r3, r3, #16
 1762 0038 BB60     		str	r3, [r7, #8]
1105:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
1106:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Get the last event value from I2C status register */
1107:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   lastevent = (flag1 | flag2) & FLAG_MASK;
 1763              		.loc 1 1107 0
 1764 003a FA68     		ldr	r2, [r7, #12]
 1765 003c BB68     		ldr	r3, [r7, #8]
 1766 003e 42EA0303 		orr	r3, r2, r3
 1767 0042 23F07F43 		bic	r3, r3, #-16777216
 1768 0046 3B61     		str	r3, [r7, #16]
1108:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
1109:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check whether the last event contains the I2C_EVENT */
1110:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   if ((lastevent & I2C_EVENT) == I2C_EVENT)
 1769              		.loc 1 1110 0
 1770 0048 3A69     		ldr	r2, [r7, #16]
 1771 004a 3B68     		ldr	r3, [r7, #0]
 1772 004c 1A40     		ands	r2, r2, r3
 1773 004e 3B68     		ldr	r3, [r7, #0]
 1774 0050 9A42     		cmp	r2, r3
 1775 0052 03D1     		bne	.L80
1111:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
1112:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* SUCCESS: last event is equal to I2C_EVENT */
1113:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     status = SUCCESS;
 1776              		.loc 1 1113 0
 1777 0054 4FF00103 		mov	r3, #1
 1778 0058 FB75     		strb	r3, [r7, #23]
 1779 005a 02E0     		b	.L81
 1780              	.L80:
1114:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
1115:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   else
1116:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
1117:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* ERROR: last event is different from I2C_EVENT */
1118:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     status = ERROR;
 1781              		.loc 1 1118 0
 1782 005c 4FF00003 		mov	r3, #0
 1783 0060 FB75     		strb	r3, [r7, #23]
 1784              	.L81:
1119:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
1120:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Return status */
1121:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   return status;
 1785              		.loc 1 1121 0
 1786 0062 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
1122:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 1787              		.loc 1 1122 0
 1788 0064 1846     		mov	r0, r3
 1789 0066 07F11C07 		add	r7, r7, #28
 1790 006a BD46     		mov	sp, r7
 1791 006c 80BC     		pop	{r7}
 1792 006e 7047     		bx	lr
 1793              		.cfi_endproc
 1794              	.LFE137:
 1796              		.section	.text.I2C_GetLastEvent,"ax",%progbits
 1797              		.align	2
 1798              		.global	I2C_GetLastEvent
 1799              		.thumb
 1800              		.thumb_func
 1802              	I2C_GetLastEvent:
 1803              	.LFB138:
1123:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
1124:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /*
1125:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  ===============================================================================
1126:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****                           2. Advanced state monitoring                   
1127:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  ===============================================================================  
1128:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  */
1129:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
1130:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
1131:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Returns the last I2Cx Event.
1132:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
1133:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *     
1134:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @note   For detailed description of Events, please refer to section I2C_Events
1135:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *         in stm32f4xx_i2c.h file.
1136:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *    
1137:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval The last event
1138:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
1139:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** uint32_t I2C_GetLastEvent(I2C_TypeDef* I2Cx)
1140:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 1804              		.loc 1 1140 0
 1805              		.cfi_startproc
 1806              		@ args = 0, pretend = 0, frame = 24
 1807              		@ frame_needed = 1, uses_anonymous_args = 0
 1808              		@ link register save eliminated.
 1809 0000 80B4     		push	{r7}
 1810              	.LCFI84:
 1811              		.cfi_def_cfa_offset 4
 1812 0002 87B0     		sub	sp, sp, #28
 1813              	.LCFI85:
 1814              		.cfi_def_cfa_offset 32
 1815 0004 00AF     		add	r7, sp, #0
 1816              		.cfi_offset 7, -4
 1817              	.LCFI86:
 1818              		.cfi_def_cfa_register 7
 1819 0006 7860     		str	r0, [r7, #4]
1141:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   uint32_t lastevent = 0;
 1820              		.loc 1 1141 0
 1821 0008 4FF00003 		mov	r3, #0
 1822 000c 7B61     		str	r3, [r7, #20]
1142:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   uint32_t flag1 = 0, flag2 = 0;
 1823              		.loc 1 1142 0
 1824 000e 4FF00003 		mov	r3, #0
 1825 0012 3B61     		str	r3, [r7, #16]
 1826 0014 4FF00003 		mov	r3, #0
 1827 0018 FB60     		str	r3, [r7, #12]
1143:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
1144:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
1145:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
1146:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
1147:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Read the I2Cx status register */
1148:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   flag1 = I2Cx->SR1;
 1828              		.loc 1 1148 0
 1829 001a 7B68     		ldr	r3, [r7, #4]
 1830 001c 9B8A     		ldrh	r3, [r3, #20]	@ movhi
 1831 001e 9BB2     		uxth	r3, r3
 1832 0020 3B61     		str	r3, [r7, #16]
1149:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   flag2 = I2Cx->SR2;
 1833              		.loc 1 1149 0
 1834 0022 7B68     		ldr	r3, [r7, #4]
 1835 0024 1B8B     		ldrh	r3, [r3, #24]	@ movhi
 1836 0026 9BB2     		uxth	r3, r3
 1837 0028 FB60     		str	r3, [r7, #12]
1150:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   flag2 = flag2 << 16;
 1838              		.loc 1 1150 0
 1839 002a FB68     		ldr	r3, [r7, #12]
 1840 002c 4FEA0343 		lsl	r3, r3, #16
 1841 0030 FB60     		str	r3, [r7, #12]
1151:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
1152:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Get the last event value from I2C status register */
1153:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   lastevent = (flag1 | flag2) & FLAG_MASK;
 1842              		.loc 1 1153 0
 1843 0032 3A69     		ldr	r2, [r7, #16]
 1844 0034 FB68     		ldr	r3, [r7, #12]
 1845 0036 42EA0303 		orr	r3, r2, r3
 1846 003a 23F07F43 		bic	r3, r3, #-16777216
 1847 003e 7B61     		str	r3, [r7, #20]
1154:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
1155:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Return status */
1156:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   return lastevent;
 1848              		.loc 1 1156 0
 1849 0040 7B69     		ldr	r3, [r7, #20]
1157:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 1850              		.loc 1 1157 0
 1851 0042 1846     		mov	r0, r3
 1852 0044 07F11C07 		add	r7, r7, #28
 1853 0048 BD46     		mov	sp, r7
 1854 004a 80BC     		pop	{r7}
 1855 004c 7047     		bx	lr
 1856              		.cfi_endproc
 1857              	.LFE138:
 1859 004e 00BF     		.section	.text.I2C_GetFlagStatus,"ax",%progbits
 1860              		.align	2
 1861              		.global	I2C_GetFlagStatus
 1862              		.thumb
 1863              		.thumb_func
 1865              	I2C_GetFlagStatus:
 1866              	.LFB139:
1158:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
1159:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /*
1160:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  ===============================================================================
1161:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****                           3. Flag-based state monitoring                   
1162:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  ===============================================================================  
1163:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  */
1164:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
1165:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
1166:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Checks whether the specified I2C flag is set or not.
1167:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
1168:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2C_FLAG: specifies the flag to check. 
1169:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          This parameter can be one of the following values:
1170:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_DUALF: Dual flag (Slave mode)
1171:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_SMBHOST: SMBus host header (Slave mode)
1172:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_SMBDEFAULT: SMBus default header (Slave mode)
1173:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_GENCALL: General call header flag (Slave mode)
1174:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_TRA: Transmitter/Receiver flag
1175:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_BUSY: Bus busy flag
1176:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_MSL: Master/Slave flag
1177:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_SMBALERT: SMBus Alert flag
1178:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_TIMEOUT: Timeout or Tlow error flag
1179:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_PECERR: PEC error in reception flag
1180:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_OVR: Overrun/Underrun flag (Slave mode)
1181:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_AF: Acknowledge failure flag
1182:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_ARLO: Arbitration lost flag (Master mode)
1183:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_BERR: Bus error flag
1184:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_TXE: Data register empty flag (Transmitter)
1185:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_RXNE: Data register not empty (Receiver) flag
1186:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_STOPF: Stop detection flag (Slave mode)
1187:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_ADD10: 10-bit header sent flag (Master mode)
1188:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_BTF: Byte transfer finished flag
1189:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_ADDR: Address sent flag (Master mode) "ADSL"
1190:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *                                Address matched flag (Slave mode)"ENDAD"
1191:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_SB: Start bit flag (Master mode)
1192:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval The new state of I2C_FLAG (SET or RESET).
1193:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
1194:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** FlagStatus I2C_GetFlagStatus(I2C_TypeDef* I2Cx, uint32_t I2C_FLAG)
1195:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 1867              		.loc 1 1195 0
 1868              		.cfi_startproc
 1869              		@ args = 0, pretend = 0, frame = 24
 1870              		@ frame_needed = 1, uses_anonymous_args = 0
 1871              		@ link register save eliminated.
 1872 0000 80B4     		push	{r7}
 1873              	.LCFI87:
 1874              		.cfi_def_cfa_offset 4
 1875 0002 87B0     		sub	sp, sp, #28
 1876              	.LCFI88:
 1877              		.cfi_def_cfa_offset 32
 1878 0004 00AF     		add	r7, sp, #0
 1879              		.cfi_offset 7, -4
 1880              	.LCFI89:
 1881              		.cfi_def_cfa_register 7
 1882 0006 7860     		str	r0, [r7, #4]
 1883 0008 3960     		str	r1, [r7, #0]
1196:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   FlagStatus bitstatus = RESET;
 1884              		.loc 1 1196 0
 1885 000a 4FF00003 		mov	r3, #0
 1886 000e FB75     		strb	r3, [r7, #23]
1197:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   __IO uint32_t i2creg = 0, i2cxbase = 0;
 1887              		.loc 1 1197 0
 1888 0010 4FF00003 		mov	r3, #0
 1889 0014 3B61     		str	r3, [r7, #16]
 1890 0016 4FF00003 		mov	r3, #0
 1891 001a FB60     		str	r3, [r7, #12]
1198:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
1199:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
1200:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
1201:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_GET_FLAG(I2C_FLAG));
1202:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
1203:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Get the I2Cx peripheral base address */
1204:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   i2cxbase = (uint32_t)I2Cx;
 1892              		.loc 1 1204 0
 1893 001c 7B68     		ldr	r3, [r7, #4]
 1894 001e FB60     		str	r3, [r7, #12]
1205:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   
1206:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Read flag register index */
1207:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   i2creg = I2C_FLAG >> 28;
 1895              		.loc 1 1207 0
 1896 0020 3B68     		ldr	r3, [r7, #0]
 1897 0022 4FEA1373 		lsr	r3, r3, #28
 1898 0026 3B61     		str	r3, [r7, #16]
1208:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   
1209:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Get bit[23:0] of the flag */
1210:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   I2C_FLAG &= FLAG_MASK;
 1899              		.loc 1 1210 0
 1900 0028 3B68     		ldr	r3, [r7, #0]
 1901 002a 23F07F43 		bic	r3, r3, #-16777216
 1902 002e 3B60     		str	r3, [r7, #0]
1211:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   
1212:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   if(i2creg != 0)
 1903              		.loc 1 1212 0
 1904 0030 3B69     		ldr	r3, [r7, #16]
 1905 0032 002B     		cmp	r3, #0
 1906 0034 04D0     		beq	.L84
1213:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
1214:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Get the I2Cx SR1 register address */
1215:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     i2cxbase += 0x14;
 1907              		.loc 1 1215 0
 1908 0036 FB68     		ldr	r3, [r7, #12]
 1909 0038 03F11403 		add	r3, r3, #20
 1910 003c FB60     		str	r3, [r7, #12]
 1911 003e 07E0     		b	.L85
 1912              	.L84:
1216:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
1217:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   else
1218:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
1219:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Flag in I2Cx SR2 Register */
1220:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2C_FLAG = (uint32_t)(I2C_FLAG >> 16);
 1913              		.loc 1 1220 0
 1914 0040 3B68     		ldr	r3, [r7, #0]
 1915 0042 4FEA1343 		lsr	r3, r3, #16
 1916 0046 3B60     		str	r3, [r7, #0]
1221:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Get the I2Cx SR2 register address */
1222:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     i2cxbase += 0x18;
 1917              		.loc 1 1222 0
 1918 0048 FB68     		ldr	r3, [r7, #12]
 1919 004a 03F11803 		add	r3, r3, #24
 1920 004e FB60     		str	r3, [r7, #12]
 1921              	.L85:
1223:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
1224:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   
1225:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   if(((*(__IO uint32_t *)i2cxbase) & I2C_FLAG) != (uint32_t)RESET)
 1922              		.loc 1 1225 0
 1923 0050 FB68     		ldr	r3, [r7, #12]
 1924 0052 1A68     		ldr	r2, [r3, #0]
 1925 0054 3B68     		ldr	r3, [r7, #0]
 1926 0056 02EA0303 		and	r3, r2, r3
 1927 005a 002B     		cmp	r3, #0
 1928 005c 03D0     		beq	.L86
1226:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
1227:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* I2C_FLAG is set */
1228:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     bitstatus = SET;
 1929              		.loc 1 1228 0
 1930 005e 4FF00103 		mov	r3, #1
 1931 0062 FB75     		strb	r3, [r7, #23]
 1932 0064 02E0     		b	.L87
 1933              	.L86:
1229:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
1230:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   else
1231:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
1232:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* I2C_FLAG is reset */
1233:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     bitstatus = RESET;
 1934              		.loc 1 1233 0
 1935 0066 4FF00003 		mov	r3, #0
 1936 006a FB75     		strb	r3, [r7, #23]
 1937              	.L87:
1234:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
1235:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   
1236:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Return the I2C_FLAG status */
1237:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   return  bitstatus;
 1938              		.loc 1 1237 0
 1939 006c FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
1238:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 1940              		.loc 1 1238 0
 1941 006e 1846     		mov	r0, r3
 1942 0070 07F11C07 		add	r7, r7, #28
 1943 0074 BD46     		mov	sp, r7
 1944 0076 80BC     		pop	{r7}
 1945 0078 7047     		bx	lr
 1946              		.cfi_endproc
 1947              	.LFE139:
 1949 007a 00BF     		.section	.text.I2C_ClearFlag,"ax",%progbits
 1950              		.align	2
 1951              		.global	I2C_ClearFlag
 1952              		.thumb
 1953              		.thumb_func
 1955              	I2C_ClearFlag:
 1956              	.LFB140:
1239:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
1240:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
1241:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Clears the I2Cx's pending flags.
1242:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
1243:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2C_FLAG: specifies the flag to clear. 
1244:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          This parameter can be any combination of the following values:
1245:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_SMBALERT: SMBus Alert flag
1246:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_TIMEOUT: Timeout or Tlow error flag
1247:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_PECERR: PEC error in reception flag
1248:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_OVR: Overrun/Underrun flag (Slave mode)
1249:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_AF: Acknowledge failure flag
1250:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_ARLO: Arbitration lost flag (Master mode)
1251:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_BERR: Bus error flag
1252:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *   
1253:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @note   STOPF (STOP detection) is cleared by software sequence: a read operation 
1254:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          to I2C_SR1 register (I2C_GetFlagStatus()) followed by a write operation 
1255:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          to I2C_CR1 register (I2C_Cmd() to re-enable the I2C peripheral).
1256:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @note   ADD10 (10-bit header sent) is cleared by software sequence: a read 
1257:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          operation to I2C_SR1 (I2C_GetFlagStatus()) followed by writing the 
1258:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          second byte of the address in DR register.
1259:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @note   BTF (Byte Transfer Finished) is cleared by software sequence: a read 
1260:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          operation to I2C_SR1 register (I2C_GetFlagStatus()) followed by a 
1261:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          read/write to I2C_DR register (I2C_SendData()).
1262:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @note   ADDR (Address sent) is cleared by software sequence: a read operation to 
1263:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          I2C_SR1 register (I2C_GetFlagStatus()) followed by a read operation to 
1264:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          I2C_SR2 register ((void)(I2Cx->SR2)).
1265:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @note   SB (Start Bit) is cleared software sequence: a read operation to I2C_SR1
1266:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          register (I2C_GetFlagStatus()) followed by a write operation to I2C_DR
1267:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          register (I2C_SendData()).
1268:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *  
1269:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval None
1270:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
1271:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** void I2C_ClearFlag(I2C_TypeDef* I2Cx, uint32_t I2C_FLAG)
1272:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 1957              		.loc 1 1272 0
 1958              		.cfi_startproc
 1959              		@ args = 0, pretend = 0, frame = 16
 1960              		@ frame_needed = 1, uses_anonymous_args = 0
 1961              		@ link register save eliminated.
 1962 0000 80B4     		push	{r7}
 1963              	.LCFI90:
 1964              		.cfi_def_cfa_offset 4
 1965 0002 85B0     		sub	sp, sp, #20
 1966              	.LCFI91:
 1967              		.cfi_def_cfa_offset 24
 1968 0004 00AF     		add	r7, sp, #0
 1969              		.cfi_offset 7, -4
 1970              	.LCFI92:
 1971              		.cfi_def_cfa_register 7
 1972 0006 7860     		str	r0, [r7, #4]
 1973 0008 3960     		str	r1, [r7, #0]
1273:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   uint32_t flagpos = 0;
 1974              		.loc 1 1273 0
 1975 000a 4FF00003 		mov	r3, #0
 1976 000e FB60     		str	r3, [r7, #12]
1274:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
1275:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
1276:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_CLEAR_FLAG(I2C_FLAG));
1277:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Get the I2C flag position */
1278:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   flagpos = I2C_FLAG & FLAG_MASK;
 1977              		.loc 1 1278 0
 1978 0010 3B68     		ldr	r3, [r7, #0]
 1979 0012 23F07F43 		bic	r3, r3, #-16777216
 1980 0016 FB60     		str	r3, [r7, #12]
1279:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Clear the selected I2C flag */
1280:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   I2Cx->SR1 = (uint16_t)~flagpos;
 1981              		.loc 1 1280 0
 1982 0018 FB68     		ldr	r3, [r7, #12]
 1983 001a 9BB2     		uxth	r3, r3
 1984 001c 6FEA0303 		mvn	r3, r3
 1985 0020 9AB2     		uxth	r2, r3
 1986 0022 7B68     		ldr	r3, [r7, #4]
 1987 0024 9A82     		strh	r2, [r3, #20]	@ movhi
1281:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 1988              		.loc 1 1281 0
 1989 0026 07F11407 		add	r7, r7, #20
 1990 002a BD46     		mov	sp, r7
 1991 002c 80BC     		pop	{r7}
 1992 002e 7047     		bx	lr
 1993              		.cfi_endproc
 1994              	.LFE140:
 1996              		.section	.text.I2C_GetITStatus,"ax",%progbits
 1997              		.align	2
 1998              		.global	I2C_GetITStatus
 1999              		.thumb
 2000              		.thumb_func
 2002              	I2C_GetITStatus:
 2003              	.LFB141:
1282:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
1283:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
1284:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Checks whether the specified I2C interrupt has occurred or not.
1285:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
1286:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2C_IT: specifies the interrupt source to check. 
1287:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          This parameter can be one of the following values:
1288:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_IT_SMBALERT: SMBus Alert flag
1289:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_IT_TIMEOUT: Timeout or Tlow error flag
1290:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_IT_PECERR: PEC error in reception flag
1291:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_IT_OVR: Overrun/Underrun flag (Slave mode)
1292:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_IT_AF: Acknowledge failure flag
1293:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_IT_ARLO: Arbitration lost flag (Master mode)
1294:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_IT_BERR: Bus error flag
1295:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_IT_TXE: Data register empty flag (Transmitter)
1296:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_IT_RXNE: Data register not empty (Receiver) flag
1297:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_IT_STOPF: Stop detection flag (Slave mode)
1298:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_IT_ADD10: 10-bit header sent flag (Master mode)
1299:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_IT_BTF: Byte transfer finished flag
1300:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_IT_ADDR: Address sent flag (Master mode) "ADSL"
1301:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *                              Address matched flag (Slave mode)"ENDAD"
1302:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_IT_SB: Start bit flag (Master mode)
1303:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval The new state of I2C_IT (SET or RESET).
1304:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
1305:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** ITStatus I2C_GetITStatus(I2C_TypeDef* I2Cx, uint32_t I2C_IT)
1306:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 2004              		.loc 1 1306 0
 2005              		.cfi_startproc
 2006              		@ args = 0, pretend = 0, frame = 16
 2007              		@ frame_needed = 1, uses_anonymous_args = 0
 2008              		@ link register save eliminated.
 2009 0000 80B4     		push	{r7}
 2010              	.LCFI93:
 2011              		.cfi_def_cfa_offset 4
 2012 0002 85B0     		sub	sp, sp, #20
 2013              	.LCFI94:
 2014              		.cfi_def_cfa_offset 24
 2015 0004 00AF     		add	r7, sp, #0
 2016              		.cfi_offset 7, -4
 2017              	.LCFI95:
 2018              		.cfi_def_cfa_register 7
 2019 0006 7860     		str	r0, [r7, #4]
 2020 0008 3960     		str	r1, [r7, #0]
1307:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   ITStatus bitstatus = RESET;
 2021              		.loc 1 1307 0
 2022 000a 4FF00003 		mov	r3, #0
 2023 000e FB73     		strb	r3, [r7, #15]
1308:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   uint32_t enablestatus = 0;
 2024              		.loc 1 1308 0
 2025 0010 4FF00003 		mov	r3, #0
 2026 0014 BB60     		str	r3, [r7, #8]
1309:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
1310:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
1311:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
1312:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_GET_IT(I2C_IT));
1313:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
1314:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check if the interrupt source is enabled or not */
1315:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   enablestatus = (uint32_t)(((I2C_IT & ITEN_MASK) >> 16) & (I2Cx->CR2)) ;
 2027              		.loc 1 1315 0
 2028 0016 3B68     		ldr	r3, [r7, #0]
 2029 0018 03F0E063 		and	r3, r3, #117440512
 2030 001c 4FEA1342 		lsr	r2, r3, #16
 2031 0020 7B68     		ldr	r3, [r7, #4]
 2032 0022 9B88     		ldrh	r3, [r3, #4]	@ movhi
 2033 0024 9BB2     		uxth	r3, r3
 2034 0026 02EA0303 		and	r3, r2, r3
 2035 002a BB60     		str	r3, [r7, #8]
1316:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   
1317:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Get bit[23:0] of the flag */
1318:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   I2C_IT &= FLAG_MASK;
 2036              		.loc 1 1318 0
 2037 002c 3B68     		ldr	r3, [r7, #0]
 2038 002e 23F07F43 		bic	r3, r3, #-16777216
 2039 0032 3B60     		str	r3, [r7, #0]
1319:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
1320:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the status of the specified I2C flag */
1321:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   if (((I2Cx->SR1 & I2C_IT) != (uint32_t)RESET) && enablestatus)
 2040              		.loc 1 1321 0
 2041 0034 7B68     		ldr	r3, [r7, #4]
 2042 0036 9B8A     		ldrh	r3, [r3, #20]	@ movhi
 2043 0038 9BB2     		uxth	r3, r3
 2044 003a 1A46     		mov	r2, r3
 2045 003c 3B68     		ldr	r3, [r7, #0]
 2046 003e 02EA0303 		and	r3, r2, r3
 2047 0042 002B     		cmp	r3, #0
 2048 0044 06D0     		beq	.L90
 2049              		.loc 1 1321 0 is_stmt 0 discriminator 1
 2050 0046 BB68     		ldr	r3, [r7, #8]
 2051 0048 002B     		cmp	r3, #0
 2052 004a 03D0     		beq	.L90
1322:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
1323:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* I2C_IT is set */
1324:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     bitstatus = SET;
 2053              		.loc 1 1324 0 is_stmt 1
 2054 004c 4FF00103 		mov	r3, #1
 2055 0050 FB73     		strb	r3, [r7, #15]
 2056 0052 02E0     		b	.L91
 2057              	.L90:
1325:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
1326:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   else
1327:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
1328:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* I2C_IT is reset */
1329:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     bitstatus = RESET;
 2058              		.loc 1 1329 0
 2059 0054 4FF00003 		mov	r3, #0
 2060 0058 FB73     		strb	r3, [r7, #15]
 2061              	.L91:
1330:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
1331:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Return the I2C_IT status */
1332:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   return  bitstatus;
 2062              		.loc 1 1332 0
 2063 005a FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
1333:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 2064              		.loc 1 1333 0
 2065 005c 1846     		mov	r0, r3
 2066 005e 07F11407 		add	r7, r7, #20
 2067 0062 BD46     		mov	sp, r7
 2068 0064 80BC     		pop	{r7}
 2069 0066 7047     		bx	lr
 2070              		.cfi_endproc
 2071              	.LFE141:
 2073              		.section	.text.I2C_ClearITPendingBit,"ax",%progbits
 2074              		.align	2
 2075              		.global	I2C_ClearITPendingBit
 2076              		.thumb
 2077              		.thumb_func
 2079              	I2C_ClearITPendingBit:
 2080              	.LFB142:
1334:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
1335:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
1336:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Clears the I2Cx's interrupt pending bits.
1337:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
1338:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2C_IT: specifies the interrupt pending bit to clear. 
1339:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          This parameter can be any combination of the following values:
1340:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_IT_SMBALERT: SMBus Alert interrupt
1341:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_IT_TIMEOUT: Timeout or Tlow error interrupt
1342:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_IT_PECERR: PEC error in reception  interrupt
1343:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_IT_OVR: Overrun/Underrun interrupt (Slave mode)
1344:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_IT_AF: Acknowledge failure interrupt
1345:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_IT_ARLO: Arbitration lost interrupt (Master mode)
1346:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_IT_BERR: Bus error interrupt
1347:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * 
1348:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @note   STOPF (STOP detection) is cleared by software sequence: a read operation 
1349:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          to I2C_SR1 register (I2C_GetITStatus()) followed by a write operation to 
1350:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          I2C_CR1 register (I2C_Cmd() to re-enable the I2C peripheral).
1351:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @note   ADD10 (10-bit header sent) is cleared by software sequence: a read 
1352:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          operation to I2C_SR1 (I2C_GetITStatus()) followed by writing the second 
1353:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          byte of the address in I2C_DR register.
1354:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @note   BTF (Byte Transfer Finished) is cleared by software sequence: a read 
1355:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          operation to I2C_SR1 register (I2C_GetITStatus()) followed by a 
1356:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          read/write to I2C_DR register (I2C_SendData()).
1357:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @note   ADDR (Address sent) is cleared by software sequence: a read operation to 
1358:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          I2C_SR1 register (I2C_GetITStatus()) followed by a read operation to 
1359:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          I2C_SR2 register ((void)(I2Cx->SR2)).
1360:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @note   SB (Start Bit) is cleared by software sequence: a read operation to 
1361:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          I2C_SR1 register (I2C_GetITStatus()) followed by a write operation to 
1362:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          I2C_DR register (I2C_SendData()).
1363:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval None
1364:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
1365:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** void I2C_ClearITPendingBit(I2C_TypeDef* I2Cx, uint32_t I2C_IT)
1366:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 2081              		.loc 1 1366 0
 2082              		.cfi_startproc
 2083              		@ args = 0, pretend = 0, frame = 16
 2084              		@ frame_needed = 1, uses_anonymous_args = 0
 2085              		@ link register save eliminated.
 2086 0000 80B4     		push	{r7}
 2087              	.LCFI96:
 2088              		.cfi_def_cfa_offset 4
 2089 0002 85B0     		sub	sp, sp, #20
 2090              	.LCFI97:
 2091              		.cfi_def_cfa_offset 24
 2092 0004 00AF     		add	r7, sp, #0
 2093              		.cfi_offset 7, -4
 2094              	.LCFI98:
 2095              		.cfi_def_cfa_register 7
 2096 0006 7860     		str	r0, [r7, #4]
 2097 0008 3960     		str	r1, [r7, #0]
1367:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   uint32_t flagpos = 0;
 2098              		.loc 1 1367 0
 2099 000a 4FF00003 		mov	r3, #0
 2100 000e FB60     		str	r3, [r7, #12]
1368:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
1369:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
1370:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_CLEAR_IT(I2C_IT));
1371:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
1372:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Get the I2C flag position */
1373:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   flagpos = I2C_IT & FLAG_MASK;
 2101              		.loc 1 1373 0
 2102 0010 3B68     		ldr	r3, [r7, #0]
 2103 0012 23F07F43 		bic	r3, r3, #-16777216
 2104 0016 FB60     		str	r3, [r7, #12]
1374:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
1375:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Clear the selected I2C flag */
1376:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   I2Cx->SR1 = (uint16_t)~flagpos;
 2105              		.loc 1 1376 0
 2106 0018 FB68     		ldr	r3, [r7, #12]
 2107 001a 9BB2     		uxth	r3, r3
 2108 001c 6FEA0303 		mvn	r3, r3
 2109 0020 9AB2     		uxth	r2, r3
 2110 0022 7B68     		ldr	r3, [r7, #4]
 2111 0024 9A82     		strh	r2, [r3, #20]	@ movhi
1377:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 2112              		.loc 1 1377 0
 2113 0026 07F11407 		add	r7, r7, #20
 2114 002a BD46     		mov	sp, r7
 2115 002c 80BC     		pop	{r7}
 2116 002e 7047     		bx	lr
 2117              		.cfi_endproc
 2118              	.LFE142:
 2120              		.text
 2121              	.Letext0:
DEFINED SYMBOLS
                            *ABS*:00000000 stm32f4xx_i2c.c
     /tmp/ccJ3uWYc.s:25     .text.I2C_DeInit:00000000 $t
     /tmp/ccJ3uWYc.s:30     .text.I2C_DeInit:00000000 I2C_DeInit
     /tmp/ccJ3uWYc.s:100    .text.I2C_DeInit:00000074 $d
     /tmp/ccJ3uWYc.s:107    .text.I2C_Init:00000000 $t
     /tmp/ccJ3uWYc.s:112    .text.I2C_Init:00000000 I2C_Init
     /tmp/ccJ3uWYc.s:335    .text.I2C_Init:000001a0 $d
     /tmp/ccJ3uWYc.s:343    .text.I2C_StructInit:00000000 $t
     /tmp/ccJ3uWYc.s:348    .text.I2C_StructInit:00000000 I2C_StructInit
     /tmp/ccJ3uWYc.s:399    .text.I2C_Cmd:00000000 $t
     /tmp/ccJ3uWYc.s:404    .text.I2C_Cmd:00000000 I2C_Cmd
     /tmp/ccJ3uWYc.s:456    .text.I2C_GenerateSTART:00000000 $t
     /tmp/ccJ3uWYc.s:461    .text.I2C_GenerateSTART:00000000 I2C_GenerateSTART
     /tmp/ccJ3uWYc.s:513    .text.I2C_GenerateSTOP:00000000 $t
     /tmp/ccJ3uWYc.s:518    .text.I2C_GenerateSTOP:00000000 I2C_GenerateSTOP
     /tmp/ccJ3uWYc.s:570    .text.I2C_Send7bitAddress:00000000 $t
     /tmp/ccJ3uWYc.s:575    .text.I2C_Send7bitAddress:00000000 I2C_Send7bitAddress
     /tmp/ccJ3uWYc.s:626    .text.I2C_AcknowledgeConfig:00000000 $t
     /tmp/ccJ3uWYc.s:631    .text.I2C_AcknowledgeConfig:00000000 I2C_AcknowledgeConfig
     /tmp/ccJ3uWYc.s:683    .text.I2C_OwnAddress2Config:00000000 $t
     /tmp/ccJ3uWYc.s:688    .text.I2C_OwnAddress2Config:00000000 I2C_OwnAddress2Config
     /tmp/ccJ3uWYc.s:741    .text.I2C_DualAddressCmd:00000000 $t
     /tmp/ccJ3uWYc.s:746    .text.I2C_DualAddressCmd:00000000 I2C_DualAddressCmd
     /tmp/ccJ3uWYc.s:798    .text.I2C_GeneralCallCmd:00000000 $t
     /tmp/ccJ3uWYc.s:803    .text.I2C_GeneralCallCmd:00000000 I2C_GeneralCallCmd
     /tmp/ccJ3uWYc.s:855    .text.I2C_SoftwareResetCmd:00000000 $t
     /tmp/ccJ3uWYc.s:860    .text.I2C_SoftwareResetCmd:00000000 I2C_SoftwareResetCmd
     /tmp/ccJ3uWYc.s:914    .text.I2C_StretchClockCmd:00000000 $t
     /tmp/ccJ3uWYc.s:919    .text.I2C_StretchClockCmd:00000000 I2C_StretchClockCmd
     /tmp/ccJ3uWYc.s:971    .text.I2C_FastModeDutyCycleConfig:00000000 $t
     /tmp/ccJ3uWYc.s:976    .text.I2C_FastModeDutyCycleConfig:00000000 I2C_FastModeDutyCycleConfig
     /tmp/ccJ3uWYc.s:1028   .text.I2C_NACKPositionConfig:00000000 $t
     /tmp/ccJ3uWYc.s:1033   .text.I2C_NACKPositionConfig:00000000 I2C_NACKPositionConfig
     /tmp/ccJ3uWYc.s:1085   .text.I2C_SMBusAlertConfig:00000000 $t
     /tmp/ccJ3uWYc.s:1090   .text.I2C_SMBusAlertConfig:00000000 I2C_SMBusAlertConfig
     /tmp/ccJ3uWYc.s:1142   .text.I2C_ARPCmd:00000000 $t
     /tmp/ccJ3uWYc.s:1147   .text.I2C_ARPCmd:00000000 I2C_ARPCmd
     /tmp/ccJ3uWYc.s:1199   .text.I2C_SendData:00000000 $t
     /tmp/ccJ3uWYc.s:1204   .text.I2C_SendData:00000000 I2C_SendData
     /tmp/ccJ3uWYc.s:1238   .text.I2C_ReceiveData:00000000 $t
     /tmp/ccJ3uWYc.s:1243   .text.I2C_ReceiveData:00000000 I2C_ReceiveData
     /tmp/ccJ3uWYc.s:1276   .text.I2C_TransmitPEC:00000000 $t
     /tmp/ccJ3uWYc.s:1281   .text.I2C_TransmitPEC:00000000 I2C_TransmitPEC
     /tmp/ccJ3uWYc.s:1333   .text.I2C_PECPositionConfig:00000000 $t
     /tmp/ccJ3uWYc.s:1338   .text.I2C_PECPositionConfig:00000000 I2C_PECPositionConfig
     /tmp/ccJ3uWYc.s:1390   .text.I2C_CalculatePEC:00000000 $t
     /tmp/ccJ3uWYc.s:1395   .text.I2C_CalculatePEC:00000000 I2C_CalculatePEC
     /tmp/ccJ3uWYc.s:1447   .text.I2C_GetPEC:00000000 $t
     /tmp/ccJ3uWYc.s:1452   .text.I2C_GetPEC:00000000 I2C_GetPEC
     /tmp/ccJ3uWYc.s:1487   .text.I2C_DMACmd:00000000 $t
     /tmp/ccJ3uWYc.s:1492   .text.I2C_DMACmd:00000000 I2C_DMACmd
     /tmp/ccJ3uWYc.s:1544   .text.I2C_DMALastTransferCmd:00000000 $t
     /tmp/ccJ3uWYc.s:1549   .text.I2C_DMALastTransferCmd:00000000 I2C_DMALastTransferCmd
     /tmp/ccJ3uWYc.s:1601   .text.I2C_ReadRegister:00000000 $t
     /tmp/ccJ3uWYc.s:1606   .text.I2C_ReadRegister:00000000 I2C_ReadRegister
     /tmp/ccJ3uWYc.s:1651   .text.I2C_ITConfig:00000000 $t
     /tmp/ccJ3uWYc.s:1656   .text.I2C_ITConfig:00000000 I2C_ITConfig
     /tmp/ccJ3uWYc.s:1714   .text.I2C_CheckEvent:00000000 $t
     /tmp/ccJ3uWYc.s:1719   .text.I2C_CheckEvent:00000000 I2C_CheckEvent
     /tmp/ccJ3uWYc.s:1797   .text.I2C_GetLastEvent:00000000 $t
     /tmp/ccJ3uWYc.s:1802   .text.I2C_GetLastEvent:00000000 I2C_GetLastEvent
     /tmp/ccJ3uWYc.s:1860   .text.I2C_GetFlagStatus:00000000 $t
     /tmp/ccJ3uWYc.s:1865   .text.I2C_GetFlagStatus:00000000 I2C_GetFlagStatus
     /tmp/ccJ3uWYc.s:1950   .text.I2C_ClearFlag:00000000 $t
     /tmp/ccJ3uWYc.s:1955   .text.I2C_ClearFlag:00000000 I2C_ClearFlag
     /tmp/ccJ3uWYc.s:1997   .text.I2C_GetITStatus:00000000 $t
     /tmp/ccJ3uWYc.s:2002   .text.I2C_GetITStatus:00000000 I2C_GetITStatus
     /tmp/ccJ3uWYc.s:2074   .text.I2C_ClearITPendingBit:00000000 $t
     /tmp/ccJ3uWYc.s:2079   .text.I2C_ClearITPendingBit:00000000 I2C_ClearITPendingBit
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
RCC_APB1PeriphResetCmd
RCC_GetClocksFreq
