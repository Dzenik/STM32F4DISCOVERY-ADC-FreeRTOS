   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 3
   4              		.fpu fpv4-sp-d16
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 6
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"stm32f4xx_usart.c"
  22              	.Ltext0:
  23              		.cfi_sections	.debug_frame
  24              		.section	.text.USART_DeInit,"ax",%progbits
  25              		.align	2
  26              		.global	USART_DeInit
  27              		.thumb
  28              		.thumb_func
  30              	USART_DeInit:
  31              	.LFB110:
  32              		.file 1 "libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c"
   1:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
   2:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   ******************************************************************************
   3:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @file    stm32f4xx_usart.c
   4:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @author  MCD Application Team
   5:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @version V1.0.0RC1
   6:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @date    25-August-2011
   7:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief   This file provides firmware functions to manage the following 
   8:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          functionalities of the Universal synchronous asynchronous receiver
   9:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          transmitter (USART):           
  10:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *           - Initialization and Configuration
  11:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *           - Data transfers
  12:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *           - Multi-Processor Communication
  13:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *           - LIN mode
  14:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *           - Half-duplex mode
  15:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *           - Smartcard mode
  16:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *           - IrDA mode
  17:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *           - DMA transfers management
  18:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *           - Interrupts and flags management 
  19:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *           
  20:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *  @verbatim
  21:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *      
  22:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          ===================================================================
  23:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *                                 How to use this driver
  24:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          ===================================================================
  25:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          1. Enable peripheral clock using the follwoing functions
  26:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *             RCC_APB2PeriphClockCmd(RCC_APB2Periph_USARTx, ENABLE) for USART1 and USART6 
  27:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *             RCC_APB1PeriphClockCmd(RCC_APB1Periph_USARTx, ENABLE) for USART2, USART3, UART4 or 
  28:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *
  29:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          2.  According to the USART mode, enable the GPIO clocks using 
  30:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *              RCC_AHB1PeriphClockCmd() function. (The I/O can be TX, RX, CTS, 
  31:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *              or/and SCLK). 
  32:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *
  33:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          3. Peripheral's alternate function: 
  34:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *                 - Connect the pin to the desired peripherals' Alternate 
  35:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *                   Function (AF) using GPIO_PinAFConfig() function
  36:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *                 - Configure the desired pin in alternate function by:
  37:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *                   GPIO_InitStruct->GPIO_Mode = GPIO_Mode_AF
  38:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *                 - Select the type, pull-up/pull-down and output speed via 
  39:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *                   GPIO_PuPd, GPIO_OType and GPIO_Speed members
  40:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *                 - Call GPIO_Init() function
  41:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *        
  42:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          4. Program the Baud Rate, Word Length , Stop Bit, Parity, Hardware 
  43:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *             flow control and Mode(Receiver/Transmitter) using the USART_Init()
  44:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *             function.
  45:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *
  46:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          5. For synchronous mode, enable the clock and program the polarity,
  47:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *             phase and last bit using the USART_ClockInit() function.
  48:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *
  49:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          5. Enable the NVIC and the corresponding interrupt using the function 
  50:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *             USART_ITConfig() if you need to use interrupt mode. 
  51:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *
  52:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          6. When using the DMA mode 
  53:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *                   - Configure the DMA using DMA_Init() function
  54:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *                   - Active the needed channel Request using USART_DMACmd() function
  55:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * 
  56:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          7. Enable the USART using the USART_Cmd() function.
  57:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * 
  58:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          8. Enable the DMA using the DMA_Cmd() function, when using DMA mode. 
  59:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *
  60:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          Refer to Multi-Processor, LIN, half-duplex, Smartcard, IrDA sub-sections
  61:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          for more details
  62:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          
  63:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          In order to reach higher communication baudrates, it is possible to
  64:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          enable the oversampling by 8 mode using the function USART_OverSampling8Cmd().
  65:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          This function should be called after enabling the USART clock (RCC_APBxPeriphClockCmd(
  66:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          and before calling the function USART_Init().
  67:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          
  68:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *  @endverbatim
  69:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *        
  70:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   ******************************************************************************
  71:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @attention
  72:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *
  73:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
  74:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
  75:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
  76:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
  77:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
  78:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
  79:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *
  80:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * <h2><center>&copy; COPYRIGHT 2011 STMicroelectronics</center></h2>
  81:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   ******************************************************************************  
  82:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */ 
  83:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
  84:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /* Includes ------------------------------------------------------------------*/
  85:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** #include "stm32f4xx_usart.h"
  86:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** #include "stm32f4xx_rcc.h"
  87:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
  88:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /** @addtogroup STM32F4xx_StdPeriph_Driver
  89:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @{
  90:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
  91:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
  92:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /** @defgroup USART 
  93:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief USART driver modules
  94:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @{
  95:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
  96:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
  97:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /* Private typedef -----------------------------------------------------------*/
  98:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /* Private define ------------------------------------------------------------*/
  99:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 100:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /*!< USART CR1 register clear Mask ((~(uint16_t)0xE9F3)) */
 101:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** #define CR1_CLEAR_MASK            ((uint16_t)(USART_CR1_M | USART_CR1_PCE | \
 102:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****                                               USART_CR1_PS | USART_CR1_TE | \
 103:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****                                               USART_CR1_RE))
 104:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 105:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /*!< USART CR2 register clock bits clear Mask ((~(uint16_t)0xF0FF)) */
 106:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** #define CR2_CLOCK_CLEAR_MASK      ((uint16_t)(USART_CR2_CLKEN | USART_CR2_CPOL | \
 107:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****                                               USART_CR2_CPHA | USART_CR2_LBCL))
 108:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 109:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /*!< USART CR3 register clear Mask ((~(uint16_t)0xFCFF)) */
 110:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** #define CR3_CLEAR_MASK            ((uint16_t)(USART_CR3_RTSE | USART_CR3_CTSE))
 111:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 112:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /*!< USART Interrupts mask */
 113:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** #define IT_MASK                   ((uint16_t)0x001F)
 114:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 115:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /* Private macro -------------------------------------------------------------*/
 116:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /* Private variables ---------------------------------------------------------*/
 117:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /* Private function prototypes -----------------------------------------------*/
 118:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /* Private functions ---------------------------------------------------------*/
 119:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 120:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /** @defgroup USART_Private_Functions
 121:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @{
 122:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 123:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 124:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /** @defgroup USART_Group1 Initialization and Configuration functions
 125:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  *  @brief   Initialization and Configuration functions 
 126:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  *
 127:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @verbatim   
 128:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  ===============================================================================
 129:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****                   Initialization and Configuration functions
 130:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  ===============================================================================  
 131:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 132:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   This subsection provides a set of functions allowing to initialize the USART 
 133:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   in asynchronous and in synchronous modes.
 134:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****    - For the asynchronous mode only these parameters can be configured: 
 135:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - Baud Rate
 136:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - Word Length 
 137:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - Stop Bit
 138:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - Parity: If the parity is enabled, then the MSB bit of the data written
 139:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****           in the data register is transmitted but is changed by the parity bit.
 140:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****           Depending on the frame length defined by the M bit (8-bits or 9-bits),
 141:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****           the possible USART frame formats are as listed in the following table:
 142:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****    +-------------------------------------------------------------+     
 143:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****    |   M bit |  PCE bit  |            USART frame                |
 144:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****    |---------------------|---------------------------------------|             
 145:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****    |    0    |    0      |    | SB | 8 bit data | STB |          |
 146:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****    |---------|-----------|---------------------------------------|  
 147:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****    |    0    |    1      |    | SB | 7 bit data | PB | STB |     |
 148:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****    |---------|-----------|---------------------------------------|  
 149:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****    |    1    |    0      |    | SB | 9 bit data | STB |          |
 150:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****    |---------|-----------|---------------------------------------|  
 151:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****    |    1    |    1      |    | SB | 8 bit data | PB | STB |     |
 152:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****    +-------------------------------------------------------------+            
 153:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - Hardware flow control
 154:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - Receiver/transmitter modes
 155:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 156:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   The USART_Init() function follows the USART  asynchronous configuration procedure
 157:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   (details for the procedure are available in reference manual (RM0090)).
 158:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 159:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   - For the synchronous mode in addition to the asynchronous mode parameters these 
 160:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     parameters should be also configured:
 161:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - USART Clock Enabled
 162:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - USART polarity
 163:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - USART phase
 164:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - USART LastBit
 165:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 166:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   These parameters can be configured using the USART_ClockInit() function.
 167:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 168:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @endverbatim
 169:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @{
 170:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 171:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 172:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 173:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Deinitializes the USARTx peripheral registers to their default reset values.
 174:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
 175:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
 176:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
 177:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 178:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_DeInit(USART_TypeDef* USARTx)
 179:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
  33              		.loc 1 179 0
  34              		.cfi_startproc
  35              		@ args = 0, pretend = 0, frame = 8
  36              		@ frame_needed = 1, uses_anonymous_args = 0
  37 0000 80B5     		push	{r7, lr}
  38              	.LCFI0:
  39              		.cfi_def_cfa_offset 8
  40 0002 82B0     		sub	sp, sp, #8
  41              	.LCFI1:
  42              		.cfi_def_cfa_offset 16
  43 0004 00AF     		add	r7, sp, #0
  44              		.cfi_offset 14, -4
  45              		.cfi_offset 7, -8
  46              	.LCFI2:
  47              		.cfi_def_cfa_register 7
  48 0006 7860     		str	r0, [r7, #4]
 180:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
 181:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 182:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 183:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if (USARTx == USART1)
  49              		.loc 1 183 0
  50 0008 7A68     		ldr	r2, [r7, #4]
  51 000a 344B     		ldr	r3, .L8
  52 000c 9A42     		cmp	r2, r3
  53 000e 0CD1     		bne	.L2
 184:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 185:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, ENABLE);
  54              		.loc 1 185 0
  55 0010 4FF01000 		mov	r0, #16
  56 0014 4FF00101 		mov	r1, #1
  57 0018 FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
 186:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
  58              		.loc 1 186 0
  59 001c 4FF01000 		mov	r0, #16
  60 0020 4FF00001 		mov	r1, #0
  61 0024 FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
  62 0028 53E0     		b	.L1
  63              	.L2:
 187:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 188:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else if (USARTx == USART2)
  64              		.loc 1 188 0
  65 002a 7A68     		ldr	r2, [r7, #4]
  66 002c 2C4B     		ldr	r3, .L8+4
  67 002e 9A42     		cmp	r2, r3
  68 0030 0CD1     		bne	.L4
 189:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 190:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, ENABLE);
  69              		.loc 1 190 0
  70 0032 4FF40030 		mov	r0, #131072
  71 0036 4FF00101 		mov	r1, #1
  72 003a FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 191:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
  73              		.loc 1 191 0
  74 003e 4FF40030 		mov	r0, #131072
  75 0042 4FF00001 		mov	r1, #0
  76 0046 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
  77 004a 42E0     		b	.L1
  78              	.L4:
 192:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 193:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else if (USARTx == USART3)
  79              		.loc 1 193 0
  80 004c 7A68     		ldr	r2, [r7, #4]
  81 004e 254B     		ldr	r3, .L8+8
  82 0050 9A42     		cmp	r2, r3
  83 0052 0CD1     		bne	.L5
 194:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 195:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, ENABLE);
  84              		.loc 1 195 0
  85 0054 4FF48020 		mov	r0, #262144
  86 0058 4FF00101 		mov	r1, #1
  87 005c FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 196:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
  88              		.loc 1 196 0
  89 0060 4FF48020 		mov	r0, #262144
  90 0064 4FF00001 		mov	r1, #0
  91 0068 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
  92 006c 31E0     		b	.L1
  93              	.L5:
 197:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }    
 198:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else if (USARTx == UART4)
  94              		.loc 1 198 0
  95 006e 7A68     		ldr	r2, [r7, #4]
  96 0070 1D4B     		ldr	r3, .L8+12
  97 0072 9A42     		cmp	r2, r3
  98 0074 0CD1     		bne	.L6
 199:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 200:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, ENABLE);
  99              		.loc 1 200 0
 100 0076 4FF40020 		mov	r0, #524288
 101 007a 4FF00101 		mov	r1, #1
 102 007e FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 201:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, DISABLE);
 103              		.loc 1 201 0
 104 0082 4FF40020 		mov	r0, #524288
 105 0086 4FF00001 		mov	r1, #0
 106 008a FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 107 008e 20E0     		b	.L1
 108              	.L6:
 202:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 203:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else if (USARTx == UART5)
 109              		.loc 1 203 0
 110 0090 7A68     		ldr	r2, [r7, #4]
 111 0092 164B     		ldr	r3, .L8+16
 112 0094 9A42     		cmp	r2, r3
 113 0096 0CD1     		bne	.L7
 204:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 205:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, ENABLE);
 114              		.loc 1 205 0
 115 0098 4FF48010 		mov	r0, #1048576
 116 009c 4FF00101 		mov	r1, #1
 117 00a0 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 206:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
 118              		.loc 1 206 0
 119 00a4 4FF48010 		mov	r0, #1048576
 120 00a8 4FF00001 		mov	r1, #0
 121 00ac FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 122 00b0 0FE0     		b	.L1
 123              	.L7:
 207:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }     
 208:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else
 209:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 210:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     if (USARTx == USART6)
 124              		.loc 1 210 0
 125 00b2 7A68     		ldr	r2, [r7, #4]
 126 00b4 0E4B     		ldr	r3, .L8+20
 127 00b6 9A42     		cmp	r2, r3
 128 00b8 0BD1     		bne	.L1
 211:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     { 
 212:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, ENABLE);
 129              		.loc 1 212 0
 130 00ba 4FF02000 		mov	r0, #32
 131 00be 4FF00101 		mov	r1, #1
 132 00c2 FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
 213:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, DISABLE);
 133              		.loc 1 213 0
 134 00c6 4FF02000 		mov	r0, #32
 135 00ca 4FF00001 		mov	r1, #0
 136 00ce FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
 137              	.L1:
 214:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     }
 215:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 216:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 138              		.loc 1 216 0
 139 00d2 07F10807 		add	r7, r7, #8
 140 00d6 BD46     		mov	sp, r7
 141 00d8 80BD     		pop	{r7, pc}
 142              	.L9:
 143 00da 00BF     		.align	2
 144              	.L8:
 145 00dc 00100140 		.word	1073811456
 146 00e0 00440040 		.word	1073759232
 147 00e4 00480040 		.word	1073760256
 148 00e8 004C0040 		.word	1073761280
 149 00ec 00500040 		.word	1073762304
 150 00f0 00140140 		.word	1073812480
 151              		.cfi_endproc
 152              	.LFE110:
 154              		.section	.text.USART_Init,"ax",%progbits
 155              		.align	2
 156              		.global	USART_Init
 157              		.thumb
 158              		.thumb_func
 160              	USART_Init:
 161              	.LFB111:
 217:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 218:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 219:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Initializes the USARTx peripheral according to the specified
 220:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         parameters in the USART_InitStruct .
 221:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
 222:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
 223:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
 224:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         the configuration information for the specified USART peripheral.
 225:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
 226:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 227:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
 228:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 162              		.loc 1 228 0
 163              		.cfi_startproc
 164              		@ args = 0, pretend = 0, frame = 40
 165              		@ frame_needed = 1, uses_anonymous_args = 0
 166 0000 80B5     		push	{r7, lr}
 167              	.LCFI3:
 168              		.cfi_def_cfa_offset 8
 169 0002 8AB0     		sub	sp, sp, #40
 170              	.LCFI4:
 171              		.cfi_def_cfa_offset 48
 172 0004 00AF     		add	r7, sp, #0
 173              		.cfi_offset 14, -4
 174              		.cfi_offset 7, -8
 175              	.LCFI5:
 176              		.cfi_def_cfa_register 7
 177 0006 7860     		str	r0, [r7, #4]
 178 0008 3960     		str	r1, [r7, #0]
 229:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   uint32_t tmpreg = 0x00, apbclock = 0x00;
 179              		.loc 1 229 0
 180 000a 4FF00003 		mov	r3, #0
 181 000e 7B62     		str	r3, [r7, #36]
 182 0010 4FF00003 		mov	r3, #0
 183 0014 3B62     		str	r3, [r7, #32]
 230:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   uint32_t integerdivider = 0x00;
 184              		.loc 1 230 0
 185 0016 4FF00003 		mov	r3, #0
 186 001a FB61     		str	r3, [r7, #28]
 231:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   uint32_t fractionaldivider = 0x00;
 187              		.loc 1 231 0
 188 001c 4FF00003 		mov	r3, #0
 189 0020 BB61     		str	r3, [r7, #24]
 232:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   RCC_ClocksTypeDef RCC_ClocksStatus;
 233:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 234:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
 235:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 236:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_BAUDRATE(USART_InitStruct->USART_BaudRate));  
 237:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_WORD_LENGTH(USART_InitStruct->USART_WordLength));
 238:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_STOPBITS(USART_InitStruct->USART_StopBits));
 239:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_PARITY(USART_InitStruct->USART_Parity));
 240:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_MODE(USART_InitStruct->USART_Mode));
 241:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_HARDWARE_FLOW_CONTROL(USART_InitStruct->USART_HardwareFlowControl));
 242:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 243:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* The hardware flow control is available only for USART1, USART2, USART3 and USART6 */
 244:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if (USART_InitStruct->USART_HardwareFlowControl != USART_HardwareFlowControl_None)
 245:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 246:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     assert_param(IS_USART_1236_PERIPH(USARTx));
 247:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 248:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 249:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /*---------------------------- USART CR2 Configuration -----------------------*/
 250:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   tmpreg = USARTx->CR2;
 190              		.loc 1 250 0
 191 0022 7B68     		ldr	r3, [r7, #4]
 192 0024 1B8A     		ldrh	r3, [r3, #16]	@ movhi
 193 0026 9BB2     		uxth	r3, r3
 194 0028 7B62     		str	r3, [r7, #36]
 251:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 252:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Clear STOP[13:12] bits */
 253:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 195              		.loc 1 253 0
 196 002a 7B6A     		ldr	r3, [r7, #36]
 197 002c 23F44053 		bic	r3, r3, #12288
 198 0030 7B62     		str	r3, [r7, #36]
 254:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 255:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
 256:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       Set STOP[13:12] bits according to USART_StopBits value */
 257:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 199              		.loc 1 257 0
 200 0032 3B68     		ldr	r3, [r7, #0]
 201 0034 DB88     		ldrh	r3, [r3, #6]
 202 0036 7A6A     		ldr	r2, [r7, #36]
 203 0038 42EA0303 		orr	r3, r2, r3
 204 003c 7B62     		str	r3, [r7, #36]
 258:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 259:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Write to USART CR2 */
 260:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USARTx->CR2 = (uint16_t)tmpreg;
 205              		.loc 1 260 0
 206 003e 7B6A     		ldr	r3, [r7, #36]
 207 0040 9AB2     		uxth	r2, r3
 208 0042 7B68     		ldr	r3, [r7, #4]
 209 0044 1A82     		strh	r2, [r3, #16]	@ movhi
 261:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 262:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /*---------------------------- USART CR1 Configuration -----------------------*/
 263:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   tmpreg = USARTx->CR1;
 210              		.loc 1 263 0
 211 0046 7B68     		ldr	r3, [r7, #4]
 212 0048 9B89     		ldrh	r3, [r3, #12]	@ movhi
 213 004a 9BB2     		uxth	r3, r3
 214 004c 7B62     		str	r3, [r7, #36]
 264:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 265:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Clear M, PCE, PS, TE and RE bits */
 266:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 215              		.loc 1 266 0
 216 004e 7B6A     		ldr	r3, [r7, #36]
 217 0050 23F4B053 		bic	r3, r3, #5632
 218 0054 23F00C03 		bic	r3, r3, #12
 219 0058 7B62     		str	r3, [r7, #36]
 267:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 268:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Configure the USART Word Length, Parity and mode: 
 269:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      Set the M bits according to USART_WordLength value 
 270:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      Set PCE and PS bits according to USART_Parity value
 271:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      Set TE and RE bits according to USART_Mode value */
 272:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 220              		.loc 1 272 0
 221 005a 3B68     		ldr	r3, [r7, #0]
 222 005c 9A88     		ldrh	r2, [r3, #4]
 223 005e 3B68     		ldr	r3, [r7, #0]
 224 0060 1B89     		ldrh	r3, [r3, #8]
 225 0062 42EA0303 		orr	r3, r2, r3
 226 0066 9AB2     		uxth	r2, r3
 273:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****             USART_InitStruct->USART_Mode;
 227              		.loc 1 273 0
 228 0068 3B68     		ldr	r3, [r7, #0]
 229 006a 5B89     		ldrh	r3, [r3, #10]
 272:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 230              		.loc 1 272 0
 231 006c 42EA0303 		orr	r3, r2, r3
 232 0070 9BB2     		uxth	r3, r3
 233 0072 7A6A     		ldr	r2, [r7, #36]
 234 0074 42EA0303 		orr	r3, r2, r3
 235 0078 7B62     		str	r3, [r7, #36]
 274:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 275:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Write to USART CR1 */
 276:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USARTx->CR1 = (uint16_t)tmpreg;
 236              		.loc 1 276 0
 237 007a 7B6A     		ldr	r3, [r7, #36]
 238 007c 9AB2     		uxth	r2, r3
 239 007e 7B68     		ldr	r3, [r7, #4]
 240 0080 9A81     		strh	r2, [r3, #12]	@ movhi
 277:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 278:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /*---------------------------- USART CR3 Configuration -----------------------*/  
 279:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   tmpreg = USARTx->CR3;
 241              		.loc 1 279 0
 242 0082 7B68     		ldr	r3, [r7, #4]
 243 0084 9B8A     		ldrh	r3, [r3, #20]	@ movhi
 244 0086 9BB2     		uxth	r3, r3
 245 0088 7B62     		str	r3, [r7, #36]
 280:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 281:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Clear CTSE and RTSE bits */
 282:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
 246              		.loc 1 282 0
 247 008a 7B6A     		ldr	r3, [r7, #36]
 248 008c 23F44073 		bic	r3, r3, #768
 249 0090 7B62     		str	r3, [r7, #36]
 283:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 284:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Configure the USART HFC : 
 285:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
 286:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 250              		.loc 1 286 0
 251 0092 3B68     		ldr	r3, [r7, #0]
 252 0094 9B89     		ldrh	r3, [r3, #12]
 253 0096 7A6A     		ldr	r2, [r7, #36]
 254 0098 42EA0303 		orr	r3, r2, r3
 255 009c 7B62     		str	r3, [r7, #36]
 287:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 288:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Write to USART CR3 */
 289:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USARTx->CR3 = (uint16_t)tmpreg;
 256              		.loc 1 289 0
 257 009e 7B6A     		ldr	r3, [r7, #36]
 258 00a0 9AB2     		uxth	r2, r3
 259 00a2 7B68     		ldr	r3, [r7, #4]
 260 00a4 9A82     		strh	r2, [r3, #20]	@ movhi
 290:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 291:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /*---------------------------- USART BRR Configuration -----------------------*/
 292:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Configure the USART Baud Rate */
 293:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   RCC_GetClocksFreq(&RCC_ClocksStatus);
 261              		.loc 1 293 0
 262 00a6 07F10803 		add	r3, r7, #8
 263 00aa 1846     		mov	r0, r3
 264 00ac FFF7FEFF 		bl	RCC_GetClocksFreq
 294:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 295:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if ((USARTx == USART1) || (USARTx == USART6))
 265              		.loc 1 295 0
 266 00b0 7A68     		ldr	r2, [r7, #4]
 267 00b2 3A4B     		ldr	r3, .L18
 268 00b4 9A42     		cmp	r2, r3
 269 00b6 03D0     		beq	.L11
 270              		.loc 1 295 0 is_stmt 0 discriminator 1
 271 00b8 7A68     		ldr	r2, [r7, #4]
 272 00ba 394B     		ldr	r3, .L18+4
 273 00bc 9A42     		cmp	r2, r3
 274 00be 02D1     		bne	.L12
 275              	.L11:
 296:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 297:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 276              		.loc 1 297 0 is_stmt 1
 277 00c0 7B69     		ldr	r3, [r7, #20]
 278 00c2 3B62     		str	r3, [r7, #32]
 279 00c4 01E0     		b	.L13
 280              	.L12:
 298:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 299:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else
 300:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 301:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 281              		.loc 1 301 0
 282 00c6 3B69     		ldr	r3, [r7, #16]
 283 00c8 3B62     		str	r3, [r7, #32]
 284              	.L13:
 302:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 303:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 304:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Determine the integer part */
 305:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 285              		.loc 1 305 0
 286 00ca 7B68     		ldr	r3, [r7, #4]
 287 00cc 9B89     		ldrh	r3, [r3, #12]	@ movhi
 288 00ce 9BB2     		uxth	r3, r3
 289 00d0 9BB2     		uxth	r3, r3
 290 00d2 1BB2     		sxth	r3, r3
 291 00d4 002B     		cmp	r3, #0
 292 00d6 0FDA     		bge	.L14
 306:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 307:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Integer part computing in case Oversampling mode is 8 Samples */
 308:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 293              		.loc 1 308 0
 294 00d8 3A6A     		ldr	r2, [r7, #32]
 295 00da 1346     		mov	r3, r2
 296 00dc 4FEA8303 		lsl	r3, r3, #2
 297 00e0 9B18     		adds	r3, r3, r2
 298 00e2 4FEA8302 		lsl	r2, r3, #2
 299 00e6 9A18     		adds	r2, r3, r2
 300 00e8 3B68     		ldr	r3, [r7, #0]
 301 00ea 1B68     		ldr	r3, [r3, #0]
 302 00ec 4FEA4303 		lsl	r3, r3, #1
 303 00f0 B2FBF3F3 		udiv	r3, r2, r3
 304 00f4 FB61     		str	r3, [r7, #28]
 305 00f6 0EE0     		b	.L15
 306              	.L14:
 309:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 310:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
 311:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 312:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Integer part computing in case Oversampling mode is 16 Samples */
 313:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 307              		.loc 1 313 0
 308 00f8 3A6A     		ldr	r2, [r7, #32]
 309 00fa 1346     		mov	r3, r2
 310 00fc 4FEA8303 		lsl	r3, r3, #2
 311 0100 9B18     		adds	r3, r3, r2
 312 0102 4FEA8302 		lsl	r2, r3, #2
 313 0106 9A18     		adds	r2, r3, r2
 314 0108 3B68     		ldr	r3, [r7, #0]
 315 010a 1B68     		ldr	r3, [r3, #0]
 316 010c 4FEA8303 		lsl	r3, r3, #2
 317 0110 B2FBF3F3 		udiv	r3, r2, r3
 318 0114 FB61     		str	r3, [r7, #28]
 319              	.L15:
 314:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 315:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   tmpreg = (integerdivider / 100) << 4;
 320              		.loc 1 315 0
 321 0116 FA69     		ldr	r2, [r7, #28]
 322 0118 224B     		ldr	r3, .L18+8
 323 011a A3FB0213 		umull	r1, r3, r3, r2
 324 011e 4FEA5313 		lsr	r3, r3, #5
 325 0122 4FEA0313 		lsl	r3, r3, #4
 326 0126 7B62     		str	r3, [r7, #36]
 316:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 317:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Determine the fractional part */
 318:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 327              		.loc 1 318 0
 328 0128 7B6A     		ldr	r3, [r7, #36]
 329 012a 4FEA1313 		lsr	r3, r3, #4
 330 012e 4FF06402 		mov	r2, #100
 331 0132 02FB03F3 		mul	r3, r2, r3
 332 0136 FA69     		ldr	r2, [r7, #28]
 333 0138 D31A     		subs	r3, r2, r3
 334 013a BB61     		str	r3, [r7, #24]
 319:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 320:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Implement the fractional part in the register */
 321:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 335              		.loc 1 321 0
 336 013c 7B68     		ldr	r3, [r7, #4]
 337 013e 9B89     		ldrh	r3, [r3, #12]	@ movhi
 338 0140 9BB2     		uxth	r3, r3
 339 0142 9BB2     		uxth	r3, r3
 340 0144 1BB2     		sxth	r3, r3
 341 0146 002B     		cmp	r3, #0
 342 0148 10DA     		bge	.L16
 322:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 323:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 343              		.loc 1 323 0
 344 014a BB69     		ldr	r3, [r7, #24]
 345 014c 4FEAC303 		lsl	r3, r3, #3
 346 0150 03F13202 		add	r2, r3, #50
 347 0154 134B     		ldr	r3, .L18+8
 348 0156 A3FB0213 		umull	r1, r3, r3, r2
 349 015a 4FEA5313 		lsr	r3, r3, #5
 350 015e 03F00703 		and	r3, r3, #7
 351 0162 7A6A     		ldr	r2, [r7, #36]
 352 0164 42EA0303 		orr	r3, r2, r3
 353 0168 7B62     		str	r3, [r7, #36]
 354 016a 0FE0     		b	.L17
 355              	.L16:
 324:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 325:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
 326:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 327:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 356              		.loc 1 327 0
 357 016c BB69     		ldr	r3, [r7, #24]
 358 016e 4FEA0313 		lsl	r3, r3, #4
 359 0172 03F13202 		add	r2, r3, #50
 360 0176 0B4B     		ldr	r3, .L18+8
 361 0178 A3FB0213 		umull	r1, r3, r3, r2
 362 017c 4FEA5313 		lsr	r3, r3, #5
 363 0180 03F00F03 		and	r3, r3, #15
 364 0184 7A6A     		ldr	r2, [r7, #36]
 365 0186 42EA0303 		orr	r3, r2, r3
 366 018a 7B62     		str	r3, [r7, #36]
 367              	.L17:
 328:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 329:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 330:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Write to USART BRR register */
 331:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USARTx->BRR = (uint16_t)tmpreg;
 368              		.loc 1 331 0
 369 018c 7B6A     		ldr	r3, [r7, #36]
 370 018e 9AB2     		uxth	r2, r3
 371 0190 7B68     		ldr	r3, [r7, #4]
 372 0192 1A81     		strh	r2, [r3, #8]	@ movhi
 332:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 373              		.loc 1 332 0
 374 0194 07F12807 		add	r7, r7, #40
 375 0198 BD46     		mov	sp, r7
 376 019a 80BD     		pop	{r7, pc}
 377              	.L19:
 378              		.align	2
 379              	.L18:
 380 019c 00100140 		.word	1073811456
 381 01a0 00140140 		.word	1073812480
 382 01a4 1F85EB51 		.word	1374389535
 383              		.cfi_endproc
 384              	.LFE111:
 386              		.section	.text.USART_StructInit,"ax",%progbits
 387              		.align	2
 388              		.global	USART_StructInit
 389              		.thumb
 390              		.thumb_func
 392              	USART_StructInit:
 393              	.LFB112:
 333:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 334:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 335:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Fills each USART_InitStruct member with its default value.
 336:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure which will
 337:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         be initialized.
 338:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
 339:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 340:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
 341:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 394              		.loc 1 341 0
 395              		.cfi_startproc
 396              		@ args = 0, pretend = 0, frame = 8
 397              		@ frame_needed = 1, uses_anonymous_args = 0
 398              		@ link register save eliminated.
 399 0000 80B4     		push	{r7}
 400              	.LCFI6:
 401              		.cfi_def_cfa_offset 4
 402 0002 83B0     		sub	sp, sp, #12
 403              	.LCFI7:
 404              		.cfi_def_cfa_offset 16
 405 0004 00AF     		add	r7, sp, #0
 406              		.cfi_offset 7, -4
 407              	.LCFI8:
 408              		.cfi_def_cfa_register 7
 409 0006 7860     		str	r0, [r7, #4]
 342:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* USART_InitStruct members default value */
 343:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USART_InitStruct->USART_BaudRate = 9600;
 410              		.loc 1 343 0
 411 0008 7B68     		ldr	r3, [r7, #4]
 412 000a 4FF41652 		mov	r2, #9600
 413 000e 1A60     		str	r2, [r3, #0]
 344:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USART_InitStruct->USART_WordLength = USART_WordLength_8b;
 414              		.loc 1 344 0
 415 0010 7B68     		ldr	r3, [r7, #4]
 416 0012 4FF00002 		mov	r2, #0
 417 0016 9A80     		strh	r2, [r3, #4]	@ movhi
 345:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USART_InitStruct->USART_StopBits = USART_StopBits_1;
 418              		.loc 1 345 0
 419 0018 7B68     		ldr	r3, [r7, #4]
 420 001a 4FF00002 		mov	r2, #0
 421 001e DA80     		strh	r2, [r3, #6]	@ movhi
 346:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USART_InitStruct->USART_Parity = USART_Parity_No ;
 422              		.loc 1 346 0
 423 0020 7B68     		ldr	r3, [r7, #4]
 424 0022 4FF00002 		mov	r2, #0
 425 0026 1A81     		strh	r2, [r3, #8]	@ movhi
 347:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 426              		.loc 1 347 0
 427 0028 7B68     		ldr	r3, [r7, #4]
 428 002a 4FF00C02 		mov	r2, #12
 429 002e 5A81     		strh	r2, [r3, #10]	@ movhi
 348:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USART_InitStruct->USART_HardwareFlowControl = USART_HardwareFlowControl_None;  
 430              		.loc 1 348 0
 431 0030 7B68     		ldr	r3, [r7, #4]
 432 0032 4FF00002 		mov	r2, #0
 433 0036 9A81     		strh	r2, [r3, #12]	@ movhi
 349:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 434              		.loc 1 349 0
 435 0038 07F10C07 		add	r7, r7, #12
 436 003c BD46     		mov	sp, r7
 437 003e 80BC     		pop	{r7}
 438 0040 7047     		bx	lr
 439              		.cfi_endproc
 440              	.LFE112:
 442 0042 00BF     		.section	.text.USART_ClockInit,"ax",%progbits
 443              		.align	2
 444              		.global	USART_ClockInit
 445              		.thumb
 446              		.thumb_func
 448              	USART_ClockInit:
 449              	.LFB113:
 350:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 351:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 352:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Initializes the USARTx peripheral Clock according to the 
 353:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         specified parameters in the USART_ClockInitStruct .
 354:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3 or 6 to select the USART peripheral.
 355:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USART_ClockInitStruct: pointer to a USART_ClockInitTypeDef structure that
 356:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         contains the configuration information for the specified  USART peripheral.
 357:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @note   The Smart Card and Synchronous modes are not available for UART4 and UART5.    
 358:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
 359:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 360:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_ClockInit(USART_TypeDef* USARTx, USART_ClockInitTypeDef* USART_ClockInitStruct)
 361:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 450              		.loc 1 361 0
 451              		.cfi_startproc
 452              		@ args = 0, pretend = 0, frame = 16
 453              		@ frame_needed = 1, uses_anonymous_args = 0
 454              		@ link register save eliminated.
 455 0000 80B4     		push	{r7}
 456              	.LCFI9:
 457              		.cfi_def_cfa_offset 4
 458 0002 85B0     		sub	sp, sp, #20
 459              	.LCFI10:
 460              		.cfi_def_cfa_offset 24
 461 0004 00AF     		add	r7, sp, #0
 462              		.cfi_offset 7, -4
 463              	.LCFI11:
 464              		.cfi_def_cfa_register 7
 465 0006 7860     		str	r0, [r7, #4]
 466 0008 3960     		str	r1, [r7, #0]
 362:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   uint32_t tmpreg = 0x00;
 467              		.loc 1 362 0
 468 000a 4FF00003 		mov	r3, #0
 469 000e FB60     		str	r3, [r7, #12]
 363:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
 364:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_1236_PERIPH(USARTx));
 365:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_CLOCK(USART_ClockInitStruct->USART_Clock));
 366:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_CPOL(USART_ClockInitStruct->USART_CPOL));
 367:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_CPHA(USART_ClockInitStruct->USART_CPHA));
 368:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));
 369:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 370:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /*---------------------------- USART CR2 Configuration -----------------------*/
 371:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   tmpreg = USARTx->CR2;
 470              		.loc 1 371 0
 471 0010 7B68     		ldr	r3, [r7, #4]
 472 0012 1B8A     		ldrh	r3, [r3, #16]	@ movhi
 473 0014 9BB2     		uxth	r3, r3
 474 0016 FB60     		str	r3, [r7, #12]
 372:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Clear CLKEN, CPOL, CPHA and LBCL bits */
 373:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   tmpreg &= (uint32_t)~((uint32_t)CR2_CLOCK_CLEAR_MASK);
 475              		.loc 1 373 0
 476 0018 FB68     		ldr	r3, [r7, #12]
 477 001a 23F47063 		bic	r3, r3, #3840
 478 001e FB60     		str	r3, [r7, #12]
 374:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Configure the USART Clock, CPOL, CPHA and LastBit ------------*/
 375:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Set CLKEN bit according to USART_Clock value */
 376:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Set CPOL bit according to USART_CPOL value */
 377:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Set CPHA bit according to USART_CPHA value */
 378:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Set LBCL bit according to USART_LastBit value */
 379:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
 479              		.loc 1 379 0
 480 0020 3B68     		ldr	r3, [r7, #0]
 481 0022 1A88     		ldrh	r2, [r3, #0]
 482 0024 3B68     		ldr	r3, [r7, #0]
 483 0026 5B88     		ldrh	r3, [r3, #2]
 380:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****                  USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
 484              		.loc 1 380 0
 485 0028 42EA0303 		orr	r3, r2, r3
 486 002c 9AB2     		uxth	r2, r3
 487 002e 3B68     		ldr	r3, [r7, #0]
 488 0030 9B88     		ldrh	r3, [r3, #4]
 489 0032 42EA0303 		orr	r3, r2, r3
 490 0036 9AB2     		uxth	r2, r3
 491 0038 3B68     		ldr	r3, [r7, #0]
 492 003a DB88     		ldrh	r3, [r3, #6]
 493 003c 42EA0303 		orr	r3, r2, r3
 494 0040 9BB2     		uxth	r3, r3
 379:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
 495              		.loc 1 379 0
 496 0042 FA68     		ldr	r2, [r7, #12]
 497 0044 42EA0303 		orr	r3, r2, r3
 498 0048 FB60     		str	r3, [r7, #12]
 381:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Write to USART CR2 */
 382:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USARTx->CR2 = (uint16_t)tmpreg;
 499              		.loc 1 382 0
 500 004a FB68     		ldr	r3, [r7, #12]
 501 004c 9AB2     		uxth	r2, r3
 502 004e 7B68     		ldr	r3, [r7, #4]
 503 0050 1A82     		strh	r2, [r3, #16]	@ movhi
 383:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 504              		.loc 1 383 0
 505 0052 07F11407 		add	r7, r7, #20
 506 0056 BD46     		mov	sp, r7
 507 0058 80BC     		pop	{r7}
 508 005a 7047     		bx	lr
 509              		.cfi_endproc
 510              	.LFE113:
 512              		.section	.text.USART_ClockStructInit,"ax",%progbits
 513              		.align	2
 514              		.global	USART_ClockStructInit
 515              		.thumb
 516              		.thumb_func
 518              	USART_ClockStructInit:
 519              	.LFB114:
 384:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 385:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 386:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Fills each USART_ClockInitStruct member with its default value.
 387:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USART_ClockInitStruct: pointer to a USART_ClockInitTypeDef structure
 388:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         which will be initialized.
 389:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
 390:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 391:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_ClockStructInit(USART_ClockInitTypeDef* USART_ClockInitStruct)
 392:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 520              		.loc 1 392 0
 521              		.cfi_startproc
 522              		@ args = 0, pretend = 0, frame = 8
 523              		@ frame_needed = 1, uses_anonymous_args = 0
 524              		@ link register save eliminated.
 525 0000 80B4     		push	{r7}
 526              	.LCFI12:
 527              		.cfi_def_cfa_offset 4
 528 0002 83B0     		sub	sp, sp, #12
 529              	.LCFI13:
 530              		.cfi_def_cfa_offset 16
 531 0004 00AF     		add	r7, sp, #0
 532              		.cfi_offset 7, -4
 533              	.LCFI14:
 534              		.cfi_def_cfa_register 7
 535 0006 7860     		str	r0, [r7, #4]
 393:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* USART_ClockInitStruct members default value */
 394:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USART_ClockInitStruct->USART_Clock = USART_Clock_Disable;
 536              		.loc 1 394 0
 537 0008 7B68     		ldr	r3, [r7, #4]
 538 000a 4FF00002 		mov	r2, #0
 539 000e 1A80     		strh	r2, [r3, #0]	@ movhi
 395:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USART_ClockInitStruct->USART_CPOL = USART_CPOL_Low;
 540              		.loc 1 395 0
 541 0010 7B68     		ldr	r3, [r7, #4]
 542 0012 4FF00002 		mov	r2, #0
 543 0016 5A80     		strh	r2, [r3, #2]	@ movhi
 396:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USART_ClockInitStruct->USART_CPHA = USART_CPHA_1Edge;
 544              		.loc 1 396 0
 545 0018 7B68     		ldr	r3, [r7, #4]
 546 001a 4FF00002 		mov	r2, #0
 547 001e 9A80     		strh	r2, [r3, #4]	@ movhi
 397:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USART_ClockInitStruct->USART_LastBit = USART_LastBit_Disable;
 548              		.loc 1 397 0
 549 0020 7B68     		ldr	r3, [r7, #4]
 550 0022 4FF00002 		mov	r2, #0
 551 0026 DA80     		strh	r2, [r3, #6]	@ movhi
 398:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 552              		.loc 1 398 0
 553 0028 07F10C07 		add	r7, r7, #12
 554 002c BD46     		mov	sp, r7
 555 002e 80BC     		pop	{r7}
 556 0030 7047     		bx	lr
 557              		.cfi_endproc
 558              	.LFE114:
 560 0032 00BF     		.section	.text.USART_Cmd,"ax",%progbits
 561              		.align	2
 562              		.global	USART_Cmd
 563              		.thumb
 564              		.thumb_func
 566              	USART_Cmd:
 567              	.LFB115:
 399:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 400:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 401:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Enables or disables the specified USART peripheral.
 402:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
 403:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
 404:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  NewState: new state of the USARTx peripheral.
 405:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          This parameter can be: ENABLE or DISABLE.
 406:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
 407:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 408:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
 409:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 568              		.loc 1 409 0
 569              		.cfi_startproc
 570              		@ args = 0, pretend = 0, frame = 8
 571              		@ frame_needed = 1, uses_anonymous_args = 0
 572              		@ link register save eliminated.
 573 0000 80B4     		push	{r7}
 574              	.LCFI15:
 575              		.cfi_def_cfa_offset 4
 576 0002 83B0     		sub	sp, sp, #12
 577              	.LCFI16:
 578              		.cfi_def_cfa_offset 16
 579 0004 00AF     		add	r7, sp, #0
 580              		.cfi_offset 7, -4
 581              	.LCFI17:
 582              		.cfi_def_cfa_register 7
 583 0006 7860     		str	r0, [r7, #4]
 584 0008 0B46     		mov	r3, r1
 585 000a FB70     		strb	r3, [r7, #3]
 410:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
 411:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 412:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 413:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 414:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if (NewState != DISABLE)
 586              		.loc 1 414 0
 587 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 588 000e 002B     		cmp	r3, #0
 589 0010 08D0     		beq	.L24
 415:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 416:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Enable the selected USART by setting the UE bit in the CR1 register */
 417:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     USARTx->CR1 |= USART_CR1_UE;
 590              		.loc 1 417 0
 591 0012 7B68     		ldr	r3, [r7, #4]
 592 0014 9B89     		ldrh	r3, [r3, #12]	@ movhi
 593 0016 9BB2     		uxth	r3, r3
 594 0018 43F40053 		orr	r3, r3, #8192
 595 001c 9AB2     		uxth	r2, r3
 596 001e 7B68     		ldr	r3, [r7, #4]
 597 0020 9A81     		strh	r2, [r3, #12]	@ movhi
 598 0022 07E0     		b	.L23
 599              	.L24:
 418:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 419:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else
 420:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 421:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Disable the selected USART by clearing the UE bit in the CR1 register */
 422:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
 600              		.loc 1 422 0
 601 0024 7B68     		ldr	r3, [r7, #4]
 602 0026 9B89     		ldrh	r3, [r3, #12]	@ movhi
 603 0028 9BB2     		uxth	r3, r3
 604 002a 23F40053 		bic	r3, r3, #8192
 605 002e 9AB2     		uxth	r2, r3
 606 0030 7B68     		ldr	r3, [r7, #4]
 607 0032 9A81     		strh	r2, [r3, #12]	@ movhi
 608              	.L23:
 423:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 424:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 609              		.loc 1 424 0
 610 0034 07F10C07 		add	r7, r7, #12
 611 0038 BD46     		mov	sp, r7
 612 003a 80BC     		pop	{r7}
 613 003c 7047     		bx	lr
 614              		.cfi_endproc
 615              	.LFE115:
 617 003e 00BF     		.section	.text.USART_SetPrescaler,"ax",%progbits
 618              		.align	2
 619              		.global	USART_SetPrescaler
 620              		.thumb
 621              		.thumb_func
 623              	USART_SetPrescaler:
 624              	.LFB116:
 425:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 426:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 427:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Sets the system clock prescaler.
 428:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
 429:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
 430:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USART_Prescaler: specifies the prescaler clock. 
 431:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @note   The function is used for IrDA mode with UART4 and UART5.   
 432:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
 433:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 434:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_SetPrescaler(USART_TypeDef* USARTx, uint8_t USART_Prescaler)
 435:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** { 
 625              		.loc 1 435 0
 626              		.cfi_startproc
 627              		@ args = 0, pretend = 0, frame = 8
 628              		@ frame_needed = 1, uses_anonymous_args = 0
 629              		@ link register save eliminated.
 630 0000 80B4     		push	{r7}
 631              	.LCFI18:
 632              		.cfi_def_cfa_offset 4
 633 0002 83B0     		sub	sp, sp, #12
 634              	.LCFI19:
 635              		.cfi_def_cfa_offset 16
 636 0004 00AF     		add	r7, sp, #0
 637              		.cfi_offset 7, -4
 638              	.LCFI20:
 639              		.cfi_def_cfa_register 7
 640 0006 7860     		str	r0, [r7, #4]
 641 0008 0B46     		mov	r3, r1
 642 000a FB70     		strb	r3, [r7, #3]
 436:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
 437:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 438:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 439:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Clear the USART prescaler */
 440:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USARTx->GTPR &= USART_GTPR_GT;
 643              		.loc 1 440 0
 644 000c 7B68     		ldr	r3, [r7, #4]
 645 000e 1B8B     		ldrh	r3, [r3, #24]	@ movhi
 646 0010 9BB2     		uxth	r3, r3
 647 0012 23F0FF03 		bic	r3, r3, #255
 648 0016 9AB2     		uxth	r2, r3
 649 0018 7B68     		ldr	r3, [r7, #4]
 650 001a 1A83     		strh	r2, [r3, #24]	@ movhi
 441:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Set the USART prescaler */
 442:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USARTx->GTPR |= USART_Prescaler;
 651              		.loc 1 442 0
 652 001c 7B68     		ldr	r3, [r7, #4]
 653 001e 1B8B     		ldrh	r3, [r3, #24]	@ movhi
 654 0020 9AB2     		uxth	r2, r3
 655 0022 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 656 0024 9BB2     		uxth	r3, r3
 657 0026 42EA0303 		orr	r3, r2, r3
 658 002a 9AB2     		uxth	r2, r3
 659 002c 7B68     		ldr	r3, [r7, #4]
 660 002e 1A83     		strh	r2, [r3, #24]	@ movhi
 443:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 661              		.loc 1 443 0
 662 0030 07F10C07 		add	r7, r7, #12
 663 0034 BD46     		mov	sp, r7
 664 0036 80BC     		pop	{r7}
 665 0038 7047     		bx	lr
 666              		.cfi_endproc
 667              	.LFE116:
 669 003a 00BF     		.section	.text.USART_OverSampling8Cmd,"ax",%progbits
 670              		.align	2
 671              		.global	USART_OverSampling8Cmd
 672              		.thumb
 673              		.thumb_func
 675              	USART_OverSampling8Cmd:
 676              	.LFB117:
 444:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 445:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 446:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Enables or disables the USART's 8x oversampling mode.
 447:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @note   This function has to be called before calling USART_Init() function
 448:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         in order to have correct baudrate Divider value.
 449:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
 450:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
 451:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  NewState: new state of the USART 8x oversampling mode.
 452:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          This parameter can be: ENABLE or DISABLE.
 453:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
 454:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 455:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_OverSampling8Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
 456:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 677              		.loc 1 456 0
 678              		.cfi_startproc
 679              		@ args = 0, pretend = 0, frame = 8
 680              		@ frame_needed = 1, uses_anonymous_args = 0
 681              		@ link register save eliminated.
 682 0000 80B4     		push	{r7}
 683              	.LCFI21:
 684              		.cfi_def_cfa_offset 4
 685 0002 83B0     		sub	sp, sp, #12
 686              	.LCFI22:
 687              		.cfi_def_cfa_offset 16
 688 0004 00AF     		add	r7, sp, #0
 689              		.cfi_offset 7, -4
 690              	.LCFI23:
 691              		.cfi_def_cfa_register 7
 692 0006 7860     		str	r0, [r7, #4]
 693 0008 0B46     		mov	r3, r1
 694 000a FB70     		strb	r3, [r7, #3]
 457:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
 458:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 459:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 460:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 461:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if (NewState != DISABLE)
 695              		.loc 1 461 0
 696 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 697 000e 002B     		cmp	r3, #0
 698 0010 0AD0     		beq	.L28
 462:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 463:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Enable the 8x Oversampling mode by setting the OVER8 bit in the CR1 register */
 464:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     USARTx->CR1 |= USART_CR1_OVER8;
 699              		.loc 1 464 0
 700 0012 7B68     		ldr	r3, [r7, #4]
 701 0014 9B89     		ldrh	r3, [r3, #12]	@ movhi
 702 0016 9BB2     		uxth	r3, r3
 703 0018 6FEA4343 		mvn	r3, r3, lsl #17
 704 001c 6FEA5343 		mvn	r3, r3, lsr #17
 705 0020 9AB2     		uxth	r2, r3
 706 0022 7B68     		ldr	r3, [r7, #4]
 707 0024 9A81     		strh	r2, [r3, #12]	@ movhi
 708 0026 09E0     		b	.L27
 709              	.L28:
 465:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 466:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else
 467:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 468:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Disable the 8x Oversampling mode by clearing the OVER8 bit in the CR1 register */
 469:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_OVER8);
 710              		.loc 1 469 0
 711 0028 7B68     		ldr	r3, [r7, #4]
 712 002a 9B89     		ldrh	r3, [r3, #12]	@ movhi
 713 002c 9BB2     		uxth	r3, r3
 714 002e 4FEA4343 		lsl	r3, r3, #17
 715 0032 4FEA5343 		lsr	r3, r3, #17
 716 0036 9AB2     		uxth	r2, r3
 717 0038 7B68     		ldr	r3, [r7, #4]
 718 003a 9A81     		strh	r2, [r3, #12]	@ movhi
 719              	.L27:
 470:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 471:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }  
 720              		.loc 1 471 0
 721 003c 07F10C07 		add	r7, r7, #12
 722 0040 BD46     		mov	sp, r7
 723 0042 80BC     		pop	{r7}
 724 0044 7047     		bx	lr
 725              		.cfi_endproc
 726              	.LFE117:
 728 0046 00BF     		.section	.text.USART_OneBitMethodCmd,"ax",%progbits
 729              		.align	2
 730              		.global	USART_OneBitMethodCmd
 731              		.thumb
 732              		.thumb_func
 734              	USART_OneBitMethodCmd:
 735              	.LFB118:
 472:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 473:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 474:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Enables or disables the USART's one bit sampling method.
 475:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
 476:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
 477:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  NewState: new state of the USART one bit sampling method.
 478:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          This parameter can be: ENABLE or DISABLE.
 479:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
 480:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 481:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_OneBitMethodCmd(USART_TypeDef* USARTx, FunctionalState NewState)
 482:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 736              		.loc 1 482 0
 737              		.cfi_startproc
 738              		@ args = 0, pretend = 0, frame = 8
 739              		@ frame_needed = 1, uses_anonymous_args = 0
 740              		@ link register save eliminated.
 741 0000 80B4     		push	{r7}
 742              	.LCFI24:
 743              		.cfi_def_cfa_offset 4
 744 0002 83B0     		sub	sp, sp, #12
 745              	.LCFI25:
 746              		.cfi_def_cfa_offset 16
 747 0004 00AF     		add	r7, sp, #0
 748              		.cfi_offset 7, -4
 749              	.LCFI26:
 750              		.cfi_def_cfa_register 7
 751 0006 7860     		str	r0, [r7, #4]
 752 0008 0B46     		mov	r3, r1
 753 000a FB70     		strb	r3, [r7, #3]
 483:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
 484:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 485:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 486:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 487:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if (NewState != DISABLE)
 754              		.loc 1 487 0
 755 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 756 000e 002B     		cmp	r3, #0
 757 0010 08D0     		beq	.L31
 488:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 489:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Enable the one bit method by setting the ONEBITE bit in the CR3 register */
 490:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     USARTx->CR3 |= USART_CR3_ONEBIT;
 758              		.loc 1 490 0
 759 0012 7B68     		ldr	r3, [r7, #4]
 760 0014 9B8A     		ldrh	r3, [r3, #20]	@ movhi
 761 0016 9BB2     		uxth	r3, r3
 762 0018 43F40063 		orr	r3, r3, #2048
 763 001c 9AB2     		uxth	r2, r3
 764 001e 7B68     		ldr	r3, [r7, #4]
 765 0020 9A82     		strh	r2, [r3, #20]	@ movhi
 766 0022 07E0     		b	.L30
 767              	.L31:
 491:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 492:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else
 493:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 494:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Disable the one bit method by clearing the ONEBITE bit in the CR3 register */
 495:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_ONEBIT);
 768              		.loc 1 495 0
 769 0024 7B68     		ldr	r3, [r7, #4]
 770 0026 9B8A     		ldrh	r3, [r3, #20]	@ movhi
 771 0028 9BB2     		uxth	r3, r3
 772 002a 23F40063 		bic	r3, r3, #2048
 773 002e 9AB2     		uxth	r2, r3
 774 0030 7B68     		ldr	r3, [r7, #4]
 775 0032 9A82     		strh	r2, [r3, #20]	@ movhi
 776              	.L30:
 496:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 497:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 777              		.loc 1 497 0
 778 0034 07F10C07 		add	r7, r7, #12
 779 0038 BD46     		mov	sp, r7
 780 003a 80BC     		pop	{r7}
 781 003c 7047     		bx	lr
 782              		.cfi_endproc
 783              	.LFE118:
 785 003e 00BF     		.section	.text.USART_SendData,"ax",%progbits
 786              		.align	2
 787              		.global	USART_SendData
 788              		.thumb
 789              		.thumb_func
 791              	USART_SendData:
 792              	.LFB119:
 498:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 499:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 500:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @}
 501:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 502:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 503:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /** @defgroup USART_Group2 Data transfers functions
 504:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  *  @brief   Data transfers functions 
 505:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  *
 506:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @verbatim   
 507:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  ===============================================================================
 508:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****                             Data transfers functions
 509:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  ===============================================================================  
 510:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 511:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   This subsection provides a set of functions allowing to manage the USART data 
 512:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   transfers.
 513:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 514:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   During an USART reception, data shifts in least significant bit first through 
 515:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   the RX pin. In this mode, the USART_DR register consists of a buffer (RDR) 
 516:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   between the internal bus and the received shift register.
 517:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 518:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   When a transmission is taking place, a write instruction to the USART_DR register 
 519:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   stores the data in the TDR register and which is copied in the shift register 
 520:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   at the end of the current transmission.
 521:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 522:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   The read access of the USART_DR register can be done using the USART_ReceiveData()
 523:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   function and returns the RDR buffered value. Whereas a write access to the USART_DR 
 524:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   can be done using USART_SendData() function and stores the written data into 
 525:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   TDR buffer.
 526:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 527:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @endverbatim
 528:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @{
 529:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 530:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 531:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 532:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Transmits single data through the USARTx peripheral.
 533:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
 534:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
 535:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  Data: the data to transmit.
 536:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
 537:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 538:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
 539:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 793              		.loc 1 539 0
 794              		.cfi_startproc
 795              		@ args = 0, pretend = 0, frame = 8
 796              		@ frame_needed = 1, uses_anonymous_args = 0
 797              		@ link register save eliminated.
 798 0000 80B4     		push	{r7}
 799              	.LCFI27:
 800              		.cfi_def_cfa_offset 4
 801 0002 83B0     		sub	sp, sp, #12
 802              	.LCFI28:
 803              		.cfi_def_cfa_offset 16
 804 0004 00AF     		add	r7, sp, #0
 805              		.cfi_offset 7, -4
 806              	.LCFI29:
 807              		.cfi_def_cfa_register 7
 808 0006 7860     		str	r0, [r7, #4]
 809 0008 0B46     		mov	r3, r1
 810 000a 7B80     		strh	r3, [r7, #2]	@ movhi
 540:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
 541:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 542:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_DATA(Data)); 
 543:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     
 544:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Transmit Data */
 545:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USARTx->DR = (Data & (uint16_t)0x01FF);
 811              		.loc 1 545 0
 812 000c 7B88     		ldrh	r3, [r7, #2]	@ movhi
 813 000e 4FEAC353 		lsl	r3, r3, #23
 814 0012 4FEAD353 		lsr	r3, r3, #23
 815 0016 9AB2     		uxth	r2, r3
 816 0018 7B68     		ldr	r3, [r7, #4]
 817 001a 9A80     		strh	r2, [r3, #4]	@ movhi
 546:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 818              		.loc 1 546 0
 819 001c 07F10C07 		add	r7, r7, #12
 820 0020 BD46     		mov	sp, r7
 821 0022 80BC     		pop	{r7}
 822 0024 7047     		bx	lr
 823              		.cfi_endproc
 824              	.LFE119:
 826 0026 00BF     		.section	.text.USART_ReceiveData,"ax",%progbits
 827              		.align	2
 828              		.global	USART_ReceiveData
 829              		.thumb
 830              		.thumb_func
 832              	USART_ReceiveData:
 833              	.LFB120:
 547:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 548:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 549:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Returns the most recent received data by the USARTx peripheral.
 550:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
 551:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
 552:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval The received data.
 553:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 554:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
 555:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 834              		.loc 1 555 0
 835              		.cfi_startproc
 836              		@ args = 0, pretend = 0, frame = 8
 837              		@ frame_needed = 1, uses_anonymous_args = 0
 838              		@ link register save eliminated.
 839 0000 80B4     		push	{r7}
 840              	.LCFI30:
 841              		.cfi_def_cfa_offset 4
 842 0002 83B0     		sub	sp, sp, #12
 843              	.LCFI31:
 844              		.cfi_def_cfa_offset 16
 845 0004 00AF     		add	r7, sp, #0
 846              		.cfi_offset 7, -4
 847              	.LCFI32:
 848              		.cfi_def_cfa_register 7
 849 0006 7860     		str	r0, [r7, #4]
 556:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
 557:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 558:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 559:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Receive Data */
 560:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
 850              		.loc 1 560 0
 851 0008 7B68     		ldr	r3, [r7, #4]
 852 000a 9B88     		ldrh	r3, [r3, #4]	@ movhi
 853 000c 9BB2     		uxth	r3, r3
 854 000e 4FEAC353 		lsl	r3, r3, #23
 855 0012 4FEAD353 		lsr	r3, r3, #23
 856 0016 9BB2     		uxth	r3, r3
 561:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 857              		.loc 1 561 0
 858 0018 1846     		mov	r0, r3
 859 001a 07F10C07 		add	r7, r7, #12
 860 001e BD46     		mov	sp, r7
 861 0020 80BC     		pop	{r7}
 862 0022 7047     		bx	lr
 863              		.cfi_endproc
 864              	.LFE120:
 866              		.section	.text.USART_SetAddress,"ax",%progbits
 867              		.align	2
 868              		.global	USART_SetAddress
 869              		.thumb
 870              		.thumb_func
 872              	USART_SetAddress:
 873              	.LFB121:
 562:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 563:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 564:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @}
 565:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 566:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 567:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /** @defgroup USART_Group3 MultiProcessor Communication functions
 568:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  *  @brief   Multi-Processor Communication functions 
 569:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  *
 570:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @verbatim   
 571:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  ===============================================================================
 572:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****                     Multi-Processor Communication functions
 573:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  ===============================================================================  
 574:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 575:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   This subsection provides a set of functions allowing to manage the USART 
 576:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   multiprocessor communication.
 577:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 578:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   For instance one of the USARTs can be the master, its TX output is connected to 
 579:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   the RX input of the other USART. The others are slaves, their respective TX outputs 
 580:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   are logically ANDed together and connected to the RX input of the master.
 581:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 582:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USART multiprocessor communication is possible through the following procedure:
 583:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      1. Program the Baud rate, Word length = 9 bits, Stop bits, Parity, Mode transmitter 
 584:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         or Mode receiver and hardware flow control values using the USART_Init()
 585:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         function.
 586:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      2. Configures the USART address using the USART_SetAddress() function.
 587:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      3. Configures the wake up method (USART_WakeUp_IdleLine or USART_WakeUp_AddressMark)
 588:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         using USART_WakeUpConfig() function only for the slaves.
 589:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      4. Enable the USART using the USART_Cmd() function.
 590:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      5. Enter the USART slaves in mute mode using USART_ReceiverWakeUpCmd() function.
 591:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 592:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   The USART Slave exit from mute mode when receive the wake up condition.
 593:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 594:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @endverbatim
 595:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @{
 596:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 597:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 598:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 599:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Sets the address of the USART node.
 600:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
 601:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
 602:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USART_Address: Indicates the address of the USART node.
 603:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
 604:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 605:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_SetAddress(USART_TypeDef* USARTx, uint8_t USART_Address)
 606:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 874              		.loc 1 606 0
 875              		.cfi_startproc
 876              		@ args = 0, pretend = 0, frame = 8
 877              		@ frame_needed = 1, uses_anonymous_args = 0
 878              		@ link register save eliminated.
 879 0000 80B4     		push	{r7}
 880              	.LCFI33:
 881              		.cfi_def_cfa_offset 4
 882 0002 83B0     		sub	sp, sp, #12
 883              	.LCFI34:
 884              		.cfi_def_cfa_offset 16
 885 0004 00AF     		add	r7, sp, #0
 886              		.cfi_offset 7, -4
 887              	.LCFI35:
 888              		.cfi_def_cfa_register 7
 889 0006 7860     		str	r0, [r7, #4]
 890 0008 0B46     		mov	r3, r1
 891 000a FB70     		strb	r3, [r7, #3]
 607:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
 608:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 609:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ADDRESS(USART_Address)); 
 610:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     
 611:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Clear the USART address */
 612:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_ADD);
 892              		.loc 1 612 0
 893 000c 7B68     		ldr	r3, [r7, #4]
 894 000e 1B8A     		ldrh	r3, [r3, #16]	@ movhi
 895 0010 9BB2     		uxth	r3, r3
 896 0012 23F00F03 		bic	r3, r3, #15
 897 0016 9AB2     		uxth	r2, r3
 898 0018 7B68     		ldr	r3, [r7, #4]
 899 001a 1A82     		strh	r2, [r3, #16]	@ movhi
 613:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Set the USART address node */
 614:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USARTx->CR2 |= USART_Address;
 900              		.loc 1 614 0
 901 001c 7B68     		ldr	r3, [r7, #4]
 902 001e 1B8A     		ldrh	r3, [r3, #16]	@ movhi
 903 0020 9AB2     		uxth	r2, r3
 904 0022 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 905 0024 9BB2     		uxth	r3, r3
 906 0026 42EA0303 		orr	r3, r2, r3
 907 002a 9AB2     		uxth	r2, r3
 908 002c 7B68     		ldr	r3, [r7, #4]
 909 002e 1A82     		strh	r2, [r3, #16]	@ movhi
 615:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 910              		.loc 1 615 0
 911 0030 07F10C07 		add	r7, r7, #12
 912 0034 BD46     		mov	sp, r7
 913 0036 80BC     		pop	{r7}
 914 0038 7047     		bx	lr
 915              		.cfi_endproc
 916              	.LFE121:
 918 003a 00BF     		.section	.text.USART_ReceiverWakeUpCmd,"ax",%progbits
 919              		.align	2
 920              		.global	USART_ReceiverWakeUpCmd
 921              		.thumb
 922              		.thumb_func
 924              	USART_ReceiverWakeUpCmd:
 925              	.LFB122:
 616:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 617:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 618:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Determines if the USART is in mute mode or not.
 619:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
 620:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
 621:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  NewState: new state of the USART mute mode.
 622:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          This parameter can be: ENABLE or DISABLE.
 623:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
 624:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 625:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_ReceiverWakeUpCmd(USART_TypeDef* USARTx, FunctionalState NewState)
 626:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 926              		.loc 1 626 0
 927              		.cfi_startproc
 928              		@ args = 0, pretend = 0, frame = 8
 929              		@ frame_needed = 1, uses_anonymous_args = 0
 930              		@ link register save eliminated.
 931 0000 80B4     		push	{r7}
 932              	.LCFI36:
 933              		.cfi_def_cfa_offset 4
 934 0002 83B0     		sub	sp, sp, #12
 935              	.LCFI37:
 936              		.cfi_def_cfa_offset 16
 937 0004 00AF     		add	r7, sp, #0
 938              		.cfi_offset 7, -4
 939              	.LCFI38:
 940              		.cfi_def_cfa_register 7
 941 0006 7860     		str	r0, [r7, #4]
 942 0008 0B46     		mov	r3, r1
 943 000a FB70     		strb	r3, [r7, #3]
 627:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
 628:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 629:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState)); 
 630:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 631:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if (NewState != DISABLE)
 944              		.loc 1 631 0
 945 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 946 000e 002B     		cmp	r3, #0
 947 0010 08D0     		beq	.L37
 632:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 633:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Enable the USART mute mode  by setting the RWU bit in the CR1 register */
 634:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     USARTx->CR1 |= USART_CR1_RWU;
 948              		.loc 1 634 0
 949 0012 7B68     		ldr	r3, [r7, #4]
 950 0014 9B89     		ldrh	r3, [r3, #12]	@ movhi
 951 0016 9BB2     		uxth	r3, r3
 952 0018 43F00203 		orr	r3, r3, #2
 953 001c 9AB2     		uxth	r2, r3
 954 001e 7B68     		ldr	r3, [r7, #4]
 955 0020 9A81     		strh	r2, [r3, #12]	@ movhi
 956 0022 07E0     		b	.L36
 957              	.L37:
 635:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 636:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else
 637:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 638:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Disable the USART mute mode by clearing the RWU bit in the CR1 register */
 639:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_RWU);
 958              		.loc 1 639 0
 959 0024 7B68     		ldr	r3, [r7, #4]
 960 0026 9B89     		ldrh	r3, [r3, #12]	@ movhi
 961 0028 9BB2     		uxth	r3, r3
 962 002a 23F00203 		bic	r3, r3, #2
 963 002e 9AB2     		uxth	r2, r3
 964 0030 7B68     		ldr	r3, [r7, #4]
 965 0032 9A81     		strh	r2, [r3, #12]	@ movhi
 966              	.L36:
 640:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 641:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 967              		.loc 1 641 0
 968 0034 07F10C07 		add	r7, r7, #12
 969 0038 BD46     		mov	sp, r7
 970 003a 80BC     		pop	{r7}
 971 003c 7047     		bx	lr
 972              		.cfi_endproc
 973              	.LFE122:
 975 003e 00BF     		.section	.text.USART_WakeUpConfig,"ax",%progbits
 976              		.align	2
 977              		.global	USART_WakeUpConfig
 978              		.thumb
 979              		.thumb_func
 981              	USART_WakeUpConfig:
 982              	.LFB123:
 642:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 643:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Selects the USART WakeUp method.
 644:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
 645:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
 646:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USART_WakeUp: specifies the USART wakeup method.
 647:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          This parameter can be one of the following values:
 648:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_WakeUp_IdleLine: WakeUp by an idle line detection
 649:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_WakeUp_AddressMark: WakeUp by an address mark
 650:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
 651:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 652:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_WakeUpConfig(USART_TypeDef* USARTx, uint16_t USART_WakeUp)
 653:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 983              		.loc 1 653 0
 984              		.cfi_startproc
 985              		@ args = 0, pretend = 0, frame = 8
 986              		@ frame_needed = 1, uses_anonymous_args = 0
 987              		@ link register save eliminated.
 988 0000 80B4     		push	{r7}
 989              	.LCFI39:
 990              		.cfi_def_cfa_offset 4
 991 0002 83B0     		sub	sp, sp, #12
 992              	.LCFI40:
 993              		.cfi_def_cfa_offset 16
 994 0004 00AF     		add	r7, sp, #0
 995              		.cfi_offset 7, -4
 996              	.LCFI41:
 997              		.cfi_def_cfa_register 7
 998 0006 7860     		str	r0, [r7, #4]
 999 0008 0B46     		mov	r3, r1
 1000 000a 7B80     		strh	r3, [r7, #2]	@ movhi
 654:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
 655:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 656:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_WAKEUP(USART_WakeUp));
 657:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 658:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_WAKE);
 1001              		.loc 1 658 0
 1002 000c 7B68     		ldr	r3, [r7, #4]
 1003 000e 9B89     		ldrh	r3, [r3, #12]	@ movhi
 1004 0010 9BB2     		uxth	r3, r3
 1005 0012 23F40063 		bic	r3, r3, #2048
 1006 0016 9AB2     		uxth	r2, r3
 1007 0018 7B68     		ldr	r3, [r7, #4]
 1008 001a 9A81     		strh	r2, [r3, #12]	@ movhi
 659:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USARTx->CR1 |= USART_WakeUp;
 1009              		.loc 1 659 0
 1010 001c 7B68     		ldr	r3, [r7, #4]
 1011 001e 9B89     		ldrh	r3, [r3, #12]	@ movhi
 1012 0020 9AB2     		uxth	r2, r3
 1013 0022 7B88     		ldrh	r3, [r7, #2]	@ movhi
 1014 0024 42EA0303 		orr	r3, r2, r3
 1015 0028 9AB2     		uxth	r2, r3
 1016 002a 7B68     		ldr	r3, [r7, #4]
 1017 002c 9A81     		strh	r2, [r3, #12]	@ movhi
 660:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 1018              		.loc 1 660 0
 1019 002e 07F10C07 		add	r7, r7, #12
 1020 0032 BD46     		mov	sp, r7
 1021 0034 80BC     		pop	{r7}
 1022 0036 7047     		bx	lr
 1023              		.cfi_endproc
 1024              	.LFE123:
 1026              		.section	.text.USART_LINBreakDetectLengthConfig,"ax",%progbits
 1027              		.align	2
 1028              		.global	USART_LINBreakDetectLengthConfig
 1029              		.thumb
 1030              		.thumb_func
 1032              	USART_LINBreakDetectLengthConfig:
 1033              	.LFB124:
 661:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 662:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 663:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @}
 664:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 665:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 666:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /** @defgroup USART_Group4 LIN mode functions
 667:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  *  @brief   LIN mode functions 
 668:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  *
 669:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @verbatim   
 670:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  ===============================================================================
 671:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****                                 LIN mode functions
 672:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  ===============================================================================  
 673:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 674:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   This subsection provides a set of functions allowing to manage the USART LIN 
 675:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   Mode communication.
 676:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 677:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   In LIN mode, 8-bit data format with 1 stop bit is required in accordance with 
 678:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   the LIN standard.
 679:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 680:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   Only this LIN Feature is supported by the USART IP:
 681:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     - LIN Master Synchronous Break send capability and LIN slave break detection
 682:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       capability :  13-bit break generation and 10/11 bit break detection
 683:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 684:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 685:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USART LIN Master transmitter communication is possible through the following procedure:
 686:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      1. Program the Baud rate, Word length = 8bits, Stop bits = 1bit, Parity, 
 687:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         Mode transmitter or Mode receiver and hardware flow control values using 
 688:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         the USART_Init() function.
 689:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      2. Enable the USART using the USART_Cmd() function.
 690:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      3. Enable the LIN mode using the USART_LINCmd() function.
 691:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      4. Send the break character using USART_SendBreak() function.
 692:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 693:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USART LIN Master receiver communication is possible through the following procedure:
 694:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      1. Program the Baud rate, Word length = 8bits, Stop bits = 1bit, Parity, 
 695:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         Mode transmitter or Mode receiver and hardware flow control values using 
 696:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         the USART_Init() function.
 697:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      2. Enable the USART using the USART_Cmd() function.
 698:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      3. Configures the break detection length using the USART_LINBreakDetectLengthConfig()
 699:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         function.
 700:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      4. Enable the LIN mode using the USART_LINCmd() function.
 701:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 702:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 703:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @note In LIN mode, the following bits must be kept cleared:
 704:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - CLKEN in the USART_CR2 register,
 705:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - STOP[1:0], SCEN, HDSEL and IREN in the USART_CR3 register.
 706:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 707:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @endverbatim
 708:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @{
 709:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 710:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 711:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 712:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Sets the USART LIN Break detection length.
 713:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
 714:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
 715:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USART_LINBreakDetectLength: specifies the LIN break detection length.
 716:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          This parameter can be one of the following values:
 717:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_LINBreakDetectLength_10b: 10-bit break detection
 718:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_LINBreakDetectLength_11b: 11-bit break detection
 719:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
 720:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 721:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_LINBreakDetectLengthConfig(USART_TypeDef* USARTx, uint16_t USART_LINBreakDetectLength)
 722:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 1034              		.loc 1 722 0
 1035              		.cfi_startproc
 1036              		@ args = 0, pretend = 0, frame = 8
 1037              		@ frame_needed = 1, uses_anonymous_args = 0
 1038              		@ link register save eliminated.
 1039 0000 80B4     		push	{r7}
 1040              	.LCFI42:
 1041              		.cfi_def_cfa_offset 4
 1042 0002 83B0     		sub	sp, sp, #12
 1043              	.LCFI43:
 1044              		.cfi_def_cfa_offset 16
 1045 0004 00AF     		add	r7, sp, #0
 1046              		.cfi_offset 7, -4
 1047              	.LCFI44:
 1048              		.cfi_def_cfa_register 7
 1049 0006 7860     		str	r0, [r7, #4]
 1050 0008 0B46     		mov	r3, r1
 1051 000a 7B80     		strh	r3, [r7, #2]	@ movhi
 723:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
 724:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 725:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_LIN_BREAK_DETECT_LENGTH(USART_LINBreakDetectLength));
 726:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 727:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_LBDL);
 1052              		.loc 1 727 0
 1053 000c 7B68     		ldr	r3, [r7, #4]
 1054 000e 1B8A     		ldrh	r3, [r3, #16]	@ movhi
 1055 0010 9BB2     		uxth	r3, r3
 1056 0012 23F02003 		bic	r3, r3, #32
 1057 0016 9AB2     		uxth	r2, r3
 1058 0018 7B68     		ldr	r3, [r7, #4]
 1059 001a 1A82     		strh	r2, [r3, #16]	@ movhi
 728:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USARTx->CR2 |= USART_LINBreakDetectLength;  
 1060              		.loc 1 728 0
 1061 001c 7B68     		ldr	r3, [r7, #4]
 1062 001e 1B8A     		ldrh	r3, [r3, #16]	@ movhi
 1063 0020 9AB2     		uxth	r2, r3
 1064 0022 7B88     		ldrh	r3, [r7, #2]	@ movhi
 1065 0024 42EA0303 		orr	r3, r2, r3
 1066 0028 9AB2     		uxth	r2, r3
 1067 002a 7B68     		ldr	r3, [r7, #4]
 1068 002c 1A82     		strh	r2, [r3, #16]	@ movhi
 729:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 1069              		.loc 1 729 0
 1070 002e 07F10C07 		add	r7, r7, #12
 1071 0032 BD46     		mov	sp, r7
 1072 0034 80BC     		pop	{r7}
 1073 0036 7047     		bx	lr
 1074              		.cfi_endproc
 1075              	.LFE124:
 1077              		.section	.text.USART_LINCmd,"ax",%progbits
 1078              		.align	2
 1079              		.global	USART_LINCmd
 1080              		.thumb
 1081              		.thumb_func
 1083              	USART_LINCmd:
 1084              	.LFB125:
 730:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 731:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 732:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Enables or disables the USART's LIN mode.
 733:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
 734:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
 735:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  NewState: new state of the USART LIN mode.
 736:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          This parameter can be: ENABLE or DISABLE.
 737:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
 738:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 739:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_LINCmd(USART_TypeDef* USARTx, FunctionalState NewState)
 740:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 1085              		.loc 1 740 0
 1086              		.cfi_startproc
 1087              		@ args = 0, pretend = 0, frame = 8
 1088              		@ frame_needed = 1, uses_anonymous_args = 0
 1089              		@ link register save eliminated.
 1090 0000 80B4     		push	{r7}
 1091              	.LCFI45:
 1092              		.cfi_def_cfa_offset 4
 1093 0002 83B0     		sub	sp, sp, #12
 1094              	.LCFI46:
 1095              		.cfi_def_cfa_offset 16
 1096 0004 00AF     		add	r7, sp, #0
 1097              		.cfi_offset 7, -4
 1098              	.LCFI47:
 1099              		.cfi_def_cfa_register 7
 1100 0006 7860     		str	r0, [r7, #4]
 1101 0008 0B46     		mov	r3, r1
 1102 000a FB70     		strb	r3, [r7, #3]
 741:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
 742:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 743:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 744:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 745:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if (NewState != DISABLE)
 1103              		.loc 1 745 0
 1104 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1105 000e 002B     		cmp	r3, #0
 1106 0010 08D0     		beq	.L42
 746:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 747:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
 748:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     USARTx->CR2 |= USART_CR2_LINEN;
 1107              		.loc 1 748 0
 1108 0012 7B68     		ldr	r3, [r7, #4]
 1109 0014 1B8A     		ldrh	r3, [r3, #16]	@ movhi
 1110 0016 9BB2     		uxth	r3, r3
 1111 0018 43F48043 		orr	r3, r3, #16384
 1112 001c 9AB2     		uxth	r2, r3
 1113 001e 7B68     		ldr	r3, [r7, #4]
 1114 0020 1A82     		strh	r2, [r3, #16]	@ movhi
 1115 0022 07E0     		b	.L41
 1116              	.L42:
 749:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 750:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else
 751:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 752:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Disable the LIN mode by clearing the LINEN bit in the CR2 register */
 753:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_LINEN);
 1117              		.loc 1 753 0
 1118 0024 7B68     		ldr	r3, [r7, #4]
 1119 0026 1B8A     		ldrh	r3, [r3, #16]	@ movhi
 1120 0028 9BB2     		uxth	r3, r3
 1121 002a 23F48043 		bic	r3, r3, #16384
 1122 002e 9AB2     		uxth	r2, r3
 1123 0030 7B68     		ldr	r3, [r7, #4]
 1124 0032 1A82     		strh	r2, [r3, #16]	@ movhi
 1125              	.L41:
 754:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 755:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 1126              		.loc 1 755 0
 1127 0034 07F10C07 		add	r7, r7, #12
 1128 0038 BD46     		mov	sp, r7
 1129 003a 80BC     		pop	{r7}
 1130 003c 7047     		bx	lr
 1131              		.cfi_endproc
 1132              	.LFE125:
 1134 003e 00BF     		.section	.text.USART_SendBreak,"ax",%progbits
 1135              		.align	2
 1136              		.global	USART_SendBreak
 1137              		.thumb
 1138              		.thumb_func
 1140              	USART_SendBreak:
 1141              	.LFB126:
 756:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 757:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 758:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Transmits break characters.
 759:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
 760:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
 761:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
 762:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 763:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_SendBreak(USART_TypeDef* USARTx)
 764:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 1142              		.loc 1 764 0
 1143              		.cfi_startproc
 1144              		@ args = 0, pretend = 0, frame = 8
 1145              		@ frame_needed = 1, uses_anonymous_args = 0
 1146              		@ link register save eliminated.
 1147 0000 80B4     		push	{r7}
 1148              	.LCFI48:
 1149              		.cfi_def_cfa_offset 4
 1150 0002 83B0     		sub	sp, sp, #12
 1151              	.LCFI49:
 1152              		.cfi_def_cfa_offset 16
 1153 0004 00AF     		add	r7, sp, #0
 1154              		.cfi_offset 7, -4
 1155              	.LCFI50:
 1156              		.cfi_def_cfa_register 7
 1157 0006 7860     		str	r0, [r7, #4]
 765:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
 766:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 767:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 768:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Send break characters */
 769:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USARTx->CR1 |= USART_CR1_SBK;
 1158              		.loc 1 769 0
 1159 0008 7B68     		ldr	r3, [r7, #4]
 1160 000a 9B89     		ldrh	r3, [r3, #12]	@ movhi
 1161 000c 9BB2     		uxth	r3, r3
 1162 000e 43F00103 		orr	r3, r3, #1
 1163 0012 9AB2     		uxth	r2, r3
 1164 0014 7B68     		ldr	r3, [r7, #4]
 1165 0016 9A81     		strh	r2, [r3, #12]	@ movhi
 770:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 1166              		.loc 1 770 0
 1167 0018 07F10C07 		add	r7, r7, #12
 1168 001c BD46     		mov	sp, r7
 1169 001e 80BC     		pop	{r7}
 1170 0020 7047     		bx	lr
 1171              		.cfi_endproc
 1172              	.LFE126:
 1174 0022 00BF     		.section	.text.USART_HalfDuplexCmd,"ax",%progbits
 1175              		.align	2
 1176              		.global	USART_HalfDuplexCmd
 1177              		.thumb
 1178              		.thumb_func
 1180              	USART_HalfDuplexCmd:
 1181              	.LFB127:
 771:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 772:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 773:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @}
 774:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 775:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 776:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /** @defgroup USART_Group5 Halfduplex mode function
 777:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  *  @brief   Half-duplex mode function 
 778:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  *
 779:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @verbatim   
 780:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  ===============================================================================
 781:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****                          Half-duplex mode function
 782:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  ===============================================================================  
 783:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 784:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   This subsection provides a set of functions allowing to manage the USART 
 785:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   Half-duplex communication.
 786:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 787:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   The USART can be configured to follow a single-wire half-duplex protocol where 
 788:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   the TX and RX lines are internally connected.
 789:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 790:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USART Half duplex communication is possible through the following procedure:
 791:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      1. Program the Baud rate, Word length, Stop bits, Parity, Mode transmitter 
 792:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         or Mode receiver and hardware flow control values using the USART_Init()
 793:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         function.
 794:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      2. Configures the USART address using the USART_SetAddress() function.
 795:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      3. Enable the USART using the USART_Cmd() function.
 796:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      4. Enable the half duplex mode using USART_HalfDuplexCmd() function.
 797:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 798:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 799:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @note The RX pin is no longer used
 800:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @note In Half-duplex mode the following bits must be kept cleared:
 801:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - LINEN and CLKEN bits in the USART_CR2 register.
 802:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - SCEN and IREN bits in the USART_CR3 register.
 803:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 804:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @endverbatim
 805:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @{
 806:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 807:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 808:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 809:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Enables or disables the USART's Half Duplex communication.
 810:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
 811:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
 812:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  NewState: new state of the USART Communication.
 813:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          This parameter can be: ENABLE or DISABLE.
 814:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
 815:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 816:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_HalfDuplexCmd(USART_TypeDef* USARTx, FunctionalState NewState)
 817:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 1182              		.loc 1 817 0
 1183              		.cfi_startproc
 1184              		@ args = 0, pretend = 0, frame = 8
 1185              		@ frame_needed = 1, uses_anonymous_args = 0
 1186              		@ link register save eliminated.
 1187 0000 80B4     		push	{r7}
 1188              	.LCFI51:
 1189              		.cfi_def_cfa_offset 4
 1190 0002 83B0     		sub	sp, sp, #12
 1191              	.LCFI52:
 1192              		.cfi_def_cfa_offset 16
 1193 0004 00AF     		add	r7, sp, #0
 1194              		.cfi_offset 7, -4
 1195              	.LCFI53:
 1196              		.cfi_def_cfa_register 7
 1197 0006 7860     		str	r0, [r7, #4]
 1198 0008 0B46     		mov	r3, r1
 1199 000a FB70     		strb	r3, [r7, #3]
 818:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
 819:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 820:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 821:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 822:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if (NewState != DISABLE)
 1200              		.loc 1 822 0
 1201 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1202 000e 002B     		cmp	r3, #0
 1203 0010 08D0     		beq	.L46
 823:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 824:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
 825:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     USARTx->CR3 |= USART_CR3_HDSEL;
 1204              		.loc 1 825 0
 1205 0012 7B68     		ldr	r3, [r7, #4]
 1206 0014 9B8A     		ldrh	r3, [r3, #20]	@ movhi
 1207 0016 9BB2     		uxth	r3, r3
 1208 0018 43F00803 		orr	r3, r3, #8
 1209 001c 9AB2     		uxth	r2, r3
 1210 001e 7B68     		ldr	r3, [r7, #4]
 1211 0020 9A82     		strh	r2, [r3, #20]	@ movhi
 1212 0022 07E0     		b	.L45
 1213              	.L46:
 826:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 827:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else
 828:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 829:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Disable the Half-Duplex mode by clearing the HDSEL bit in the CR3 register */
 830:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_HDSEL);
 1214              		.loc 1 830 0
 1215 0024 7B68     		ldr	r3, [r7, #4]
 1216 0026 9B8A     		ldrh	r3, [r3, #20]	@ movhi
 1217 0028 9BB2     		uxth	r3, r3
 1218 002a 23F00803 		bic	r3, r3, #8
 1219 002e 9AB2     		uxth	r2, r3
 1220 0030 7B68     		ldr	r3, [r7, #4]
 1221 0032 9A82     		strh	r2, [r3, #20]	@ movhi
 1222              	.L45:
 831:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 832:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 1223              		.loc 1 832 0
 1224 0034 07F10C07 		add	r7, r7, #12
 1225 0038 BD46     		mov	sp, r7
 1226 003a 80BC     		pop	{r7}
 1227 003c 7047     		bx	lr
 1228              		.cfi_endproc
 1229              	.LFE127:
 1231 003e 00BF     		.section	.text.USART_SetGuardTime,"ax",%progbits
 1232              		.align	2
 1233              		.global	USART_SetGuardTime
 1234              		.thumb
 1235              		.thumb_func
 1237              	USART_SetGuardTime:
 1238              	.LFB128:
 833:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 834:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 835:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @}
 836:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 837:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 838:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 839:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /** @defgroup USART_Group6 Smartcard mode functions
 840:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  *  @brief   Smartcard mode functions 
 841:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  *
 842:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @verbatim   
 843:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  ===============================================================================
 844:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****                                Smartcard mode functions
 845:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  ===============================================================================  
 846:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 847:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   This subsection provides a set of functions allowing to manage the USART 
 848:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   Smartcard communication.
 849:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 850:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   The Smartcard interface is designed to support asynchronous protocol Smartcards as
 851:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   defined in the ISO 7816-3 standard.
 852:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 853:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   The USART can provide a clock to the smartcard through the SCLK output.
 854:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   In smartcard mode, SCLK is not associated to the communication but is simply derived 
 855:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   from the internal peripheral input clock through a 5-bit prescaler.
 856:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 857:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   Smartcard communication is possible through the following procedure:
 858:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      1. Configures the Smartcard Prescaler using the USART_SetPrescaler() function.
 859:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      2. Configures the Smartcard Guard Time using the USART_SetGuardTime() function.
 860:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      3. Program the USART clock using the USART_ClockInit() function as following:
 861:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - USART Clock enabled
 862:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - USART CPOL Low
 863:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - USART CPHA on first edge
 864:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - USART Last Bit Clock Enabled
 865:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      4. Program the Smartcard interface using the USART_Init() function as following:
 866:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - Word Length = 9 Bits
 867:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - 1.5 Stop Bit
 868:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - Even parity
 869:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - BaudRate = 12096 baud
 870:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - Hardware flow control disabled (RTS and CTS signals)
 871:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - Tx and Rx enabled
 872:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      5. Optionally you can enable the parity error interrupt using the USART_ITConfig()
 873:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         function
 874:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      6. Enable the USART using the USART_Cmd() function.
 875:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      7. Enable the Smartcard NACK using the USART_SmartCardNACKCmd() function.
 876:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      8. Enable the Smartcard interface using the USART_SmartCardCmd() function.
 877:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 878:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   Please refer to the ISO 7816-3 specification for more details.
 879:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 880:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 881:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @note It is also possible to choose 0.5 stop bit for receiving but it is recommended 
 882:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       to use 1.5 stop bits for both transmitting and receiving to avoid switching 
 883:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       between the two configurations.
 884:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @note In smartcard mode, the following bits must be kept cleared:
 885:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - LINEN bit in the USART_CR2 register.
 886:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - HDSEL and IREN bits in the USART_CR3 register.
 887:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @note Smartcard mode is available on USART peripherals only (not available on UART4 
 888:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       and UART5 peripherals).
 889:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 890:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @endverbatim
 891:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @{
 892:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 893:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 894:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 895:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Sets the specified USART guard time.
 896:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3 or 6 to select the USART or 
 897:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
 898:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USART_GuardTime: specifies the guard time.   
 899:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
 900:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 901:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_SetGuardTime(USART_TypeDef* USARTx, uint8_t USART_GuardTime)
 902:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {    
 1239              		.loc 1 902 0
 1240              		.cfi_startproc
 1241              		@ args = 0, pretend = 0, frame = 8
 1242              		@ frame_needed = 1, uses_anonymous_args = 0
 1243              		@ link register save eliminated.
 1244 0000 80B4     		push	{r7}
 1245              	.LCFI54:
 1246              		.cfi_def_cfa_offset 4
 1247 0002 83B0     		sub	sp, sp, #12
 1248              	.LCFI55:
 1249              		.cfi_def_cfa_offset 16
 1250 0004 00AF     		add	r7, sp, #0
 1251              		.cfi_offset 7, -4
 1252              	.LCFI56:
 1253              		.cfi_def_cfa_register 7
 1254 0006 7860     		str	r0, [r7, #4]
 1255 0008 0B46     		mov	r3, r1
 1256 000a FB70     		strb	r3, [r7, #3]
 903:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
 904:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_1236_PERIPH(USARTx));
 905:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 906:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Clear the USART Guard time */
 907:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USARTx->GTPR &= USART_GTPR_PSC;
 1257              		.loc 1 907 0
 1258 000c 7B68     		ldr	r3, [r7, #4]
 1259 000e 1B8B     		ldrh	r3, [r3, #24]	@ movhi
 1260 0010 9BB2     		uxth	r3, r3
 1261 0012 03F0FF03 		and	r3, r3, #255
 1262 0016 9AB2     		uxth	r2, r3
 1263 0018 7B68     		ldr	r3, [r7, #4]
 1264 001a 1A83     		strh	r2, [r3, #24]	@ movhi
 908:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Set the USART guard time */
 909:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USARTx->GTPR |= (uint16_t)((uint16_t)USART_GuardTime << 0x08);
 1265              		.loc 1 909 0
 1266 001c 7B68     		ldr	r3, [r7, #4]
 1267 001e 1B8B     		ldrh	r3, [r3, #24]	@ movhi
 1268 0020 9AB2     		uxth	r2, r3
 1269 0022 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1270 0024 9BB2     		uxth	r3, r3
 1271 0026 4FEA0323 		lsl	r3, r3, #8
 1272 002a 9BB2     		uxth	r3, r3
 1273 002c 42EA0303 		orr	r3, r2, r3
 1274 0030 9AB2     		uxth	r2, r3
 1275 0032 7B68     		ldr	r3, [r7, #4]
 1276 0034 1A83     		strh	r2, [r3, #24]	@ movhi
 910:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 1277              		.loc 1 910 0
 1278 0036 07F10C07 		add	r7, r7, #12
 1279 003a BD46     		mov	sp, r7
 1280 003c 80BC     		pop	{r7}
 1281 003e 7047     		bx	lr
 1282              		.cfi_endproc
 1283              	.LFE128:
 1285              		.section	.text.USART_SmartCardCmd,"ax",%progbits
 1286              		.align	2
 1287              		.global	USART_SmartCardCmd
 1288              		.thumb
 1289              		.thumb_func
 1291              	USART_SmartCardCmd:
 1292              	.LFB129:
 911:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 912:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 913:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Enables or disables the USART's Smart Card mode.
 914:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3 or 6 to select the USART or 
 915:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
 916:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  NewState: new state of the Smart Card mode.
 917:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          This parameter can be: ENABLE or DISABLE.      
 918:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
 919:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 920:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_SmartCardCmd(USART_TypeDef* USARTx, FunctionalState NewState)
 921:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 1293              		.loc 1 921 0
 1294              		.cfi_startproc
 1295              		@ args = 0, pretend = 0, frame = 8
 1296              		@ frame_needed = 1, uses_anonymous_args = 0
 1297              		@ link register save eliminated.
 1298 0000 80B4     		push	{r7}
 1299              	.LCFI57:
 1300              		.cfi_def_cfa_offset 4
 1301 0002 83B0     		sub	sp, sp, #12
 1302              	.LCFI58:
 1303              		.cfi_def_cfa_offset 16
 1304 0004 00AF     		add	r7, sp, #0
 1305              		.cfi_offset 7, -4
 1306              	.LCFI59:
 1307              		.cfi_def_cfa_register 7
 1308 0006 7860     		str	r0, [r7, #4]
 1309 0008 0B46     		mov	r3, r1
 1310 000a FB70     		strb	r3, [r7, #3]
 922:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
 923:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_1236_PERIPH(USARTx));
 924:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 925:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if (NewState != DISABLE)
 1311              		.loc 1 925 0
 1312 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1313 000e 002B     		cmp	r3, #0
 1314 0010 08D0     		beq	.L50
 926:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 927:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Enable the SC mode by setting the SCEN bit in the CR3 register */
 928:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     USARTx->CR3 |= USART_CR3_SCEN;
 1315              		.loc 1 928 0
 1316 0012 7B68     		ldr	r3, [r7, #4]
 1317 0014 9B8A     		ldrh	r3, [r3, #20]	@ movhi
 1318 0016 9BB2     		uxth	r3, r3
 1319 0018 43F02003 		orr	r3, r3, #32
 1320 001c 9AB2     		uxth	r2, r3
 1321 001e 7B68     		ldr	r3, [r7, #4]
 1322 0020 9A82     		strh	r2, [r3, #20]	@ movhi
 1323 0022 07E0     		b	.L49
 1324              	.L50:
 929:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 930:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else
 931:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 932:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Disable the SC mode by clearing the SCEN bit in the CR3 register */
 933:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_SCEN);
 1325              		.loc 1 933 0
 1326 0024 7B68     		ldr	r3, [r7, #4]
 1327 0026 9B8A     		ldrh	r3, [r3, #20]	@ movhi
 1328 0028 9BB2     		uxth	r3, r3
 1329 002a 23F02003 		bic	r3, r3, #32
 1330 002e 9AB2     		uxth	r2, r3
 1331 0030 7B68     		ldr	r3, [r7, #4]
 1332 0032 9A82     		strh	r2, [r3, #20]	@ movhi
 1333              	.L49:
 934:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 935:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 1334              		.loc 1 935 0
 1335 0034 07F10C07 		add	r7, r7, #12
 1336 0038 BD46     		mov	sp, r7
 1337 003a 80BC     		pop	{r7}
 1338 003c 7047     		bx	lr
 1339              		.cfi_endproc
 1340              	.LFE129:
 1342 003e 00BF     		.section	.text.USART_SmartCardNACKCmd,"ax",%progbits
 1343              		.align	2
 1344              		.global	USART_SmartCardNACKCmd
 1345              		.thumb
 1346              		.thumb_func
 1348              	USART_SmartCardNACKCmd:
 1349              	.LFB130:
 936:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 937:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 938:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Enables or disables NACK transmission.
 939:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3 or 6 to select the USART or 
 940:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
 941:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  NewState: new state of the NACK transmission.
 942:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          This parameter can be: ENABLE or DISABLE.  
 943:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
 944:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 945:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_SmartCardNACKCmd(USART_TypeDef* USARTx, FunctionalState NewState)
 946:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 1350              		.loc 1 946 0
 1351              		.cfi_startproc
 1352              		@ args = 0, pretend = 0, frame = 8
 1353              		@ frame_needed = 1, uses_anonymous_args = 0
 1354              		@ link register save eliminated.
 1355 0000 80B4     		push	{r7}
 1356              	.LCFI60:
 1357              		.cfi_def_cfa_offset 4
 1358 0002 83B0     		sub	sp, sp, #12
 1359              	.LCFI61:
 1360              		.cfi_def_cfa_offset 16
 1361 0004 00AF     		add	r7, sp, #0
 1362              		.cfi_offset 7, -4
 1363              	.LCFI62:
 1364              		.cfi_def_cfa_register 7
 1365 0006 7860     		str	r0, [r7, #4]
 1366 0008 0B46     		mov	r3, r1
 1367 000a FB70     		strb	r3, [r7, #3]
 947:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
 948:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_1236_PERIPH(USARTx)); 
 949:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 950:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if (NewState != DISABLE)
 1368              		.loc 1 950 0
 1369 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1370 000e 002B     		cmp	r3, #0
 1371 0010 08D0     		beq	.L53
 951:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 952:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Enable the NACK transmission by setting the NACK bit in the CR3 register */
 953:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     USARTx->CR3 |= USART_CR3_NACK;
 1372              		.loc 1 953 0
 1373 0012 7B68     		ldr	r3, [r7, #4]
 1374 0014 9B8A     		ldrh	r3, [r3, #20]	@ movhi
 1375 0016 9BB2     		uxth	r3, r3
 1376 0018 43F01003 		orr	r3, r3, #16
 1377 001c 9AB2     		uxth	r2, r3
 1378 001e 7B68     		ldr	r3, [r7, #4]
 1379 0020 9A82     		strh	r2, [r3, #20]	@ movhi
 1380 0022 07E0     		b	.L52
 1381              	.L53:
 954:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 955:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else
 956:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 957:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Disable the NACK transmission by clearing the NACK bit in the CR3 register */
 958:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_NACK);
 1382              		.loc 1 958 0
 1383 0024 7B68     		ldr	r3, [r7, #4]
 1384 0026 9B8A     		ldrh	r3, [r3, #20]	@ movhi
 1385 0028 9BB2     		uxth	r3, r3
 1386 002a 23F01003 		bic	r3, r3, #16
 1387 002e 9AB2     		uxth	r2, r3
 1388 0030 7B68     		ldr	r3, [r7, #4]
 1389 0032 9A82     		strh	r2, [r3, #20]	@ movhi
 1390              	.L52:
 959:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 960:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 1391              		.loc 1 960 0
 1392 0034 07F10C07 		add	r7, r7, #12
 1393 0038 BD46     		mov	sp, r7
 1394 003a 80BC     		pop	{r7}
 1395 003c 7047     		bx	lr
 1396              		.cfi_endproc
 1397              	.LFE130:
 1399 003e 00BF     		.section	.text.USART_IrDAConfig,"ax",%progbits
 1400              		.align	2
 1401              		.global	USART_IrDAConfig
 1402              		.thumb
 1403              		.thumb_func
 1405              	USART_IrDAConfig:
 1406              	.LFB131:
 961:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 962:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 963:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @}
 964:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 965:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 966:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /** @defgroup USART_Group7 IrDA mode functions
 967:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  *  @brief   IrDA mode functions 
 968:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  *
 969:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @verbatim   
 970:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  ===============================================================================
 971:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****                                 IrDA mode functions
 972:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  ===============================================================================  
 973:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 974:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   This subsection provides a set of functions allowing to manage the USART 
 975:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   IrDA communication.
 976:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 977:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   IrDA is a half duplex communication protocol. If the Transmitter is busy, any data
 978:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   on the IrDA receive line will be ignored by the IrDA decoder and if the Receiver 
 979:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   is busy, data on the TX from the USART to IrDA will not be encoded by IrDA.
 980:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   While receiving data, transmission should be avoided as the data to be transmitted
 981:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   could be corrupted.
 982:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 983:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   IrDA communication is possible through the following procedure:
 984:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      1. Program the Baud rate, Word length = 8 bits, Stop bits, Parity, Transmitter/Receiver 
 985:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         modes and hardware flow control values using the USART_Init() function.
 986:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      2. Enable the USART using the USART_Cmd() function.
 987:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      3. Configures the IrDA pulse width by configuring the prescaler using  
 988:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         the USART_SetPrescaler() function.
 989:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      4. Configures the IrDA  USART_IrDAMode_LowPower or USART_IrDAMode_Normal mode
 990:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         using the USART_IrDAConfig() function.
 991:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      5. Enable the IrDA using the USART_IrDACmd() function.
 992:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 993:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @note A pulse of width less than two and greater than one PSC period(s) may or may
 994:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       not be rejected.
 995:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @note The receiver set up time should be managed by software. The IrDA physical layer
 996:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       specification specifies a minimum of 10 ms delay between transmission and 
 997:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       reception (IrDA is a half duplex protocol).
 998:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @note In IrDA mode, the following bits must be kept cleared:
 999:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - LINEN, STOP and CLKEN bits in the USART_CR2 register.
1000:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - SCEN and HDSEL bits in the USART_CR3 register.
1001:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1002:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @endverbatim
1003:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @{
1004:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
1005:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1006:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
1007:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Configures the USART's IrDA interface.
1008:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
1009:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
1010:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USART_IrDAMode: specifies the IrDA mode.
1011:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          This parameter can be one of the following values:
1012:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IrDAMode_LowPower
1013:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IrDAMode_Normal
1014:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
1015:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
1016:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_IrDAConfig(USART_TypeDef* USARTx, uint16_t USART_IrDAMode)
1017:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 1407              		.loc 1 1017 0
 1408              		.cfi_startproc
 1409              		@ args = 0, pretend = 0, frame = 8
 1410              		@ frame_needed = 1, uses_anonymous_args = 0
 1411              		@ link register save eliminated.
 1412 0000 80B4     		push	{r7}
 1413              	.LCFI63:
 1414              		.cfi_def_cfa_offset 4
 1415 0002 83B0     		sub	sp, sp, #12
 1416              	.LCFI64:
 1417              		.cfi_def_cfa_offset 16
 1418 0004 00AF     		add	r7, sp, #0
 1419              		.cfi_offset 7, -4
 1420              	.LCFI65:
 1421              		.cfi_def_cfa_register 7
 1422 0006 7860     		str	r0, [r7, #4]
 1423 0008 0B46     		mov	r3, r1
 1424 000a 7B80     		strh	r3, [r7, #2]	@ movhi
1018:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
1019:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
1020:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_IRDA_MODE(USART_IrDAMode));
1021:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     
1022:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_IRLP);
 1425              		.loc 1 1022 0
 1426 000c 7B68     		ldr	r3, [r7, #4]
 1427 000e 9B8A     		ldrh	r3, [r3, #20]	@ movhi
 1428 0010 9BB2     		uxth	r3, r3
 1429 0012 23F00403 		bic	r3, r3, #4
 1430 0016 9AB2     		uxth	r2, r3
 1431 0018 7B68     		ldr	r3, [r7, #4]
 1432 001a 9A82     		strh	r2, [r3, #20]	@ movhi
1023:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USARTx->CR3 |= USART_IrDAMode;
 1433              		.loc 1 1023 0
 1434 001c 7B68     		ldr	r3, [r7, #4]
 1435 001e 9B8A     		ldrh	r3, [r3, #20]	@ movhi
 1436 0020 9AB2     		uxth	r2, r3
 1437 0022 7B88     		ldrh	r3, [r7, #2]	@ movhi
 1438 0024 42EA0303 		orr	r3, r2, r3
 1439 0028 9AB2     		uxth	r2, r3
 1440 002a 7B68     		ldr	r3, [r7, #4]
 1441 002c 9A82     		strh	r2, [r3, #20]	@ movhi
1024:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 1442              		.loc 1 1024 0
 1443 002e 07F10C07 		add	r7, r7, #12
 1444 0032 BD46     		mov	sp, r7
 1445 0034 80BC     		pop	{r7}
 1446 0036 7047     		bx	lr
 1447              		.cfi_endproc
 1448              	.LFE131:
 1450              		.section	.text.USART_IrDACmd,"ax",%progbits
 1451              		.align	2
 1452              		.global	USART_IrDACmd
 1453              		.thumb
 1454              		.thumb_func
 1456              	USART_IrDACmd:
 1457              	.LFB132:
1025:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1026:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
1027:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Enables or disables the USART's IrDA interface.
1028:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
1029:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
1030:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  NewState: new state of the IrDA mode.
1031:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          This parameter can be: ENABLE or DISABLE.
1032:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
1033:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
1034:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_IrDACmd(USART_TypeDef* USARTx, FunctionalState NewState)
1035:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 1458              		.loc 1 1035 0
 1459              		.cfi_startproc
 1460              		@ args = 0, pretend = 0, frame = 8
 1461              		@ frame_needed = 1, uses_anonymous_args = 0
 1462              		@ link register save eliminated.
 1463 0000 80B4     		push	{r7}
 1464              	.LCFI66:
 1465              		.cfi_def_cfa_offset 4
 1466 0002 83B0     		sub	sp, sp, #12
 1467              	.LCFI67:
 1468              		.cfi_def_cfa_offset 16
 1469 0004 00AF     		add	r7, sp, #0
 1470              		.cfi_offset 7, -4
 1471              	.LCFI68:
 1472              		.cfi_def_cfa_register 7
 1473 0006 7860     		str	r0, [r7, #4]
 1474 0008 0B46     		mov	r3, r1
 1475 000a FB70     		strb	r3, [r7, #3]
1036:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
1037:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
1038:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1039:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     
1040:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if (NewState != DISABLE)
 1476              		.loc 1 1040 0
 1477 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1478 000e 002B     		cmp	r3, #0
 1479 0010 08D0     		beq	.L57
1041:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
1042:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Enable the IrDA mode by setting the IREN bit in the CR3 register */
1043:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     USARTx->CR3 |= USART_CR3_IREN;
 1480              		.loc 1 1043 0
 1481 0012 7B68     		ldr	r3, [r7, #4]
 1482 0014 9B8A     		ldrh	r3, [r3, #20]	@ movhi
 1483 0016 9BB2     		uxth	r3, r3
 1484 0018 43F00203 		orr	r3, r3, #2
 1485 001c 9AB2     		uxth	r2, r3
 1486 001e 7B68     		ldr	r3, [r7, #4]
 1487 0020 9A82     		strh	r2, [r3, #20]	@ movhi
 1488 0022 07E0     		b	.L56
 1489              	.L57:
1044:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
1045:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else
1046:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
1047:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Disable the IrDA mode by clearing the IREN bit in the CR3 register */
1048:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_IREN);
 1490              		.loc 1 1048 0
 1491 0024 7B68     		ldr	r3, [r7, #4]
 1492 0026 9B8A     		ldrh	r3, [r3, #20]	@ movhi
 1493 0028 9BB2     		uxth	r3, r3
 1494 002a 23F00203 		bic	r3, r3, #2
 1495 002e 9AB2     		uxth	r2, r3
 1496 0030 7B68     		ldr	r3, [r7, #4]
 1497 0032 9A82     		strh	r2, [r3, #20]	@ movhi
 1498              	.L56:
1049:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
1050:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 1499              		.loc 1 1050 0
 1500 0034 07F10C07 		add	r7, r7, #12
 1501 0038 BD46     		mov	sp, r7
 1502 003a 80BC     		pop	{r7}
 1503 003c 7047     		bx	lr
 1504              		.cfi_endproc
 1505              	.LFE132:
 1507 003e 00BF     		.section	.text.USART_DMACmd,"ax",%progbits
 1508              		.align	2
 1509              		.global	USART_DMACmd
 1510              		.thumb
 1511              		.thumb_func
 1513              	USART_DMACmd:
 1514              	.LFB133:
1051:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1052:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
1053:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @}
1054:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
1055:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1056:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /** @defgroup USART_Group8 DMA transfers management functions
1057:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  *  @brief   DMA transfers management functions
1058:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  *
1059:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @verbatim   
1060:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  ===============================================================================
1061:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****                       DMA transfers management functions
1062:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  ===============================================================================  
1063:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1064:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @endverbatim
1065:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @{
1066:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
1067:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
1068:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
1069:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Enables or disables the USART's DMA interface.
1070:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
1071:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
1072:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USART_DMAReq: specifies the DMA request.
1073:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          This parameter can be any combination of the following values:
1074:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_DMAReq_Tx: USART DMA transmit request
1075:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_DMAReq_Rx: USART DMA receive request
1076:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  NewState: new state of the DMA Request sources.
1077:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          This parameter can be: ENABLE or DISABLE.   
1078:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
1079:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
1080:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_DMACmd(USART_TypeDef* USARTx, uint16_t USART_DMAReq, FunctionalState NewState)
1081:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 1515              		.loc 1 1081 0
 1516              		.cfi_startproc
 1517              		@ args = 0, pretend = 0, frame = 8
 1518              		@ frame_needed = 1, uses_anonymous_args = 0
 1519              		@ link register save eliminated.
 1520 0000 80B4     		push	{r7}
 1521              	.LCFI69:
 1522              		.cfi_def_cfa_offset 4
 1523 0002 83B0     		sub	sp, sp, #12
 1524              	.LCFI70:
 1525              		.cfi_def_cfa_offset 16
 1526 0004 00AF     		add	r7, sp, #0
 1527              		.cfi_offset 7, -4
 1528              	.LCFI71:
 1529              		.cfi_def_cfa_register 7
 1530 0006 7860     		str	r0, [r7, #4]
 1531 0008 1346     		mov	r3, r2
 1532 000a 0A46     		mov	r2, r1	@ movhi
 1533 000c 7A80     		strh	r2, [r7, #2]	@ movhi
 1534 000e 7B70     		strb	r3, [r7, #1]
1082:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
1083:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
1084:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_DMAREQ(USART_DMAReq));  
1085:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState)); 
1086:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1087:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if (NewState != DISABLE)
 1535              		.loc 1 1087 0
 1536 0010 7B78     		ldrb	r3, [r7, #1]	@ zero_extendqisi2
 1537 0012 002B     		cmp	r3, #0
 1538 0014 09D0     		beq	.L60
1088:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
1089:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Enable the DMA transfer for selected requests by setting the DMAT and/or
1090:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****        DMAR bits in the USART CR3 register */
1091:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     USARTx->CR3 |= USART_DMAReq;
 1539              		.loc 1 1091 0
 1540 0016 7B68     		ldr	r3, [r7, #4]
 1541 0018 9B8A     		ldrh	r3, [r3, #20]	@ movhi
 1542 001a 9AB2     		uxth	r2, r3
 1543 001c 7B88     		ldrh	r3, [r7, #2]	@ movhi
 1544 001e 42EA0303 		orr	r3, r2, r3
 1545 0022 9AB2     		uxth	r2, r3
 1546 0024 7B68     		ldr	r3, [r7, #4]
 1547 0026 9A82     		strh	r2, [r3, #20]	@ movhi
 1548 0028 0BE0     		b	.L59
 1549              	.L60:
1092:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
1093:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else
1094:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
1095:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Disable the DMA transfer for selected requests by clearing the DMAT and/or
1096:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****        DMAR bits in the USART CR3 register */
1097:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     USARTx->CR3 &= (uint16_t)~USART_DMAReq;
 1550              		.loc 1 1097 0
 1551 002a 7B68     		ldr	r3, [r7, #4]
 1552 002c 9B8A     		ldrh	r3, [r3, #20]	@ movhi
 1553 002e 9AB2     		uxth	r2, r3
 1554 0030 7B88     		ldrh	r3, [r7, #2]	@ movhi
 1555 0032 6FEA0303 		mvn	r3, r3
 1556 0036 9BB2     		uxth	r3, r3
 1557 0038 02EA0303 		and	r3, r2, r3
 1558 003c 9AB2     		uxth	r2, r3
 1559 003e 7B68     		ldr	r3, [r7, #4]
 1560 0040 9A82     		strh	r2, [r3, #20]	@ movhi
 1561              	.L59:
1098:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
1099:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 1562              		.loc 1 1099 0
 1563 0042 07F10C07 		add	r7, r7, #12
 1564 0046 BD46     		mov	sp, r7
 1565 0048 80BC     		pop	{r7}
 1566 004a 7047     		bx	lr
 1567              		.cfi_endproc
 1568              	.LFE133:
 1570              		.section	.text.USART_ITConfig,"ax",%progbits
 1571              		.align	2
 1572              		.global	USART_ITConfig
 1573              		.thumb
 1574              		.thumb_func
 1576              	USART_ITConfig:
 1577              	.LFB134:
1100:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1101:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
1102:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @}
1103:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
1104:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
1105:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /** @defgroup USART_Group9 Interrupts and flags management functions
1106:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  *  @brief   Interrupts and flags management functions 
1107:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  *
1108:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @verbatim   
1109:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  ===============================================================================
1110:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****                    Interrupts and flags management functions
1111:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  ===============================================================================  
1112:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1113:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   This subsection provides a set of functions allowing to configure the USART 
1114:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   Interrupts sources, DMA channels requests and check or clear the flags or 
1115:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   pending bits status.
1116:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   The user should identify which mode will be used in his application to manage 
1117:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   the communication: Polling mode, Interrupt mode or DMA mode. 
1118:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     
1119:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   Polling Mode
1120:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   =============
1121:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   In Polling Mode, the SPI communication can be managed by 10 flags:
1122:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      1. USART_FLAG_TXE : to indicate the status of the transmit buffer register
1123:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      2. USART_FLAG_RXNE : to indicate the status of the receive buffer register
1124:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      3. USART_FLAG_TC : to indicate the status of the transmit operation
1125:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      4. USART_FLAG_IDLE : to indicate the status of the Idle Line             
1126:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      5. USART_FLAG_CTS : to indicate the status of the nCTS input
1127:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      6. USART_FLAG_LBD : to indicate the status of the LIN break detection
1128:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      7. USART_FLAG_NE : to indicate if a noise error occur
1129:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      8. USART_FLAG_FE : to indicate if a frame error occur
1130:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      9. USART_FLAG_PE : to indicate if a parity error occur
1131:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      10. USART_FLAG_ORE : to indicate if an Overrun error occur
1132:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1133:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   In this Mode it is advised to use the following functions:
1134:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       - FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG);
1135:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       - void USART_ClearFlag(USART_TypeDef* USARTx, uint16_t USART_FLAG);
1136:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1137:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   Interrupt Mode
1138:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   ===============
1139:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   In Interrupt Mode, the USART communication can be managed by 8 interrupt sources
1140:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   and 10 pending bits: 
1141:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1142:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   Pending Bits:
1143:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   ------------- 
1144:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      1. USART_IT_TXE : to indicate the status of the transmit buffer register
1145:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      2. USART_IT_RXNE : to indicate the status of the receive buffer register
1146:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      3. USART_IT_TC : to indicate the status of the transmit operation
1147:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      4. USART_IT_IDLE : to indicate the status of the Idle Line             
1148:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      5. USART_IT_CTS : to indicate the status of the nCTS input
1149:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      6. USART_IT_LBD : to indicate the status of the LIN break detection
1150:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      7. USART_IT_NE : to indicate if a noise error occur
1151:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      8. USART_IT_FE : to indicate if a frame error occur
1152:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      9. USART_IT_PE : to indicate if a parity error occur
1153:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      10. USART_IT_ORE : to indicate if an Overrun error occur
1154:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1155:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   Interrupt Source:
1156:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   -----------------
1157:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      1. USART_IT_TXE : specifies the interrupt source for the Tx buffer empty 
1158:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****                        interrupt. 
1159:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      2. USART_IT_RXNE : specifies the interrupt source for the Rx buffer not 
1160:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****                         empty interrupt.
1161:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      3. USART_IT_TC : specifies the interrupt source for the Transmit complete 
1162:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****                        interrupt. 
1163:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      4. USART_IT_IDLE : specifies the interrupt source for the Idle Line interrupt.             
1164:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      5. USART_IT_CTS : specifies the interrupt source for the CTS interrupt. 
1165:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      6. USART_IT_LBD : specifies the interrupt source for the LIN break detection
1166:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****                        interrupt. 
1167:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      7. USART_IT_PE : specifies the interrupt source for the parity error interrupt. 
1168:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      8. USART_IT_ERR :  specifies the interrupt source for the errors interrupt.
1169:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1170:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @note Some parameters are coded in order to use them as interrupt source or as pending bits.
1171:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1172:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   In this Mode it is advised to use the following functions:
1173:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      - void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState);
1174:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      - ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT);
1175:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      - void USART_ClearITPendingBit(USART_TypeDef* USARTx, uint16_t USART_IT);
1176:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1177:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   DMA Mode
1178:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   ========
1179:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   In DMA Mode, the USART communication can be managed by 2 DMA Channel requests:
1180:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      1. USART_DMAReq_Tx: specifies the Tx buffer DMA transfer request
1181:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      2. USART_DMAReq_Rx: specifies the Rx buffer DMA transfer request
1182:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1183:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   In this Mode it is advised to use the following function:
1184:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      - void USART_DMACmd(USART_TypeDef* USARTx, uint16_t USART_DMAReq, FunctionalState NewState);
1185:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1186:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @endverbatim
1187:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @{
1188:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
1189:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1190:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
1191:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Enables or disables the specified USART interrupts.
1192:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
1193:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
1194:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USART_IT: specifies the USART interrupt sources to be enabled or disabled.
1195:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          This parameter can be one of the following values:
1196:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_CTS:  CTS change interrupt
1197:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_LBD:  LIN Break detection interrupt
1198:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_TXE:  Transmit Data Register empty interrupt
1199:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_TC:   Transmission complete interrupt
1200:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_RXNE: Receive Data register not empty interrupt
1201:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_IDLE: Idle line detection interrupt
1202:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_PE:   Parity Error interrupt
1203:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_ERR:  Error interrupt(Frame error, noise error, overrun error)
1204:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  NewState: new state of the specified USARTx interrupts.
1205:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          This parameter can be: ENABLE or DISABLE.
1206:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
1207:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
1208:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
1209:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 1578              		.loc 1 1209 0
 1579              		.cfi_startproc
 1580              		@ args = 0, pretend = 0, frame = 24
 1581              		@ frame_needed = 1, uses_anonymous_args = 0
 1582              		@ link register save eliminated.
 1583 0000 80B4     		push	{r7}
 1584              	.LCFI72:
 1585              		.cfi_def_cfa_offset 4
 1586 0002 87B0     		sub	sp, sp, #28
 1587              	.LCFI73:
 1588              		.cfi_def_cfa_offset 32
 1589 0004 00AF     		add	r7, sp, #0
 1590              		.cfi_offset 7, -4
 1591              	.LCFI74:
 1592              		.cfi_def_cfa_register 7
 1593 0006 7860     		str	r0, [r7, #4]
 1594 0008 1346     		mov	r3, r2
 1595 000a 0A46     		mov	r2, r1	@ movhi
 1596 000c 7A80     		strh	r2, [r7, #2]	@ movhi
 1597 000e 7B70     		strb	r3, [r7, #1]
1210:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   uint32_t usartreg = 0x00, itpos = 0x00, itmask = 0x00;
 1598              		.loc 1 1210 0
 1599 0010 4FF00003 		mov	r3, #0
 1600 0014 3B61     		str	r3, [r7, #16]
 1601 0016 4FF00003 		mov	r3, #0
 1602 001a FB60     		str	r3, [r7, #12]
 1603 001c 4FF00003 		mov	r3, #0
 1604 0020 BB60     		str	r3, [r7, #8]
1211:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   uint32_t usartxbase = 0x00;
 1605              		.loc 1 1211 0
 1606 0022 4FF00003 		mov	r3, #0
 1607 0026 7B61     		str	r3, [r7, #20]
1212:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
1213:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
1214:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_CONFIG_IT(USART_IT));
1215:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1216:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1217:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* The CTS interrupt is not available for UART4 and UART5 */
1218:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if (USART_IT == USART_IT_CTS)
1219:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
1220:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     assert_param(IS_USART_1236_PERIPH(USARTx));
1221:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   } 
1222:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     
1223:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   usartxbase = (uint32_t)USARTx;
 1608              		.loc 1 1223 0
 1609 0028 7B68     		ldr	r3, [r7, #4]
 1610 002a 7B61     		str	r3, [r7, #20]
1224:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1225:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Get the USART register index */
1226:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   usartreg = (((uint8_t)USART_IT) >> 0x05);
 1611              		.loc 1 1226 0
 1612 002c 7B88     		ldrh	r3, [r7, #2]	@ movhi
 1613 002e DBB2     		uxtb	r3, r3
 1614 0030 4FEA5313 		lsr	r3, r3, #5
 1615 0034 DBB2     		uxtb	r3, r3
 1616 0036 3B61     		str	r3, [r7, #16]
1227:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1228:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Get the interrupt position */
1229:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   itpos = USART_IT & IT_MASK;
 1617              		.loc 1 1229 0
 1618 0038 7B88     		ldrh	r3, [r7, #2]
 1619 003a 03F01F03 		and	r3, r3, #31
 1620 003e FB60     		str	r3, [r7, #12]
1230:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   itmask = (((uint32_t)0x01) << itpos);
 1621              		.loc 1 1230 0
 1622 0040 FB68     		ldr	r3, [r7, #12]
 1623 0042 4FF00102 		mov	r2, #1
 1624 0046 02FA03F3 		lsl	r3, r2, r3
 1625 004a BB60     		str	r3, [r7, #8]
1231:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     
1232:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if (usartreg == 0x01) /* The IT is in CR1 register */
 1626              		.loc 1 1232 0
 1627 004c 3B69     		ldr	r3, [r7, #16]
 1628 004e 012B     		cmp	r3, #1
 1629 0050 04D1     		bne	.L63
1233:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
1234:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     usartxbase += 0x0C;
 1630              		.loc 1 1234 0
 1631 0052 7B69     		ldr	r3, [r7, #20]
 1632 0054 03F10C03 		add	r3, r3, #12
 1633 0058 7B61     		str	r3, [r7, #20]
 1634 005a 0BE0     		b	.L64
 1635              	.L63:
1235:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
1236:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else if (usartreg == 0x02) /* The IT is in CR2 register */
 1636              		.loc 1 1236 0
 1637 005c 3B69     		ldr	r3, [r7, #16]
 1638 005e 022B     		cmp	r3, #2
 1639 0060 04D1     		bne	.L65
1237:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
1238:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     usartxbase += 0x10;
 1640              		.loc 1 1238 0
 1641 0062 7B69     		ldr	r3, [r7, #20]
 1642 0064 03F11003 		add	r3, r3, #16
 1643 0068 7B61     		str	r3, [r7, #20]
 1644 006a 03E0     		b	.L64
 1645              	.L65:
1239:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
1240:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else /* The IT is in CR3 register */
1241:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
1242:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     usartxbase += 0x14; 
 1646              		.loc 1 1242 0
 1647 006c 7B69     		ldr	r3, [r7, #20]
 1648 006e 03F11403 		add	r3, r3, #20
 1649 0072 7B61     		str	r3, [r7, #20]
 1650              	.L64:
1243:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
1244:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if (NewState != DISABLE)
 1651              		.loc 1 1244 0
 1652 0074 7B78     		ldrb	r3, [r7, #1]	@ zero_extendqisi2
 1653 0076 002B     		cmp	r3, #0
 1654 0078 07D0     		beq	.L66
1245:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
1246:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     *(__IO uint32_t*)usartxbase  |= itmask;
 1655              		.loc 1 1246 0
 1656 007a 7B69     		ldr	r3, [r7, #20]
 1657 007c 7A69     		ldr	r2, [r7, #20]
 1658 007e 1168     		ldr	r1, [r2, #0]
 1659 0080 BA68     		ldr	r2, [r7, #8]
 1660 0082 41EA0202 		orr	r2, r1, r2
 1661 0086 1A60     		str	r2, [r3, #0]
 1662 0088 08E0     		b	.L62
 1663              	.L66:
1247:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
1248:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else
1249:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
1250:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     *(__IO uint32_t*)usartxbase &= ~itmask;
 1664              		.loc 1 1250 0
 1665 008a 7B69     		ldr	r3, [r7, #20]
 1666 008c 7A69     		ldr	r2, [r7, #20]
 1667 008e 1168     		ldr	r1, [r2, #0]
 1668 0090 BA68     		ldr	r2, [r7, #8]
 1669 0092 6FEA0202 		mvn	r2, r2
 1670 0096 01EA0202 		and	r2, r1, r2
 1671 009a 1A60     		str	r2, [r3, #0]
 1672              	.L62:
1251:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
1252:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 1673              		.loc 1 1252 0
 1674 009c 07F11C07 		add	r7, r7, #28
 1675 00a0 BD46     		mov	sp, r7
 1676 00a2 80BC     		pop	{r7}
 1677 00a4 7047     		bx	lr
 1678              		.cfi_endproc
 1679              	.LFE134:
 1681 00a6 00BF     		.section	.text.USART_GetFlagStatus,"ax",%progbits
 1682              		.align	2
 1683              		.global	USART_GetFlagStatus
 1684              		.thumb
 1685              		.thumb_func
 1687              	USART_GetFlagStatus:
 1688              	.LFB135:
1253:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1254:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
1255:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Checks whether the specified USART flag is set or not.
1256:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
1257:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
1258:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USART_FLAG: specifies the flag to check.
1259:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          This parameter can be one of the following values:
1260:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_FLAG_CTS:  CTS Change flag (not available for UART4 and UART5)
1261:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_FLAG_LBD:  LIN Break detection flag
1262:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_FLAG_TXE:  Transmit data register empty flag
1263:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_FLAG_TC:   Transmission Complete flag
1264:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_FLAG_RXNE: Receive data register not empty flag
1265:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_FLAG_IDLE: Idle Line detection flag
1266:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_FLAG_ORE:  OverRun Error flag
1267:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_FLAG_NE:   Noise Error flag
1268:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_FLAG_FE:   Framing Error flag
1269:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_FLAG_PE:   Parity Error flag
1270:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval The new state of USART_FLAG (SET or RESET).
1271:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
1272:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG)
1273:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 1689              		.loc 1 1273 0
 1690              		.cfi_startproc
 1691              		@ args = 0, pretend = 0, frame = 16
 1692              		@ frame_needed = 1, uses_anonymous_args = 0
 1693              		@ link register save eliminated.
 1694 0000 80B4     		push	{r7}
 1695              	.LCFI75:
 1696              		.cfi_def_cfa_offset 4
 1697 0002 85B0     		sub	sp, sp, #20
 1698              	.LCFI76:
 1699              		.cfi_def_cfa_offset 24
 1700 0004 00AF     		add	r7, sp, #0
 1701              		.cfi_offset 7, -4
 1702              	.LCFI77:
 1703              		.cfi_def_cfa_register 7
 1704 0006 7860     		str	r0, [r7, #4]
 1705 0008 0B46     		mov	r3, r1
 1706 000a 7B80     		strh	r3, [r7, #2]	@ movhi
1274:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   FlagStatus bitstatus = RESET;
 1707              		.loc 1 1274 0
 1708 000c 4FF00003 		mov	r3, #0
 1709 0010 FB73     		strb	r3, [r7, #15]
1275:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
1276:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
1277:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_FLAG(USART_FLAG));
1278:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1279:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* The CTS flag is not available for UART4 and UART5 */
1280:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if (USART_FLAG == USART_FLAG_CTS)
1281:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
1282:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     assert_param(IS_USART_1236_PERIPH(USARTx));
1283:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   } 
1284:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     
1285:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
 1710              		.loc 1 1285 0
 1711 0012 7B68     		ldr	r3, [r7, #4]
 1712 0014 1B88     		ldrh	r3, [r3, #0]	@ movhi
 1713 0016 9AB2     		uxth	r2, r3
 1714 0018 7B88     		ldrh	r3, [r7, #2]	@ movhi
 1715 001a 02EA0303 		and	r3, r2, r3
 1716 001e 9BB2     		uxth	r3, r3
 1717 0020 002B     		cmp	r3, #0
 1718 0022 03D0     		beq	.L69
1286:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
1287:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     bitstatus = SET;
 1719              		.loc 1 1287 0
 1720 0024 4FF00103 		mov	r3, #1
 1721 0028 FB73     		strb	r3, [r7, #15]
 1722 002a 02E0     		b	.L70
 1723              	.L69:
1288:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
1289:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else
1290:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
1291:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     bitstatus = RESET;
 1724              		.loc 1 1291 0
 1725 002c 4FF00003 		mov	r3, #0
 1726 0030 FB73     		strb	r3, [r7, #15]
 1727              	.L70:
1292:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
1293:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   return bitstatus;
 1728              		.loc 1 1293 0
 1729 0032 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
1294:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 1730              		.loc 1 1294 0
 1731 0034 1846     		mov	r0, r3
 1732 0036 07F11407 		add	r7, r7, #20
 1733 003a BD46     		mov	sp, r7
 1734 003c 80BC     		pop	{r7}
 1735 003e 7047     		bx	lr
 1736              		.cfi_endproc
 1737              	.LFE135:
 1739              		.section	.text.USART_ClearFlag,"ax",%progbits
 1740              		.align	2
 1741              		.global	USART_ClearFlag
 1742              		.thumb
 1743              		.thumb_func
 1745              	USART_ClearFlag:
 1746              	.LFB136:
1295:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1296:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
1297:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Clears the USARTx's pending flags.
1298:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
1299:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
1300:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USART_FLAG: specifies the flag to clear.
1301:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          This parameter can be any combination of the following values:
1302:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_FLAG_CTS:  CTS Change flag (not available for UART4 and UART5).
1303:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_FLAG_LBD:  LIN Break detection flag.
1304:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_FLAG_TC:   Transmission Complete flag.
1305:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_FLAG_RXNE: Receive data register not empty flag.
1306:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *   
1307:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @note   PE (Parity error), FE (Framing error), NE (Noise error), ORE (OverRun 
1308:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          error) and IDLE (Idle line detected) flags are cleared by software 
1309:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          sequence: a read operation to USART_SR register (USART_GetFlagStatus()) 
1310:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          followed by a read operation to USART_DR register (USART_ReceiveData()).
1311:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @note   RXNE flag can be also cleared by a read to the USART_DR register 
1312:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          (USART_ReceiveData()).
1313:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @note   TC flag can be also cleared by software sequence: a read operation to 
1314:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          USART_SR register (USART_GetFlagStatus()) followed by a write operation
1315:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          to USART_DR register (USART_SendData()).
1316:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @note   TXE flag is cleared only by a write to the USART_DR register 
1317:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          (USART_SendData()).
1318:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *   
1319:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
1320:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
1321:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_ClearFlag(USART_TypeDef* USARTx, uint16_t USART_FLAG)
1322:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 1747              		.loc 1 1322 0
 1748              		.cfi_startproc
 1749              		@ args = 0, pretend = 0, frame = 8
 1750              		@ frame_needed = 1, uses_anonymous_args = 0
 1751              		@ link register save eliminated.
 1752 0000 80B4     		push	{r7}
 1753              	.LCFI78:
 1754              		.cfi_def_cfa_offset 4
 1755 0002 83B0     		sub	sp, sp, #12
 1756              	.LCFI79:
 1757              		.cfi_def_cfa_offset 16
 1758 0004 00AF     		add	r7, sp, #0
 1759              		.cfi_offset 7, -4
 1760              	.LCFI80:
 1761              		.cfi_def_cfa_register 7
 1762 0006 7860     		str	r0, [r7, #4]
 1763 0008 0B46     		mov	r3, r1
 1764 000a 7B80     		strh	r3, [r7, #2]	@ movhi
1323:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
1324:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
1325:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_CLEAR_FLAG(USART_FLAG));
1326:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1327:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* The CTS flag is not available for UART4 and UART5 */
1328:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if ((USART_FLAG & USART_FLAG_CTS) == USART_FLAG_CTS)
1329:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
1330:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     assert_param(IS_USART_1236_PERIPH(USARTx));
1331:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   } 
1332:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****        
1333:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USARTx->SR = (uint16_t)~USART_FLAG;
 1765              		.loc 1 1333 0
 1766 000c 7B88     		ldrh	r3, [r7, #2]	@ movhi
 1767 000e 6FEA0303 		mvn	r3, r3
 1768 0012 9AB2     		uxth	r2, r3
 1769 0014 7B68     		ldr	r3, [r7, #4]
 1770 0016 1A80     		strh	r2, [r3, #0]	@ movhi
1334:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 1771              		.loc 1 1334 0
 1772 0018 07F10C07 		add	r7, r7, #12
 1773 001c BD46     		mov	sp, r7
 1774 001e 80BC     		pop	{r7}
 1775 0020 7047     		bx	lr
 1776              		.cfi_endproc
 1777              	.LFE136:
 1779 0022 00BF     		.section	.text.USART_GetITStatus,"ax",%progbits
 1780              		.align	2
 1781              		.global	USART_GetITStatus
 1782              		.thumb
 1783              		.thumb_func
 1785              	USART_GetITStatus:
 1786              	.LFB137:
1335:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1336:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
1337:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Checks whether the specified USART interrupt has occurred or not.
1338:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
1339:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
1340:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USART_IT: specifies the USART interrupt source to check.
1341:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          This parameter can be one of the following values:
1342:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_CTS:  CTS change interrupt (not available for UART4 and UART5)
1343:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_LBD:  LIN Break detection interrupt
1344:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_TXE:  Transmit Data Register empty interrupt
1345:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_TC:   Transmission complete interrupt
1346:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_RXNE: Receive Data register not empty interrupt
1347:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_IDLE: Idle line detection interrupt
1348:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_ORE:  OverRun Error interrupt
1349:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_NE:   Noise Error interrupt
1350:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_FE:   Framing Error interrupt
1351:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_PE:   Parity Error interrupt
1352:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval The new state of USART_IT (SET or RESET).
1353:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
1354:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
1355:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 1787              		.loc 1 1355 0
 1788              		.cfi_startproc
 1789              		@ args = 0, pretend = 0, frame = 24
 1790              		@ frame_needed = 1, uses_anonymous_args = 0
 1791              		@ link register save eliminated.
 1792 0000 80B4     		push	{r7}
 1793              	.LCFI81:
 1794              		.cfi_def_cfa_offset 4
 1795 0002 87B0     		sub	sp, sp, #28
 1796              	.LCFI82:
 1797              		.cfi_def_cfa_offset 32
 1798 0004 00AF     		add	r7, sp, #0
 1799              		.cfi_offset 7, -4
 1800              	.LCFI83:
 1801              		.cfi_def_cfa_register 7
 1802 0006 7860     		str	r0, [r7, #4]
 1803 0008 0B46     		mov	r3, r1
 1804 000a 7B80     		strh	r3, [r7, #2]	@ movhi
1356:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   uint32_t bitpos = 0x00, itmask = 0x00, usartreg = 0x00;
 1805              		.loc 1 1356 0
 1806 000c 4FF00003 		mov	r3, #0
 1807 0010 FB60     		str	r3, [r7, #12]
 1808 0012 4FF00003 		mov	r3, #0
 1809 0016 7B61     		str	r3, [r7, #20]
 1810 0018 4FF00003 		mov	r3, #0
 1811 001c BB60     		str	r3, [r7, #8]
1357:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   ITStatus bitstatus = RESET;
 1812              		.loc 1 1357 0
 1813 001e 4FF00003 		mov	r3, #0
 1814 0022 FB74     		strb	r3, [r7, #19]
1358:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
1359:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
1360:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_GET_IT(USART_IT)); 
1361:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1362:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* The CTS interrupt is not available for UART4 and UART5 */ 
1363:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if (USART_IT == USART_IT_CTS)
1364:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
1365:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     assert_param(IS_USART_1236_PERIPH(USARTx));
1366:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   } 
1367:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     
1368:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Get the USART register index */
1369:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   usartreg = (((uint8_t)USART_IT) >> 0x05);
 1815              		.loc 1 1369 0
 1816 0024 7B88     		ldrh	r3, [r7, #2]	@ movhi
 1817 0026 DBB2     		uxtb	r3, r3
 1818 0028 4FEA5313 		lsr	r3, r3, #5
 1819 002c DBB2     		uxtb	r3, r3
 1820 002e BB60     		str	r3, [r7, #8]
1370:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Get the interrupt position */
1371:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   itmask = USART_IT & IT_MASK;
 1821              		.loc 1 1371 0
 1822 0030 7B88     		ldrh	r3, [r7, #2]
 1823 0032 03F01F03 		and	r3, r3, #31
 1824 0036 7B61     		str	r3, [r7, #20]
1372:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   itmask = (uint32_t)0x01 << itmask;
 1825              		.loc 1 1372 0
 1826 0038 7B69     		ldr	r3, [r7, #20]
 1827 003a 4FF00102 		mov	r2, #1
 1828 003e 02FA03F3 		lsl	r3, r2, r3
 1829 0042 7B61     		str	r3, [r7, #20]
1373:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
1374:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if (usartreg == 0x01) /* The IT  is in CR1 register */
 1830              		.loc 1 1374 0
 1831 0044 BB68     		ldr	r3, [r7, #8]
 1832 0046 012B     		cmp	r3, #1
 1833 0048 07D1     		bne	.L73
1375:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
1376:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     itmask &= USARTx->CR1;
 1834              		.loc 1 1376 0
 1835 004a 7B68     		ldr	r3, [r7, #4]
 1836 004c 9B89     		ldrh	r3, [r3, #12]	@ movhi
 1837 004e 9BB2     		uxth	r3, r3
 1838 0050 7A69     		ldr	r2, [r7, #20]
 1839 0052 02EA0303 		and	r3, r2, r3
 1840 0056 7B61     		str	r3, [r7, #20]
 1841 0058 11E0     		b	.L74
 1842              	.L73:
1377:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
1378:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else if (usartreg == 0x02) /* The IT  is in CR2 register */
 1843              		.loc 1 1378 0
 1844 005a BB68     		ldr	r3, [r7, #8]
 1845 005c 022B     		cmp	r3, #2
 1846 005e 07D1     		bne	.L75
1379:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
1380:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     itmask &= USARTx->CR2;
 1847              		.loc 1 1380 0
 1848 0060 7B68     		ldr	r3, [r7, #4]
 1849 0062 1B8A     		ldrh	r3, [r3, #16]	@ movhi
 1850 0064 9BB2     		uxth	r3, r3
 1851 0066 7A69     		ldr	r2, [r7, #20]
 1852 0068 02EA0303 		and	r3, r2, r3
 1853 006c 7B61     		str	r3, [r7, #20]
 1854 006e 06E0     		b	.L74
 1855              	.L75:
1381:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
1382:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else /* The IT  is in CR3 register */
1383:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
1384:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     itmask &= USARTx->CR3;
 1856              		.loc 1 1384 0
 1857 0070 7B68     		ldr	r3, [r7, #4]
 1858 0072 9B8A     		ldrh	r3, [r3, #20]	@ movhi
 1859 0074 9BB2     		uxth	r3, r3
 1860 0076 7A69     		ldr	r2, [r7, #20]
 1861 0078 02EA0303 		and	r3, r2, r3
 1862 007c 7B61     		str	r3, [r7, #20]
 1863              	.L74:
1385:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
1386:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
1387:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   bitpos = USART_IT >> 0x08;
 1864              		.loc 1 1387 0
 1865 007e 7B88     		ldrh	r3, [r7, #2]
 1866 0080 4FEA1323 		lsr	r3, r3, #8
 1867 0084 9BB2     		uxth	r3, r3
 1868 0086 FB60     		str	r3, [r7, #12]
1388:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   bitpos = (uint32_t)0x01 << bitpos;
 1869              		.loc 1 1388 0
 1870 0088 FB68     		ldr	r3, [r7, #12]
 1871 008a 4FF00102 		mov	r2, #1
 1872 008e 02FA03F3 		lsl	r3, r2, r3
 1873 0092 FB60     		str	r3, [r7, #12]
1389:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   bitpos &= USARTx->SR;
 1874              		.loc 1 1389 0
 1875 0094 7B68     		ldr	r3, [r7, #4]
 1876 0096 1B88     		ldrh	r3, [r3, #0]	@ movhi
 1877 0098 9BB2     		uxth	r3, r3
 1878 009a FA68     		ldr	r2, [r7, #12]
 1879 009c 02EA0303 		and	r3, r2, r3
 1880 00a0 FB60     		str	r3, [r7, #12]
1390:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 1881              		.loc 1 1390 0
 1882 00a2 7B69     		ldr	r3, [r7, #20]
 1883 00a4 002B     		cmp	r3, #0
 1884 00a6 06D0     		beq	.L76
 1885              		.loc 1 1390 0 is_stmt 0 discriminator 1
 1886 00a8 FB68     		ldr	r3, [r7, #12]
 1887 00aa 002B     		cmp	r3, #0
 1888 00ac 03D0     		beq	.L76
1391:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
1392:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     bitstatus = SET;
 1889              		.loc 1 1392 0 is_stmt 1
 1890 00ae 4FF00103 		mov	r3, #1
 1891 00b2 FB74     		strb	r3, [r7, #19]
 1892 00b4 02E0     		b	.L77
 1893              	.L76:
1393:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
1394:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else
1395:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
1396:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     bitstatus = RESET;
 1894              		.loc 1 1396 0
 1895 00b6 4FF00003 		mov	r3, #0
 1896 00ba FB74     		strb	r3, [r7, #19]
 1897              	.L77:
1397:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
1398:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
1399:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   return bitstatus;  
 1898              		.loc 1 1399 0
 1899 00bc FB7C     		ldrb	r3, [r7, #19]	@ zero_extendqisi2
1400:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 1900              		.loc 1 1400 0
 1901 00be 1846     		mov	r0, r3
 1902 00c0 07F11C07 		add	r7, r7, #28
 1903 00c4 BD46     		mov	sp, r7
 1904 00c6 80BC     		pop	{r7}
 1905 00c8 7047     		bx	lr
 1906              		.cfi_endproc
 1907              	.LFE137:
 1909 00ca 00BF     		.section	.text.USART_ClearITPendingBit,"ax",%progbits
 1910              		.align	2
 1911              		.global	USART_ClearITPendingBit
 1912              		.thumb
 1913              		.thumb_func
 1915              	USART_ClearITPendingBit:
 1916              	.LFB138:
1401:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1402:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
1403:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Clears the USARTx's interrupt pending bits.
1404:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
1405:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
1406:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USART_IT: specifies the interrupt pending bit to clear.
1407:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          This parameter can be one of the following values:
1408:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_CTS:  CTS change interrupt (not available for UART4 and UART5)
1409:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_LBD:  LIN Break detection interrupt
1410:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_TC:   Transmission complete interrupt. 
1411:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_RXNE: Receive Data register not empty interrupt.
1412:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *
1413:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @note   PE (Parity error), FE (Framing error), NE (Noise error), ORE (OverRun 
1414:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          error) and IDLE (Idle line detected) pending bits are cleared by 
1415:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          software sequence: a read operation to USART_SR register 
1416:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          (USART_GetITStatus()) followed by a read operation to USART_DR register 
1417:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          (USART_ReceiveData()).
1418:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @note   RXNE pending bit can be also cleared by a read to the USART_DR register 
1419:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          (USART_ReceiveData()).
1420:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @note   TC pending bit can be also cleared by software sequence: a read 
1421:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          operation to USART_SR register (USART_GetITStatus()) followed by a write 
1422:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          operation to USART_DR register (USART_SendData()).
1423:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @note   TXE pending bit is cleared only by a write to the USART_DR register 
1424:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          (USART_SendData()).
1425:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *  
1426:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
1427:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
1428:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_ClearITPendingBit(USART_TypeDef* USARTx, uint16_t USART_IT)
1429:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 1917              		.loc 1 1429 0
 1918              		.cfi_startproc
 1919              		@ args = 0, pretend = 0, frame = 16
 1920              		@ frame_needed = 1, uses_anonymous_args = 0
 1921              		@ link register save eliminated.
 1922 0000 80B4     		push	{r7}
 1923              	.LCFI84:
 1924              		.cfi_def_cfa_offset 4
 1925 0002 85B0     		sub	sp, sp, #20
 1926              	.LCFI85:
 1927              		.cfi_def_cfa_offset 24
 1928 0004 00AF     		add	r7, sp, #0
 1929              		.cfi_offset 7, -4
 1930              	.LCFI86:
 1931              		.cfi_def_cfa_register 7
 1932 0006 7860     		str	r0, [r7, #4]
 1933 0008 0B46     		mov	r3, r1
 1934 000a 7B80     		strh	r3, [r7, #2]	@ movhi
1430:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   uint16_t bitpos = 0x00, itmask = 0x00;
 1935              		.loc 1 1430 0
 1936 000c 4FF00003 		mov	r3, #0
 1937 0010 FB81     		strh	r3, [r7, #14]	@ movhi
 1938 0012 4FF00003 		mov	r3, #0
 1939 0016 BB81     		strh	r3, [r7, #12]	@ movhi
1431:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
1432:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
1433:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_CLEAR_IT(USART_IT)); 
1434:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1435:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* The CTS interrupt is not available for UART4 and UART5 */
1436:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if (USART_IT == USART_IT_CTS)
1437:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
1438:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     assert_param(IS_USART_1236_PERIPH(USARTx));
1439:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   } 
1440:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     
1441:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   bitpos = USART_IT >> 0x08;
 1940              		.loc 1 1441 0
 1941 0018 7B88     		ldrh	r3, [r7, #2]
 1942 001a 4FEA1323 		lsr	r3, r3, #8
 1943 001e FB81     		strh	r3, [r7, #14]	@ movhi
1442:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   itmask = ((uint16_t)0x01 << (uint16_t)bitpos);
 1944              		.loc 1 1442 0
 1945 0020 FB89     		ldrh	r3, [r7, #14]
 1946 0022 4FF00102 		mov	r2, #1
 1947 0026 02FA03F3 		lsl	r3, r2, r3
 1948 002a BB81     		strh	r3, [r7, #12]	@ movhi
1443:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USARTx->SR = (uint16_t)~itmask;
 1949              		.loc 1 1443 0
 1950 002c BB89     		ldrh	r3, [r7, #12]	@ movhi
 1951 002e 6FEA0303 		mvn	r3, r3
 1952 0032 9AB2     		uxth	r2, r3
 1953 0034 7B68     		ldr	r3, [r7, #4]
 1954 0036 1A80     		strh	r2, [r3, #0]	@ movhi
1444:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 1955              		.loc 1 1444 0
 1956 0038 07F11407 		add	r7, r7, #20
 1957 003c BD46     		mov	sp, r7
 1958 003e 80BC     		pop	{r7}
 1959 0040 7047     		bx	lr
 1960              		.cfi_endproc
 1961              	.LFE138:
 1963 0042 00BF     		.text
 1964              	.Letext0:
DEFINED SYMBOLS
                            *ABS*:00000000 stm32f4xx_usart.c
     /tmp/cc2SLQR3.s:25     .text.USART_DeInit:00000000 $t
     /tmp/cc2SLQR3.s:30     .text.USART_DeInit:00000000 USART_DeInit
     /tmp/cc2SLQR3.s:145    .text.USART_DeInit:000000dc $d
     /tmp/cc2SLQR3.s:155    .text.USART_Init:00000000 $t
     /tmp/cc2SLQR3.s:160    .text.USART_Init:00000000 USART_Init
     /tmp/cc2SLQR3.s:380    .text.USART_Init:0000019c $d
     /tmp/cc2SLQR3.s:387    .text.USART_StructInit:00000000 $t
     /tmp/cc2SLQR3.s:392    .text.USART_StructInit:00000000 USART_StructInit
     /tmp/cc2SLQR3.s:443    .text.USART_ClockInit:00000000 $t
     /tmp/cc2SLQR3.s:448    .text.USART_ClockInit:00000000 USART_ClockInit
     /tmp/cc2SLQR3.s:513    .text.USART_ClockStructInit:00000000 $t
     /tmp/cc2SLQR3.s:518    .text.USART_ClockStructInit:00000000 USART_ClockStructInit
     /tmp/cc2SLQR3.s:561    .text.USART_Cmd:00000000 $t
     /tmp/cc2SLQR3.s:566    .text.USART_Cmd:00000000 USART_Cmd
     /tmp/cc2SLQR3.s:618    .text.USART_SetPrescaler:00000000 $t
     /tmp/cc2SLQR3.s:623    .text.USART_SetPrescaler:00000000 USART_SetPrescaler
     /tmp/cc2SLQR3.s:670    .text.USART_OverSampling8Cmd:00000000 $t
     /tmp/cc2SLQR3.s:675    .text.USART_OverSampling8Cmd:00000000 USART_OverSampling8Cmd
     /tmp/cc2SLQR3.s:729    .text.USART_OneBitMethodCmd:00000000 $t
     /tmp/cc2SLQR3.s:734    .text.USART_OneBitMethodCmd:00000000 USART_OneBitMethodCmd
     /tmp/cc2SLQR3.s:786    .text.USART_SendData:00000000 $t
     /tmp/cc2SLQR3.s:791    .text.USART_SendData:00000000 USART_SendData
     /tmp/cc2SLQR3.s:827    .text.USART_ReceiveData:00000000 $t
     /tmp/cc2SLQR3.s:832    .text.USART_ReceiveData:00000000 USART_ReceiveData
     /tmp/cc2SLQR3.s:867    .text.USART_SetAddress:00000000 $t
     /tmp/cc2SLQR3.s:872    .text.USART_SetAddress:00000000 USART_SetAddress
     /tmp/cc2SLQR3.s:919    .text.USART_ReceiverWakeUpCmd:00000000 $t
     /tmp/cc2SLQR3.s:924    .text.USART_ReceiverWakeUpCmd:00000000 USART_ReceiverWakeUpCmd
     /tmp/cc2SLQR3.s:976    .text.USART_WakeUpConfig:00000000 $t
     /tmp/cc2SLQR3.s:981    .text.USART_WakeUpConfig:00000000 USART_WakeUpConfig
     /tmp/cc2SLQR3.s:1027   .text.USART_LINBreakDetectLengthConfig:00000000 $t
     /tmp/cc2SLQR3.s:1032   .text.USART_LINBreakDetectLengthConfig:00000000 USART_LINBreakDetectLengthConfig
     /tmp/cc2SLQR3.s:1078   .text.USART_LINCmd:00000000 $t
     /tmp/cc2SLQR3.s:1083   .text.USART_LINCmd:00000000 USART_LINCmd
     /tmp/cc2SLQR3.s:1135   .text.USART_SendBreak:00000000 $t
     /tmp/cc2SLQR3.s:1140   .text.USART_SendBreak:00000000 USART_SendBreak
     /tmp/cc2SLQR3.s:1175   .text.USART_HalfDuplexCmd:00000000 $t
     /tmp/cc2SLQR3.s:1180   .text.USART_HalfDuplexCmd:00000000 USART_HalfDuplexCmd
     /tmp/cc2SLQR3.s:1232   .text.USART_SetGuardTime:00000000 $t
     /tmp/cc2SLQR3.s:1237   .text.USART_SetGuardTime:00000000 USART_SetGuardTime
     /tmp/cc2SLQR3.s:1286   .text.USART_SmartCardCmd:00000000 $t
     /tmp/cc2SLQR3.s:1291   .text.USART_SmartCardCmd:00000000 USART_SmartCardCmd
     /tmp/cc2SLQR3.s:1343   .text.USART_SmartCardNACKCmd:00000000 $t
     /tmp/cc2SLQR3.s:1348   .text.USART_SmartCardNACKCmd:00000000 USART_SmartCardNACKCmd
     /tmp/cc2SLQR3.s:1400   .text.USART_IrDAConfig:00000000 $t
     /tmp/cc2SLQR3.s:1405   .text.USART_IrDAConfig:00000000 USART_IrDAConfig
     /tmp/cc2SLQR3.s:1451   .text.USART_IrDACmd:00000000 $t
     /tmp/cc2SLQR3.s:1456   .text.USART_IrDACmd:00000000 USART_IrDACmd
     /tmp/cc2SLQR3.s:1508   .text.USART_DMACmd:00000000 $t
     /tmp/cc2SLQR3.s:1513   .text.USART_DMACmd:00000000 USART_DMACmd
     /tmp/cc2SLQR3.s:1571   .text.USART_ITConfig:00000000 $t
     /tmp/cc2SLQR3.s:1576   .text.USART_ITConfig:00000000 USART_ITConfig
     /tmp/cc2SLQR3.s:1682   .text.USART_GetFlagStatus:00000000 $t
     /tmp/cc2SLQR3.s:1687   .text.USART_GetFlagStatus:00000000 USART_GetFlagStatus
     /tmp/cc2SLQR3.s:1740   .text.USART_ClearFlag:00000000 $t
     /tmp/cc2SLQR3.s:1745   .text.USART_ClearFlag:00000000 USART_ClearFlag
     /tmp/cc2SLQR3.s:1780   .text.USART_GetITStatus:00000000 $t
     /tmp/cc2SLQR3.s:1785   .text.USART_GetITStatus:00000000 USART_GetITStatus
     /tmp/cc2SLQR3.s:1910   .text.USART_ClearITPendingBit:00000000 $t
     /tmp/cc2SLQR3.s:1915   .text.USART_ClearITPendingBit:00000000 USART_ClearITPendingBit
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
RCC_APB2PeriphResetCmd
RCC_APB1PeriphResetCmd
RCC_GetClocksFreq
