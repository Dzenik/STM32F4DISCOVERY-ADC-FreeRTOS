   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 3
   4              		.fpu fpv4-sp-d16
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 6
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"stm32f4xx_rcc.c"
  22              	.Ltext0:
  23              		.cfi_sections	.debug_frame
  24              		.section	.data.APBAHBPrescTable,"aw",%progbits
  25              		.align	2
  28              	APBAHBPrescTable:
  29 0000 00       		.byte	0
  30 0001 00       		.byte	0
  31 0002 00       		.byte	0
  32 0003 00       		.byte	0
  33 0004 01       		.byte	1
  34 0005 02       		.byte	2
  35 0006 03       		.byte	3
  36 0007 04       		.byte	4
  37 0008 01       		.byte	1
  38 0009 02       		.byte	2
  39 000a 03       		.byte	3
  40 000b 04       		.byte	4
  41 000c 06       		.byte	6
  42 000d 07       		.byte	7
  43 000e 08       		.byte	8
  44 000f 09       		.byte	9
  45              		.section	.text.RCC_DeInit,"ax",%progbits
  46              		.align	2
  47              		.global	RCC_DeInit
  48              		.thumb
  49              		.thumb_func
  51              	RCC_DeInit:
  52              	.LFB110:
  53              		.file 1 "libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c"
   1:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
   2:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   ******************************************************************************
   3:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @file    stm32f4xx_rcc.c
   4:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @author  MCD Application Team
   5:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @version V1.0.0RC1
   6:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @date    25-August-2011
   7:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief   This file provides firmware functions to manage the following 
   8:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          functionalities of the Reset and clock control (RCC) peripheral:           
   9:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *           - Internal/external clocks, PLL, CSS and MCO configuration
  10:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *           - System, AHB and APB busses clocks configuration
  11:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *           - Peripheral clocks configuration
  12:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *           - Interrupts and flags management
  13:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *
  14:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *  @verbatim
  15:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *               
  16:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          ===================================================================
  17:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *                               RCC specific features
  18:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          ===================================================================
  19:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *    
  20:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          After reset the device is running from Internal High Speed oscillator 
  21:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          (HSI 16MHz) with Flash 0 wait state, Flash prefetch buffer, D-Cache 
  22:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          and I-Cache are disabled, and all peripherals are off except internal
  23:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          SRAM, Flash and JTAG.
  24:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *           - There is no prescaler on High speed (AHB) and Low speed (APB) busses;
  25:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *             all peripherals mapped on these busses are running at HSI speed.
  26:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *       	  - The clock for all peripherals is switched off, except the SRAM and FLASH.
  27:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *           - All GPIOs are in input floating state, except the JTAG pins which
  28:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *             are assigned to be used for debug purpose.
  29:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *        
  30:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          Once the device started from reset, the user application has to:        
  31:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *           - Configure the clock source to be used to drive the System clock
  32:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *             (if the application needs higher frequency/performance)
  33:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *           - Configure the System clock frequency and Flash settings  
  34:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *           - Configure the AHB and APB busses prescalers
  35:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *           - Enable the clock for the peripheral(s) to be used
  36:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *           - Configure the clock source(s) for peripherals which clocks are not
  37:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *             derived from the System clock (I2S, RTC, ADC, USB OTG FS/SDIO/RNG)      
  38:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *                        
  39:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *  @endverbatim
  40:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *    
  41:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   ******************************************************************************
  42:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @attention
  43:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *
  44:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
  45:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
  46:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
  47:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
  48:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
  49:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
  50:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *
  51:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * <h2><center>&copy; COPYRIGHT 2011 STMicroelectronics</center></h2>
  52:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   ******************************************************************************
  53:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
  54:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
  55:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /* Includes ------------------------------------------------------------------*/
  56:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #include "stm32f4xx_rcc.h"
  57:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
  58:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /** @addtogroup STM32F4xx_StdPeriph_Driver
  59:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @{
  60:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
  61:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
  62:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /** @defgroup RCC 
  63:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief RCC driver modules
  64:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @{
  65:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */ 
  66:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
  67:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /* Private typedef -----------------------------------------------------------*/
  68:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /* Private define ------------------------------------------------------------*/
  69:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /* ------------ RCC registers bit address in the alias region ----------- */
  70:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define RCC_OFFSET                (RCC_BASE - PERIPH_BASE)
  71:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /* --- CR Register ---*/
  72:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /* Alias word address of HSION bit */
  73:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define CR_OFFSET                 (RCC_OFFSET + 0x00)
  74:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define HSION_BitNumber           0x00
  75:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define CR_HSION_BB               (PERIPH_BB_BASE + (CR_OFFSET * 32) + (HSION_BitNumber * 4))
  76:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /* Alias word address of CSSON bit */
  77:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define CSSON_BitNumber           0x13
  78:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define CR_CSSON_BB               (PERIPH_BB_BASE + (CR_OFFSET * 32) + (CSSON_BitNumber * 4))
  79:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /* Alias word address of PLLON bit */
  80:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define PLLON_BitNumber           0x18
  81:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define CR_PLLON_BB               (PERIPH_BB_BASE + (CR_OFFSET * 32) + (PLLON_BitNumber * 4))
  82:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /* Alias word address of PLLI2SON bit */
  83:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define PLLI2SON_BitNumber        0x1A
  84:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define CR_PLLI2SON_BB            (PERIPH_BB_BASE + (CR_OFFSET * 32) + (PLLI2SON_BitNumber * 4))
  85:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
  86:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /* --- CFGR Register ---*/
  87:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /* Alias word address of I2SSRC bit */
  88:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define CFGR_OFFSET               (RCC_OFFSET + 0x08)
  89:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define I2SSRC_BitNumber          0x17
  90:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define CFGR_I2SSRC_BB            (PERIPH_BB_BASE + (CFGR_OFFSET * 32) + (I2SSRC_BitNumber * 4))
  91:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
  92:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /* --- BDCR Register ---*/
  93:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /* Alias word address of RTCEN bit */
  94:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define BDCR_OFFSET               (RCC_OFFSET + 0x70)
  95:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define RTCEN_BitNumber           0x0F
  96:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define BDCR_RTCEN_BB             (PERIPH_BB_BASE + (BDCR_OFFSET * 32) + (RTCEN_BitNumber * 4))
  97:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /* Alias word address of BDRST bit */
  98:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define BDRST_BitNumber           0x10
  99:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define BDCR_BDRST_BB             (PERIPH_BB_BASE + (BDCR_OFFSET * 32) + (BDRST_BitNumber * 4))
 100:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /* --- CSR Register ---*/
 101:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /* Alias word address of LSION bit */
 102:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define CSR_OFFSET                (RCC_OFFSET + 0x74)
 103:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define LSION_BitNumber           0x00
 104:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define CSR_LSION_BB              (PERIPH_BB_BASE + (CSR_OFFSET * 32) + (LSION_BitNumber * 4))
 105:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /* ---------------------- RCC registers bit mask ------------------------ */
 106:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /* CFGR register bit mask */
 107:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define CFGR_MCO2_RESET_MASK      ((uint32_t)0x07FFFFFF)
 108:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define CFGR_MCO1_RESET_MASK      ((uint32_t)0xF89FFFFF)
 109:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 110:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /* RCC Flag Mask */
 111:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define FLAG_MASK                 ((uint8_t)0x1F)
 112:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 113:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /* CR register byte 3 (Bits[23:16]) base address */
 114:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define CR_BYTE3_ADDRESS          ((uint32_t)0x40023802)
 115:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 116:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /* CIR register byte 2 (Bits[15:8]) base address */
 117:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define CIR_BYTE2_ADDRESS         ((uint32_t)(RCC_BASE + 0x0C + 0x01))
 118:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 119:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /* CIR register byte 3 (Bits[23:16]) base address */
 120:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define CIR_BYTE3_ADDRESS         ((uint32_t)(RCC_BASE + 0x0C + 0x02))
 121:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 122:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /* BDCR register base address */
 123:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define BDCR_ADDRESS              (PERIPH_BASE + BDCR_OFFSET)
 124:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 125:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /* Private macro -------------------------------------------------------------*/
 126:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /* Private variables ---------------------------------------------------------*/
 127:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** static __I uint8_t APBAHBPrescTable[16] = {0, 0, 0, 0, 1, 2, 3, 4, 1, 2, 3, 4, 6, 7, 8, 9};
 128:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 129:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /* Private function prototypes -----------------------------------------------*/
 130:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /* Private functions ---------------------------------------------------------*/
 131:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 132:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /** @defgroup RCC_Private_Functions
 133:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @{
 134:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */ 
 135:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 136:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /** @defgroup RCC_Group1 Internal and external clocks, PLL, CSS and MCO configuration functions
 137:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  *  @brief   Internal and external clocks, PLL, CSS and MCO configuration functions 
 138:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  *
 139:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** @verbatim   
 140:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  ===============================================================================
 141:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       Internal/external clocks, PLL, CSS and MCO configuration functions
 142:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  ===============================================================================  
 143:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 144:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   This section provide functions allowing to configure the internal/external clocks,
 145:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   PLLs, CSS and MCO pins.
 146:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   
 147:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   1. HSI (high-speed internal), 16 MHz factory-trimmed RC used directly or through
 148:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****      the PLL as System clock source.
 149:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 150:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   2. LSI (low-speed internal), 32 KHz low consumption RC used as IWDG and/or RTC
 151:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****      clock source.
 152:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 153:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   3. HSE (high-speed external), 4 to 26 MHz crystal oscillator used directly or
 154:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****      through the PLL as System clock source. Can be used also as RTC clock source.
 155:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 156:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   4. LSE (low-speed external), 32 KHz oscillator used as RTC clock source.   
 157:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 158:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   5. PLL (clocked by HSI or HSE), featuring two different output clocks:
 159:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       - The first output is used to generate the high speed system clock (up to 120 MHz)
 160:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       - The second output is used to generate the clock for the USB OTG FS (48 MHz),
 161:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****         the random analog generator (<=48 MHz) and the SDIO (<= 48 MHz).
 162:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 163:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   6. PLLI2S (clocked by HSI or HSE), used to generate an accurate clock to achieve 
 164:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****      high-quality audio performance on the I2S interface.
 165:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   
 166:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   7. CSS (Clock security system), once enable and if a HSE clock failure occurs 
 167:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****      (HSE used directly or through PLL as System clock source), the System clock
 168:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****      is automatically switched to HSI and an interrupt is generated if enabled. 
 169:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****      The interrupt is linked to the Cortex-M4 NMI (Non-Maskable Interrupt) 
 170:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****      exception vector.   
 171:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 172:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   8. MCO1 (microcontroller clock output), used to output HSI, LSE, HSE or PLL
 173:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****      clock (through a configurable prescaler) on PA8 pin.
 174:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 175:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   9. MCO2 (microcontroller clock output), used to output HSE, PLL, SYSCLK or PLLI2S
 176:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****      clock (through a configurable prescaler) on PC9 pin.
 177:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 178:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** @endverbatim
 179:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @{
 180:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
 181:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 182:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
 183:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Resets the RCC clock configuration to the default reset state.
 184:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   The default reset state of the clock configuration is given below:
 185:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            - HSI ON and used as system clock source
 186:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            - HSE, PLL and PLLI2S OFF
 187:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            - AHB, APB1 and APB2 prescaler set to 1.
 188:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            - CSS, MCO1 and MCO2 OFF
 189:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            - All interrupts disabled
 190:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   This function doesn't modify the configuration of the
 191:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            - Peripheral clocks
 192:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            - LSI, LSE and RTC clocks 
 193:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  None
 194:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
 195:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
 196:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_DeInit(void)
 197:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
  54              		.loc 1 197 0
  55              		.cfi_startproc
  56              		@ args = 0, pretend = 0, frame = 0
  57              		@ frame_needed = 1, uses_anonymous_args = 0
  58              		@ link register save eliminated.
  59 0000 80B4     		push	{r7}
  60              	.LCFI0:
  61              		.cfi_def_cfa_offset 4
  62 0002 00AF     		add	r7, sp, #0
  63              		.cfi_offset 7, -4
  64              	.LCFI1:
  65              		.cfi_def_cfa_register 7
 198:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Set HSION bit */
 199:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   RCC->CR |= (uint32_t)0x00000001;
  66              		.loc 1 199 0
  67 0004 104B     		ldr	r3, .L2
  68 0006 104A     		ldr	r2, .L2
  69 0008 1268     		ldr	r2, [r2, #0]
  70 000a 42F00102 		orr	r2, r2, #1
  71 000e 1A60     		str	r2, [r3, #0]
 200:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 201:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Reset CFGR register */
 202:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   RCC->CFGR = 0x00000000;
  72              		.loc 1 202 0
  73 0010 0D4B     		ldr	r3, .L2
  74 0012 4FF00002 		mov	r2, #0
  75 0016 9A60     		str	r2, [r3, #8]
 203:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 204:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Reset HSEON, CSSON and PLLON bits */
 205:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   RCC->CR &= (uint32_t)0xFEF6FFFF;
  76              		.loc 1 205 0
  77 0018 0B4A     		ldr	r2, .L2
  78 001a 0B4B     		ldr	r3, .L2
  79 001c 1B68     		ldr	r3, [r3, #0]
  80 001e 23F08473 		bic	r3, r3, #17301504
  81 0022 23F48033 		bic	r3, r3, #65536
  82 0026 1360     		str	r3, [r2, #0]
 206:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 207:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Reset PLLCFGR register */
 208:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   RCC->PLLCFGR = 0x24003010;
  83              		.loc 1 208 0
  84 0028 074B     		ldr	r3, .L2
  85 002a 084A     		ldr	r2, .L2+4
  86 002c 5A60     		str	r2, [r3, #4]
 209:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 210:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Reset HSEBYP bit */
 211:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   RCC->CR &= (uint32_t)0xFFFBFFFF;
  87              		.loc 1 211 0
  88 002e 064B     		ldr	r3, .L2
  89 0030 054A     		ldr	r2, .L2
  90 0032 1268     		ldr	r2, [r2, #0]
  91 0034 22F48022 		bic	r2, r2, #262144
  92 0038 1A60     		str	r2, [r3, #0]
 212:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 213:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Disable all interrupts */
 214:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   RCC->CIR = 0x00000000;
  93              		.loc 1 214 0
  94 003a 034B     		ldr	r3, .L2
  95 003c 4FF00002 		mov	r2, #0
  96 0040 DA60     		str	r2, [r3, #12]
 215:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
  97              		.loc 1 215 0
  98 0042 BD46     		mov	sp, r7
  99 0044 80BC     		pop	{r7}
 100 0046 7047     		bx	lr
 101              	.L3:
 102              		.align	2
 103              	.L2:
 104 0048 00380240 		.word	1073887232
 105 004c 10300024 		.word	603992080
 106              		.cfi_endproc
 107              	.LFE110:
 109              		.section	.text.RCC_HSEConfig,"ax",%progbits
 110              		.align	2
 111              		.global	RCC_HSEConfig
 112              		.thumb
 113              		.thumb_func
 115              	RCC_HSEConfig:
 116              	.LFB111:
 216:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 217:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
 218:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Configures the External High Speed oscillator (HSE).
 219:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   After enabling the HSE (RCC_HSE_ON or RCC_HSE_Bypass), the application
 220:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         software should wait on HSERDY flag to be set indicating that HSE clock
 221:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         is stable and can be used to clock the PLL and/or system clock.
 222:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   HSE state can not be changed if it is used directly or through the
 223:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         PLL as system clock. In this case, you have to select another source
 224:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         of the system clock then change the HSE state (ex. disable it).
 225:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   The HSE is stopped by hardware when entering STOP and STANDBY modes.  
 226:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   This function reset the CSSON bit, so if the Clock security system(CSS)
 227:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         was previously enabled you have to enable it again after calling this
 228:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         function.    
 229:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_HSE: specifies the new state of the HSE.
 230:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
 231:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_HSE_OFF: turn OFF the HSE oscillator, HSERDY flag goes low after
 232:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *                              6 HSE oscillator clock cycles.
 233:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_HSE_ON: turn ON the HSE oscillator
 234:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_HSE_Bypass: HSE oscillator bypassed with external clock
 235:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
 236:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
 237:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_HSEConfig(uint8_t RCC_HSE)
 238:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 117              		.loc 1 238 0
 118              		.cfi_startproc
 119              		@ args = 0, pretend = 0, frame = 8
 120              		@ frame_needed = 1, uses_anonymous_args = 0
 121              		@ link register save eliminated.
 122 0000 80B4     		push	{r7}
 123              	.LCFI2:
 124              		.cfi_def_cfa_offset 4
 125 0002 83B0     		sub	sp, sp, #12
 126              	.LCFI3:
 127              		.cfi_def_cfa_offset 16
 128 0004 00AF     		add	r7, sp, #0
 129              		.cfi_offset 7, -4
 130              	.LCFI4:
 131              		.cfi_def_cfa_register 7
 132 0006 0346     		mov	r3, r0
 133 0008 FB71     		strb	r3, [r7, #7]
 239:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 240:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_HSE(RCC_HSE));
 241:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 242:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
 243:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE_OFF;
 134              		.loc 1 243 0
 135 000a 064B     		ldr	r3, .L5
 136 000c 4FF00002 		mov	r2, #0
 137 0010 1A70     		strb	r2, [r3, #0]
 244:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 245:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Set the new HSE configuration -------------------------------------------*/
 246:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE;
 138              		.loc 1 246 0
 139 0012 044B     		ldr	r3, .L5
 140 0014 FA79     		ldrb	r2, [r7, #7]
 141 0016 1A70     		strb	r2, [r3, #0]
 247:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 142              		.loc 1 247 0
 143 0018 07F10C07 		add	r7, r7, #12
 144 001c BD46     		mov	sp, r7
 145 001e 80BC     		pop	{r7}
 146 0020 7047     		bx	lr
 147              	.L6:
 148 0022 00BF     		.align	2
 149              	.L5:
 150 0024 02380240 		.word	1073887234
 151              		.cfi_endproc
 152              	.LFE111:
 154              		.section	.text.RCC_WaitForHSEStartUp,"ax",%progbits
 155              		.align	2
 156              		.global	RCC_WaitForHSEStartUp
 157              		.thumb
 158              		.thumb_func
 160              	RCC_WaitForHSEStartUp:
 161              	.LFB112:
 248:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 249:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
 250:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Waits for HSE start-up.
 251:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   This functions waits on HSERDY flag to be set and return SUCCESS if 
 252:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         this flag is set, otherwise returns ERROR if the timeout is reached 
 253:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         and this flag is not set. The timeout value is defined by the constant
 254:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         HSE_STARTUP_TIMEOUT in stm32f4xx.h file. You can tailor it depending
 255:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         on the HSE crystal used in your application. 
 256:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  None
 257:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval An ErrorStatus enumeration value:
 258:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          - SUCCESS: HSE oscillator is stable and ready to use
 259:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          - ERROR: HSE oscillator not yet ready
 260:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
 261:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** ErrorStatus RCC_WaitForHSEStartUp(void)
 262:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 162              		.loc 1 262 0
 163              		.cfi_startproc
 164              		@ args = 0, pretend = 0, frame = 8
 165              		@ frame_needed = 1, uses_anonymous_args = 0
 166 0000 80B5     		push	{r7, lr}
 167              	.LCFI5:
 168              		.cfi_def_cfa_offset 8
 169 0002 82B0     		sub	sp, sp, #8
 170              	.LCFI6:
 171              		.cfi_def_cfa_offset 16
 172 0004 00AF     		add	r7, sp, #0
 173              		.cfi_offset 14, -4
 174              		.cfi_offset 7, -8
 175              	.LCFI7:
 176              		.cfi_def_cfa_register 7
 263:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   __IO uint32_t startupcounter = 0;
 177              		.loc 1 263 0
 178 0006 4FF00003 		mov	r3, #0
 179 000a 3B60     		str	r3, [r7, #0]
 264:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   ErrorStatus status = ERROR;
 180              		.loc 1 264 0
 181 000c 4FF00003 		mov	r3, #0
 182 0010 FB71     		strb	r3, [r7, #7]
 265:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   FlagStatus hsestatus = RESET;
 183              		.loc 1 265 0
 184 0012 4FF00003 		mov	r3, #0
 185 0016 BB71     		strb	r3, [r7, #6]
 186              	.L9:
 266:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Wait till HSE is ready and if Time out is reached exit */
 267:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   do
 268:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
 269:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     hsestatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
 187              		.loc 1 269 0 discriminator 1
 188 0018 4FF03100 		mov	r0, #49
 189 001c FFF7FEFF 		bl	RCC_GetFlagStatus
 190 0020 0346     		mov	r3, r0
 191 0022 BB71     		strb	r3, [r7, #6]
 270:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     startupcounter++;
 192              		.loc 1 270 0 discriminator 1
 193 0024 3B68     		ldr	r3, [r7, #0]
 194 0026 03F10103 		add	r3, r3, #1
 195 002a 3B60     		str	r3, [r7, #0]
 271:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   } while((startupcounter != HSE_STARTUP_TIMEOUT) && (hsestatus == RESET));
 196              		.loc 1 271 0 discriminator 1
 197 002c 3B68     		ldr	r3, [r7, #0]
 198 002e B3F5A06F 		cmp	r3, #1280
 199 0032 02D0     		beq	.L8
 200 0034 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 201 0036 002B     		cmp	r3, #0
 202 0038 EED0     		beq	.L9
 203              	.L8:
 272:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 273:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   if (RCC_GetFlagStatus(RCC_FLAG_HSERDY) != RESET)
 204              		.loc 1 273 0
 205 003a 4FF03100 		mov	r0, #49
 206 003e FFF7FEFF 		bl	RCC_GetFlagStatus
 207 0042 0346     		mov	r3, r0
 208 0044 002B     		cmp	r3, #0
 209 0046 03D0     		beq	.L10
 274:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
 275:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     status = SUCCESS;
 210              		.loc 1 275 0
 211 0048 4FF00103 		mov	r3, #1
 212 004c FB71     		strb	r3, [r7, #7]
 213 004e 02E0     		b	.L11
 214              	.L10:
 276:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
 277:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   else
 278:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
 279:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     status = ERROR;
 215              		.loc 1 279 0
 216 0050 4FF00003 		mov	r3, #0
 217 0054 FB71     		strb	r3, [r7, #7]
 218              	.L11:
 280:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
 281:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   return (status);
 219              		.loc 1 281 0
 220 0056 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 282:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 221              		.loc 1 282 0
 222 0058 1846     		mov	r0, r3
 223 005a 07F10807 		add	r7, r7, #8
 224 005e BD46     		mov	sp, r7
 225 0060 80BD     		pop	{r7, pc}
 226              		.cfi_endproc
 227              	.LFE112:
 229 0062 00BF     		.section	.text.RCC_AdjustHSICalibrationValue,"ax",%progbits
 230              		.align	2
 231              		.global	RCC_AdjustHSICalibrationValue
 232              		.thumb
 233              		.thumb_func
 235              	RCC_AdjustHSICalibrationValue:
 236              	.LFB113:
 283:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 284:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
 285:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Adjusts the Internal High Speed oscillator (HSI) calibration value.
 286:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   The calibration is used to compensate for the variations in voltage
 287:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         and temperature that influence the frequency of the internal HSI RC.
 288:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  HSICalibrationValue: specifies the calibration trimming value.
 289:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         This parameter must be a number between 0 and 0x1F.
 290:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
 291:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
 292:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_AdjustHSICalibrationValue(uint8_t HSICalibrationValue)
 293:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 237              		.loc 1 293 0
 238              		.cfi_startproc
 239              		@ args = 0, pretend = 0, frame = 16
 240              		@ frame_needed = 1, uses_anonymous_args = 0
 241              		@ link register save eliminated.
 242 0000 80B4     		push	{r7}
 243              	.LCFI8:
 244              		.cfi_def_cfa_offset 4
 245 0002 85B0     		sub	sp, sp, #20
 246              	.LCFI9:
 247              		.cfi_def_cfa_offset 24
 248 0004 00AF     		add	r7, sp, #0
 249              		.cfi_offset 7, -4
 250              	.LCFI10:
 251              		.cfi_def_cfa_register 7
 252 0006 0346     		mov	r3, r0
 253 0008 FB71     		strb	r3, [r7, #7]
 294:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
 254              		.loc 1 294 0
 255 000a 4FF00003 		mov	r3, #0
 256 000e FB60     		str	r3, [r7, #12]
 295:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 296:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_CALIBRATION_VALUE(HSICalibrationValue));
 297:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 298:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmpreg = RCC->CR;
 257              		.loc 1 298 0
 258 0010 0A4B     		ldr	r3, .L13
 259 0012 1B68     		ldr	r3, [r3, #0]
 260 0014 FB60     		str	r3, [r7, #12]
 299:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 300:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Clear HSITRIM[4:0] bits */
 301:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmpreg &= ~RCC_CR_HSITRIM;
 261              		.loc 1 301 0
 262 0016 FB68     		ldr	r3, [r7, #12]
 263 0018 23F0F803 		bic	r3, r3, #248
 264 001c FB60     		str	r3, [r7, #12]
 302:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 303:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Set the HSITRIM[4:0] bits according to HSICalibrationValue value */
 304:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmpreg |= (uint32_t)HSICalibrationValue << 3;
 265              		.loc 1 304 0
 266 001e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 267 0020 4FEAC303 		lsl	r3, r3, #3
 268 0024 FA68     		ldr	r2, [r7, #12]
 269 0026 42EA0303 		orr	r3, r2, r3
 270 002a FB60     		str	r3, [r7, #12]
 305:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 306:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Store the new value */
 307:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   RCC->CR = tmpreg;
 271              		.loc 1 307 0
 272 002c 034B     		ldr	r3, .L13
 273 002e FA68     		ldr	r2, [r7, #12]
 274 0030 1A60     		str	r2, [r3, #0]
 308:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 275              		.loc 1 308 0
 276 0032 07F11407 		add	r7, r7, #20
 277 0036 BD46     		mov	sp, r7
 278 0038 80BC     		pop	{r7}
 279 003a 7047     		bx	lr
 280              	.L14:
 281              		.align	2
 282              	.L13:
 283 003c 00380240 		.word	1073887232
 284              		.cfi_endproc
 285              	.LFE113:
 287              		.section	.text.RCC_HSICmd,"ax",%progbits
 288              		.align	2
 289              		.global	RCC_HSICmd
 290              		.thumb
 291              		.thumb_func
 293              	RCC_HSICmd:
 294              	.LFB114:
 309:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 310:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
 311:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the Internal High Speed oscillator (HSI).
 312:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   The HSI is stopped by hardware when entering STOP and STANDBY modes.
 313:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         It is used (enabled by hardware) as system clock source after startup
 314:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         from Reset, wakeup from STOP and STANDBY mode, or in case of failure
 315:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         of the HSE used directly or indirectly as system clock (if the Clock
 316:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         Security System CSS is enabled).             
 317:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   HSI can not be stopped if it is used as system clock source. In this case,
 318:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         you have to select another source of the system clock then stop the HSI.  
 319:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   After enabling the HSI, the application software should wait on HSIRDY
 320:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         flag to be set indicating that HSI clock is stable and can be used as
 321:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         system clock source.  
 322:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the HSI.
 323:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
 324:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   When the HSI is stopped, HSIRDY flag goes low after 6 HSI oscillator
 325:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         clock cycles.  
 326:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
 327:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
 328:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_HSICmd(FunctionalState NewState)
 329:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 295              		.loc 1 329 0
 296              		.cfi_startproc
 297              		@ args = 0, pretend = 0, frame = 8
 298              		@ frame_needed = 1, uses_anonymous_args = 0
 299              		@ link register save eliminated.
 300 0000 80B4     		push	{r7}
 301              	.LCFI11:
 302              		.cfi_def_cfa_offset 4
 303 0002 83B0     		sub	sp, sp, #12
 304              	.LCFI12:
 305              		.cfi_def_cfa_offset 16
 306 0004 00AF     		add	r7, sp, #0
 307              		.cfi_offset 7, -4
 308              	.LCFI13:
 309              		.cfi_def_cfa_register 7
 310 0006 0346     		mov	r3, r0
 311 0008 FB71     		strb	r3, [r7, #7]
 330:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 331:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 332:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 333:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *(__IO uint32_t *) CR_HSION_BB = (uint32_t)NewState;
 312              		.loc 1 333 0
 313 000a 044B     		ldr	r3, .L16
 314 000c FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 315 000e 1A60     		str	r2, [r3, #0]
 334:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 316              		.loc 1 334 0
 317 0010 07F10C07 		add	r7, r7, #12
 318 0014 BD46     		mov	sp, r7
 319 0016 80BC     		pop	{r7}
 320 0018 7047     		bx	lr
 321              	.L17:
 322 001a 00BF     		.align	2
 323              	.L16:
 324 001c 00004742 		.word	1111949312
 325              		.cfi_endproc
 326              	.LFE114:
 328              		.section	.text.RCC_LSEConfig,"ax",%progbits
 329              		.align	2
 330              		.global	RCC_LSEConfig
 331              		.thumb
 332              		.thumb_func
 334              	RCC_LSEConfig:
 335              	.LFB115:
 335:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 336:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
 337:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Configures the External Low Speed oscillator (LSE).
 338:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   As the LSE is in the Backup domain and write access is denied to
 339:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         this domain after reset, you have to enable write access using 
 340:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         PWR_BackupAccessCmd(ENABLE) function before to configure the LSE
 341:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         (to be done once after reset).  
 342:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   After enabling the LSE (RCC_LSE_ON or RCC_LSE_Bypass), the application
 343:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         software should wait on LSERDY flag to be set indicating that LSE clock
 344:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         is stable and can be used to clock the RTC.
 345:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_LSE: specifies the new state of the LSE.
 346:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
 347:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_LSE_OFF: turn OFF the LSE oscillator, LSERDY flag goes low after
 348:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *                              6 LSE oscillator clock cycles.
 349:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_LSE_ON: turn ON the LSE oscillator
 350:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_LSE_Bypass: LSE oscillator bypassed with external clock
 351:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
 352:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
 353:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_LSEConfig(uint8_t RCC_LSE)
 354:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 336              		.loc 1 354 0
 337              		.cfi_startproc
 338              		@ args = 0, pretend = 0, frame = 8
 339              		@ frame_needed = 1, uses_anonymous_args = 0
 340              		@ link register save eliminated.
 341 0000 80B4     		push	{r7}
 342              	.LCFI14:
 343              		.cfi_def_cfa_offset 4
 344 0002 83B0     		sub	sp, sp, #12
 345              	.LCFI15:
 346              		.cfi_def_cfa_offset 16
 347 0004 00AF     		add	r7, sp, #0
 348              		.cfi_offset 7, -4
 349              	.LCFI16:
 350              		.cfi_def_cfa_register 7
 351 0006 0346     		mov	r3, r0
 352 0008 FB71     		strb	r3, [r7, #7]
 355:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 356:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_LSE(RCC_LSE));
 357:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 358:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
 359:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Reset LSEON bit */
 360:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 353              		.loc 1 360 0
 354 000a 0E4B     		ldr	r3, .L23
 355 000c 4FF00002 		mov	r2, #0
 356 0010 1A70     		strb	r2, [r3, #0]
 361:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 362:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Reset LSEBYP bit */
 363:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 357              		.loc 1 363 0
 358 0012 0C4B     		ldr	r3, .L23
 359 0014 4FF00002 		mov	r2, #0
 360 0018 1A70     		strb	r2, [r3, #0]
 364:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 365:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
 366:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   switch (RCC_LSE)
 361              		.loc 1 366 0
 362 001a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 363 001c 012B     		cmp	r3, #1
 364 001e 02D0     		beq	.L20
 365 0020 042B     		cmp	r3, #4
 366 0022 05D0     		beq	.L21
 367:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
 368:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     case RCC_LSE_ON:
 369:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       /* Set LSEON bit */
 370:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_ON;
 371:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       break;
 372:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     case RCC_LSE_Bypass:
 373:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       /* Set LSEBYP and LSEON bits */
 374:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
 375:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       break;
 376:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     default:
 377:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       break;
 367              		.loc 1 377 0
 368 0024 09E0     		b	.L18
 369              	.L20:
 370:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_ON;
 370              		.loc 1 370 0
 371 0026 074B     		ldr	r3, .L23
 372 0028 4FF00102 		mov	r2, #1
 373 002c 1A70     		strb	r2, [r3, #0]
 371:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       break;
 374              		.loc 1 371 0
 375 002e 04E0     		b	.L18
 376              	.L21:
 374:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
 377              		.loc 1 374 0
 378 0030 044B     		ldr	r3, .L23
 379 0032 4FF00502 		mov	r2, #5
 380 0036 1A70     		strb	r2, [r3, #0]
 375:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       break;
 381              		.loc 1 375 0
 382 0038 00BF     		nop
 383              	.L18:
 378:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
 379:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 384              		.loc 1 379 0
 385 003a 07F10C07 		add	r7, r7, #12
 386 003e BD46     		mov	sp, r7
 387 0040 80BC     		pop	{r7}
 388 0042 7047     		bx	lr
 389              	.L24:
 390              		.align	2
 391              	.L23:
 392 0044 70380240 		.word	1073887344
 393              		.cfi_endproc
 394              	.LFE115:
 396              		.section	.text.RCC_LSICmd,"ax",%progbits
 397              		.align	2
 398              		.global	RCC_LSICmd
 399              		.thumb
 400              		.thumb_func
 402              	RCC_LSICmd:
 403              	.LFB116:
 380:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 381:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
 382:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the Internal Low Speed oscillator (LSI).
 383:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   After enabling the LSI, the application software should wait on 
 384:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         LSIRDY flag to be set indicating that LSI clock is stable and can
 385:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         be used to clock the IWDG and/or the RTC.
 386:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   LSI can not be disabled if the IWDG is running.  
 387:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the LSI.
 388:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
 389:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   When the LSI is stopped, LSIRDY flag goes low after 6 LSI oscillator
 390:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         clock cycles. 
 391:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
 392:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
 393:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_LSICmd(FunctionalState NewState)
 394:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 404              		.loc 1 394 0
 405              		.cfi_startproc
 406              		@ args = 0, pretend = 0, frame = 8
 407              		@ frame_needed = 1, uses_anonymous_args = 0
 408              		@ link register save eliminated.
 409 0000 80B4     		push	{r7}
 410              	.LCFI17:
 411              		.cfi_def_cfa_offset 4
 412 0002 83B0     		sub	sp, sp, #12
 413              	.LCFI18:
 414              		.cfi_def_cfa_offset 16
 415 0004 00AF     		add	r7, sp, #0
 416              		.cfi_offset 7, -4
 417              	.LCFI19:
 418              		.cfi_def_cfa_register 7
 419 0006 0346     		mov	r3, r0
 420 0008 FB71     		strb	r3, [r7, #7]
 395:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 396:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 397:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 398:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *(__IO uint32_t *) CSR_LSION_BB = (uint32_t)NewState;
 421              		.loc 1 398 0
 422 000a 044B     		ldr	r3, .L26
 423 000c FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 424 000e 1A60     		str	r2, [r3, #0]
 399:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 425              		.loc 1 399 0
 426 0010 07F10C07 		add	r7, r7, #12
 427 0014 BD46     		mov	sp, r7
 428 0016 80BC     		pop	{r7}
 429 0018 7047     		bx	lr
 430              	.L27:
 431 001a 00BF     		.align	2
 432              	.L26:
 433 001c 800E4742 		.word	1111953024
 434              		.cfi_endproc
 435              	.LFE116:
 437              		.section	.text.RCC_PLLConfig,"ax",%progbits
 438              		.align	2
 439              		.global	RCC_PLLConfig
 440              		.thumb
 441              		.thumb_func
 443              	RCC_PLLConfig:
 444              	.LFB117:
 400:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 401:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
 402:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Configures the main PLL clock source, multiplication and division factors.
 403:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   This function must be used only when the main PLL is disabled.
 404:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *  
 405:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_PLLSource: specifies the PLL entry clock source.
 406:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
 407:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_PLLSource_HSI: HSI oscillator clock selected as PLL clock entry
 408:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_PLLSource_HSE: HSE oscillator clock selected as PLL clock entry
 409:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   This clock source (RCC_PLLSource) is common for the main PLL and PLLI2S.  
 410:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *  
 411:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  PLLM: specifies the division factor for PLL VCO input clock
 412:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter must be a number between 0 and 63.
 413:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   You have to set the PLLM parameter correctly to ensure that the VCO input
 414:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         frequency ranges from 1 to 2 MHz. It is recommended to select a frequency
 415:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         of 2 MHz to limit PLL jitter.
 416:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *  
 417:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  PLLN: specifies the multiplication factor for PLL VCO output clock
 418:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter must be a number between 192 and 432.
 419:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   You have to set the PLLN parameter correctly to ensure that the VCO
 420:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         output frequency is between 192 and 432 MHz.
 421:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *   
 422:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  PLLP: specifies the division factor for main system clock (SYSCLK)
 423:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter must be a number in the range {2, 4, 6, or 8}.
 424:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   You have to set the PLLP parameter correctly to not exceed 120 MHz on
 425:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         the System clock frequency.
 426:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *  
 427:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  PLLQ: specifies the division factor for OTG FS, SDIO and RNG clocks
 428:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter must be a number between 4 and 15.
 429:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   If the USB OTG FS is used in your application, you have to set the
 430:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         PLLQ parameter correctly to have 48 MHz clock for the USB. However,
 431:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         the SDIO and RNG need a frequency lower than or equal to 48 MHz to work
 432:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         correctly.
 433:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *   
 434:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
 435:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
 436:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_PLLConfig(uint32_t RCC_PLLSource, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP, uint32_t PL
 437:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 445              		.loc 1 437 0
 446              		.cfi_startproc
 447              		@ args = 4, pretend = 0, frame = 16
 448              		@ frame_needed = 1, uses_anonymous_args = 0
 449              		@ link register save eliminated.
 450 0000 80B4     		push	{r7}
 451              	.LCFI20:
 452              		.cfi_def_cfa_offset 4
 453 0002 85B0     		sub	sp, sp, #20
 454              	.LCFI21:
 455              		.cfi_def_cfa_offset 24
 456 0004 00AF     		add	r7, sp, #0
 457              		.cfi_offset 7, -4
 458              	.LCFI22:
 459              		.cfi_def_cfa_register 7
 460 0006 F860     		str	r0, [r7, #12]
 461 0008 B960     		str	r1, [r7, #8]
 462 000a 7A60     		str	r2, [r7, #4]
 463 000c 3B60     		str	r3, [r7, #0]
 438:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 439:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLL_SOURCE(RCC_PLLSource));
 440:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLM_VALUE(PLLM));
 441:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLN_VALUE(PLLN));
 442:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLP_VALUE(PLLP));
 443:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLQ_VALUE(PLLQ));
 444:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 445:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   RCC->PLLCFGR = PLLM | (PLLN << 6) | (((PLLP >> 1) -1) << 16) | (RCC_PLLSource) |
 464              		.loc 1 445 0
 465 000e 0D4B     		ldr	r3, .L29
 466 0010 7A68     		ldr	r2, [r7, #4]
 467 0012 4FEA8211 		lsl	r1, r2, #6
 468 0016 BA68     		ldr	r2, [r7, #8]
 469 0018 1143     		orrs	r1, r1, r2
 470 001a 3A68     		ldr	r2, [r7, #0]
 471 001c 4FEA5202 		lsr	r2, r2, #1
 472 0020 02F1FF32 		add	r2, r2, #-1
 473 0024 4FEA0242 		lsl	r2, r2, #16
 474 0028 1143     		orrs	r1, r1, r2
 475 002a FA68     		ldr	r2, [r7, #12]
 476 002c 1143     		orrs	r1, r1, r2
 446:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****                  (PLLQ << 24);
 477              		.loc 1 446 0
 478 002e BA69     		ldr	r2, [r7, #24]
 479 0030 4FEA0262 		lsl	r2, r2, #24
 445:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   RCC->PLLCFGR = PLLM | (PLLN << 6) | (((PLLP >> 1) -1) << 16) | (RCC_PLLSource) |
 480              		.loc 1 445 0
 481 0034 41EA0202 		orr	r2, r1, r2
 482 0038 5A60     		str	r2, [r3, #4]
 447:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 483              		.loc 1 447 0
 484 003a 07F11407 		add	r7, r7, #20
 485 003e BD46     		mov	sp, r7
 486 0040 80BC     		pop	{r7}
 487 0042 7047     		bx	lr
 488              	.L30:
 489              		.align	2
 490              	.L29:
 491 0044 00380240 		.word	1073887232
 492              		.cfi_endproc
 493              	.LFE117:
 495              		.section	.text.RCC_PLLCmd,"ax",%progbits
 496              		.align	2
 497              		.global	RCC_PLLCmd
 498              		.thumb
 499              		.thumb_func
 501              	RCC_PLLCmd:
 502              	.LFB118:
 448:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 449:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
 450:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the main PLL.
 451:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   After enabling the main PLL, the application software should wait on 
 452:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         PLLRDY flag to be set indicating that PLL clock is stable and can
 453:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         be used as system clock source.
 454:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   The main PLL can not be disabled if it is used as system clock source
 455:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   The main PLL is disabled by hardware when entering STOP and STANDBY modes.
 456:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the main PLL. This parameter can be: ENABLE or DISABLE.
 457:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
 458:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
 459:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_PLLCmd(FunctionalState NewState)
 460:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 503              		.loc 1 460 0
 504              		.cfi_startproc
 505              		@ args = 0, pretend = 0, frame = 8
 506              		@ frame_needed = 1, uses_anonymous_args = 0
 507              		@ link register save eliminated.
 508 0000 80B4     		push	{r7}
 509              	.LCFI23:
 510              		.cfi_def_cfa_offset 4
 511 0002 83B0     		sub	sp, sp, #12
 512              	.LCFI24:
 513              		.cfi_def_cfa_offset 16
 514 0004 00AF     		add	r7, sp, #0
 515              		.cfi_offset 7, -4
 516              	.LCFI25:
 517              		.cfi_def_cfa_register 7
 518 0006 0346     		mov	r3, r0
 519 0008 FB71     		strb	r3, [r7, #7]
 461:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 462:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 463:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *(__IO uint32_t *) CR_PLLON_BB = (uint32_t)NewState;
 520              		.loc 1 463 0
 521 000a 044B     		ldr	r3, .L32
 522 000c FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 523 000e 1A60     		str	r2, [r3, #0]
 464:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 524              		.loc 1 464 0
 525 0010 07F10C07 		add	r7, r7, #12
 526 0014 BD46     		mov	sp, r7
 527 0016 80BC     		pop	{r7}
 528 0018 7047     		bx	lr
 529              	.L33:
 530 001a 00BF     		.align	2
 531              	.L32:
 532 001c 60004742 		.word	1111949408
 533              		.cfi_endproc
 534              	.LFE118:
 536              		.section	.text.RCC_PLLI2SConfig,"ax",%progbits
 537              		.align	2
 538              		.global	RCC_PLLI2SConfig
 539              		.thumb
 540              		.thumb_func
 542              	RCC_PLLI2SConfig:
 543              	.LFB119:
 465:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 466:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
 467:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Configures the PLLI2S clock multiplication and division factors.
 468:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *   
 469:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   PLLI2S is available only in Silicon RevisionB and RevisionY.    
 470:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   This function must be used only when the PLLI2S is disabled.
 471:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   PLLI2S clock source is common with the main PLL (configured in 
 472:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         RCC_PLLConfig function )  
 473:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *             
 474:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  PLLI2SN: specifies the multiplication factor for PLLI2S VCO output clock
 475:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter must be a number between 192 and 432.
 476:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   You have to set the PLLI2SN parameter correctly to ensure that the VCO 
 477:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         output frequency is between 192 and 432 MHz.
 478:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *    
 479:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  PLLI2SR: specifies the division factor for I2S clock
 480:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter must be a number between 2 and 7.
 481:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   You have to set the PLLI2SR parameter correctly to not exceed 192 MHz
 482:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         on the I2S clock frequency.
 483:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *   
 484:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
 485:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
 486:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_PLLI2SConfig(uint32_t PLLI2SN, uint32_t PLLI2SR)
 487:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 544              		.loc 1 487 0
 545              		.cfi_startproc
 546              		@ args = 0, pretend = 0, frame = 8
 547              		@ frame_needed = 1, uses_anonymous_args = 0
 548              		@ link register save eliminated.
 549 0000 80B4     		push	{r7}
 550              	.LCFI26:
 551              		.cfi_def_cfa_offset 4
 552 0002 83B0     		sub	sp, sp, #12
 553              	.LCFI27:
 554              		.cfi_def_cfa_offset 16
 555 0004 00AF     		add	r7, sp, #0
 556              		.cfi_offset 7, -4
 557              	.LCFI28:
 558              		.cfi_def_cfa_register 7
 559 0006 7860     		str	r0, [r7, #4]
 560 0008 3960     		str	r1, [r7, #0]
 488:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 489:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLI2SN_VALUE(PLLI2SN));
 490:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLI2SR_VALUE(PLLI2SR));
 491:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 492:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   RCC->PLLI2SCFGR = (PLLI2SN << 6) | (PLLI2SR << 28);
 561              		.loc 1 492 0
 562 000a 084B     		ldr	r3, .L35
 563 000c 7A68     		ldr	r2, [r7, #4]
 564 000e 4FEA8211 		lsl	r1, r2, #6
 565 0012 3A68     		ldr	r2, [r7, #0]
 566 0014 4FEA0272 		lsl	r2, r2, #28
 567 0018 41EA0202 		orr	r2, r1, r2
 568 001c C3F88420 		str	r2, [r3, #132]
 493:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 569              		.loc 1 493 0
 570 0020 07F10C07 		add	r7, r7, #12
 571 0024 BD46     		mov	sp, r7
 572 0026 80BC     		pop	{r7}
 573 0028 7047     		bx	lr
 574              	.L36:
 575 002a 00BF     		.align	2
 576              	.L35:
 577 002c 00380240 		.word	1073887232
 578              		.cfi_endproc
 579              	.LFE119:
 581              		.section	.text.RCC_PLLI2SCmd,"ax",%progbits
 582              		.align	2
 583              		.global	RCC_PLLI2SCmd
 584              		.thumb
 585              		.thumb_func
 587              	RCC_PLLI2SCmd:
 588              	.LFB120:
 494:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 495:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
 496:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the PLLI2S.
 497:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   PLLI2S is available only in RevisionB and RevisionY 
 498:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   The PLLI2S is disabled by hardware when entering STOP and STANDBY modes.  
 499:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the PLLI2S. This parameter can be: ENABLE or DISABLE.
 500:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
 501:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
 502:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_PLLI2SCmd(FunctionalState NewState)
 503:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 589              		.loc 1 503 0
 590              		.cfi_startproc
 591              		@ args = 0, pretend = 0, frame = 8
 592              		@ frame_needed = 1, uses_anonymous_args = 0
 593              		@ link register save eliminated.
 594 0000 80B4     		push	{r7}
 595              	.LCFI29:
 596              		.cfi_def_cfa_offset 4
 597 0002 83B0     		sub	sp, sp, #12
 598              	.LCFI30:
 599              		.cfi_def_cfa_offset 16
 600 0004 00AF     		add	r7, sp, #0
 601              		.cfi_offset 7, -4
 602              	.LCFI31:
 603              		.cfi_def_cfa_register 7
 604 0006 0346     		mov	r3, r0
 605 0008 FB71     		strb	r3, [r7, #7]
 504:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 505:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 506:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *(__IO uint32_t *) CR_PLLI2SON_BB = (uint32_t)NewState;
 606              		.loc 1 506 0
 607 000a 044B     		ldr	r3, .L38
 608 000c FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 609 000e 1A60     		str	r2, [r3, #0]
 507:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 610              		.loc 1 507 0
 611 0010 07F10C07 		add	r7, r7, #12
 612 0014 BD46     		mov	sp, r7
 613 0016 80BC     		pop	{r7}
 614 0018 7047     		bx	lr
 615              	.L39:
 616 001a 00BF     		.align	2
 617              	.L38:
 618 001c 68004742 		.word	1111949416
 619              		.cfi_endproc
 620              	.LFE120:
 622              		.section	.text.RCC_ClockSecuritySystemCmd,"ax",%progbits
 623              		.align	2
 624              		.global	RCC_ClockSecuritySystemCmd
 625              		.thumb
 626              		.thumb_func
 628              	RCC_ClockSecuritySystemCmd:
 629              	.LFB121:
 508:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 509:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
 510:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the Clock Security System.
 511:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   If a failure is detected on the HSE oscillator clock, this oscillator
 512:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         is automatically disabled and an interrupt is generated to inform the
 513:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         software about the failure (Clock Security System Interrupt, CSSI),
 514:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         allowing the MCU to perform rescue operations. The CSSI is linked to 
 515:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.  
 516:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the Clock Security System.
 517:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         This parameter can be: ENABLE or DISABLE.
 518:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
 519:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
 520:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_ClockSecuritySystemCmd(FunctionalState NewState)
 521:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 630              		.loc 1 521 0
 631              		.cfi_startproc
 632              		@ args = 0, pretend = 0, frame = 8
 633              		@ frame_needed = 1, uses_anonymous_args = 0
 634              		@ link register save eliminated.
 635 0000 80B4     		push	{r7}
 636              	.LCFI32:
 637              		.cfi_def_cfa_offset 4
 638 0002 83B0     		sub	sp, sp, #12
 639              	.LCFI33:
 640              		.cfi_def_cfa_offset 16
 641 0004 00AF     		add	r7, sp, #0
 642              		.cfi_offset 7, -4
 643              	.LCFI34:
 644              		.cfi_def_cfa_register 7
 645 0006 0346     		mov	r3, r0
 646 0008 FB71     		strb	r3, [r7, #7]
 522:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 523:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 524:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *(__IO uint32_t *) CR_CSSON_BB = (uint32_t)NewState;
 647              		.loc 1 524 0
 648 000a 044B     		ldr	r3, .L41
 649 000c FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 650 000e 1A60     		str	r2, [r3, #0]
 525:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 651              		.loc 1 525 0
 652 0010 07F10C07 		add	r7, r7, #12
 653 0014 BD46     		mov	sp, r7
 654 0016 80BC     		pop	{r7}
 655 0018 7047     		bx	lr
 656              	.L42:
 657 001a 00BF     		.align	2
 658              	.L41:
 659 001c 4C004742 		.word	1111949388
 660              		.cfi_endproc
 661              	.LFE121:
 663              		.section	.text.RCC_MCO1Config,"ax",%progbits
 664              		.align	2
 665              		.global	RCC_MCO1Config
 666              		.thumb
 667              		.thumb_func
 669              	RCC_MCO1Config:
 670              	.LFB122:
 526:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 527:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
 528:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Selects the clock source to output on MCO1 pin(PA8).
 529:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   PA8 should be configured in alternate function mode.
 530:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_MCO1Source: specifies the clock source to output.
 531:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
 532:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO1Source_HSI: HSI clock selected as MCO1 source
 533:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO1Source_LSE: LSE clock selected as MCO1 source
 534:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO1Source_HSE: HSE clock selected as MCO1 source
 535:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO1Source_PLLCLK: main PLL clock selected as MCO1 source
 536:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_MCO1Div: specifies the MCO1 prescaler.
 537:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
 538:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO1Div_1: no division applied to MCO1 clock
 539:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO1Div_2: division by 2 applied to MCO1 clock
 540:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO1Div_3: division by 3 applied to MCO1 clock
 541:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO1Div_4: division by 4 applied to MCO1 clock
 542:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO1Div_5: division by 5 applied to MCO1 clock
 543:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
 544:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
 545:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_MCO1Config(uint32_t RCC_MCO1Source, uint32_t RCC_MCO1Div)
 546:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 671              		.loc 1 546 0
 672              		.cfi_startproc
 673              		@ args = 0, pretend = 0, frame = 16
 674              		@ frame_needed = 1, uses_anonymous_args = 0
 675              		@ link register save eliminated.
 676 0000 80B4     		push	{r7}
 677              	.LCFI35:
 678              		.cfi_def_cfa_offset 4
 679 0002 85B0     		sub	sp, sp, #20
 680              	.LCFI36:
 681              		.cfi_def_cfa_offset 24
 682 0004 00AF     		add	r7, sp, #0
 683              		.cfi_offset 7, -4
 684              	.LCFI37:
 685              		.cfi_def_cfa_register 7
 686 0006 7860     		str	r0, [r7, #4]
 687 0008 3960     		str	r1, [r7, #0]
 547:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
 688              		.loc 1 547 0
 689 000a 4FF00003 		mov	r3, #0
 690 000e FB60     		str	r3, [r7, #12]
 548:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   
 549:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 550:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_MCO1SOURCE(RCC_MCO1Source));
 551:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_MCO1DIV(RCC_MCO1Div));  
 552:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 553:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmpreg = RCC->CFGR;
 691              		.loc 1 553 0
 692 0010 0B4B     		ldr	r3, .L44
 693 0012 9B68     		ldr	r3, [r3, #8]
 694 0014 FB60     		str	r3, [r7, #12]
 554:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 555:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Clear MCO1[1:0] and MCO1PRE[2:0] bits */
 556:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmpreg &= CFGR_MCO1_RESET_MASK;
 695              		.loc 1 556 0
 696 0016 FB68     		ldr	r3, [r7, #12]
 697 0018 23F0EC63 		bic	r3, r3, #123731968
 698 001c FB60     		str	r3, [r7, #12]
 557:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 558:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Select MCO1 clock source and prescaler */
 559:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmpreg |= RCC_MCO1Source | RCC_MCO1Div;
 699              		.loc 1 559 0
 700 001e 7A68     		ldr	r2, [r7, #4]
 701 0020 3B68     		ldr	r3, [r7, #0]
 702 0022 42EA0303 		orr	r3, r2, r3
 703 0026 FA68     		ldr	r2, [r7, #12]
 704 0028 42EA0303 		orr	r3, r2, r3
 705 002c FB60     		str	r3, [r7, #12]
 560:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 561:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Store the new value */
 562:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   RCC->CFGR = tmpreg;  
 706              		.loc 1 562 0
 707 002e 044B     		ldr	r3, .L44
 708 0030 FA68     		ldr	r2, [r7, #12]
 709 0032 9A60     		str	r2, [r3, #8]
 563:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 710              		.loc 1 563 0
 711 0034 07F11407 		add	r7, r7, #20
 712 0038 BD46     		mov	sp, r7
 713 003a 80BC     		pop	{r7}
 714 003c 7047     		bx	lr
 715              	.L45:
 716 003e 00BF     		.align	2
 717              	.L44:
 718 0040 00380240 		.word	1073887232
 719              		.cfi_endproc
 720              	.LFE122:
 722              		.section	.text.RCC_MCO2Config,"ax",%progbits
 723              		.align	2
 724              		.global	RCC_MCO2Config
 725              		.thumb
 726              		.thumb_func
 728              	RCC_MCO2Config:
 729              	.LFB123:
 564:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 565:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
 566:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Selects the clock source to output on MCO2 pin(PC9).
 567:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   PC9 should be configured in alternate function mode.
 568:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_MCO2Source: specifies the clock source to output.
 569:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
 570:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO2Source_SYSCLK: System clock (SYSCLK) selected as MCO2 source
 571:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO2Source_PLLI2SCLK: PLLI2S clock selected as MCO2 source
 572:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO2Source_HSE: HSE clock selected as MCO2 source
 573:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO2Source_PLLCLK: main PLL clock selected as MCO2 source
 574:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_MCO2Div: specifies the MCO2 prescaler.
 575:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
 576:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO2Div_1: no division applied to MCO2 clock
 577:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO2Div_2: division by 2 applied to MCO2 clock
 578:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO2Div_3: division by 3 applied to MCO2 clock
 579:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO2Div_4: division by 4 applied to MCO2 clock
 580:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO2Div_5: division by 5 applied to MCO2 clock
 581:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
 582:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
 583:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_MCO2Config(uint32_t RCC_MCO2Source, uint32_t RCC_MCO2Div)
 584:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 730              		.loc 1 584 0
 731              		.cfi_startproc
 732              		@ args = 0, pretend = 0, frame = 16
 733              		@ frame_needed = 1, uses_anonymous_args = 0
 734              		@ link register save eliminated.
 735 0000 80B4     		push	{r7}
 736              	.LCFI38:
 737              		.cfi_def_cfa_offset 4
 738 0002 85B0     		sub	sp, sp, #20
 739              	.LCFI39:
 740              		.cfi_def_cfa_offset 24
 741 0004 00AF     		add	r7, sp, #0
 742              		.cfi_offset 7, -4
 743              	.LCFI40:
 744              		.cfi_def_cfa_register 7
 745 0006 7860     		str	r0, [r7, #4]
 746 0008 3960     		str	r1, [r7, #0]
 585:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
 747              		.loc 1 585 0
 748 000a 4FF00003 		mov	r3, #0
 749 000e FB60     		str	r3, [r7, #12]
 586:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   
 587:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 588:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_MCO2SOURCE(RCC_MCO2Source));
 589:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_MCO2DIV(RCC_MCO2Div));
 590:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   
 591:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmpreg = RCC->CFGR;
 750              		.loc 1 591 0
 751 0010 0B4B     		ldr	r3, .L47
 752 0012 9B68     		ldr	r3, [r3, #8]
 753 0014 FB60     		str	r3, [r7, #12]
 592:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   
 593:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Clear MCO2 and MCO2PRE[2:0] bits */
 594:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmpreg &= CFGR_MCO2_RESET_MASK;
 754              		.loc 1 594 0
 755 0016 FB68     		ldr	r3, [r7, #12]
 756 0018 23F07843 		bic	r3, r3, #-134217728
 757 001c FB60     		str	r3, [r7, #12]
 595:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 596:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Select MCO2 clock source and prescaler */
 597:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmpreg |= RCC_MCO2Source | RCC_MCO2Div;
 758              		.loc 1 597 0
 759 001e 7A68     		ldr	r2, [r7, #4]
 760 0020 3B68     		ldr	r3, [r7, #0]
 761 0022 42EA0303 		orr	r3, r2, r3
 762 0026 FA68     		ldr	r2, [r7, #12]
 763 0028 42EA0303 		orr	r3, r2, r3
 764 002c FB60     		str	r3, [r7, #12]
 598:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 599:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Store the new value */
 600:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   RCC->CFGR = tmpreg;  
 765              		.loc 1 600 0
 766 002e 044B     		ldr	r3, .L47
 767 0030 FA68     		ldr	r2, [r7, #12]
 768 0032 9A60     		str	r2, [r3, #8]
 601:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 769              		.loc 1 601 0
 770 0034 07F11407 		add	r7, r7, #20
 771 0038 BD46     		mov	sp, r7
 772 003a 80BC     		pop	{r7}
 773 003c 7047     		bx	lr
 774              	.L48:
 775 003e 00BF     		.align	2
 776              	.L47:
 777 0040 00380240 		.word	1073887232
 778              		.cfi_endproc
 779              	.LFE123:
 781              		.section	.text.RCC_SYSCLKConfig,"ax",%progbits
 782              		.align	2
 783              		.global	RCC_SYSCLKConfig
 784              		.thumb
 785              		.thumb_func
 787              	RCC_SYSCLKConfig:
 788              	.LFB124:
 602:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 603:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
 604:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @}
 605:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
 606:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 607:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /** @defgroup RCC_Group2 System AHB and APB busses clocks configuration functions
 608:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  *  @brief   System, AHB and APB busses clocks configuration functions
 609:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  *
 610:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** @verbatim   
 611:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  ===============================================================================
 612:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****              System, AHB and APB busses clocks configuration functions
 613:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  ===============================================================================  
 614:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 615:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   This section provide functions allowing to configure the System, AHB, APB1 and 
 616:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   APB2 busses clocks.
 617:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   
 618:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   1. Several clock sources can be used to drive the System clock (SYSCLK): HSI,
 619:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****      HSE and PLL.
 620:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****      The AHB clock (HCLK) is derived from System clock through configurable prescaler
 621:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****      and used to clock the CPU, memory and peripherals mapped on AHB bus (DMA, GPIO...).
 622:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****      APB1 (PCLK1) and APB2 (PCLK2) clocks are derived from AHB clock through 
 623:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****      configurable prescalers and used to clock the peripherals mapped on these busses.
 624:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****      You can use "RCC_GetClocksFreq()" function to retrieve the frequencies of these clocks.  
 625:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 626:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** @note All the peripheral clocks are derived from the System clock (SYSCLK) except:
 627:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****        - I2S: the I2S clock can be derived either from a specific PLL (PLLI2S) or
 628:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****           from an external clock mapped on the I2S_CKIN pin. 
 629:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****           You have to use RCC_I2SCLKConfig() function to configure this clock. 
 630:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****        - RTC: the RTC clock can be derived either from the LSI, LSE or HSE clock
 631:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****           divided by 2 to 31. You have to use RCC_RTCCLKConfig() and RCC_RTCCLKCmd()
 632:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****           functions to configure this clock. 
 633:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****        - USB OTG FS, SDIO and RTC: USB OTG FS require a frequency equal to 48 MHz
 634:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****           to work correctly, while the SDIO require a frequency equal or lower than
 635:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****           to 48. This clock is derived of the main PLL through PLLQ divider.
 636:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****        - IWDG clock which is always the LSI clock.
 637:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****        
 638:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   2. The maximum frequency of the SYSCLK and HCLK is 120 MHz, PCLK2 60 MHz and PCLK1 30 MHz.
 639:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****      Depending on the device voltage range, the maximum frequency should be 
 640:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****      adapted accordingly:
 641:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  +-------------------------------------------------------------------------------------+     
 642:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  | Latency       |                HCLK clock frequency (MHz)                           |
 643:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  |               |---------------------------------------------------------------------|     
 644:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  |               | voltage range  | voltage range  | voltage range   | voltage range   |
 645:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  |               | 2.7 V - 3.6 V  | 2.4 V - 2.7 V  | 2.1 V - 2.4 V   | 1.8 V - 2.1 V   |
 646:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------|           
 647:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  |0WS(1CPU cycle)|0 < HCLK <= 30  |0 < HCLK <= 24  |0 < HCLK <= 18   |0 < HCLK <= 16   |
 648:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------|   
 649:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  |1WS(2CPU cycle)|30 < HCLK <= 60 |24 < HCLK <= 48 |18 < HCLK <= 36  |16 < HCLK <= 32  | 
 650:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------|   
 651:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  |2WS(3CPU cycle)|60 < HCLK <= 90 |48 < HCLK <= 72 |36 < HCLK <= 54  |32 < HCLK <= 48  |
 652:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------| 
 653:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  |3WS(4CPU cycle)|90 < HCLK <= 120|72 < HCLK <= 96 |54 < HCLK <= 72  |48 < HCLK <= 64  |
 654:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------| 
 655:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  |4WS(5CPU cycle)|      NA        |96 < HCLK <= 120|72 < HCLK <= 90  |64 < HCLK <= 80  |
 656:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------| 
 657:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  |5WS(6CPU cycle)|      NA        |      NA        |90 < HCLK <= 108 |80 < HCLK <= 96  | 
 658:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------| 
 659:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  |6WS(7CPU cycle)|      NA        |      NA        |108 < HCLK <= 120|96 < HCLK <= 112 | 
 660:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------| 
 661:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  |7WS(8CPU cycle)|      NA        |     NA         |     NA          |112 < HCLK <= 120| 
 662:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  +-------------------------------------------------------------------------------------+    
 663:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 664:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 665:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** @endverbatim
 666:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @{
 667:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
 668:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 669:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
 670:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Configures the system clock (SYSCLK).
 671:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   The HSI is used (enabled by hardware) as system clock source after
 672:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         startup from Reset, wake-up from STOP and STANDBY mode, or in case
 673:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         of failure of the HSE used directly or indirectly as system clock
 674:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         (if the Clock Security System CSS is enabled).
 675:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   A switch from one clock source to another occurs only if the target
 676:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         clock source is ready (clock stable after startup delay or PLL locked). 
 677:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         If a clock source which is not yet ready is selected, the switch will
 678:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         occur when the clock source will be ready. 
 679:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         You can use RCC_GetSYSCLKSource() function to know which clock is
 680:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         currently used as system clock source. 
 681:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_SYSCLKSource: specifies the clock source used as system clock.
 682:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
 683:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_SYSCLKSource_HSI:    HSI selected as system clock source
 684:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_SYSCLKSource_HSE:    HSE selected as system clock source
 685:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_SYSCLKSource_PLLCLK: PLL selected as system clock source
 686:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
 687:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
 688:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_SYSCLKConfig(uint32_t RCC_SYSCLKSource)
 689:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 789              		.loc 1 689 0
 790              		.cfi_startproc
 791              		@ args = 0, pretend = 0, frame = 16
 792              		@ frame_needed = 1, uses_anonymous_args = 0
 793              		@ link register save eliminated.
 794 0000 80B4     		push	{r7}
 795              	.LCFI41:
 796              		.cfi_def_cfa_offset 4
 797 0002 85B0     		sub	sp, sp, #20
 798              	.LCFI42:
 799              		.cfi_def_cfa_offset 24
 800 0004 00AF     		add	r7, sp, #0
 801              		.cfi_offset 7, -4
 802              	.LCFI43:
 803              		.cfi_def_cfa_register 7
 804 0006 7860     		str	r0, [r7, #4]
 690:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
 805              		.loc 1 690 0
 806 0008 4FF00003 		mov	r3, #0
 807 000c FB60     		str	r3, [r7, #12]
 691:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 692:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 693:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));
 694:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 695:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmpreg = RCC->CFGR;
 808              		.loc 1 695 0
 809 000e 0A4B     		ldr	r3, .L50
 810 0010 9B68     		ldr	r3, [r3, #8]
 811 0012 FB60     		str	r3, [r7, #12]
 696:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 697:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Clear SW[1:0] bits */
 698:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmpreg &= ~RCC_CFGR_SW;
 812              		.loc 1 698 0
 813 0014 FB68     		ldr	r3, [r7, #12]
 814 0016 23F00303 		bic	r3, r3, #3
 815 001a FB60     		str	r3, [r7, #12]
 699:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 700:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
 701:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmpreg |= RCC_SYSCLKSource;
 816              		.loc 1 701 0
 817 001c FA68     		ldr	r2, [r7, #12]
 818 001e 7B68     		ldr	r3, [r7, #4]
 819 0020 42EA0303 		orr	r3, r2, r3
 820 0024 FB60     		str	r3, [r7, #12]
 702:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 703:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Store the new value */
 704:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   RCC->CFGR = tmpreg;
 821              		.loc 1 704 0
 822 0026 044B     		ldr	r3, .L50
 823 0028 FA68     		ldr	r2, [r7, #12]
 824 002a 9A60     		str	r2, [r3, #8]
 705:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 825              		.loc 1 705 0
 826 002c 07F11407 		add	r7, r7, #20
 827 0030 BD46     		mov	sp, r7
 828 0032 80BC     		pop	{r7}
 829 0034 7047     		bx	lr
 830              	.L51:
 831 0036 00BF     		.align	2
 832              	.L50:
 833 0038 00380240 		.word	1073887232
 834              		.cfi_endproc
 835              	.LFE124:
 837              		.section	.text.RCC_GetSYSCLKSource,"ax",%progbits
 838              		.align	2
 839              		.global	RCC_GetSYSCLKSource
 840              		.thumb
 841              		.thumb_func
 843              	RCC_GetSYSCLKSource:
 844              	.LFB125:
 706:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 707:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
 708:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Returns the clock source used as system clock.
 709:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  None
 710:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval The clock source used as system clock. The returned value can be one
 711:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         of the following:
 712:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *              - 0x00: HSI used as system clock
 713:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *              - 0x04: HSE used as system clock
 714:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *              - 0x08: PLL used as system clock
 715:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
 716:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** uint8_t RCC_GetSYSCLKSource(void)
 717:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 845              		.loc 1 717 0
 846              		.cfi_startproc
 847              		@ args = 0, pretend = 0, frame = 0
 848              		@ frame_needed = 1, uses_anonymous_args = 0
 849              		@ link register save eliminated.
 850 0000 80B4     		push	{r7}
 851              	.LCFI44:
 852              		.cfi_def_cfa_offset 4
 853 0002 00AF     		add	r7, sp, #0
 854              		.cfi_offset 7, -4
 855              	.LCFI45:
 856              		.cfi_def_cfa_register 7
 718:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   return ((uint8_t)(RCC->CFGR & RCC_CFGR_SWS));
 857              		.loc 1 718 0
 858 0004 044B     		ldr	r3, .L53
 859 0006 9B68     		ldr	r3, [r3, #8]
 860 0008 DBB2     		uxtb	r3, r3
 861 000a 03F00C03 		and	r3, r3, #12
 862 000e DBB2     		uxtb	r3, r3
 719:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 863              		.loc 1 719 0
 864 0010 1846     		mov	r0, r3
 865 0012 BD46     		mov	sp, r7
 866 0014 80BC     		pop	{r7}
 867 0016 7047     		bx	lr
 868              	.L54:
 869              		.align	2
 870              	.L53:
 871 0018 00380240 		.word	1073887232
 872              		.cfi_endproc
 873              	.LFE125:
 875              		.section	.text.RCC_HCLKConfig,"ax",%progbits
 876              		.align	2
 877              		.global	RCC_HCLKConfig
 878              		.thumb
 879              		.thumb_func
 881              	RCC_HCLKConfig:
 882              	.LFB126:
 720:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 721:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
 722:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Configures the AHB clock (HCLK).
 723:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   Depending on the device voltage range, the software has to set correctly
 724:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         these bits to ensure that HCLK not exceed the maximum allowed frequency
 725:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         (for more details refer to section above
 726:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *           "CPU, AHB and APB busses clocks configuration functions")
 727:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_SYSCLK: defines the AHB clock divider. This clock is derived from 
 728:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         the system clock (SYSCLK).
 729:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
 730:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_SYSCLK_Div1: AHB clock = SYSCLK
 731:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_SYSCLK_Div2: AHB clock = SYSCLK/2
 732:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_SYSCLK_Div4: AHB clock = SYSCLK/4
 733:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_SYSCLK_Div8: AHB clock = SYSCLK/8
 734:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_SYSCLK_Div16: AHB clock = SYSCLK/16
 735:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_SYSCLK_Div64: AHB clock = SYSCLK/64
 736:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_SYSCLK_Div128: AHB clock = SYSCLK/128
 737:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_SYSCLK_Div256: AHB clock = SYSCLK/256
 738:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_SYSCLK_Div512: AHB clock = SYSCLK/512
 739:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
 740:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
 741:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_HCLKConfig(uint32_t RCC_SYSCLK)
 742:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 883              		.loc 1 742 0
 884              		.cfi_startproc
 885              		@ args = 0, pretend = 0, frame = 16
 886              		@ frame_needed = 1, uses_anonymous_args = 0
 887              		@ link register save eliminated.
 888 0000 80B4     		push	{r7}
 889              	.LCFI46:
 890              		.cfi_def_cfa_offset 4
 891 0002 85B0     		sub	sp, sp, #20
 892              	.LCFI47:
 893              		.cfi_def_cfa_offset 24
 894 0004 00AF     		add	r7, sp, #0
 895              		.cfi_offset 7, -4
 896              	.LCFI48:
 897              		.cfi_def_cfa_register 7
 898 0006 7860     		str	r0, [r7, #4]
 743:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
 899              		.loc 1 743 0
 900 0008 4FF00003 		mov	r3, #0
 901 000c FB60     		str	r3, [r7, #12]
 744:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   
 745:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 746:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_HCLK(RCC_SYSCLK));
 747:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 748:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmpreg = RCC->CFGR;
 902              		.loc 1 748 0
 903 000e 0A4B     		ldr	r3, .L56
 904 0010 9B68     		ldr	r3, [r3, #8]
 905 0012 FB60     		str	r3, [r7, #12]
 749:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 750:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Clear HPRE[3:0] bits */
 751:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmpreg &= ~RCC_CFGR_HPRE;
 906              		.loc 1 751 0
 907 0014 FB68     		ldr	r3, [r7, #12]
 908 0016 23F0F003 		bic	r3, r3, #240
 909 001a FB60     		str	r3, [r7, #12]
 752:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 753:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
 754:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmpreg |= RCC_SYSCLK;
 910              		.loc 1 754 0
 911 001c FA68     		ldr	r2, [r7, #12]
 912 001e 7B68     		ldr	r3, [r7, #4]
 913 0020 42EA0303 		orr	r3, r2, r3
 914 0024 FB60     		str	r3, [r7, #12]
 755:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 756:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Store the new value */
 757:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   RCC->CFGR = tmpreg;
 915              		.loc 1 757 0
 916 0026 044B     		ldr	r3, .L56
 917 0028 FA68     		ldr	r2, [r7, #12]
 918 002a 9A60     		str	r2, [r3, #8]
 758:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 919              		.loc 1 758 0
 920 002c 07F11407 		add	r7, r7, #20
 921 0030 BD46     		mov	sp, r7
 922 0032 80BC     		pop	{r7}
 923 0034 7047     		bx	lr
 924              	.L57:
 925 0036 00BF     		.align	2
 926              	.L56:
 927 0038 00380240 		.word	1073887232
 928              		.cfi_endproc
 929              	.LFE126:
 931              		.section	.text.RCC_PCLK1Config,"ax",%progbits
 932              		.align	2
 933              		.global	RCC_PCLK1Config
 934              		.thumb
 935              		.thumb_func
 937              	RCC_PCLK1Config:
 938              	.LFB127:
 759:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 760:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 761:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
 762:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Configures the Low Speed APB clock (PCLK1).
 763:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_HCLK: defines the APB1 clock divider. This clock is derived from 
 764:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         the AHB clock (HCLK).
 765:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
 766:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_HCLK_Div1:  APB1 clock = HCLK
 767:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_HCLK_Div2:  APB1 clock = HCLK/2
 768:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_HCLK_Div4:  APB1 clock = HCLK/4
 769:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_HCLK_Div8:  APB1 clock = HCLK/8
 770:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_HCLK_Div16: APB1 clock = HCLK/16
 771:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
 772:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
 773:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_PCLK1Config(uint32_t RCC_HCLK)
 774:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 939              		.loc 1 774 0
 940              		.cfi_startproc
 941              		@ args = 0, pretend = 0, frame = 16
 942              		@ frame_needed = 1, uses_anonymous_args = 0
 943              		@ link register save eliminated.
 944 0000 80B4     		push	{r7}
 945              	.LCFI49:
 946              		.cfi_def_cfa_offset 4
 947 0002 85B0     		sub	sp, sp, #20
 948              	.LCFI50:
 949              		.cfi_def_cfa_offset 24
 950 0004 00AF     		add	r7, sp, #0
 951              		.cfi_offset 7, -4
 952              	.LCFI51:
 953              		.cfi_def_cfa_register 7
 954 0006 7860     		str	r0, [r7, #4]
 775:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
 955              		.loc 1 775 0
 956 0008 4FF00003 		mov	r3, #0
 957 000c FB60     		str	r3, [r7, #12]
 776:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 777:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 778:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PCLK(RCC_HCLK));
 779:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 780:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmpreg = RCC->CFGR;
 958              		.loc 1 780 0
 959 000e 0A4B     		ldr	r3, .L59
 960 0010 9B68     		ldr	r3, [r3, #8]
 961 0012 FB60     		str	r3, [r7, #12]
 781:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 782:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Clear PPRE1[2:0] bits */
 783:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmpreg &= ~RCC_CFGR_PPRE1;
 962              		.loc 1 783 0
 963 0014 FB68     		ldr	r3, [r7, #12]
 964 0016 23F4E053 		bic	r3, r3, #7168
 965 001a FB60     		str	r3, [r7, #12]
 784:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 785:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Set PPRE1[2:0] bits according to RCC_HCLK value */
 786:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmpreg |= RCC_HCLK;
 966              		.loc 1 786 0
 967 001c FA68     		ldr	r2, [r7, #12]
 968 001e 7B68     		ldr	r3, [r7, #4]
 969 0020 42EA0303 		orr	r3, r2, r3
 970 0024 FB60     		str	r3, [r7, #12]
 787:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 788:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Store the new value */
 789:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   RCC->CFGR = tmpreg;
 971              		.loc 1 789 0
 972 0026 044B     		ldr	r3, .L59
 973 0028 FA68     		ldr	r2, [r7, #12]
 974 002a 9A60     		str	r2, [r3, #8]
 790:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 975              		.loc 1 790 0
 976 002c 07F11407 		add	r7, r7, #20
 977 0030 BD46     		mov	sp, r7
 978 0032 80BC     		pop	{r7}
 979 0034 7047     		bx	lr
 980              	.L60:
 981 0036 00BF     		.align	2
 982              	.L59:
 983 0038 00380240 		.word	1073887232
 984              		.cfi_endproc
 985              	.LFE127:
 987              		.section	.text.RCC_PCLK2Config,"ax",%progbits
 988              		.align	2
 989              		.global	RCC_PCLK2Config
 990              		.thumb
 991              		.thumb_func
 993              	RCC_PCLK2Config:
 994              	.LFB128:
 791:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 792:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
 793:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Configures the High Speed APB clock (PCLK2).
 794:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_HCLK: defines the APB2 clock divider. This clock is derived from 
 795:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         the AHB clock (HCLK).
 796:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
 797:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_HCLK_Div1:  APB2 clock = HCLK
 798:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_HCLK_Div2:  APB2 clock = HCLK/2
 799:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_HCLK_Div4:  APB2 clock = HCLK/4
 800:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_HCLK_Div8:  APB2 clock = HCLK/8
 801:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_HCLK_Div16: APB2 clock = HCLK/16
 802:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
 803:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
 804:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_PCLK2Config(uint32_t RCC_HCLK)
 805:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 995              		.loc 1 805 0
 996              		.cfi_startproc
 997              		@ args = 0, pretend = 0, frame = 16
 998              		@ frame_needed = 1, uses_anonymous_args = 0
 999              		@ link register save eliminated.
 1000 0000 80B4     		push	{r7}
 1001              	.LCFI52:
 1002              		.cfi_def_cfa_offset 4
 1003 0002 85B0     		sub	sp, sp, #20
 1004              	.LCFI53:
 1005              		.cfi_def_cfa_offset 24
 1006 0004 00AF     		add	r7, sp, #0
 1007              		.cfi_offset 7, -4
 1008              	.LCFI54:
 1009              		.cfi_def_cfa_register 7
 1010 0006 7860     		str	r0, [r7, #4]
 806:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
 1011              		.loc 1 806 0
 1012 0008 4FF00003 		mov	r3, #0
 1013 000c FB60     		str	r3, [r7, #12]
 807:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 808:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 809:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PCLK(RCC_HCLK));
 810:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 811:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmpreg = RCC->CFGR;
 1014              		.loc 1 811 0
 1015 000e 0B4B     		ldr	r3, .L62
 1016 0010 9B68     		ldr	r3, [r3, #8]
 1017 0012 FB60     		str	r3, [r7, #12]
 812:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 813:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Clear PPRE2[2:0] bits */
 814:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmpreg &= ~RCC_CFGR_PPRE2;
 1018              		.loc 1 814 0
 1019 0014 FB68     		ldr	r3, [r7, #12]
 1020 0016 23F46043 		bic	r3, r3, #57344
 1021 001a FB60     		str	r3, [r7, #12]
 815:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 816:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Set PPRE2[2:0] bits according to RCC_HCLK value */
 817:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmpreg |= RCC_HCLK << 3;
 1022              		.loc 1 817 0
 1023 001c 7B68     		ldr	r3, [r7, #4]
 1024 001e 4FEAC303 		lsl	r3, r3, #3
 1025 0022 FA68     		ldr	r2, [r7, #12]
 1026 0024 42EA0303 		orr	r3, r2, r3
 1027 0028 FB60     		str	r3, [r7, #12]
 818:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 819:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Store the new value */
 820:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   RCC->CFGR = tmpreg;
 1028              		.loc 1 820 0
 1029 002a 044B     		ldr	r3, .L62
 1030 002c FA68     		ldr	r2, [r7, #12]
 1031 002e 9A60     		str	r2, [r3, #8]
 821:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 1032              		.loc 1 821 0
 1033 0030 07F11407 		add	r7, r7, #20
 1034 0034 BD46     		mov	sp, r7
 1035 0036 80BC     		pop	{r7}
 1036 0038 7047     		bx	lr
 1037              	.L63:
 1038 003a 00BF     		.align	2
 1039              	.L62:
 1040 003c 00380240 		.word	1073887232
 1041              		.cfi_endproc
 1042              	.LFE128:
 1044              		.section	.text.RCC_GetClocksFreq,"ax",%progbits
 1045              		.align	2
 1046              		.global	RCC_GetClocksFreq
 1047              		.thumb
 1048              		.thumb_func
 1050              	RCC_GetClocksFreq:
 1051              	.LFB129:
 822:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 823:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
 824:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Returns the frequencies of different on chip clocks; SYSCLK, HCLK, 
 825:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         PCLK1 and PCLK2.       
 826:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * 
 827:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   The system frequency computed by this function is not the real 
 828:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         frequency in the chip. It is calculated based on the predefined 
 829:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         constant and the selected clock source:
 830:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note     If SYSCLK source is HSI, function returns values based on HSI_VALUE(*)
 831:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note     If SYSCLK source is HSE, function returns values based on HSE_VALUE(**)
 832:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note     If SYSCLK source is PLL, function returns values based on HSE_VALUE(**) 
 833:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *           or HSI_VALUE(*) multiplied/divided by the PLL factors.         
 834:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note     (*) HSI_VALUE is a constant defined in stm32f4xx.h file (default value
 835:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *               16 MHz) but the real value may vary depending on the variations
 836:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *               in voltage and temperature.
 837:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note     (**) HSE_VALUE is a constant defined in stm32f4xx.h file (default value
 838:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *                25 MHz), user has to ensure that HSE_VALUE is same as the real
 839:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *                frequency of the crystal used. Otherwise, this function may
 840:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *                have wrong result.
 841:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *                
 842:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   The result of this function could be not correct when using fractional
 843:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         value for HSE crystal.
 844:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *   
 845:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_Clocks: pointer to a RCC_ClocksTypeDef structure which will hold
 846:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          the clocks frequencies.
 847:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *     
 848:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   This function can be used by the user application to compute the 
 849:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         baudrate for the communication peripherals or configure other parameters.
 850:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   Each time SYSCLK, HCLK, PCLK1 and/or PCLK2 clock changes, this function
 851:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         must be called to update the structure's field. Otherwise, any
 852:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         configuration based on this function will be incorrect.
 853:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *    
 854:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
 855:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
 856:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
 857:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 1052              		.loc 1 857 0
 1053              		.cfi_startproc
 1054              		@ args = 0, pretend = 0, frame = 32
 1055              		@ frame_needed = 1, uses_anonymous_args = 0
 1056              		@ link register save eliminated.
 1057 0000 80B4     		push	{r7}
 1058              	.LCFI55:
 1059              		.cfi_def_cfa_offset 4
 1060 0002 89B0     		sub	sp, sp, #36
 1061              	.LCFI56:
 1062              		.cfi_def_cfa_offset 40
 1063 0004 00AF     		add	r7, sp, #0
 1064              		.cfi_offset 7, -4
 1065              	.LCFI57:
 1066              		.cfi_def_cfa_register 7
 1067 0006 7860     		str	r0, [r7, #4]
 858:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 1068              		.loc 1 858 0
 1069 0008 4FF00003 		mov	r3, #0
 1070 000c BB61     		str	r3, [r7, #24]
 1071 000e 4FF00003 		mov	r3, #0
 1072 0012 7B61     		str	r3, [r7, #20]
 1073 0014 4FF00003 		mov	r3, #0
 1074 0018 FB61     		str	r3, [r7, #28]
 1075 001a 4FF00203 		mov	r3, #2
 1076 001e 3B61     		str	r3, [r7, #16]
 1077 0020 4FF00003 		mov	r3, #0
 1078 0024 FB60     		str	r3, [r7, #12]
 1079 0026 4FF00203 		mov	r3, #2
 1080 002a BB60     		str	r3, [r7, #8]
 859:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 860:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Get SYSCLK source -------------------------------------------------------*/
 861:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmp = RCC->CFGR & RCC_CFGR_SWS;
 1081              		.loc 1 861 0
 1082 002c 4F4B     		ldr	r3, .L73
 1083 002e 9B68     		ldr	r3, [r3, #8]
 1084 0030 03F00C03 		and	r3, r3, #12
 1085 0034 BB61     		str	r3, [r7, #24]
 862:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 863:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   switch (tmp)
 1086              		.loc 1 863 0
 1087 0036 BB69     		ldr	r3, [r7, #24]
 1088 0038 042B     		cmp	r3, #4
 1089 003a 07D0     		beq	.L67
 1090 003c 082B     		cmp	r3, #8
 1091 003e 09D0     		beq	.L68
 1092 0040 002B     		cmp	r3, #0
 1093 0042 47D1     		bne	.L72
 1094              	.L66:
 864:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
 865:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     case 0x00:  /* HSI used as system clock source */
 866:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 1095              		.loc 1 866 0
 1096 0044 7B68     		ldr	r3, [r7, #4]
 1097 0046 4A4A     		ldr	r2, .L73+4
 1098 0048 1A60     		str	r2, [r3, #0]
 867:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       break;
 1099              		.loc 1 867 0
 1100 004a 47E0     		b	.L69
 1101              	.L67:
 868:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     case 0x04:  /* HSE used as system clock  source */
 869:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 1102              		.loc 1 869 0
 1103 004c 7B68     		ldr	r3, [r7, #4]
 1104 004e 494A     		ldr	r2, .L73+8
 1105 0050 1A60     		str	r2, [r3, #0]
 870:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       break;
 1106              		.loc 1 870 0
 1107 0052 43E0     		b	.L69
 1108              	.L68:
 871:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     case 0x08:  /* PLL used as system clock  source */
 872:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 873:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
 874:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****          SYSCLK = PLL_VCO / PLLP
 875:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****          */    
 876:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 1109              		.loc 1 876 0
 1110 0054 454B     		ldr	r3, .L73
 1111 0056 5B68     		ldr	r3, [r3, #4]
 1112 0058 03F48003 		and	r3, r3, #4194304
 1113 005c 4FEA9353 		lsr	r3, r3, #22
 1114 0060 FB60     		str	r3, [r7, #12]
 877:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 1115              		.loc 1 877 0
 1116 0062 424B     		ldr	r3, .L73
 1117 0064 5B68     		ldr	r3, [r3, #4]
 1118 0066 03F03F03 		and	r3, r3, #63
 1119 006a BB60     		str	r3, [r7, #8]
 878:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       
 879:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       if (pllsource != 0)
 1120              		.loc 1 879 0
 1121 006c FB68     		ldr	r3, [r7, #12]
 1122 006e 002B     		cmp	r3, #0
 1123 0070 0FD0     		beq	.L70
 880:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       {
 881:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****         /* HSE used as PLL clock source */
 882:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****         pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 1124              		.loc 1 882 0
 1125 0072 404A     		ldr	r2, .L73+8
 1126 0074 BB68     		ldr	r3, [r7, #8]
 1127 0076 B2FBF3F2 		udiv	r2, r2, r3
 1128 007a 3C4B     		ldr	r3, .L73
 1129 007c 5968     		ldr	r1, [r3, #4]
 1130 007e 47F6C073 		movw	r3, #32704
 1131 0082 01EA0303 		and	r3, r1, r3
 1132 0086 4FEA9313 		lsr	r3, r3, #6
 1133 008a 03FB02F3 		mul	r3, r3, r2
 1134 008e FB61     		str	r3, [r7, #28]
 1135 0090 0EE0     		b	.L71
 1136              	.L70:
 883:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       }
 884:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       else
 885:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       {
 886:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****         /* HSI used as PLL clock source */
 887:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****         pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 1137              		.loc 1 887 0
 1138 0092 374A     		ldr	r2, .L73+4
 1139 0094 BB68     		ldr	r3, [r7, #8]
 1140 0096 B2FBF3F2 		udiv	r2, r2, r3
 1141 009a 344B     		ldr	r3, .L73
 1142 009c 5968     		ldr	r1, [r3, #4]
 1143 009e 47F6C073 		movw	r3, #32704
 1144 00a2 01EA0303 		and	r3, r1, r3
 1145 00a6 4FEA9313 		lsr	r3, r3, #6
 1146 00aa 03FB02F3 		mul	r3, r3, r2
 1147 00ae FB61     		str	r3, [r7, #28]
 1148              	.L71:
 888:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       }
 889:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 890:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 1149              		.loc 1 890 0
 1150 00b0 2E4B     		ldr	r3, .L73
 1151 00b2 5B68     		ldr	r3, [r3, #4]
 1152 00b4 03F44033 		and	r3, r3, #196608
 1153 00b8 4FEA1343 		lsr	r3, r3, #16
 1154 00bc 03F10103 		add	r3, r3, #1
 1155 00c0 4FEA4303 		lsl	r3, r3, #1
 1156 00c4 3B61     		str	r3, [r7, #16]
 891:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 1157              		.loc 1 891 0
 1158 00c6 FA69     		ldr	r2, [r7, #28]
 1159 00c8 3B69     		ldr	r3, [r7, #16]
 1160 00ca B2FBF3F2 		udiv	r2, r2, r3
 1161 00ce 7B68     		ldr	r3, [r7, #4]
 1162 00d0 1A60     		str	r2, [r3, #0]
 892:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       break;
 1163              		.loc 1 892 0
 1164 00d2 03E0     		b	.L69
 1165              	.L72:
 893:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     default:
 894:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 1166              		.loc 1 894 0
 1167 00d4 7B68     		ldr	r3, [r7, #4]
 1168 00d6 264A     		ldr	r2, .L73+4
 1169 00d8 1A60     		str	r2, [r3, #0]
 895:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       break;
 1170              		.loc 1 895 0
 1171 00da 00BF     		nop
 1172              	.L69:
 896:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
 897:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/
 898:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 899:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Get HCLK prescaler */
 900:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmp = RCC->CFGR & RCC_CFGR_HPRE;
 1173              		.loc 1 900 0
 1174 00dc 234B     		ldr	r3, .L73
 1175 00de 9B68     		ldr	r3, [r3, #8]
 1176 00e0 03F0F003 		and	r3, r3, #240
 1177 00e4 BB61     		str	r3, [r7, #24]
 901:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmp = tmp >> 4;
 1178              		.loc 1 901 0
 1179 00e6 BB69     		ldr	r3, [r7, #24]
 1180 00e8 4FEA1313 		lsr	r3, r3, #4
 1181 00ec BB61     		str	r3, [r7, #24]
 902:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   presc = APBAHBPrescTable[tmp];
 1182              		.loc 1 902 0
 1183 00ee 224A     		ldr	r2, .L73+12
 1184 00f0 BB69     		ldr	r3, [r7, #24]
 1185 00f2 D318     		adds	r3, r2, r3
 1186 00f4 1B78     		ldrb	r3, [r3, #0]
 1187 00f6 DBB2     		uxtb	r3, r3
 1188 00f8 7B61     		str	r3, [r7, #20]
 903:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* HCLK clock frequency */
 904:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 1189              		.loc 1 904 0
 1190 00fa 7B68     		ldr	r3, [r7, #4]
 1191 00fc 1A68     		ldr	r2, [r3, #0]
 1192 00fe 7B69     		ldr	r3, [r7, #20]
 1193 0100 22FA03F2 		lsr	r2, r2, r3
 1194 0104 7B68     		ldr	r3, [r7, #4]
 1195 0106 5A60     		str	r2, [r3, #4]
 905:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 906:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Get PCLK1 prescaler */
 907:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 1196              		.loc 1 907 0
 1197 0108 184B     		ldr	r3, .L73
 1198 010a 9B68     		ldr	r3, [r3, #8]
 1199 010c 03F4E053 		and	r3, r3, #7168
 1200 0110 BB61     		str	r3, [r7, #24]
 908:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmp = tmp >> 10;
 1201              		.loc 1 908 0
 1202 0112 BB69     		ldr	r3, [r7, #24]
 1203 0114 4FEA9323 		lsr	r3, r3, #10
 1204 0118 BB61     		str	r3, [r7, #24]
 909:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   presc = APBAHBPrescTable[tmp];
 1205              		.loc 1 909 0
 1206 011a 174A     		ldr	r2, .L73+12
 1207 011c BB69     		ldr	r3, [r7, #24]
 1208 011e D318     		adds	r3, r2, r3
 1209 0120 1B78     		ldrb	r3, [r3, #0]
 1210 0122 DBB2     		uxtb	r3, r3
 1211 0124 7B61     		str	r3, [r7, #20]
 910:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* PCLK1 clock frequency */
 911:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 1212              		.loc 1 911 0
 1213 0126 7B68     		ldr	r3, [r7, #4]
 1214 0128 5A68     		ldr	r2, [r3, #4]
 1215 012a 7B69     		ldr	r3, [r7, #20]
 1216 012c 22FA03F2 		lsr	r2, r2, r3
 1217 0130 7B68     		ldr	r3, [r7, #4]
 1218 0132 9A60     		str	r2, [r3, #8]
 912:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 913:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Get PCLK2 prescaler */
 914:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 1219              		.loc 1 914 0
 1220 0134 0D4B     		ldr	r3, .L73
 1221 0136 9B68     		ldr	r3, [r3, #8]
 1222 0138 03F46043 		and	r3, r3, #57344
 1223 013c BB61     		str	r3, [r7, #24]
 915:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmp = tmp >> 13;
 1224              		.loc 1 915 0
 1225 013e BB69     		ldr	r3, [r7, #24]
 1226 0140 4FEA5333 		lsr	r3, r3, #13
 1227 0144 BB61     		str	r3, [r7, #24]
 916:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   presc = APBAHBPrescTable[tmp];
 1228              		.loc 1 916 0
 1229 0146 0C4A     		ldr	r2, .L73+12
 1230 0148 BB69     		ldr	r3, [r7, #24]
 1231 014a D318     		adds	r3, r2, r3
 1232 014c 1B78     		ldrb	r3, [r3, #0]
 1233 014e DBB2     		uxtb	r3, r3
 1234 0150 7B61     		str	r3, [r7, #20]
 917:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* PCLK2 clock frequency */
 918:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 1235              		.loc 1 918 0
 1236 0152 7B68     		ldr	r3, [r7, #4]
 1237 0154 5A68     		ldr	r2, [r3, #4]
 1238 0156 7B69     		ldr	r3, [r7, #20]
 1239 0158 22FA03F2 		lsr	r2, r2, r3
 1240 015c 7B68     		ldr	r3, [r7, #4]
 1241 015e DA60     		str	r2, [r3, #12]
 919:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 1242              		.loc 1 919 0
 1243 0160 07F12407 		add	r7, r7, #36
 1244 0164 BD46     		mov	sp, r7
 1245 0166 80BC     		pop	{r7}
 1246 0168 7047     		bx	lr
 1247              	.L74:
 1248 016a 00BF     		.align	2
 1249              	.L73:
 1250 016c 00380240 		.word	1073887232
 1251 0170 0024F400 		.word	16000000
 1252 0174 00127A00 		.word	8000000
 1253 0178 00000000 		.word	APBAHBPrescTable
 1254              		.cfi_endproc
 1255              	.LFE129:
 1257              		.section	.text.RCC_RTCCLKConfig,"ax",%progbits
 1258              		.align	2
 1259              		.global	RCC_RTCCLKConfig
 1260              		.thumb
 1261              		.thumb_func
 1263              	RCC_RTCCLKConfig:
 1264              	.LFB130:
 920:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 921:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
 922:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @}
 923:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
 924:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 925:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /** @defgroup RCC_Group3 Peripheral clocks configuration functions
 926:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  *  @brief   Peripheral clocks configuration functions 
 927:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  *
 928:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** @verbatim   
 929:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  ===============================================================================
 930:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****                    Peripheral clocks configuration functions
 931:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  ===============================================================================  
 932:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 933:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   This section provide functions allowing to configure the Peripheral clocks. 
 934:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   
 935:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   1. The RTC clock which is derived from the LSI, LSE or HSE clock divided by 2 to 31.
 936:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****      
 937:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   2. After restart from Reset or wakeup from STANDBY, all peripherals are off
 938:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****      except internal SRAM, Flash and JTAG. Before to start using a peripheral you
 939:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****      have to enable its interface clock. You can do this using RCC_AHBPeriphClockCmd()
 940:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****      , RCC_APB2PeriphClockCmd() and RCC_APB1PeriphClockCmd() functions.
 941:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 942:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   3. To reset the peripherals configuration (to the default state after device reset)
 943:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****      you can use RCC_AHBPeriphResetCmd(), RCC_APB2PeriphResetCmd() and 
 944:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****      RCC_APB1PeriphResetCmd() functions.
 945:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****      
 946:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   4. To further reduce power consumption in SLEEP mode the peripheral clocks can
 947:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****      be disabled prior to executing the WFI or WFE instructions. You can do this
 948:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****      using RCC_AHBPeriphClockLPModeCmd(), RCC_APB2PeriphClockLPModeCmd() and
 949:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****      RCC_APB1PeriphClockLPModeCmd() functions.  
 950:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 951:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** @endverbatim
 952:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @{
 953:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
 954:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 955:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
 956:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Configures the RTC clock (RTCCLK).
 957:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   As the RTC clock configuration bits are in the Backup domain and write
 958:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         access is denied to this domain after reset, you have to enable write
 959:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         access using PWR_BackupAccessCmd(ENABLE) function before to configure
 960:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         the RTC clock source (to be done once after reset).    
 961:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   Once the RTC clock is configured it can't be changed unless the  
 962:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         Backup domain is reset using RCC_BackupResetCmd() function, or by
 963:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         a Power On Reset (POR).
 964:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *    
 965:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_RTCCLKSource: specifies the RTC clock source.
 966:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
 967:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_RTCCLKSource_LSE: LSE selected as RTC clock
 968:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_RTCCLKSource_LSI: LSI selected as RTC clock
 969:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_RTCCLKSource_HSE_Divx: HSE clock divided by x selected
 970:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *                                            as RTC clock, where x:[2,31]
 971:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *  
 972:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   If the LSE or LSI is used as RTC clock source, the RTC continues to
 973:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         work in STOP and STANDBY modes, and can be used as wakeup source.
 974:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         However, when the HSE clock is used as RTC clock source, the RTC
 975:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         cannot be used in STOP and STANDBY modes.    
 976:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   The maximum input clock frequency for RTC is 1MHz (when using HSE as
 977:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         RTC clock source).
 978:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *  
 979:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
 980:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
 981:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_RTCCLKConfig(uint32_t RCC_RTCCLKSource)
 982:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 1265              		.loc 1 982 0
 1266              		.cfi_startproc
 1267              		@ args = 0, pretend = 0, frame = 16
 1268              		@ frame_needed = 1, uses_anonymous_args = 0
 1269              		@ link register save eliminated.
 1270 0000 80B4     		push	{r7}
 1271              	.LCFI58:
 1272              		.cfi_def_cfa_offset 4
 1273 0002 85B0     		sub	sp, sp, #20
 1274              	.LCFI59:
 1275              		.cfi_def_cfa_offset 24
 1276 0004 00AF     		add	r7, sp, #0
 1277              		.cfi_offset 7, -4
 1278              	.LCFI60:
 1279              		.cfi_def_cfa_register 7
 1280 0006 7860     		str	r0, [r7, #4]
 983:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
 1281              		.loc 1 983 0
 1282 0008 4FF00003 		mov	r3, #0
 1283 000c FB60     		str	r3, [r7, #12]
 984:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 985:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 986:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));
 987:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 988:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   if ((RCC_RTCCLKSource & 0x00000300) == 0x00000300)
 1284              		.loc 1 988 0
 1285 000e 7B68     		ldr	r3, [r7, #4]
 1286 0010 03F44073 		and	r3, r3, #768
 1287 0014 B3F5407F 		cmp	r3, #768
 1288 0018 12D1     		bne	.L76
 989:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   { /* If HSE is selected as RTC clock source, configure HSE division factor for RTC clock */
 990:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     tmpreg = RCC->CFGR;
 1289              		.loc 1 990 0
 1290 001a 114B     		ldr	r3, .L77
 1291 001c 9B68     		ldr	r3, [r3, #8]
 1292 001e FB60     		str	r3, [r7, #12]
 991:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 992:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     /* Clear RTCPRE[4:0] bits */
 993:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     tmpreg &= ~RCC_CFGR_RTCPRE;
 1293              		.loc 1 993 0
 1294 0020 FB68     		ldr	r3, [r7, #12]
 1295 0022 23F4F813 		bic	r3, r3, #2031616
 1296 0026 FB60     		str	r3, [r7, #12]
 994:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 995:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     /* Configure HSE division factor for RTC clock */
 996:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     tmpreg |= (RCC_RTCCLKSource & 0xFFFFCFF);
 1297              		.loc 1 996 0
 1298 0028 7B68     		ldr	r3, [r7, #4]
 1299 002a 23F07043 		bic	r3, r3, #-268435456
 1300 002e 23F44073 		bic	r3, r3, #768
 1301 0032 FA68     		ldr	r2, [r7, #12]
 1302 0034 42EA0303 		orr	r3, r2, r3
 1303 0038 FB60     		str	r3, [r7, #12]
 997:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 998:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     /* Store the new value */
 999:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->CFGR = tmpreg;
 1304              		.loc 1 999 0
 1305 003a 094B     		ldr	r3, .L77
 1306 003c FA68     		ldr	r2, [r7, #12]
 1307 003e 9A60     		str	r2, [r3, #8]
 1308              	.L76:
1000:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1001:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     
1002:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Select the RTC clock source */
1003:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   RCC->BDCR |= (RCC_RTCCLKSource & 0x00000FFF);
 1309              		.loc 1 1003 0
 1310 0040 074A     		ldr	r2, .L77
 1311 0042 074B     		ldr	r3, .L77
 1312 0044 196F     		ldr	r1, [r3, #112]
 1313 0046 7B68     		ldr	r3, [r7, #4]
 1314 0048 4FEA0353 		lsl	r3, r3, #20
 1315 004c 4FEA1353 		lsr	r3, r3, #20
 1316 0050 41EA0303 		orr	r3, r1, r3
 1317 0054 1367     		str	r3, [r2, #112]
1004:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 1318              		.loc 1 1004 0
 1319 0056 07F11407 		add	r7, r7, #20
 1320 005a BD46     		mov	sp, r7
 1321 005c 80BC     		pop	{r7}
 1322 005e 7047     		bx	lr
 1323              	.L78:
 1324              		.align	2
 1325              	.L77:
 1326 0060 00380240 		.word	1073887232
 1327              		.cfi_endproc
 1328              	.LFE130:
 1330              		.section	.text.RCC_RTCCLKCmd,"ax",%progbits
 1331              		.align	2
 1332              		.global	RCC_RTCCLKCmd
 1333              		.thumb
 1334              		.thumb_func
 1336              	RCC_RTCCLKCmd:
 1337              	.LFB131:
1005:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1006:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
1007:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the RTC clock.
1008:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   This function must be used only after the RTC clock source was selected
1009:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         using the RCC_RTCCLKConfig function.
1010:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the RTC clock. This parameter can be: ENABLE or DISABLE.
1011:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
1012:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
1013:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_RTCCLKCmd(FunctionalState NewState)
1014:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 1338              		.loc 1 1014 0
 1339              		.cfi_startproc
 1340              		@ args = 0, pretend = 0, frame = 8
 1341              		@ frame_needed = 1, uses_anonymous_args = 0
 1342              		@ link register save eliminated.
 1343 0000 80B4     		push	{r7}
 1344              	.LCFI61:
 1345              		.cfi_def_cfa_offset 4
 1346 0002 83B0     		sub	sp, sp, #12
 1347              	.LCFI62:
 1348              		.cfi_def_cfa_offset 16
 1349 0004 00AF     		add	r7, sp, #0
 1350              		.cfi_offset 7, -4
 1351              	.LCFI63:
 1352              		.cfi_def_cfa_register 7
 1353 0006 0346     		mov	r3, r0
 1354 0008 FB71     		strb	r3, [r7, #7]
1015:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1016:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1017:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1018:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *(__IO uint32_t *) BDCR_RTCEN_BB = (uint32_t)NewState;
 1355              		.loc 1 1018 0
 1356 000a 044B     		ldr	r3, .L80
 1357 000c FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 1358 000e 1A60     		str	r2, [r3, #0]
1019:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 1359              		.loc 1 1019 0
 1360 0010 07F10C07 		add	r7, r7, #12
 1361 0014 BD46     		mov	sp, r7
 1362 0016 80BC     		pop	{r7}
 1363 0018 7047     		bx	lr
 1364              	.L81:
 1365 001a 00BF     		.align	2
 1366              	.L80:
 1367 001c 3C0E4742 		.word	1111952956
 1368              		.cfi_endproc
 1369              	.LFE131:
 1371              		.section	.text.RCC_BackupResetCmd,"ax",%progbits
 1372              		.align	2
 1373              		.global	RCC_BackupResetCmd
 1374              		.thumb
 1375              		.thumb_func
 1377              	RCC_BackupResetCmd:
 1378              	.LFB132:
1020:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1021:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
1022:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Forces or releases the Backup domain reset.
1023:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   This function resets the RTC peripheral (including the backup registers)
1024:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         and the RTC clock source selection in RCC_CSR register.
1025:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   The BKPSRAM is not affected by this reset.    
1026:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the Backup domain reset.
1027:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1028:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
1029:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
1030:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_BackupResetCmd(FunctionalState NewState)
1031:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 1379              		.loc 1 1031 0
 1380              		.cfi_startproc
 1381              		@ args = 0, pretend = 0, frame = 8
 1382              		@ frame_needed = 1, uses_anonymous_args = 0
 1383              		@ link register save eliminated.
 1384 0000 80B4     		push	{r7}
 1385              	.LCFI64:
 1386              		.cfi_def_cfa_offset 4
 1387 0002 83B0     		sub	sp, sp, #12
 1388              	.LCFI65:
 1389              		.cfi_def_cfa_offset 16
 1390 0004 00AF     		add	r7, sp, #0
 1391              		.cfi_offset 7, -4
 1392              	.LCFI66:
 1393              		.cfi_def_cfa_register 7
 1394 0006 0346     		mov	r3, r0
 1395 0008 FB71     		strb	r3, [r7, #7]
1032:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1033:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1034:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *(__IO uint32_t *) BDCR_BDRST_BB = (uint32_t)NewState;
 1396              		.loc 1 1034 0
 1397 000a 044B     		ldr	r3, .L83
 1398 000c FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 1399 000e 1A60     		str	r2, [r3, #0]
1035:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 1400              		.loc 1 1035 0
 1401 0010 07F10C07 		add	r7, r7, #12
 1402 0014 BD46     		mov	sp, r7
 1403 0016 80BC     		pop	{r7}
 1404 0018 7047     		bx	lr
 1405              	.L84:
 1406 001a 00BF     		.align	2
 1407              	.L83:
 1408 001c 400E4742 		.word	1111952960
 1409              		.cfi_endproc
 1410              	.LFE132:
 1412              		.section	.text.RCC_I2SCLKConfig,"ax",%progbits
 1413              		.align	2
 1414              		.global	RCC_I2SCLKConfig
 1415              		.thumb
 1416              		.thumb_func
 1418              	RCC_I2SCLKConfig:
 1419              	.LFB133:
1036:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1037:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
1038:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Configures the I2S clock source (I2SCLK).
1039:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *
1040:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   This function must be called before enabling the I2S APB clock.
1041:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   This function applies only to Silicon RevisionB and RevisionY.
1042:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *
1043:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_I2SCLKSource: specifies the I2S clock source.
1044:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
1045:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_I2S2CLKSource_PLLI2S: PLLI2S clock used as I2S clock source
1046:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_I2S2CLKSource_Ext: External clock mapped on the I2S_CKIN pin
1047:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *                                        used as I2S clock source
1048:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
1049:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
1050:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_I2SCLKConfig(uint32_t RCC_I2SCLKSource)
1051:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 1420              		.loc 1 1051 0
 1421              		.cfi_startproc
 1422              		@ args = 0, pretend = 0, frame = 8
 1423              		@ frame_needed = 1, uses_anonymous_args = 0
 1424              		@ link register save eliminated.
 1425 0000 80B4     		push	{r7}
 1426              	.LCFI67:
 1427              		.cfi_def_cfa_offset 4
 1428 0002 83B0     		sub	sp, sp, #12
 1429              	.LCFI68:
 1430              		.cfi_def_cfa_offset 16
 1431 0004 00AF     		add	r7, sp, #0
 1432              		.cfi_offset 7, -4
 1433              	.LCFI69:
 1434              		.cfi_def_cfa_register 7
 1435 0006 7860     		str	r0, [r7, #4]
1052:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1053:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_I2SCLK_SOURCE(RCC_I2SCLKSource));
1054:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1055:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *(__IO uint32_t *) CFGR_I2SSRC_BB = RCC_I2SCLKSource;
 1436              		.loc 1 1055 0
 1437 0008 034B     		ldr	r3, .L86
 1438 000a 7A68     		ldr	r2, [r7, #4]
 1439 000c 1A60     		str	r2, [r3, #0]
1056:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 1440              		.loc 1 1056 0
 1441 000e 07F10C07 		add	r7, r7, #12
 1442 0012 BD46     		mov	sp, r7
 1443 0014 80BC     		pop	{r7}
 1444 0016 7047     		bx	lr
 1445              	.L87:
 1446              		.align	2
 1447              	.L86:
 1448 0018 5C014742 		.word	1111949660
 1449              		.cfi_endproc
 1450              	.LFE133:
 1452              		.section	.text.RCC_AHB1PeriphClockCmd,"ax",%progbits
 1453              		.align	2
 1454              		.global	RCC_AHB1PeriphClockCmd
 1455              		.thumb
 1456              		.thumb_func
 1458              	RCC_AHB1PeriphClockCmd:
 1459              	.LFB134:
1057:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1058:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
1059:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the AHB1 peripheral clock.
1060:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   After reset, the peripheral clock (used for registers read/write access)
1061:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         is disabled and the application software has to enable this clock before 
1062:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         using it.   
1063:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_AHBPeriph: specifies the AHB1 peripheral to gates its clock.
1064:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be any combination of the following values:
1065:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOA:       GPIOA clock
1066:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOB:       GPIOB clock 
1067:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOC:       GPIOC clock
1068:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOD:       GPIOD clock
1069:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOE:       GPIOE clock
1070:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOF:       GPIOF clock
1071:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOG:       GPIOG clock
1072:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOG:       GPIOG clock
1073:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOI:       GPIOI clock
1074:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_CRC:         CRC clock
1075:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_BKPSRAM:     BKPSRAM interface clock
1076:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_DMA1:        DMA1 clock
1077:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_DMA2:        DMA2 clock
1078:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_ETH_MAC:     Ethernet MAC clock
1079:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_ETH_MAC_Tx:  Ethernet Transmission clock
1080:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_ETH_MAC_Rx:  Ethernet Reception clock
1081:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_ETH_MAC_PTP: Ethernet PTP clock
1082:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_OTG_HS:      USB OTG HS clock
1083:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_OTG_HS_ULPI: USB OTG HS ULPI clock
1084:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
1085:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1086:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
1087:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
1088:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
1089:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 1460              		.loc 1 1089 0
 1461              		.cfi_startproc
 1462              		@ args = 0, pretend = 0, frame = 8
 1463              		@ frame_needed = 1, uses_anonymous_args = 0
 1464              		@ link register save eliminated.
 1465 0000 80B4     		push	{r7}
 1466              	.LCFI70:
 1467              		.cfi_def_cfa_offset 4
 1468 0002 83B0     		sub	sp, sp, #12
 1469              	.LCFI71:
 1470              		.cfi_def_cfa_offset 16
 1471 0004 00AF     		add	r7, sp, #0
 1472              		.cfi_offset 7, -4
 1473              	.LCFI72:
 1474              		.cfi_def_cfa_register 7
 1475 0006 7860     		str	r0, [r7, #4]
 1476 0008 0B46     		mov	r3, r1
 1477 000a FB70     		strb	r3, [r7, #3]
1090:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1091:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));
1092:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1093:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1094:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 1478              		.loc 1 1094 0
 1479 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1480 000e 002B     		cmp	r3, #0
 1481 0010 07D0     		beq	.L89
1095:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1096:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->AHB1ENR |= RCC_AHB1Periph;
 1482              		.loc 1 1096 0
 1483 0012 0B4B     		ldr	r3, .L91
 1484 0014 0A4A     		ldr	r2, .L91
 1485 0016 116B     		ldr	r1, [r2, #48]
 1486 0018 7A68     		ldr	r2, [r7, #4]
 1487 001a 41EA0202 		orr	r2, r1, r2
 1488 001e 1A63     		str	r2, [r3, #48]
 1489 0020 08E0     		b	.L88
 1490              	.L89:
1097:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1098:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   else
1099:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1100:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->AHB1ENR &= ~RCC_AHB1Periph;
 1491              		.loc 1 1100 0
 1492 0022 074B     		ldr	r3, .L91
 1493 0024 064A     		ldr	r2, .L91
 1494 0026 116B     		ldr	r1, [r2, #48]
 1495 0028 7A68     		ldr	r2, [r7, #4]
 1496 002a 6FEA0202 		mvn	r2, r2
 1497 002e 01EA0202 		and	r2, r1, r2
 1498 0032 1A63     		str	r2, [r3, #48]
 1499              	.L88:
1101:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1102:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 1500              		.loc 1 1102 0
 1501 0034 07F10C07 		add	r7, r7, #12
 1502 0038 BD46     		mov	sp, r7
 1503 003a 80BC     		pop	{r7}
 1504 003c 7047     		bx	lr
 1505              	.L92:
 1506 003e 00BF     		.align	2
 1507              	.L91:
 1508 0040 00380240 		.word	1073887232
 1509              		.cfi_endproc
 1510              	.LFE134:
 1512              		.section	.text.RCC_AHB2PeriphClockCmd,"ax",%progbits
 1513              		.align	2
 1514              		.global	RCC_AHB2PeriphClockCmd
 1515              		.thumb
 1516              		.thumb_func
 1518              	RCC_AHB2PeriphClockCmd:
 1519              	.LFB135:
1103:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1104:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
1105:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the AHB2 peripheral clock.
1106:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   After reset, the peripheral clock (used for registers read/write access)
1107:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         is disabled and the application software has to enable this clock before 
1108:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         using it. 
1109:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_AHBPeriph: specifies the AHB2 peripheral to gates its clock.
1110:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be any combination of the following values:
1111:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_DCMI:   DCMI clock
1112:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_CRYP:   CRYP clock
1113:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_HASH:   HASH clock
1114:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_RNG:    RNG clock
1115:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_OTG_FS: USB OTG FS clock
1116:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
1117:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1118:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
1119:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
1120:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_AHB2PeriphClockCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
1121:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 1520              		.loc 1 1121 0
 1521              		.cfi_startproc
 1522              		@ args = 0, pretend = 0, frame = 8
 1523              		@ frame_needed = 1, uses_anonymous_args = 0
 1524              		@ link register save eliminated.
 1525 0000 80B4     		push	{r7}
 1526              	.LCFI73:
 1527              		.cfi_def_cfa_offset 4
 1528 0002 83B0     		sub	sp, sp, #12
 1529              	.LCFI74:
 1530              		.cfi_def_cfa_offset 16
 1531 0004 00AF     		add	r7, sp, #0
 1532              		.cfi_offset 7, -4
 1533              	.LCFI75:
 1534              		.cfi_def_cfa_register 7
 1535 0006 7860     		str	r0, [r7, #4]
 1536 0008 0B46     		mov	r3, r1
 1537 000a FB70     		strb	r3, [r7, #3]
1122:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1123:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
1124:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1125:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1126:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 1538              		.loc 1 1126 0
 1539 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1540 000e 002B     		cmp	r3, #0
 1541 0010 07D0     		beq	.L94
1127:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1128:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->AHB2ENR |= RCC_AHB2Periph;
 1542              		.loc 1 1128 0
 1543 0012 0B4B     		ldr	r3, .L96
 1544 0014 0A4A     		ldr	r2, .L96
 1545 0016 516B     		ldr	r1, [r2, #52]
 1546 0018 7A68     		ldr	r2, [r7, #4]
 1547 001a 41EA0202 		orr	r2, r1, r2
 1548 001e 5A63     		str	r2, [r3, #52]
 1549 0020 08E0     		b	.L93
 1550              	.L94:
1129:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1130:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   else
1131:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1132:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->AHB2ENR &= ~RCC_AHB2Periph;
 1551              		.loc 1 1132 0
 1552 0022 074B     		ldr	r3, .L96
 1553 0024 064A     		ldr	r2, .L96
 1554 0026 516B     		ldr	r1, [r2, #52]
 1555 0028 7A68     		ldr	r2, [r7, #4]
 1556 002a 6FEA0202 		mvn	r2, r2
 1557 002e 01EA0202 		and	r2, r1, r2
 1558 0032 5A63     		str	r2, [r3, #52]
 1559              	.L93:
1133:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1134:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 1560              		.loc 1 1134 0
 1561 0034 07F10C07 		add	r7, r7, #12
 1562 0038 BD46     		mov	sp, r7
 1563 003a 80BC     		pop	{r7}
 1564 003c 7047     		bx	lr
 1565              	.L97:
 1566 003e 00BF     		.align	2
 1567              	.L96:
 1568 0040 00380240 		.word	1073887232
 1569              		.cfi_endproc
 1570              	.LFE135:
 1572              		.section	.text.RCC_AHB3PeriphClockCmd,"ax",%progbits
 1573              		.align	2
 1574              		.global	RCC_AHB3PeriphClockCmd
 1575              		.thumb
 1576              		.thumb_func
 1578              	RCC_AHB3PeriphClockCmd:
 1579              	.LFB136:
1135:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1136:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
1137:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the AHB3 peripheral clock.
1138:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   After reset, the peripheral clock (used for registers read/write access)
1139:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         is disabled and the application software has to enable this clock before 
1140:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         using it. 
1141:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_AHBPeriph: specifies the AHB3 peripheral to gates its clock.
1142:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter must be: RCC_AHB3Periph_FSMC
1143:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
1144:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1145:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
1146:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
1147:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_AHB3PeriphClockCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
1148:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 1580              		.loc 1 1148 0
 1581              		.cfi_startproc
 1582              		@ args = 0, pretend = 0, frame = 8
 1583              		@ frame_needed = 1, uses_anonymous_args = 0
 1584              		@ link register save eliminated.
 1585 0000 80B4     		push	{r7}
 1586              	.LCFI76:
 1587              		.cfi_def_cfa_offset 4
 1588 0002 83B0     		sub	sp, sp, #12
 1589              	.LCFI77:
 1590              		.cfi_def_cfa_offset 16
 1591 0004 00AF     		add	r7, sp, #0
 1592              		.cfi_offset 7, -4
 1593              	.LCFI78:
 1594              		.cfi_def_cfa_register 7
 1595 0006 7860     		str	r0, [r7, #4]
 1596 0008 0B46     		mov	r3, r1
 1597 000a FB70     		strb	r3, [r7, #3]
1149:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1150:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));  
1151:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1152:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1153:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 1598              		.loc 1 1153 0
 1599 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1600 000e 002B     		cmp	r3, #0
 1601 0010 07D0     		beq	.L99
1154:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1155:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->AHB3ENR |= RCC_AHB3Periph;
 1602              		.loc 1 1155 0
 1603 0012 0B4B     		ldr	r3, .L101
 1604 0014 0A4A     		ldr	r2, .L101
 1605 0016 916B     		ldr	r1, [r2, #56]
 1606 0018 7A68     		ldr	r2, [r7, #4]
 1607 001a 41EA0202 		orr	r2, r1, r2
 1608 001e 9A63     		str	r2, [r3, #56]
 1609 0020 08E0     		b	.L98
 1610              	.L99:
1156:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1157:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   else
1158:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1159:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->AHB3ENR &= ~RCC_AHB3Periph;
 1611              		.loc 1 1159 0
 1612 0022 074B     		ldr	r3, .L101
 1613 0024 064A     		ldr	r2, .L101
 1614 0026 916B     		ldr	r1, [r2, #56]
 1615 0028 7A68     		ldr	r2, [r7, #4]
 1616 002a 6FEA0202 		mvn	r2, r2
 1617 002e 01EA0202 		and	r2, r1, r2
 1618 0032 9A63     		str	r2, [r3, #56]
 1619              	.L98:
1160:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1161:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 1620              		.loc 1 1161 0
 1621 0034 07F10C07 		add	r7, r7, #12
 1622 0038 BD46     		mov	sp, r7
 1623 003a 80BC     		pop	{r7}
 1624 003c 7047     		bx	lr
 1625              	.L102:
 1626 003e 00BF     		.align	2
 1627              	.L101:
 1628 0040 00380240 		.word	1073887232
 1629              		.cfi_endproc
 1630              	.LFE136:
 1632              		.section	.text.RCC_APB1PeriphClockCmd,"ax",%progbits
 1633              		.align	2
 1634              		.global	RCC_APB1PeriphClockCmd
 1635              		.thumb
 1636              		.thumb_func
 1638              	RCC_APB1PeriphClockCmd:
 1639              	.LFB137:
1162:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1163:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
1164:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the Low Speed APB (APB1) peripheral clock.
1165:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   After reset, the peripheral clock (used for registers read/write access)
1166:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         is disabled and the application software has to enable this clock before 
1167:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         using it. 
1168:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_APB1Periph: specifies the APB1 peripheral to gates its clock.
1169:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be any combination of the following values:
1170:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM2:   TIM2 clock
1171:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM3:   TIM3 clock
1172:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM4:   TIM4 clock
1173:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM5:   TIM5 clock
1174:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM6:   TIM6 clock
1175:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM7:   TIM7 clock
1176:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM12:  TIM12 clock
1177:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM13:  TIM13 clock
1178:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM14:  TIM14 clock
1179:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_WWDG:   WWDG clock
1180:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_SPI2:   SPI2 clock
1181:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_SPI3:   SPI3 clock
1182:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_USART2: USART2 clock
1183:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_USART3: USART3 clock
1184:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_UART4:  UART4 clock
1185:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_UART5:  UART5 clock
1186:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_I2C1:   I2C1 clock
1187:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_I2C2:   I2C2 clock
1188:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_I2C3:   I2C3 clock
1189:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_CAN1:   CAN1 clock
1190:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_CAN2:   CAN2 clock
1191:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_PWR:    PWR clock
1192:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_DAC:    DAC clock
1193:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
1194:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1195:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
1196:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
1197:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
1198:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 1640              		.loc 1 1198 0
 1641              		.cfi_startproc
 1642              		@ args = 0, pretend = 0, frame = 8
 1643              		@ frame_needed = 1, uses_anonymous_args = 0
 1644              		@ link register save eliminated.
 1645 0000 80B4     		push	{r7}
 1646              	.LCFI79:
 1647              		.cfi_def_cfa_offset 4
 1648 0002 83B0     		sub	sp, sp, #12
 1649              	.LCFI80:
 1650              		.cfi_def_cfa_offset 16
 1651 0004 00AF     		add	r7, sp, #0
 1652              		.cfi_offset 7, -4
 1653              	.LCFI81:
 1654              		.cfi_def_cfa_register 7
 1655 0006 7860     		str	r0, [r7, #4]
 1656 0008 0B46     		mov	r3, r1
 1657 000a FB70     		strb	r3, [r7, #3]
1199:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1200:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
1201:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1202:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1203:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 1658              		.loc 1 1203 0
 1659 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1660 000e 002B     		cmp	r3, #0
 1661 0010 07D0     		beq	.L104
1204:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1205:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->APB1ENR |= RCC_APB1Periph;
 1662              		.loc 1 1205 0
 1663 0012 0B4B     		ldr	r3, .L106
 1664 0014 0A4A     		ldr	r2, .L106
 1665 0016 116C     		ldr	r1, [r2, #64]
 1666 0018 7A68     		ldr	r2, [r7, #4]
 1667 001a 41EA0202 		orr	r2, r1, r2
 1668 001e 1A64     		str	r2, [r3, #64]
 1669 0020 08E0     		b	.L103
 1670              	.L104:
1206:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1207:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   else
1208:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1209:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->APB1ENR &= ~RCC_APB1Periph;
 1671              		.loc 1 1209 0
 1672 0022 074B     		ldr	r3, .L106
 1673 0024 064A     		ldr	r2, .L106
 1674 0026 116C     		ldr	r1, [r2, #64]
 1675 0028 7A68     		ldr	r2, [r7, #4]
 1676 002a 6FEA0202 		mvn	r2, r2
 1677 002e 01EA0202 		and	r2, r1, r2
 1678 0032 1A64     		str	r2, [r3, #64]
 1679              	.L103:
1210:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1211:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 1680              		.loc 1 1211 0
 1681 0034 07F10C07 		add	r7, r7, #12
 1682 0038 BD46     		mov	sp, r7
 1683 003a 80BC     		pop	{r7}
 1684 003c 7047     		bx	lr
 1685              	.L107:
 1686 003e 00BF     		.align	2
 1687              	.L106:
 1688 0040 00380240 		.word	1073887232
 1689              		.cfi_endproc
 1690              	.LFE137:
 1692              		.section	.text.RCC_APB2PeriphClockCmd,"ax",%progbits
 1693              		.align	2
 1694              		.global	RCC_APB2PeriphClockCmd
 1695              		.thumb
 1696              		.thumb_func
 1698              	RCC_APB2PeriphClockCmd:
 1699              	.LFB138:
1212:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1213:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
1214:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the High Speed APB (APB2) peripheral clock.
1215:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   After reset, the peripheral clock (used for registers read/write access)
1216:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         is disabled and the application software has to enable this clock before 
1217:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         using it.
1218:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_APB2Periph: specifies the APB2 peripheral to gates its clock.
1219:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be any combination of the following values:
1220:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM1:   TIM1 clock
1221:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM8:   TIM8 clock
1222:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_USART1: USART1 clock
1223:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_USART6: USART6 clock
1224:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_ADC1:   ADC1 clock
1225:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_ADC2:   ADC2 clock
1226:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_ADC3:   ADC3 clock
1227:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SDIO:   SDIO clock
1228:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SPI1:   SPI1 clock
1229:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SYSCFG: SYSCFG clock
1230:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM9:   TIM9 clock
1231:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM10:  TIM10 clock
1232:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM11:  TIM11 clock
1233:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
1234:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1235:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
1236:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
1237:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
1238:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 1700              		.loc 1 1238 0
 1701              		.cfi_startproc
 1702              		@ args = 0, pretend = 0, frame = 8
 1703              		@ frame_needed = 1, uses_anonymous_args = 0
 1704              		@ link register save eliminated.
 1705 0000 80B4     		push	{r7}
 1706              	.LCFI82:
 1707              		.cfi_def_cfa_offset 4
 1708 0002 83B0     		sub	sp, sp, #12
 1709              	.LCFI83:
 1710              		.cfi_def_cfa_offset 16
 1711 0004 00AF     		add	r7, sp, #0
 1712              		.cfi_offset 7, -4
 1713              	.LCFI84:
 1714              		.cfi_def_cfa_register 7
 1715 0006 7860     		str	r0, [r7, #4]
 1716 0008 0B46     		mov	r3, r1
 1717 000a FB70     		strb	r3, [r7, #3]
1239:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1240:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
1241:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1242:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1243:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 1718              		.loc 1 1243 0
 1719 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1720 000e 002B     		cmp	r3, #0
 1721 0010 07D0     		beq	.L109
1244:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1245:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->APB2ENR |= RCC_APB2Periph;
 1722              		.loc 1 1245 0
 1723 0012 0B4B     		ldr	r3, .L111
 1724 0014 0A4A     		ldr	r2, .L111
 1725 0016 516C     		ldr	r1, [r2, #68]
 1726 0018 7A68     		ldr	r2, [r7, #4]
 1727 001a 41EA0202 		orr	r2, r1, r2
 1728 001e 5A64     		str	r2, [r3, #68]
 1729 0020 08E0     		b	.L108
 1730              	.L109:
1246:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1247:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   else
1248:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1249:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->APB2ENR &= ~RCC_APB2Periph;
 1731              		.loc 1 1249 0
 1732 0022 074B     		ldr	r3, .L111
 1733 0024 064A     		ldr	r2, .L111
 1734 0026 516C     		ldr	r1, [r2, #68]
 1735 0028 7A68     		ldr	r2, [r7, #4]
 1736 002a 6FEA0202 		mvn	r2, r2
 1737 002e 01EA0202 		and	r2, r1, r2
 1738 0032 5A64     		str	r2, [r3, #68]
 1739              	.L108:
1250:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1251:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 1740              		.loc 1 1251 0
 1741 0034 07F10C07 		add	r7, r7, #12
 1742 0038 BD46     		mov	sp, r7
 1743 003a 80BC     		pop	{r7}
 1744 003c 7047     		bx	lr
 1745              	.L112:
 1746 003e 00BF     		.align	2
 1747              	.L111:
 1748 0040 00380240 		.word	1073887232
 1749              		.cfi_endproc
 1750              	.LFE138:
 1752              		.section	.text.RCC_AHB1PeriphResetCmd,"ax",%progbits
 1753              		.align	2
 1754              		.global	RCC_AHB1PeriphResetCmd
 1755              		.thumb
 1756              		.thumb_func
 1758              	RCC_AHB1PeriphResetCmd:
 1759              	.LFB139:
1252:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1253:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
1254:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Forces or releases AHB1 peripheral reset.
1255:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_AHB1Periph: specifies the AHB1 peripheral to reset.
1256:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be any combination of the following values:
1257:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOA:   GPIOA clock
1258:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOB:   GPIOB clock 
1259:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOC:   GPIOC clock
1260:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOD:   GPIOD clock
1261:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOE:   GPIOE clock
1262:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOF:   GPIOF clock
1263:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOG:   GPIOG clock
1264:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOG:   GPIOG clock
1265:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOI:   GPIOI clock
1266:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_CRC:     CRC clock
1267:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_DMA1:    DMA1 clock
1268:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_DMA2:    DMA2 clock
1269:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_ETH_MAC: Ethernet MAC clock
1270:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_OTG_HS:  USB OTG HS clock
1271:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *                  
1272:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral reset.
1273:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1274:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
1275:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
1276:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_AHB1PeriphResetCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
1277:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 1760              		.loc 1 1277 0
 1761              		.cfi_startproc
 1762              		@ args = 0, pretend = 0, frame = 8
 1763              		@ frame_needed = 1, uses_anonymous_args = 0
 1764              		@ link register save eliminated.
 1765 0000 80B4     		push	{r7}
 1766              	.LCFI85:
 1767              		.cfi_def_cfa_offset 4
 1768 0002 83B0     		sub	sp, sp, #12
 1769              	.LCFI86:
 1770              		.cfi_def_cfa_offset 16
 1771 0004 00AF     		add	r7, sp, #0
 1772              		.cfi_offset 7, -4
 1773              	.LCFI87:
 1774              		.cfi_def_cfa_register 7
 1775 0006 7860     		str	r0, [r7, #4]
 1776 0008 0B46     		mov	r3, r1
 1777 000a FB70     		strb	r3, [r7, #3]
1278:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1279:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_AHB1_RESET_PERIPH(RCC_AHB1Periph));
1280:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1281:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1282:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 1778              		.loc 1 1282 0
 1779 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1780 000e 002B     		cmp	r3, #0
 1781 0010 07D0     		beq	.L114
1283:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1284:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->AHB1RSTR |= RCC_AHB1Periph;
 1782              		.loc 1 1284 0
 1783 0012 0B4B     		ldr	r3, .L116
 1784 0014 0A4A     		ldr	r2, .L116
 1785 0016 1169     		ldr	r1, [r2, #16]
 1786 0018 7A68     		ldr	r2, [r7, #4]
 1787 001a 41EA0202 		orr	r2, r1, r2
 1788 001e 1A61     		str	r2, [r3, #16]
 1789 0020 08E0     		b	.L113
 1790              	.L114:
1285:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1286:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   else
1287:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1288:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->AHB1RSTR &= ~RCC_AHB1Periph;
 1791              		.loc 1 1288 0
 1792 0022 074B     		ldr	r3, .L116
 1793 0024 064A     		ldr	r2, .L116
 1794 0026 1169     		ldr	r1, [r2, #16]
 1795 0028 7A68     		ldr	r2, [r7, #4]
 1796 002a 6FEA0202 		mvn	r2, r2
 1797 002e 01EA0202 		and	r2, r1, r2
 1798 0032 1A61     		str	r2, [r3, #16]
 1799              	.L113:
1289:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1290:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 1800              		.loc 1 1290 0
 1801 0034 07F10C07 		add	r7, r7, #12
 1802 0038 BD46     		mov	sp, r7
 1803 003a 80BC     		pop	{r7}
 1804 003c 7047     		bx	lr
 1805              	.L117:
 1806 003e 00BF     		.align	2
 1807              	.L116:
 1808 0040 00380240 		.word	1073887232
 1809              		.cfi_endproc
 1810              	.LFE139:
 1812              		.section	.text.RCC_AHB2PeriphResetCmd,"ax",%progbits
 1813              		.align	2
 1814              		.global	RCC_AHB2PeriphResetCmd
 1815              		.thumb
 1816              		.thumb_func
 1818              	RCC_AHB2PeriphResetCmd:
 1819              	.LFB140:
1291:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1292:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
1293:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Forces or releases AHB2 peripheral reset.
1294:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_AHB2Periph: specifies the AHB2 peripheral to reset.
1295:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be any combination of the following values:
1296:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_DCMI:   DCMI clock
1297:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_CRYP:   CRYP clock
1298:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_HASH:   HASH clock
1299:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_RNG:    RNG clock
1300:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_OTG_FS: USB OTG FS clock
1301:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral reset.
1302:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1303:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
1304:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
1305:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_AHB2PeriphResetCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
1306:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 1820              		.loc 1 1306 0
 1821              		.cfi_startproc
 1822              		@ args = 0, pretend = 0, frame = 8
 1823              		@ frame_needed = 1, uses_anonymous_args = 0
 1824              		@ link register save eliminated.
 1825 0000 80B4     		push	{r7}
 1826              	.LCFI88:
 1827              		.cfi_def_cfa_offset 4
 1828 0002 83B0     		sub	sp, sp, #12
 1829              	.LCFI89:
 1830              		.cfi_def_cfa_offset 16
 1831 0004 00AF     		add	r7, sp, #0
 1832              		.cfi_offset 7, -4
 1833              	.LCFI90:
 1834              		.cfi_def_cfa_register 7
 1835 0006 7860     		str	r0, [r7, #4]
 1836 0008 0B46     		mov	r3, r1
 1837 000a FB70     		strb	r3, [r7, #3]
1307:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1308:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
1309:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1310:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1311:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 1838              		.loc 1 1311 0
 1839 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1840 000e 002B     		cmp	r3, #0
 1841 0010 07D0     		beq	.L119
1312:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1313:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->AHB2RSTR |= RCC_AHB2Periph;
 1842              		.loc 1 1313 0
 1843 0012 0B4B     		ldr	r3, .L121
 1844 0014 0A4A     		ldr	r2, .L121
 1845 0016 5169     		ldr	r1, [r2, #20]
 1846 0018 7A68     		ldr	r2, [r7, #4]
 1847 001a 41EA0202 		orr	r2, r1, r2
 1848 001e 5A61     		str	r2, [r3, #20]
 1849 0020 08E0     		b	.L118
 1850              	.L119:
1314:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1315:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   else
1316:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1317:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->AHB2RSTR &= ~RCC_AHB2Periph;
 1851              		.loc 1 1317 0
 1852 0022 074B     		ldr	r3, .L121
 1853 0024 064A     		ldr	r2, .L121
 1854 0026 5169     		ldr	r1, [r2, #20]
 1855 0028 7A68     		ldr	r2, [r7, #4]
 1856 002a 6FEA0202 		mvn	r2, r2
 1857 002e 01EA0202 		and	r2, r1, r2
 1858 0032 5A61     		str	r2, [r3, #20]
 1859              	.L118:
1318:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1319:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 1860              		.loc 1 1319 0
 1861 0034 07F10C07 		add	r7, r7, #12
 1862 0038 BD46     		mov	sp, r7
 1863 003a 80BC     		pop	{r7}
 1864 003c 7047     		bx	lr
 1865              	.L122:
 1866 003e 00BF     		.align	2
 1867              	.L121:
 1868 0040 00380240 		.word	1073887232
 1869              		.cfi_endproc
 1870              	.LFE140:
 1872              		.section	.text.RCC_AHB3PeriphResetCmd,"ax",%progbits
 1873              		.align	2
 1874              		.global	RCC_AHB3PeriphResetCmd
 1875              		.thumb
 1876              		.thumb_func
 1878              	RCC_AHB3PeriphResetCmd:
 1879              	.LFB141:
1320:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1321:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
1322:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Forces or releases AHB3 peripheral reset.
1323:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_AHB3Periph: specifies the AHB3 peripheral to reset.
1324:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter must be: RCC_AHB3Periph_FSMC
1325:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral reset.
1326:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1327:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
1328:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
1329:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_AHB3PeriphResetCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
1330:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 1880              		.loc 1 1330 0
 1881              		.cfi_startproc
 1882              		@ args = 0, pretend = 0, frame = 8
 1883              		@ frame_needed = 1, uses_anonymous_args = 0
 1884              		@ link register save eliminated.
 1885 0000 80B4     		push	{r7}
 1886              	.LCFI91:
 1887              		.cfi_def_cfa_offset 4
 1888 0002 83B0     		sub	sp, sp, #12
 1889              	.LCFI92:
 1890              		.cfi_def_cfa_offset 16
 1891 0004 00AF     		add	r7, sp, #0
 1892              		.cfi_offset 7, -4
 1893              	.LCFI93:
 1894              		.cfi_def_cfa_register 7
 1895 0006 7860     		str	r0, [r7, #4]
 1896 0008 0B46     		mov	r3, r1
 1897 000a FB70     		strb	r3, [r7, #3]
1331:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1332:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
1333:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1334:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1335:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 1898              		.loc 1 1335 0
 1899 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1900 000e 002B     		cmp	r3, #0
 1901 0010 07D0     		beq	.L124
1336:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1337:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->AHB3RSTR |= RCC_AHB3Periph;
 1902              		.loc 1 1337 0
 1903 0012 0B4B     		ldr	r3, .L126
 1904 0014 0A4A     		ldr	r2, .L126
 1905 0016 9169     		ldr	r1, [r2, #24]
 1906 0018 7A68     		ldr	r2, [r7, #4]
 1907 001a 41EA0202 		orr	r2, r1, r2
 1908 001e 9A61     		str	r2, [r3, #24]
 1909 0020 08E0     		b	.L123
 1910              	.L124:
1338:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1339:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   else
1340:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1341:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->AHB3RSTR &= ~RCC_AHB3Periph;
 1911              		.loc 1 1341 0
 1912 0022 074B     		ldr	r3, .L126
 1913 0024 064A     		ldr	r2, .L126
 1914 0026 9169     		ldr	r1, [r2, #24]
 1915 0028 7A68     		ldr	r2, [r7, #4]
 1916 002a 6FEA0202 		mvn	r2, r2
 1917 002e 01EA0202 		and	r2, r1, r2
 1918 0032 9A61     		str	r2, [r3, #24]
 1919              	.L123:
1342:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1343:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 1920              		.loc 1 1343 0
 1921 0034 07F10C07 		add	r7, r7, #12
 1922 0038 BD46     		mov	sp, r7
 1923 003a 80BC     		pop	{r7}
 1924 003c 7047     		bx	lr
 1925              	.L127:
 1926 003e 00BF     		.align	2
 1927              	.L126:
 1928 0040 00380240 		.word	1073887232
 1929              		.cfi_endproc
 1930              	.LFE141:
 1932              		.section	.text.RCC_APB1PeriphResetCmd,"ax",%progbits
 1933              		.align	2
 1934              		.global	RCC_APB1PeriphResetCmd
 1935              		.thumb
 1936              		.thumb_func
 1938              	RCC_APB1PeriphResetCmd:
 1939              	.LFB142:
1344:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1345:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
1346:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Forces or releases Low Speed APB (APB1) peripheral reset.
1347:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_APB1Periph: specifies the APB1 peripheral to reset.
1348:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be any combination of the following values:
1349:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM2:   TIM2 clock
1350:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM3:   TIM3 clock
1351:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM4:   TIM4 clock
1352:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM5:   TIM5 clock
1353:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM6:   TIM6 clock
1354:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM7:   TIM7 clock
1355:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM12:  TIM12 clock
1356:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM13:  TIM13 clock
1357:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM14:  TIM14 clock
1358:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_WWDG:   WWDG clock
1359:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_SPI2:   SPI2 clock
1360:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_SPI3:   SPI3 clock
1361:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_USART2: USART2 clock
1362:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_USART3: USART3 clock
1363:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_UART4:  UART4 clock
1364:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_UART5:  UART5 clock
1365:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_I2C1:   I2C1 clock
1366:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_I2C2:   I2C2 clock
1367:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_I2C3:   I2C3 clock
1368:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_CAN1:   CAN1 clock
1369:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_CAN2:   CAN2 clock
1370:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_PWR:    PWR clock
1371:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_DAC:    DAC clock
1372:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral reset.
1373:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1374:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
1375:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
1376:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
1377:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 1940              		.loc 1 1377 0
 1941              		.cfi_startproc
 1942              		@ args = 0, pretend = 0, frame = 8
 1943              		@ frame_needed = 1, uses_anonymous_args = 0
 1944              		@ link register save eliminated.
 1945 0000 80B4     		push	{r7}
 1946              	.LCFI94:
 1947              		.cfi_def_cfa_offset 4
 1948 0002 83B0     		sub	sp, sp, #12
 1949              	.LCFI95:
 1950              		.cfi_def_cfa_offset 16
 1951 0004 00AF     		add	r7, sp, #0
 1952              		.cfi_offset 7, -4
 1953              	.LCFI96:
 1954              		.cfi_def_cfa_register 7
 1955 0006 7860     		str	r0, [r7, #4]
 1956 0008 0B46     		mov	r3, r1
 1957 000a FB70     		strb	r3, [r7, #3]
1378:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1379:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
1380:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1381:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 1958              		.loc 1 1381 0
 1959 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1960 000e 002B     		cmp	r3, #0
 1961 0010 07D0     		beq	.L129
1382:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1383:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->APB1RSTR |= RCC_APB1Periph;
 1962              		.loc 1 1383 0
 1963 0012 0B4B     		ldr	r3, .L131
 1964 0014 0A4A     		ldr	r2, .L131
 1965 0016 116A     		ldr	r1, [r2, #32]
 1966 0018 7A68     		ldr	r2, [r7, #4]
 1967 001a 41EA0202 		orr	r2, r1, r2
 1968 001e 1A62     		str	r2, [r3, #32]
 1969 0020 08E0     		b	.L128
 1970              	.L129:
1384:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1385:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   else
1386:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1387:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->APB1RSTR &= ~RCC_APB1Periph;
 1971              		.loc 1 1387 0
 1972 0022 074B     		ldr	r3, .L131
 1973 0024 064A     		ldr	r2, .L131
 1974 0026 116A     		ldr	r1, [r2, #32]
 1975 0028 7A68     		ldr	r2, [r7, #4]
 1976 002a 6FEA0202 		mvn	r2, r2
 1977 002e 01EA0202 		and	r2, r1, r2
 1978 0032 1A62     		str	r2, [r3, #32]
 1979              	.L128:
1388:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1389:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 1980              		.loc 1 1389 0
 1981 0034 07F10C07 		add	r7, r7, #12
 1982 0038 BD46     		mov	sp, r7
 1983 003a 80BC     		pop	{r7}
 1984 003c 7047     		bx	lr
 1985              	.L132:
 1986 003e 00BF     		.align	2
 1987              	.L131:
 1988 0040 00380240 		.word	1073887232
 1989              		.cfi_endproc
 1990              	.LFE142:
 1992              		.section	.text.RCC_APB2PeriphResetCmd,"ax",%progbits
 1993              		.align	2
 1994              		.global	RCC_APB2PeriphResetCmd
 1995              		.thumb
 1996              		.thumb_func
 1998              	RCC_APB2PeriphResetCmd:
 1999              	.LFB143:
1390:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1391:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
1392:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Forces or releases High Speed APB (APB2) peripheral reset.
1393:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_APB2Periph: specifies the APB2 peripheral to reset.
1394:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be any combination of the following values:
1395:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM1:   TIM1 clock
1396:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM8:   TIM8 clock
1397:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_USART1: USART1 clock
1398:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_USART6: USART6 clock
1399:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_ADC1:   ADC1 clock
1400:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_ADC2:   ADC2 clock
1401:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_ADC3:   ADC3 clock
1402:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SDIO:   SDIO clock
1403:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SPI1:   SPI1 clock
1404:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SYSCFG: SYSCFG clock
1405:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM9:   TIM9 clock
1406:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM10:  TIM10 clock
1407:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM11:  TIM11 clock
1408:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral reset.
1409:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1410:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
1411:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
1412:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
1413:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 2000              		.loc 1 1413 0
 2001              		.cfi_startproc
 2002              		@ args = 0, pretend = 0, frame = 8
 2003              		@ frame_needed = 1, uses_anonymous_args = 0
 2004              		@ link register save eliminated.
 2005 0000 80B4     		push	{r7}
 2006              	.LCFI97:
 2007              		.cfi_def_cfa_offset 4
 2008 0002 83B0     		sub	sp, sp, #12
 2009              	.LCFI98:
 2010              		.cfi_def_cfa_offset 16
 2011 0004 00AF     		add	r7, sp, #0
 2012              		.cfi_offset 7, -4
 2013              	.LCFI99:
 2014              		.cfi_def_cfa_register 7
 2015 0006 7860     		str	r0, [r7, #4]
 2016 0008 0B46     		mov	r3, r1
 2017 000a FB70     		strb	r3, [r7, #3]
1414:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1415:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
1416:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1417:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 2018              		.loc 1 1417 0
 2019 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 2020 000e 002B     		cmp	r3, #0
 2021 0010 07D0     		beq	.L134
1418:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1419:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->APB2RSTR |= RCC_APB2Periph;
 2022              		.loc 1 1419 0
 2023 0012 0B4B     		ldr	r3, .L136
 2024 0014 0A4A     		ldr	r2, .L136
 2025 0016 516A     		ldr	r1, [r2, #36]
 2026 0018 7A68     		ldr	r2, [r7, #4]
 2027 001a 41EA0202 		orr	r2, r1, r2
 2028 001e 5A62     		str	r2, [r3, #36]
 2029 0020 08E0     		b	.L133
 2030              	.L134:
1420:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1421:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   else
1422:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1423:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->APB2RSTR &= ~RCC_APB2Periph;
 2031              		.loc 1 1423 0
 2032 0022 074B     		ldr	r3, .L136
 2033 0024 064A     		ldr	r2, .L136
 2034 0026 516A     		ldr	r1, [r2, #36]
 2035 0028 7A68     		ldr	r2, [r7, #4]
 2036 002a 6FEA0202 		mvn	r2, r2
 2037 002e 01EA0202 		and	r2, r1, r2
 2038 0032 5A62     		str	r2, [r3, #36]
 2039              	.L133:
1424:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1425:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 2040              		.loc 1 1425 0
 2041 0034 07F10C07 		add	r7, r7, #12
 2042 0038 BD46     		mov	sp, r7
 2043 003a 80BC     		pop	{r7}
 2044 003c 7047     		bx	lr
 2045              	.L137:
 2046 003e 00BF     		.align	2
 2047              	.L136:
 2048 0040 00380240 		.word	1073887232
 2049              		.cfi_endproc
 2050              	.LFE143:
 2052              		.section	.text.RCC_AHB1PeriphClockLPModeCmd,"ax",%progbits
 2053              		.align	2
 2054              		.global	RCC_AHB1PeriphClockLPModeCmd
 2055              		.thumb
 2056              		.thumb_func
 2058              	RCC_AHB1PeriphClockLPModeCmd:
 2059              	.LFB144:
1426:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1427:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
1428:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the AHB1 peripheral clock during Low Power (Sleep) mode.
1429:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   Peripheral clock gating in SLEEP mode can be used to further reduce
1430:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         power consumption.
1431:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   After wakeup from SLEEP mode, the peripheral clock is enabled again.
1432:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   By default, all peripheral clocks are enabled during SLEEP mode.
1433:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_AHBPeriph: specifies the AHB1 peripheral to gates its clock.
1434:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be any combination of the following values:
1435:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOA:       GPIOA clock
1436:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOB:       GPIOB clock 
1437:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOC:       GPIOC clock
1438:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOD:       GPIOD clock
1439:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOE:       GPIOE clock
1440:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOF:       GPIOF clock
1441:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOG:       GPIOG clock
1442:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOG:       GPIOG clock
1443:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOI:       GPIOI clock
1444:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_CRC:         CRC clock
1445:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_BKPSRAM:     BKPSRAM interface clock
1446:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_DMA1:        DMA1 clock
1447:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_DMA2:        DMA2 clock
1448:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_ETH_MAC:     Ethernet MAC clock
1449:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_ETH_MAC_Tx:  Ethernet Transmission clock
1450:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_ETH_MAC_Rx:  Ethernet Reception clock
1451:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_ETH_MAC_PTP: Ethernet PTP clock
1452:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_OTG_HS:      USB OTG HS clock
1453:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_OTG_HS_ULPI: USB OTG HS ULPI clock
1454:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
1455:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1456:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
1457:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
1458:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_AHB1PeriphClockLPModeCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
1459:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 2060              		.loc 1 1459 0
 2061              		.cfi_startproc
 2062              		@ args = 0, pretend = 0, frame = 8
 2063              		@ frame_needed = 1, uses_anonymous_args = 0
 2064              		@ link register save eliminated.
 2065 0000 80B4     		push	{r7}
 2066              	.LCFI100:
 2067              		.cfi_def_cfa_offset 4
 2068 0002 83B0     		sub	sp, sp, #12
 2069              	.LCFI101:
 2070              		.cfi_def_cfa_offset 16
 2071 0004 00AF     		add	r7, sp, #0
 2072              		.cfi_offset 7, -4
 2073              	.LCFI102:
 2074              		.cfi_def_cfa_register 7
 2075 0006 7860     		str	r0, [r7, #4]
 2076 0008 0B46     		mov	r3, r1
 2077 000a FB70     		strb	r3, [r7, #3]
1460:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1461:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_AHB1_LPMODE_PERIPH(RCC_AHB1Periph));
1462:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1463:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 2078              		.loc 1 1463 0
 2079 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 2080 000e 002B     		cmp	r3, #0
 2081 0010 07D0     		beq	.L139
1464:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1465:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->AHB1LPENR |= RCC_AHB1Periph;
 2082              		.loc 1 1465 0
 2083 0012 0B4B     		ldr	r3, .L141
 2084 0014 0A4A     		ldr	r2, .L141
 2085 0016 116D     		ldr	r1, [r2, #80]
 2086 0018 7A68     		ldr	r2, [r7, #4]
 2087 001a 41EA0202 		orr	r2, r1, r2
 2088 001e 1A65     		str	r2, [r3, #80]
 2089 0020 08E0     		b	.L138
 2090              	.L139:
1466:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1467:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   else
1468:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1469:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->AHB1LPENR &= ~RCC_AHB1Periph;
 2091              		.loc 1 1469 0
 2092 0022 074B     		ldr	r3, .L141
 2093 0024 064A     		ldr	r2, .L141
 2094 0026 116D     		ldr	r1, [r2, #80]
 2095 0028 7A68     		ldr	r2, [r7, #4]
 2096 002a 6FEA0202 		mvn	r2, r2
 2097 002e 01EA0202 		and	r2, r1, r2
 2098 0032 1A65     		str	r2, [r3, #80]
 2099              	.L138:
1470:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1471:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 2100              		.loc 1 1471 0
 2101 0034 07F10C07 		add	r7, r7, #12
 2102 0038 BD46     		mov	sp, r7
 2103 003a 80BC     		pop	{r7}
 2104 003c 7047     		bx	lr
 2105              	.L142:
 2106 003e 00BF     		.align	2
 2107              	.L141:
 2108 0040 00380240 		.word	1073887232
 2109              		.cfi_endproc
 2110              	.LFE144:
 2112              		.section	.text.RCC_AHB2PeriphClockLPModeCmd,"ax",%progbits
 2113              		.align	2
 2114              		.global	RCC_AHB2PeriphClockLPModeCmd
 2115              		.thumb
 2116              		.thumb_func
 2118              	RCC_AHB2PeriphClockLPModeCmd:
 2119              	.LFB145:
1472:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1473:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
1474:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the AHB2 peripheral clock during Low Power (Sleep) mode.
1475:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   Peripheral clock gating in SLEEP mode can be used to further reduce
1476:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *           power consumption.
1477:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   After wakeup from SLEEP mode, the peripheral clock is enabled again.
1478:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   By default, all peripheral clocks are enabled during SLEEP mode.
1479:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_AHBPeriph: specifies the AHB2 peripheral to gates its clock.
1480:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be any combination of the following values:
1481:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_DCMI:   DCMI clock
1482:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_CRYP:   CRYP clock
1483:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_HASH:   HASH clock
1484:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_RNG:    RNG clock
1485:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_OTG_FS: USB OTG FS clock  
1486:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
1487:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1488:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
1489:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
1490:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_AHB2PeriphClockLPModeCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
1491:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 2120              		.loc 1 1491 0
 2121              		.cfi_startproc
 2122              		@ args = 0, pretend = 0, frame = 8
 2123              		@ frame_needed = 1, uses_anonymous_args = 0
 2124              		@ link register save eliminated.
 2125 0000 80B4     		push	{r7}
 2126              	.LCFI103:
 2127              		.cfi_def_cfa_offset 4
 2128 0002 83B0     		sub	sp, sp, #12
 2129              	.LCFI104:
 2130              		.cfi_def_cfa_offset 16
 2131 0004 00AF     		add	r7, sp, #0
 2132              		.cfi_offset 7, -4
 2133              	.LCFI105:
 2134              		.cfi_def_cfa_register 7
 2135 0006 7860     		str	r0, [r7, #4]
 2136 0008 0B46     		mov	r3, r1
 2137 000a FB70     		strb	r3, [r7, #3]
1492:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1493:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
1494:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1495:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 2138              		.loc 1 1495 0
 2139 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 2140 000e 002B     		cmp	r3, #0
 2141 0010 07D0     		beq	.L144
1496:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1497:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->AHB2LPENR |= RCC_AHB2Periph;
 2142              		.loc 1 1497 0
 2143 0012 0B4B     		ldr	r3, .L146
 2144 0014 0A4A     		ldr	r2, .L146
 2145 0016 516D     		ldr	r1, [r2, #84]
 2146 0018 7A68     		ldr	r2, [r7, #4]
 2147 001a 41EA0202 		orr	r2, r1, r2
 2148 001e 5A65     		str	r2, [r3, #84]
 2149 0020 08E0     		b	.L143
 2150              	.L144:
1498:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1499:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   else
1500:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1501:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->AHB2LPENR &= ~RCC_AHB2Periph;
 2151              		.loc 1 1501 0
 2152 0022 074B     		ldr	r3, .L146
 2153 0024 064A     		ldr	r2, .L146
 2154 0026 516D     		ldr	r1, [r2, #84]
 2155 0028 7A68     		ldr	r2, [r7, #4]
 2156 002a 6FEA0202 		mvn	r2, r2
 2157 002e 01EA0202 		and	r2, r1, r2
 2158 0032 5A65     		str	r2, [r3, #84]
 2159              	.L143:
1502:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1503:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 2160              		.loc 1 1503 0
 2161 0034 07F10C07 		add	r7, r7, #12
 2162 0038 BD46     		mov	sp, r7
 2163 003a 80BC     		pop	{r7}
 2164 003c 7047     		bx	lr
 2165              	.L147:
 2166 003e 00BF     		.align	2
 2167              	.L146:
 2168 0040 00380240 		.word	1073887232
 2169              		.cfi_endproc
 2170              	.LFE145:
 2172              		.section	.text.RCC_AHB3PeriphClockLPModeCmd,"ax",%progbits
 2173              		.align	2
 2174              		.global	RCC_AHB3PeriphClockLPModeCmd
 2175              		.thumb
 2176              		.thumb_func
 2178              	RCC_AHB3PeriphClockLPModeCmd:
 2179              	.LFB146:
1504:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1505:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
1506:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the AHB3 peripheral clock during Low Power (Sleep) mode.
1507:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   Peripheral clock gating in SLEEP mode can be used to further reduce
1508:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         power consumption.
1509:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   After wakeup from SLEEP mode, the peripheral clock is enabled again.
1510:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   By default, all peripheral clocks are enabled during SLEEP mode.
1511:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_AHBPeriph: specifies the AHB3 peripheral to gates its clock.
1512:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter must be: RCC_AHB3Periph_FSMC
1513:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
1514:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1515:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
1516:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
1517:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_AHB3PeriphClockLPModeCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
1518:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 2180              		.loc 1 1518 0
 2181              		.cfi_startproc
 2182              		@ args = 0, pretend = 0, frame = 8
 2183              		@ frame_needed = 1, uses_anonymous_args = 0
 2184              		@ link register save eliminated.
 2185 0000 80B4     		push	{r7}
 2186              	.LCFI106:
 2187              		.cfi_def_cfa_offset 4
 2188 0002 83B0     		sub	sp, sp, #12
 2189              	.LCFI107:
 2190              		.cfi_def_cfa_offset 16
 2191 0004 00AF     		add	r7, sp, #0
 2192              		.cfi_offset 7, -4
 2193              	.LCFI108:
 2194              		.cfi_def_cfa_register 7
 2195 0006 7860     		str	r0, [r7, #4]
 2196 0008 0B46     		mov	r3, r1
 2197 000a FB70     		strb	r3, [r7, #3]
1519:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1520:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
1521:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1522:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 2198              		.loc 1 1522 0
 2199 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 2200 000e 002B     		cmp	r3, #0
 2201 0010 07D0     		beq	.L149
1523:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1524:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->AHB3LPENR |= RCC_AHB3Periph;
 2202              		.loc 1 1524 0
 2203 0012 0B4B     		ldr	r3, .L151
 2204 0014 0A4A     		ldr	r2, .L151
 2205 0016 916D     		ldr	r1, [r2, #88]
 2206 0018 7A68     		ldr	r2, [r7, #4]
 2207 001a 41EA0202 		orr	r2, r1, r2
 2208 001e 9A65     		str	r2, [r3, #88]
 2209 0020 08E0     		b	.L148
 2210              	.L149:
1525:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1526:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   else
1527:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1528:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->AHB3LPENR &= ~RCC_AHB3Periph;
 2211              		.loc 1 1528 0
 2212 0022 074B     		ldr	r3, .L151
 2213 0024 064A     		ldr	r2, .L151
 2214 0026 916D     		ldr	r1, [r2, #88]
 2215 0028 7A68     		ldr	r2, [r7, #4]
 2216 002a 6FEA0202 		mvn	r2, r2
 2217 002e 01EA0202 		and	r2, r1, r2
 2218 0032 9A65     		str	r2, [r3, #88]
 2219              	.L148:
1529:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1530:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 2220              		.loc 1 1530 0
 2221 0034 07F10C07 		add	r7, r7, #12
 2222 0038 BD46     		mov	sp, r7
 2223 003a 80BC     		pop	{r7}
 2224 003c 7047     		bx	lr
 2225              	.L152:
 2226 003e 00BF     		.align	2
 2227              	.L151:
 2228 0040 00380240 		.word	1073887232
 2229              		.cfi_endproc
 2230              	.LFE146:
 2232              		.section	.text.RCC_APB1PeriphClockLPModeCmd,"ax",%progbits
 2233              		.align	2
 2234              		.global	RCC_APB1PeriphClockLPModeCmd
 2235              		.thumb
 2236              		.thumb_func
 2238              	RCC_APB1PeriphClockLPModeCmd:
 2239              	.LFB147:
1531:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1532:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
1533:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the APB1 peripheral clock during Low Power (Sleep) mode.
1534:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   Peripheral clock gating in SLEEP mode can be used to further reduce
1535:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         power consumption.
1536:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   After wakeup from SLEEP mode, the peripheral clock is enabled again.
1537:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   By default, all peripheral clocks are enabled during SLEEP mode.
1538:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_APB1Periph: specifies the APB1 peripheral to gates its clock.
1539:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be any combination of the following values:
1540:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM2:   TIM2 clock
1541:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM3:   TIM3 clock
1542:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM4:   TIM4 clock
1543:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM5:   TIM5 clock
1544:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM6:   TIM6 clock
1545:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM7:   TIM7 clock
1546:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM12:  TIM12 clock
1547:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM13:  TIM13 clock
1548:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM14:  TIM14 clock
1549:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_WWDG:   WWDG clock
1550:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_SPI2:   SPI2 clock
1551:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_SPI3:   SPI3 clock
1552:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_USART2: USART2 clock
1553:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_USART3: USART3 clock
1554:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_UART4:  UART4 clock
1555:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_UART5:  UART5 clock
1556:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_I2C1:   I2C1 clock
1557:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_I2C2:   I2C2 clock
1558:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_I2C3:   I2C3 clock
1559:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_CAN1:   CAN1 clock
1560:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_CAN2:   CAN2 clock
1561:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_PWR:    PWR clock
1562:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_DAC:    DAC clock
1563:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
1564:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1565:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
1566:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
1567:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_APB1PeriphClockLPModeCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
1568:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 2240              		.loc 1 1568 0
 2241              		.cfi_startproc
 2242              		@ args = 0, pretend = 0, frame = 8
 2243              		@ frame_needed = 1, uses_anonymous_args = 0
 2244              		@ link register save eliminated.
 2245 0000 80B4     		push	{r7}
 2246              	.LCFI109:
 2247              		.cfi_def_cfa_offset 4
 2248 0002 83B0     		sub	sp, sp, #12
 2249              	.LCFI110:
 2250              		.cfi_def_cfa_offset 16
 2251 0004 00AF     		add	r7, sp, #0
 2252              		.cfi_offset 7, -4
 2253              	.LCFI111:
 2254              		.cfi_def_cfa_register 7
 2255 0006 7860     		str	r0, [r7, #4]
 2256 0008 0B46     		mov	r3, r1
 2257 000a FB70     		strb	r3, [r7, #3]
1569:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1570:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
1571:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1572:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 2258              		.loc 1 1572 0
 2259 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 2260 000e 002B     		cmp	r3, #0
 2261 0010 07D0     		beq	.L154
1573:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1574:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->APB1LPENR |= RCC_APB1Periph;
 2262              		.loc 1 1574 0
 2263 0012 0B4B     		ldr	r3, .L156
 2264 0014 0A4A     		ldr	r2, .L156
 2265 0016 116E     		ldr	r1, [r2, #96]
 2266 0018 7A68     		ldr	r2, [r7, #4]
 2267 001a 41EA0202 		orr	r2, r1, r2
 2268 001e 1A66     		str	r2, [r3, #96]
 2269 0020 08E0     		b	.L153
 2270              	.L154:
1575:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1576:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   else
1577:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1578:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->APB1LPENR &= ~RCC_APB1Periph;
 2271              		.loc 1 1578 0
 2272 0022 074B     		ldr	r3, .L156
 2273 0024 064A     		ldr	r2, .L156
 2274 0026 116E     		ldr	r1, [r2, #96]
 2275 0028 7A68     		ldr	r2, [r7, #4]
 2276 002a 6FEA0202 		mvn	r2, r2
 2277 002e 01EA0202 		and	r2, r1, r2
 2278 0032 1A66     		str	r2, [r3, #96]
 2279              	.L153:
1579:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1580:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 2280              		.loc 1 1580 0
 2281 0034 07F10C07 		add	r7, r7, #12
 2282 0038 BD46     		mov	sp, r7
 2283 003a 80BC     		pop	{r7}
 2284 003c 7047     		bx	lr
 2285              	.L157:
 2286 003e 00BF     		.align	2
 2287              	.L156:
 2288 0040 00380240 		.word	1073887232
 2289              		.cfi_endproc
 2290              	.LFE147:
 2292              		.section	.text.RCC_APB2PeriphClockLPModeCmd,"ax",%progbits
 2293              		.align	2
 2294              		.global	RCC_APB2PeriphClockLPModeCmd
 2295              		.thumb
 2296              		.thumb_func
 2298              	RCC_APB2PeriphClockLPModeCmd:
 2299              	.LFB148:
1581:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1582:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
1583:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the APB2 peripheral clock during Low Power (Sleep) mode.
1584:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   Peripheral clock gating in SLEEP mode can be used to further reduce
1585:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         power consumption.
1586:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   After wakeup from SLEEP mode, the peripheral clock is enabled again.
1587:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   By default, all peripheral clocks are enabled during SLEEP mode.
1588:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_APB2Periph: specifies the APB2 peripheral to gates its clock.
1589:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be any combination of the following values:
1590:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM1:   TIM1 clock
1591:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM8:   TIM8 clock
1592:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_USART1: USART1 clock
1593:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_USART6: USART6 clock
1594:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_ADC1:   ADC1 clock
1595:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_ADC2:   ADC2 clock
1596:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_ADC3:   ADC3 clock
1597:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SDIO:   SDIO clock
1598:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SPI1:   SPI1 clock
1599:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SYSCFG: SYSCFG clock
1600:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM9:   TIM9 clock
1601:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM10:  TIM10 clock
1602:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM11:  TIM11 clock
1603:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
1604:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1605:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
1606:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
1607:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_APB2PeriphClockLPModeCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
1608:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 2300              		.loc 1 1608 0
 2301              		.cfi_startproc
 2302              		@ args = 0, pretend = 0, frame = 8
 2303              		@ frame_needed = 1, uses_anonymous_args = 0
 2304              		@ link register save eliminated.
 2305 0000 80B4     		push	{r7}
 2306              	.LCFI112:
 2307              		.cfi_def_cfa_offset 4
 2308 0002 83B0     		sub	sp, sp, #12
 2309              	.LCFI113:
 2310              		.cfi_def_cfa_offset 16
 2311 0004 00AF     		add	r7, sp, #0
 2312              		.cfi_offset 7, -4
 2313              	.LCFI114:
 2314              		.cfi_def_cfa_register 7
 2315 0006 7860     		str	r0, [r7, #4]
 2316 0008 0B46     		mov	r3, r1
 2317 000a FB70     		strb	r3, [r7, #3]
1609:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1610:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
1611:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1612:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 2318              		.loc 1 1612 0
 2319 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 2320 000e 002B     		cmp	r3, #0
 2321 0010 07D0     		beq	.L159
1613:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1614:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->APB2LPENR |= RCC_APB2Periph;
 2322              		.loc 1 1614 0
 2323 0012 0B4B     		ldr	r3, .L161
 2324 0014 0A4A     		ldr	r2, .L161
 2325 0016 516E     		ldr	r1, [r2, #100]
 2326 0018 7A68     		ldr	r2, [r7, #4]
 2327 001a 41EA0202 		orr	r2, r1, r2
 2328 001e 5A66     		str	r2, [r3, #100]
 2329 0020 08E0     		b	.L158
 2330              	.L159:
1615:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1616:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   else
1617:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1618:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->APB2LPENR &= ~RCC_APB2Periph;
 2331              		.loc 1 1618 0
 2332 0022 074B     		ldr	r3, .L161
 2333 0024 064A     		ldr	r2, .L161
 2334 0026 516E     		ldr	r1, [r2, #100]
 2335 0028 7A68     		ldr	r2, [r7, #4]
 2336 002a 6FEA0202 		mvn	r2, r2
 2337 002e 01EA0202 		and	r2, r1, r2
 2338 0032 5A66     		str	r2, [r3, #100]
 2339              	.L158:
1619:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1620:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 2340              		.loc 1 1620 0
 2341 0034 07F10C07 		add	r7, r7, #12
 2342 0038 BD46     		mov	sp, r7
 2343 003a 80BC     		pop	{r7}
 2344 003c 7047     		bx	lr
 2345              	.L162:
 2346 003e 00BF     		.align	2
 2347              	.L161:
 2348 0040 00380240 		.word	1073887232
 2349              		.cfi_endproc
 2350              	.LFE148:
 2352              		.section	.text.RCC_ITConfig,"ax",%progbits
 2353              		.align	2
 2354              		.global	RCC_ITConfig
 2355              		.thumb
 2356              		.thumb_func
 2358              	RCC_ITConfig:
 2359              	.LFB149:
1621:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1622:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
1623:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @}
1624:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
1625:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1626:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /** @defgroup RCC_Group4 Interrupts and flags management functions
1627:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  *  @brief   Interrupts and flags management functions 
1628:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  *
1629:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** @verbatim   
1630:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  ===============================================================================
1631:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****                    Interrupts and flags management functions
1632:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  ===============================================================================  
1633:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1634:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** @endverbatim
1635:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @{
1636:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
1637:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1638:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
1639:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the specified RCC interrupts.
1640:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_IT: specifies the RCC interrupt sources to be enabled or disabled.
1641:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be any combination of the following values:
1642:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_LSIRDY: LSI ready interrupt
1643:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_LSERDY: LSE ready interrupt
1644:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_HSIRDY: HSI ready interrupt
1645:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_HSERDY: HSE ready interrupt
1646:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_PLLRDY: main PLL ready interrupt
1647:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_PLLI2SRDY: PLLI2S ready interrupt  
1648:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified RCC interrupts.
1649:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1650:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
1651:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
1652:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_ITConfig(uint8_t RCC_IT, FunctionalState NewState)
1653:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 2360              		.loc 1 1653 0
 2361              		.cfi_startproc
 2362              		@ args = 0, pretend = 0, frame = 8
 2363              		@ frame_needed = 1, uses_anonymous_args = 0
 2364              		@ link register save eliminated.
 2365 0000 80B4     		push	{r7}
 2366              	.LCFI115:
 2367              		.cfi_def_cfa_offset 4
 2368 0002 83B0     		sub	sp, sp, #12
 2369              	.LCFI116:
 2370              		.cfi_def_cfa_offset 16
 2371 0004 00AF     		add	r7, sp, #0
 2372              		.cfi_offset 7, -4
 2373              	.LCFI117:
 2374              		.cfi_def_cfa_register 7
 2375 0006 0246     		mov	r2, r0
 2376 0008 0B46     		mov	r3, r1
 2377 000a FA71     		strb	r2, [r7, #7]
 2378 000c BB71     		strb	r3, [r7, #6]
1654:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1655:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_IT(RCC_IT));
1656:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1657:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 2379              		.loc 1 1657 0
 2380 000e BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 2381 0010 002B     		cmp	r3, #0
 2382 0012 09D0     		beq	.L164
1658:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1659:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     /* Perform Byte access to RCC_CIR[14:8] bits to enable the selected interrupts */
1660:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
 2383              		.loc 1 1660 0
 2384 0014 0D4B     		ldr	r3, .L166
 2385 0016 0D4A     		ldr	r2, .L166
 2386 0018 1278     		ldrb	r2, [r2, #0]
 2387 001a D1B2     		uxtb	r1, r2
 2388 001c FA79     		ldrb	r2, [r7, #7]
 2389 001e 41EA0202 		orr	r2, r1, r2
 2390 0022 D2B2     		uxtb	r2, r2
 2391 0024 1A70     		strb	r2, [r3, #0]
 2392 0026 0BE0     		b	.L163
 2393              	.L164:
1661:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1662:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   else
1663:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1664:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     /* Perform Byte access to RCC_CIR[14:8] bits to disable the selected interrupts */
1665:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     *(__IO uint8_t *) CIR_BYTE2_ADDRESS &= (uint8_t)~RCC_IT;
 2394              		.loc 1 1665 0
 2395 0028 084B     		ldr	r3, .L166
 2396 002a 084A     		ldr	r2, .L166
 2397 002c 1278     		ldrb	r2, [r2, #0]
 2398 002e D1B2     		uxtb	r1, r2
 2399 0030 FA79     		ldrb	r2, [r7, #7]
 2400 0032 6FEA0202 		mvn	r2, r2
 2401 0036 D2B2     		uxtb	r2, r2
 2402 0038 01EA0202 		and	r2, r1, r2
 2403 003c D2B2     		uxtb	r2, r2
 2404 003e 1A70     		strb	r2, [r3, #0]
 2405              	.L163:
1666:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1667:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 2406              		.loc 1 1667 0
 2407 0040 07F10C07 		add	r7, r7, #12
 2408 0044 BD46     		mov	sp, r7
 2409 0046 80BC     		pop	{r7}
 2410 0048 7047     		bx	lr
 2411              	.L167:
 2412 004a 00BF     		.align	2
 2413              	.L166:
 2414 004c 0D380240 		.word	1073887245
 2415              		.cfi_endproc
 2416              	.LFE149:
 2418              		.section	.text.RCC_GetFlagStatus,"ax",%progbits
 2419              		.align	2
 2420              		.global	RCC_GetFlagStatus
 2421              		.thumb
 2422              		.thumb_func
 2424              	RCC_GetFlagStatus:
 2425              	.LFB150:
1668:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1669:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
1670:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Checks whether the specified RCC flag is set or not.
1671:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_FLAG: specifies the flag to check.
1672:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
1673:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_FLAG_HSIRDY: HSI oscillator clock ready
1674:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_FLAG_HSERDY: HSE oscillator clock ready
1675:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_FLAG_PLLRDY: main PLL clock ready
1676:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_FLAG_PLLI2SRDY: PLLI2S clock ready
1677:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_FLAG_LSERDY: LSE oscillator clock ready
1678:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_FLAG_LSIRDY: LSI oscillator clock ready
1679:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_FLAG_BORRST: POR/PDR or BOR reset
1680:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_FLAG_PINRST: Pin reset
1681:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_FLAG_PORRST: POR/PDR reset
1682:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_FLAG_SFTRST: Software reset
1683:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_FLAG_IWDGRST: Independent Watchdog reset
1684:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_FLAG_WWDGRST: Window Watchdog reset
1685:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_FLAG_LPWRRST: Low Power reset
1686:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval The new state of RCC_FLAG (SET or RESET).
1687:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
1688:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** FlagStatus RCC_GetFlagStatus(uint8_t RCC_FLAG)
1689:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 2426              		.loc 1 1689 0
 2427              		.cfi_startproc
 2428              		@ args = 0, pretend = 0, frame = 24
 2429              		@ frame_needed = 1, uses_anonymous_args = 0
 2430              		@ link register save eliminated.
 2431 0000 80B4     		push	{r7}
 2432              	.LCFI118:
 2433              		.cfi_def_cfa_offset 4
 2434 0002 87B0     		sub	sp, sp, #28
 2435              	.LCFI119:
 2436              		.cfi_def_cfa_offset 32
 2437 0004 00AF     		add	r7, sp, #0
 2438              		.cfi_offset 7, -4
 2439              	.LCFI120:
 2440              		.cfi_def_cfa_register 7
 2441 0006 0346     		mov	r3, r0
 2442 0008 FB71     		strb	r3, [r7, #7]
1690:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   uint32_t tmp = 0;
 2443              		.loc 1 1690 0
 2444 000a 4FF00003 		mov	r3, #0
 2445 000e FB60     		str	r3, [r7, #12]
1691:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   uint32_t statusreg = 0;
 2446              		.loc 1 1691 0
 2447 0010 4FF00003 		mov	r3, #0
 2448 0014 7B61     		str	r3, [r7, #20]
1692:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   FlagStatus bitstatus = RESET;
 2449              		.loc 1 1692 0
 2450 0016 4FF00003 		mov	r3, #0
 2451 001a FB74     		strb	r3, [r7, #19]
1693:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1694:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1695:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_FLAG(RCC_FLAG));
1696:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1697:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Get the RCC register index */
1698:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmp = RCC_FLAG >> 5;
 2452              		.loc 1 1698 0
 2453 001c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 2454 001e 4FEA5313 		lsr	r3, r3, #5
 2455 0022 DBB2     		uxtb	r3, r3
 2456 0024 FB60     		str	r3, [r7, #12]
1699:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   if (tmp == 1)               /* The flag to check is in CR register */
 2457              		.loc 1 1699 0
 2458 0026 FB68     		ldr	r3, [r7, #12]
 2459 0028 012B     		cmp	r3, #1
 2460 002a 03D1     		bne	.L169
1700:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1701:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     statusreg = RCC->CR;
 2461              		.loc 1 1701 0
 2462 002c 144B     		ldr	r3, .L174
 2463 002e 1B68     		ldr	r3, [r3, #0]
 2464 0030 7B61     		str	r3, [r7, #20]
 2465 0032 09E0     		b	.L170
 2466              	.L169:
1702:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1703:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   else if (tmp == 2)          /* The flag to check is in BDCR register */
 2467              		.loc 1 1703 0
 2468 0034 FB68     		ldr	r3, [r7, #12]
 2469 0036 022B     		cmp	r3, #2
 2470 0038 03D1     		bne	.L171
1704:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1705:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     statusreg = RCC->BDCR;
 2471              		.loc 1 1705 0
 2472 003a 114B     		ldr	r3, .L174
 2473 003c 1B6F     		ldr	r3, [r3, #112]
 2474 003e 7B61     		str	r3, [r7, #20]
 2475 0040 02E0     		b	.L170
 2476              	.L171:
1706:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1707:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   else                       /* The flag to check is in CSR register */
1708:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1709:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     statusreg = RCC->CSR;
 2477              		.loc 1 1709 0
 2478 0042 0F4B     		ldr	r3, .L174
 2479 0044 5B6F     		ldr	r3, [r3, #116]
 2480 0046 7B61     		str	r3, [r7, #20]
 2481              	.L170:
1710:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1711:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1712:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Get the flag position */
1713:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmp = RCC_FLAG & FLAG_MASK;
 2482              		.loc 1 1713 0
 2483 0048 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 2484 004a 03F01F03 		and	r3, r3, #31
 2485 004e FB60     		str	r3, [r7, #12]
1714:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 2486              		.loc 1 1714 0
 2487 0050 FB68     		ldr	r3, [r7, #12]
 2488 0052 7A69     		ldr	r2, [r7, #20]
 2489 0054 22FA03F3 		lsr	r3, r2, r3
 2490 0058 03F00103 		and	r3, r3, #1
 2491 005c DBB2     		uxtb	r3, r3
 2492 005e 002B     		cmp	r3, #0
 2493 0060 03D0     		beq	.L172
1715:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1716:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     bitstatus = SET;
 2494              		.loc 1 1716 0
 2495 0062 4FF00103 		mov	r3, #1
 2496 0066 FB74     		strb	r3, [r7, #19]
 2497 0068 02E0     		b	.L173
 2498              	.L172:
1717:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1718:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   else
1719:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1720:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     bitstatus = RESET;
 2499              		.loc 1 1720 0
 2500 006a 4FF00003 		mov	r3, #0
 2501 006e FB74     		strb	r3, [r7, #19]
 2502              	.L173:
1721:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1722:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Return the flag status */
1723:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   return bitstatus;
 2503              		.loc 1 1723 0
 2504 0070 FB7C     		ldrb	r3, [r7, #19]	@ zero_extendqisi2
1724:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 2505              		.loc 1 1724 0
 2506 0072 1846     		mov	r0, r3
 2507 0074 07F11C07 		add	r7, r7, #28
 2508 0078 BD46     		mov	sp, r7
 2509 007a 80BC     		pop	{r7}
 2510 007c 7047     		bx	lr
 2511              	.L175:
 2512 007e 00BF     		.align	2
 2513              	.L174:
 2514 0080 00380240 		.word	1073887232
 2515              		.cfi_endproc
 2516              	.LFE150:
 2518              		.section	.text.RCC_ClearFlag,"ax",%progbits
 2519              		.align	2
 2520              		.global	RCC_ClearFlag
 2521              		.thumb
 2522              		.thumb_func
 2524              	RCC_ClearFlag:
 2525              	.LFB151:
1725:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1726:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
1727:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Clears the RCC reset flags.
1728:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         The reset flags are: RCC_FLAG_PINRST, RCC_FLAG_PORRST,  RCC_FLAG_SFTRST,
1729:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         RCC_FLAG_IWDGRST, RCC_FLAG_WWDGRST, RCC_FLAG_LPWRRST
1730:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  None
1731:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
1732:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
1733:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_ClearFlag(void)
1734:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 2526              		.loc 1 1734 0
 2527              		.cfi_startproc
 2528              		@ args = 0, pretend = 0, frame = 0
 2529              		@ frame_needed = 1, uses_anonymous_args = 0
 2530              		@ link register save eliminated.
 2531 0000 80B4     		push	{r7}
 2532              	.LCFI121:
 2533              		.cfi_def_cfa_offset 4
 2534 0002 00AF     		add	r7, sp, #0
 2535              		.cfi_offset 7, -4
 2536              	.LCFI122:
 2537              		.cfi_def_cfa_register 7
1735:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Set RMVF bit to clear the reset flags */
1736:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   RCC->CSR |= RCC_CSR_RMVF;
 2538              		.loc 1 1736 0
 2539 0004 044B     		ldr	r3, .L177
 2540 0006 044A     		ldr	r2, .L177
 2541 0008 526F     		ldr	r2, [r2, #116]
 2542 000a 42F08072 		orr	r2, r2, #16777216
 2543 000e 5A67     		str	r2, [r3, #116]
1737:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 2544              		.loc 1 1737 0
 2545 0010 BD46     		mov	sp, r7
 2546 0012 80BC     		pop	{r7}
 2547 0014 7047     		bx	lr
 2548              	.L178:
 2549 0016 00BF     		.align	2
 2550              	.L177:
 2551 0018 00380240 		.word	1073887232
 2552              		.cfi_endproc
 2553              	.LFE151:
 2555              		.section	.text.RCC_GetITStatus,"ax",%progbits
 2556              		.align	2
 2557              		.global	RCC_GetITStatus
 2558              		.thumb
 2559              		.thumb_func
 2561              	RCC_GetITStatus:
 2562              	.LFB152:
1738:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1739:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
1740:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Checks whether the specified RCC interrupt has occurred or not.
1741:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_IT: specifies the RCC interrupt source to check.
1742:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
1743:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_LSIRDY: LSI ready interrupt
1744:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_LSERDY: LSE ready interrupt
1745:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_HSIRDY: HSI ready interrupt
1746:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_HSERDY: HSE ready interrupt
1747:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_PLLRDY: main PLL ready interrupt
1748:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_PLLI2SRDY: PLLI2S ready interrupt  
1749:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_CSS: Clock Security System interrupt
1750:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval The new state of RCC_IT (SET or RESET).
1751:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
1752:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** ITStatus RCC_GetITStatus(uint8_t RCC_IT)
1753:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 2563              		.loc 1 1753 0
 2564              		.cfi_startproc
 2565              		@ args = 0, pretend = 0, frame = 16
 2566              		@ frame_needed = 1, uses_anonymous_args = 0
 2567              		@ link register save eliminated.
 2568 0000 80B4     		push	{r7}
 2569              	.LCFI123:
 2570              		.cfi_def_cfa_offset 4
 2571 0002 85B0     		sub	sp, sp, #20
 2572              	.LCFI124:
 2573              		.cfi_def_cfa_offset 24
 2574 0004 00AF     		add	r7, sp, #0
 2575              		.cfi_offset 7, -4
 2576              	.LCFI125:
 2577              		.cfi_def_cfa_register 7
 2578 0006 0346     		mov	r3, r0
 2579 0008 FB71     		strb	r3, [r7, #7]
1754:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   ITStatus bitstatus = RESET;
 2580              		.loc 1 1754 0
 2581 000a 4FF00003 		mov	r3, #0
 2582 000e FB73     		strb	r3, [r7, #15]
1755:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1756:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1757:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_GET_IT(RCC_IT));
1758:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1759:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the status of the specified RCC interrupt */
1760:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   if ((RCC->CIR & RCC_IT) != (uint32_t)RESET)
 2583              		.loc 1 1760 0
 2584 0010 0A4B     		ldr	r3, .L182
 2585 0012 DA68     		ldr	r2, [r3, #12]
 2586 0014 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 2587 0016 02EA0303 		and	r3, r2, r3
 2588 001a 002B     		cmp	r3, #0
 2589 001c 03D0     		beq	.L180
1761:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1762:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     bitstatus = SET;
 2590              		.loc 1 1762 0
 2591 001e 4FF00103 		mov	r3, #1
 2592 0022 FB73     		strb	r3, [r7, #15]
 2593 0024 02E0     		b	.L181
 2594              	.L180:
1763:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1764:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   else
1765:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1766:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     bitstatus = RESET;
 2595              		.loc 1 1766 0
 2596 0026 4FF00003 		mov	r3, #0
 2597 002a FB73     		strb	r3, [r7, #15]
 2598              	.L181:
1767:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1768:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Return the RCC_IT status */
1769:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   return  bitstatus;
 2599              		.loc 1 1769 0
 2600 002c FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
1770:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 2601              		.loc 1 1770 0
 2602 002e 1846     		mov	r0, r3
 2603 0030 07F11407 		add	r7, r7, #20
 2604 0034 BD46     		mov	sp, r7
 2605 0036 80BC     		pop	{r7}
 2606 0038 7047     		bx	lr
 2607              	.L183:
 2608 003a 00BF     		.align	2
 2609              	.L182:
 2610 003c 00380240 		.word	1073887232
 2611              		.cfi_endproc
 2612              	.LFE152:
 2614              		.section	.text.RCC_ClearITPendingBit,"ax",%progbits
 2615              		.align	2
 2616              		.global	RCC_ClearITPendingBit
 2617              		.thumb
 2618              		.thumb_func
 2620              	RCC_ClearITPendingBit:
 2621              	.LFB153:
1771:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1772:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
1773:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Clears the RCC's interrupt pending bits.
1774:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_IT: specifies the interrupt pending bit to clear.
1775:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be any combination of the following values:
1776:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_LSIRDY: LSI ready interrupt
1777:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_LSERDY: LSE ready interrupt
1778:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_HSIRDY: HSI ready interrupt
1779:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_HSERDY: HSE ready interrupt
1780:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_PLLRDY: main PLL ready interrupt
1781:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_PLLI2SRDY: PLLI2S ready interrupt  
1782:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_CSS: Clock Security System interrupt
1783:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
1784:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
1785:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_ClearITPendingBit(uint8_t RCC_IT)
1786:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 2622              		.loc 1 1786 0
 2623              		.cfi_startproc
 2624              		@ args = 0, pretend = 0, frame = 8
 2625              		@ frame_needed = 1, uses_anonymous_args = 0
 2626              		@ link register save eliminated.
 2627 0000 80B4     		push	{r7}
 2628              	.LCFI126:
 2629              		.cfi_def_cfa_offset 4
 2630 0002 83B0     		sub	sp, sp, #12
 2631              	.LCFI127:
 2632              		.cfi_def_cfa_offset 16
 2633 0004 00AF     		add	r7, sp, #0
 2634              		.cfi_offset 7, -4
 2635              	.LCFI128:
 2636              		.cfi_def_cfa_register 7
 2637 0006 0346     		mov	r3, r0
 2638 0008 FB71     		strb	r3, [r7, #7]
1787:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1788:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_CLEAR_IT(RCC_IT));
1789:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1790:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Perform Byte access to RCC_CIR[23:16] bits to clear the selected interrupt
1791:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****      pending bits */
1792:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *(__IO uint8_t *) CIR_BYTE3_ADDRESS = RCC_IT;
 2639              		.loc 1 1792 0
 2640 000a 044B     		ldr	r3, .L185
 2641 000c FA79     		ldrb	r2, [r7, #7]
 2642 000e 1A70     		strb	r2, [r3, #0]
1793:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 2643              		.loc 1 1793 0
 2644 0010 07F10C07 		add	r7, r7, #12
 2645 0014 BD46     		mov	sp, r7
 2646 0016 80BC     		pop	{r7}
 2647 0018 7047     		bx	lr
 2648              	.L186:
 2649 001a 00BF     		.align	2
 2650              	.L185:
 2651 001c 0E380240 		.word	1073887246
 2652              		.cfi_endproc
 2653              	.LFE153:
 2655              		.text
 2656              	.Letext0:
DEFINED SYMBOLS
                            *ABS*:00000000 stm32f4xx_rcc.c
     /tmp/cckiOkGg.s:25     .data.APBAHBPrescTable:00000000 $d
     /tmp/cckiOkGg.s:28     .data.APBAHBPrescTable:00000000 APBAHBPrescTable
     /tmp/cckiOkGg.s:46     .text.RCC_DeInit:00000000 $t
     /tmp/cckiOkGg.s:51     .text.RCC_DeInit:00000000 RCC_DeInit
     /tmp/cckiOkGg.s:104    .text.RCC_DeInit:00000048 $d
     /tmp/cckiOkGg.s:110    .text.RCC_HSEConfig:00000000 $t
     /tmp/cckiOkGg.s:115    .text.RCC_HSEConfig:00000000 RCC_HSEConfig
     /tmp/cckiOkGg.s:150    .text.RCC_HSEConfig:00000024 $d
     /tmp/cckiOkGg.s:155    .text.RCC_WaitForHSEStartUp:00000000 $t
     /tmp/cckiOkGg.s:160    .text.RCC_WaitForHSEStartUp:00000000 RCC_WaitForHSEStartUp
     /tmp/cckiOkGg.s:2424   .text.RCC_GetFlagStatus:00000000 RCC_GetFlagStatus
     /tmp/cckiOkGg.s:230    .text.RCC_AdjustHSICalibrationValue:00000000 $t
     /tmp/cckiOkGg.s:235    .text.RCC_AdjustHSICalibrationValue:00000000 RCC_AdjustHSICalibrationValue
     /tmp/cckiOkGg.s:283    .text.RCC_AdjustHSICalibrationValue:0000003c $d
     /tmp/cckiOkGg.s:288    .text.RCC_HSICmd:00000000 $t
     /tmp/cckiOkGg.s:293    .text.RCC_HSICmd:00000000 RCC_HSICmd
     /tmp/cckiOkGg.s:324    .text.RCC_HSICmd:0000001c $d
     /tmp/cckiOkGg.s:329    .text.RCC_LSEConfig:00000000 $t
     /tmp/cckiOkGg.s:334    .text.RCC_LSEConfig:00000000 RCC_LSEConfig
     /tmp/cckiOkGg.s:392    .text.RCC_LSEConfig:00000044 $d
     /tmp/cckiOkGg.s:397    .text.RCC_LSICmd:00000000 $t
     /tmp/cckiOkGg.s:402    .text.RCC_LSICmd:00000000 RCC_LSICmd
     /tmp/cckiOkGg.s:433    .text.RCC_LSICmd:0000001c $d
     /tmp/cckiOkGg.s:438    .text.RCC_PLLConfig:00000000 $t
     /tmp/cckiOkGg.s:443    .text.RCC_PLLConfig:00000000 RCC_PLLConfig
     /tmp/cckiOkGg.s:491    .text.RCC_PLLConfig:00000044 $d
     /tmp/cckiOkGg.s:496    .text.RCC_PLLCmd:00000000 $t
     /tmp/cckiOkGg.s:501    .text.RCC_PLLCmd:00000000 RCC_PLLCmd
     /tmp/cckiOkGg.s:532    .text.RCC_PLLCmd:0000001c $d
     /tmp/cckiOkGg.s:537    .text.RCC_PLLI2SConfig:00000000 $t
     /tmp/cckiOkGg.s:542    .text.RCC_PLLI2SConfig:00000000 RCC_PLLI2SConfig
     /tmp/cckiOkGg.s:577    .text.RCC_PLLI2SConfig:0000002c $d
     /tmp/cckiOkGg.s:582    .text.RCC_PLLI2SCmd:00000000 $t
     /tmp/cckiOkGg.s:587    .text.RCC_PLLI2SCmd:00000000 RCC_PLLI2SCmd
     /tmp/cckiOkGg.s:618    .text.RCC_PLLI2SCmd:0000001c $d
     /tmp/cckiOkGg.s:623    .text.RCC_ClockSecuritySystemCmd:00000000 $t
     /tmp/cckiOkGg.s:628    .text.RCC_ClockSecuritySystemCmd:00000000 RCC_ClockSecuritySystemCmd
     /tmp/cckiOkGg.s:659    .text.RCC_ClockSecuritySystemCmd:0000001c $d
     /tmp/cckiOkGg.s:664    .text.RCC_MCO1Config:00000000 $t
     /tmp/cckiOkGg.s:669    .text.RCC_MCO1Config:00000000 RCC_MCO1Config
     /tmp/cckiOkGg.s:718    .text.RCC_MCO1Config:00000040 $d
     /tmp/cckiOkGg.s:723    .text.RCC_MCO2Config:00000000 $t
     /tmp/cckiOkGg.s:728    .text.RCC_MCO2Config:00000000 RCC_MCO2Config
     /tmp/cckiOkGg.s:777    .text.RCC_MCO2Config:00000040 $d
     /tmp/cckiOkGg.s:782    .text.RCC_SYSCLKConfig:00000000 $t
     /tmp/cckiOkGg.s:787    .text.RCC_SYSCLKConfig:00000000 RCC_SYSCLKConfig
     /tmp/cckiOkGg.s:833    .text.RCC_SYSCLKConfig:00000038 $d
     /tmp/cckiOkGg.s:838    .text.RCC_GetSYSCLKSource:00000000 $t
     /tmp/cckiOkGg.s:843    .text.RCC_GetSYSCLKSource:00000000 RCC_GetSYSCLKSource
     /tmp/cckiOkGg.s:871    .text.RCC_GetSYSCLKSource:00000018 $d
     /tmp/cckiOkGg.s:876    .text.RCC_HCLKConfig:00000000 $t
     /tmp/cckiOkGg.s:881    .text.RCC_HCLKConfig:00000000 RCC_HCLKConfig
     /tmp/cckiOkGg.s:927    .text.RCC_HCLKConfig:00000038 $d
     /tmp/cckiOkGg.s:932    .text.RCC_PCLK1Config:00000000 $t
     /tmp/cckiOkGg.s:937    .text.RCC_PCLK1Config:00000000 RCC_PCLK1Config
     /tmp/cckiOkGg.s:983    .text.RCC_PCLK1Config:00000038 $d
     /tmp/cckiOkGg.s:988    .text.RCC_PCLK2Config:00000000 $t
     /tmp/cckiOkGg.s:993    .text.RCC_PCLK2Config:00000000 RCC_PCLK2Config
     /tmp/cckiOkGg.s:1040   .text.RCC_PCLK2Config:0000003c $d
     /tmp/cckiOkGg.s:1045   .text.RCC_GetClocksFreq:00000000 $t
     /tmp/cckiOkGg.s:1050   .text.RCC_GetClocksFreq:00000000 RCC_GetClocksFreq
     /tmp/cckiOkGg.s:1250   .text.RCC_GetClocksFreq:0000016c $d
     /tmp/cckiOkGg.s:1258   .text.RCC_RTCCLKConfig:00000000 $t
     /tmp/cckiOkGg.s:1263   .text.RCC_RTCCLKConfig:00000000 RCC_RTCCLKConfig
     /tmp/cckiOkGg.s:1326   .text.RCC_RTCCLKConfig:00000060 $d
     /tmp/cckiOkGg.s:1331   .text.RCC_RTCCLKCmd:00000000 $t
     /tmp/cckiOkGg.s:1336   .text.RCC_RTCCLKCmd:00000000 RCC_RTCCLKCmd
     /tmp/cckiOkGg.s:1367   .text.RCC_RTCCLKCmd:0000001c $d
     /tmp/cckiOkGg.s:1372   .text.RCC_BackupResetCmd:00000000 $t
     /tmp/cckiOkGg.s:1377   .text.RCC_BackupResetCmd:00000000 RCC_BackupResetCmd
     /tmp/cckiOkGg.s:1408   .text.RCC_BackupResetCmd:0000001c $d
     /tmp/cckiOkGg.s:1413   .text.RCC_I2SCLKConfig:00000000 $t
     /tmp/cckiOkGg.s:1418   .text.RCC_I2SCLKConfig:00000000 RCC_I2SCLKConfig
     /tmp/cckiOkGg.s:1448   .text.RCC_I2SCLKConfig:00000018 $d
     /tmp/cckiOkGg.s:1453   .text.RCC_AHB1PeriphClockCmd:00000000 $t
     /tmp/cckiOkGg.s:1458   .text.RCC_AHB1PeriphClockCmd:00000000 RCC_AHB1PeriphClockCmd
     /tmp/cckiOkGg.s:1508   .text.RCC_AHB1PeriphClockCmd:00000040 $d
     /tmp/cckiOkGg.s:1513   .text.RCC_AHB2PeriphClockCmd:00000000 $t
     /tmp/cckiOkGg.s:1518   .text.RCC_AHB2PeriphClockCmd:00000000 RCC_AHB2PeriphClockCmd
     /tmp/cckiOkGg.s:1568   .text.RCC_AHB2PeriphClockCmd:00000040 $d
     /tmp/cckiOkGg.s:1573   .text.RCC_AHB3PeriphClockCmd:00000000 $t
     /tmp/cckiOkGg.s:1578   .text.RCC_AHB3PeriphClockCmd:00000000 RCC_AHB3PeriphClockCmd
     /tmp/cckiOkGg.s:1628   .text.RCC_AHB3PeriphClockCmd:00000040 $d
     /tmp/cckiOkGg.s:1633   .text.RCC_APB1PeriphClockCmd:00000000 $t
     /tmp/cckiOkGg.s:1638   .text.RCC_APB1PeriphClockCmd:00000000 RCC_APB1PeriphClockCmd
     /tmp/cckiOkGg.s:1688   .text.RCC_APB1PeriphClockCmd:00000040 $d
     /tmp/cckiOkGg.s:1693   .text.RCC_APB2PeriphClockCmd:00000000 $t
     /tmp/cckiOkGg.s:1698   .text.RCC_APB2PeriphClockCmd:00000000 RCC_APB2PeriphClockCmd
     /tmp/cckiOkGg.s:1748   .text.RCC_APB2PeriphClockCmd:00000040 $d
     /tmp/cckiOkGg.s:1753   .text.RCC_AHB1PeriphResetCmd:00000000 $t
     /tmp/cckiOkGg.s:1758   .text.RCC_AHB1PeriphResetCmd:00000000 RCC_AHB1PeriphResetCmd
     /tmp/cckiOkGg.s:1808   .text.RCC_AHB1PeriphResetCmd:00000040 $d
     /tmp/cckiOkGg.s:1813   .text.RCC_AHB2PeriphResetCmd:00000000 $t
     /tmp/cckiOkGg.s:1818   .text.RCC_AHB2PeriphResetCmd:00000000 RCC_AHB2PeriphResetCmd
     /tmp/cckiOkGg.s:1868   .text.RCC_AHB2PeriphResetCmd:00000040 $d
     /tmp/cckiOkGg.s:1873   .text.RCC_AHB3PeriphResetCmd:00000000 $t
     /tmp/cckiOkGg.s:1878   .text.RCC_AHB3PeriphResetCmd:00000000 RCC_AHB3PeriphResetCmd
     /tmp/cckiOkGg.s:1928   .text.RCC_AHB3PeriphResetCmd:00000040 $d
     /tmp/cckiOkGg.s:1933   .text.RCC_APB1PeriphResetCmd:00000000 $t
     /tmp/cckiOkGg.s:1938   .text.RCC_APB1PeriphResetCmd:00000000 RCC_APB1PeriphResetCmd
     /tmp/cckiOkGg.s:1988   .text.RCC_APB1PeriphResetCmd:00000040 $d
     /tmp/cckiOkGg.s:1993   .text.RCC_APB2PeriphResetCmd:00000000 $t
     /tmp/cckiOkGg.s:1998   .text.RCC_APB2PeriphResetCmd:00000000 RCC_APB2PeriphResetCmd
     /tmp/cckiOkGg.s:2048   .text.RCC_APB2PeriphResetCmd:00000040 $d
     /tmp/cckiOkGg.s:2053   .text.RCC_AHB1PeriphClockLPModeCmd:00000000 $t
     /tmp/cckiOkGg.s:2058   .text.RCC_AHB1PeriphClockLPModeCmd:00000000 RCC_AHB1PeriphClockLPModeCmd
     /tmp/cckiOkGg.s:2108   .text.RCC_AHB1PeriphClockLPModeCmd:00000040 $d
     /tmp/cckiOkGg.s:2113   .text.RCC_AHB2PeriphClockLPModeCmd:00000000 $t
     /tmp/cckiOkGg.s:2118   .text.RCC_AHB2PeriphClockLPModeCmd:00000000 RCC_AHB2PeriphClockLPModeCmd
     /tmp/cckiOkGg.s:2168   .text.RCC_AHB2PeriphClockLPModeCmd:00000040 $d
     /tmp/cckiOkGg.s:2173   .text.RCC_AHB3PeriphClockLPModeCmd:00000000 $t
     /tmp/cckiOkGg.s:2178   .text.RCC_AHB3PeriphClockLPModeCmd:00000000 RCC_AHB3PeriphClockLPModeCmd
     /tmp/cckiOkGg.s:2228   .text.RCC_AHB3PeriphClockLPModeCmd:00000040 $d
     /tmp/cckiOkGg.s:2233   .text.RCC_APB1PeriphClockLPModeCmd:00000000 $t
     /tmp/cckiOkGg.s:2238   .text.RCC_APB1PeriphClockLPModeCmd:00000000 RCC_APB1PeriphClockLPModeCmd
     /tmp/cckiOkGg.s:2288   .text.RCC_APB1PeriphClockLPModeCmd:00000040 $d
     /tmp/cckiOkGg.s:2293   .text.RCC_APB2PeriphClockLPModeCmd:00000000 $t
     /tmp/cckiOkGg.s:2298   .text.RCC_APB2PeriphClockLPModeCmd:00000000 RCC_APB2PeriphClockLPModeCmd
     /tmp/cckiOkGg.s:2348   .text.RCC_APB2PeriphClockLPModeCmd:00000040 $d
     /tmp/cckiOkGg.s:2353   .text.RCC_ITConfig:00000000 $t
     /tmp/cckiOkGg.s:2358   .text.RCC_ITConfig:00000000 RCC_ITConfig
     /tmp/cckiOkGg.s:2414   .text.RCC_ITConfig:0000004c $d
     /tmp/cckiOkGg.s:2419   .text.RCC_GetFlagStatus:00000000 $t
     /tmp/cckiOkGg.s:2514   .text.RCC_GetFlagStatus:00000080 $d
     /tmp/cckiOkGg.s:2519   .text.RCC_ClearFlag:00000000 $t
     /tmp/cckiOkGg.s:2524   .text.RCC_ClearFlag:00000000 RCC_ClearFlag
     /tmp/cckiOkGg.s:2551   .text.RCC_ClearFlag:00000018 $d
     /tmp/cckiOkGg.s:2556   .text.RCC_GetITStatus:00000000 $t
     /tmp/cckiOkGg.s:2561   .text.RCC_GetITStatus:00000000 RCC_GetITStatus
     /tmp/cckiOkGg.s:2610   .text.RCC_GetITStatus:0000003c $d
     /tmp/cckiOkGg.s:2615   .text.RCC_ClearITPendingBit:00000000 $t
     /tmp/cckiOkGg.s:2620   .text.RCC_ClearITPendingBit:00000000 RCC_ClearITPendingBit
     /tmp/cckiOkGg.s:2651   .text.RCC_ClearITPendingBit:0000001c $d
                     .debug_frame:00000010 $d

NO UNDEFINED SYMBOLS
