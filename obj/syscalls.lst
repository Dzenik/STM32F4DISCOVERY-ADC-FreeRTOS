   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 3
   4              		.fpu fpv4-sp-d16
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 6
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"syscalls.c"
  22              	.Ltext0:
  23              		.cfi_sections	.debug_frame
  24              		.global	__malloc_margin
  25              		.section	.data.__malloc_margin,"aw",%progbits
  26              		.align	2
  29              	__malloc_margin:
  30 0000 00010000 		.word	256
  31              		.comm	__brkval,4,4
  32              		.section	.text._exit,"ax",%progbits
  33              		.align	2
  34              		.global	_exit
  35              		.thumb
  36              		.thumb_func
  38              	_exit:
  39              	.LFB110:
  40              		.file 1 "src/syscalls.c"
   1:src/syscalls.c **** #include "syscalls.h"
   2:src/syscalls.c **** #include "uart.h"
   3:src/syscalls.c **** #include "stm32f4xx.h"
   4:src/syscalls.c **** #include "FreeRTOS.h"
   5:src/syscalls.c **** #include <unistd.h>
   6:src/syscalls.c **** #include <stdlib.h>
   7:src/syscalls.c **** #include <errno.h>
   8:src/syscalls.c **** #include <string.h>
   9:src/syscalls.c **** #include <sys/stat.h>
  10:src/syscalls.c **** #include <sys/time.h>
  11:src/syscalls.c **** 
  12:src/syscalls.c **** size_t   __malloc_margin = 256;
  13:src/syscalls.c **** char    *__brkval;
  14:src/syscalls.c **** 
  15:src/syscalls.c **** void _exit(int code)
  16:src/syscalls.c **** {
  41              		.loc 1 16 0
  42              		.cfi_startproc
  43              		@ args = 0, pretend = 0, frame = 8
  44              		@ frame_needed = 1, uses_anonymous_args = 0
  45              		@ link register save eliminated.
  46 0000 80B4     		push	{r7}
  47              	.LCFI0:
  48              		.cfi_def_cfa_offset 4
  49 0002 83B0     		sub	sp, sp, #12
  50              	.LCFI1:
  51              		.cfi_def_cfa_offset 16
  52 0004 00AF     		add	r7, sp, #0
  53              		.cfi_offset 7, -4
  54              	.LCFI2:
  55              		.cfi_def_cfa_register 7
  56 0006 7860     		str	r0, [r7, #4]
  57              	.L2:
  17:src/syscalls.c ****     for (;;);
  58              		.loc 1 17 0 discriminator 1
  59 0008 FEE7     		b	.L2
  60              		.cfi_endproc
  61              	.LFE110:
  63 000a 00BF     		.section	.text._read_r,"ax",%progbits
  64              		.align	2
  65              		.global	_read_r
  66              		.thumb
  67              		.thumb_func
  69              	_read_r:
  70              	.LFB111:
  18:src/syscalls.c **** }
  19:src/syscalls.c **** 
  20:src/syscalls.c **** 
  21:src/syscalls.c **** ssize_t _read_r(struct _reent *r, int fd, void *ptr, size_t len)
  22:src/syscalls.c **** {
  71              		.loc 1 22 0
  72              		.cfi_startproc
  73              		@ args = 0, pretend = 0, frame = 16
  74              		@ frame_needed = 1, uses_anonymous_args = 0
  75 0000 80B5     		push	{r7, lr}
  76              	.LCFI3:
  77              		.cfi_def_cfa_offset 8
  78 0002 84B0     		sub	sp, sp, #16
  79              	.LCFI4:
  80              		.cfi_def_cfa_offset 24
  81 0004 00AF     		add	r7, sp, #0
  82              		.cfi_offset 14, -4
  83              		.cfi_offset 7, -8
  84              	.LCFI5:
  85              		.cfi_def_cfa_register 7
  86 0006 F860     		str	r0, [r7, #12]
  87 0008 B960     		str	r1, [r7, #8]
  88 000a 7A60     		str	r2, [r7, #4]
  89 000c 3B60     		str	r3, [r7, #0]
  23:src/syscalls.c ****     return uart_read_r(r, fd, ptr, len);
  90              		.loc 1 23 0
  91 000e F868     		ldr	r0, [r7, #12]
  92 0010 B968     		ldr	r1, [r7, #8]
  93 0012 7A68     		ldr	r2, [r7, #4]
  94 0014 3B68     		ldr	r3, [r7, #0]
  95 0016 FFF7FEFF 		bl	uart_read_r
  96 001a 0346     		mov	r3, r0
  24:src/syscalls.c **** }
  97              		.loc 1 24 0
  98 001c 1846     		mov	r0, r3
  99 001e 07F11007 		add	r7, r7, #16
 100 0022 BD46     		mov	sp, r7
 101 0024 80BD     		pop	{r7, pc}
 102              		.cfi_endproc
 103              	.LFE111:
 105 0026 00BF     		.section	.text._write_r,"ax",%progbits
 106              		.align	2
 107              		.global	_write_r
 108              		.thumb
 109              		.thumb_func
 111              	_write_r:
 112              	.LFB112:
  25:src/syscalls.c **** 
  26:src/syscalls.c **** 
  27:src/syscalls.c **** ssize_t _write_r(struct _reent *r, int fd, const void *ptr, size_t len)
  28:src/syscalls.c **** {
 113              		.loc 1 28 0
 114              		.cfi_startproc
 115              		@ args = 0, pretend = 0, frame = 16
 116              		@ frame_needed = 1, uses_anonymous_args = 0
 117 0000 80B5     		push	{r7, lr}
 118              	.LCFI6:
 119              		.cfi_def_cfa_offset 8
 120 0002 84B0     		sub	sp, sp, #16
 121              	.LCFI7:
 122              		.cfi_def_cfa_offset 24
 123 0004 00AF     		add	r7, sp, #0
 124              		.cfi_offset 14, -4
 125              		.cfi_offset 7, -8
 126              	.LCFI8:
 127              		.cfi_def_cfa_register 7
 128 0006 F860     		str	r0, [r7, #12]
 129 0008 B960     		str	r1, [r7, #8]
 130 000a 7A60     		str	r2, [r7, #4]
 131 000c 3B60     		str	r3, [r7, #0]
  29:src/syscalls.c ****     return uart_write_r(r, fd, ptr, len);
 132              		.loc 1 29 0
 133 000e F868     		ldr	r0, [r7, #12]
 134 0010 B968     		ldr	r1, [r7, #8]
 135 0012 7A68     		ldr	r2, [r7, #4]
 136 0014 3B68     		ldr	r3, [r7, #0]
 137 0016 FFF7FEFF 		bl	uart_write_r
 138 001a 0346     		mov	r3, r0
  30:src/syscalls.c **** }
 139              		.loc 1 30 0
 140 001c 1846     		mov	r0, r3
 141 001e 07F11007 		add	r7, r7, #16
 142 0022 BD46     		mov	sp, r7
 143 0024 80BD     		pop	{r7, pc}
 144              		.cfi_endproc
 145              	.LFE112:
 147 0026 00BF     		.section	.text._lseek_r,"ax",%progbits
 148              		.align	2
 149              		.global	_lseek_r
 150              		.thumb
 151              		.thumb_func
 153              	_lseek_r:
 154              	.LFB113:
  31:src/syscalls.c **** 
  32:src/syscalls.c **** 
  33:src/syscalls.c **** off_t _lseek_r(struct _reent *r, int fd, _off_t ptr, int dir)
  34:src/syscalls.c **** {
 155              		.loc 1 34 0
 156              		.cfi_startproc
 157              		@ args = 0, pretend = 0, frame = 16
 158              		@ frame_needed = 1, uses_anonymous_args = 0
 159              		@ link register save eliminated.
 160 0000 80B4     		push	{r7}
 161              	.LCFI9:
 162              		.cfi_def_cfa_offset 4
 163 0002 85B0     		sub	sp, sp, #20
 164              	.LCFI10:
 165              		.cfi_def_cfa_offset 24
 166 0004 00AF     		add	r7, sp, #0
 167              		.cfi_offset 7, -4
 168              	.LCFI11:
 169              		.cfi_def_cfa_register 7
 170 0006 F860     		str	r0, [r7, #12]
 171 0008 B960     		str	r1, [r7, #8]
 172 000a 7A60     		str	r2, [r7, #4]
 173 000c 3B60     		str	r3, [r7, #0]
  35:src/syscalls.c ****     fd  = fd;
  36:src/syscalls.c ****     ptr = ptr;
  37:src/syscalls.c ****     dir = dir;
  38:src/syscalls.c ****     r->_errno = ENOSYS;
 174              		.loc 1 38 0
 175 000e FB68     		ldr	r3, [r7, #12]
 176 0010 4FF05802 		mov	r2, #88
 177 0014 1A60     		str	r2, [r3, #0]
  39:src/syscalls.c ****     return -1;
 178              		.loc 1 39 0
 179 0016 4FF0FF33 		mov	r3, #-1
  40:src/syscalls.c **** }
 180              		.loc 1 40 0
 181 001a 1846     		mov	r0, r3
 182 001c 07F11407 		add	r7, r7, #20
 183 0020 BD46     		mov	sp, r7
 184 0022 80BC     		pop	{r7}
 185 0024 7047     		bx	lr
 186              		.cfi_endproc
 187              	.LFE113:
 189 0026 00BF     		.section	.text._close_r,"ax",%progbits
 190              		.align	2
 191              		.global	_close_r
 192              		.thumb
 193              		.thumb_func
 195              	_close_r:
 196              	.LFB114:
  41:src/syscalls.c **** 
  42:src/syscalls.c **** 
  43:src/syscalls.c **** int _close_r(struct _reent *r, int fd)
  44:src/syscalls.c **** {
 197              		.loc 1 44 0
 198              		.cfi_startproc
 199              		@ args = 0, pretend = 0, frame = 8
 200              		@ frame_needed = 1, uses_anonymous_args = 0
 201              		@ link register save eliminated.
 202 0000 80B4     		push	{r7}
 203              	.LCFI12:
 204              		.cfi_def_cfa_offset 4
 205 0002 83B0     		sub	sp, sp, #12
 206              	.LCFI13:
 207              		.cfi_def_cfa_offset 16
 208 0004 00AF     		add	r7, sp, #0
 209              		.cfi_offset 7, -4
 210              	.LCFI14:
 211              		.cfi_def_cfa_register 7
 212 0006 7860     		str	r0, [r7, #4]
 213 0008 3960     		str	r1, [r7, #0]
  45:src/syscalls.c ****     fd = fd;
  46:src/syscalls.c ****     r->_errno = ENOSYS;
 214              		.loc 1 46 0
 215 000a 7B68     		ldr	r3, [r7, #4]
 216 000c 4FF05802 		mov	r2, #88
 217 0010 1A60     		str	r2, [r3, #0]
  47:src/syscalls.c ****     return -1;
 218              		.loc 1 47 0
 219 0012 4FF0FF33 		mov	r3, #-1
  48:src/syscalls.c **** }
 220              		.loc 1 48 0
 221 0016 1846     		mov	r0, r3
 222 0018 07F10C07 		add	r7, r7, #12
 223 001c BD46     		mov	sp, r7
 224 001e 80BC     		pop	{r7}
 225 0020 7047     		bx	lr
 226              		.cfi_endproc
 227              	.LFE114:
 229 0022 00BF     		.section	.text._fstat_r,"ax",%progbits
 230              		.align	2
 231              		.global	_fstat_r
 232              		.thumb
 233              		.thumb_func
 235              	_fstat_r:
 236              	.LFB115:
  49:src/syscalls.c **** 
  50:src/syscalls.c **** 
  51:src/syscalls.c **** int _fstat_r(struct _reent *r, int fd, struct stat *st)
  52:src/syscalls.c **** {
 237              		.loc 1 52 0
 238              		.cfi_startproc
 239              		@ args = 0, pretend = 0, frame = 16
 240              		@ frame_needed = 1, uses_anonymous_args = 0
 241              		@ link register save eliminated.
 242 0000 80B4     		push	{r7}
 243              	.LCFI15:
 244              		.cfi_def_cfa_offset 4
 245 0002 85B0     		sub	sp, sp, #20
 246              	.LCFI16:
 247              		.cfi_def_cfa_offset 24
 248 0004 00AF     		add	r7, sp, #0
 249              		.cfi_offset 7, -4
 250              	.LCFI17:
 251              		.cfi_def_cfa_register 7
 252 0006 F860     		str	r0, [r7, #12]
 253 0008 B960     		str	r1, [r7, #8]
 254 000a 7A60     		str	r2, [r7, #4]
  53:src/syscalls.c ****     if ((fd >= STDIN_FILENO) && (fd <= STDERR_FILENO)) {
 255              		.loc 1 53 0
 256 000c BB68     		ldr	r3, [r7, #8]
 257 000e 002B     		cmp	r3, #0
 258 0010 09DB     		blt	.L8
 259              		.loc 1 53 0 is_stmt 0 discriminator 1
 260 0012 BB68     		ldr	r3, [r7, #8]
 261 0014 022B     		cmp	r3, #2
 262 0016 06DC     		bgt	.L8
  54:src/syscalls.c ****       st->st_mode = S_IFCHR;
 263              		.loc 1 54 0 is_stmt 1
 264 0018 7B68     		ldr	r3, [r7, #4]
 265 001a 4FF40052 		mov	r2, #8192
 266 001e 5A60     		str	r2, [r3, #4]
  55:src/syscalls.c ****       return 0;
 267              		.loc 1 55 0
 268 0020 4FF00003 		mov	r3, #0
 269 0024 05E0     		b	.L9
 270              	.L8:
  56:src/syscalls.c ****     }
  57:src/syscalls.c **** 
  58:src/syscalls.c ****     r->_errno = ENOSYS;
 271              		.loc 1 58 0
 272 0026 FB68     		ldr	r3, [r7, #12]
 273 0028 4FF05802 		mov	r2, #88
 274 002c 1A60     		str	r2, [r3, #0]
  59:src/syscalls.c ****     return -1;
 275              		.loc 1 59 0
 276 002e 4FF0FF33 		mov	r3, #-1
 277              	.L9:
  60:src/syscalls.c **** }
 278              		.loc 1 60 0
 279 0032 1846     		mov	r0, r3
 280 0034 07F11407 		add	r7, r7, #20
 281 0038 BD46     		mov	sp, r7
 282 003a 80BC     		pop	{r7}
 283 003c 7047     		bx	lr
 284              		.cfi_endproc
 285              	.LFE115:
 287 003e 00BF     		.section	.text._isatty_r,"ax",%progbits
 288              		.align	2
 289              		.global	_isatty_r
 290              		.thumb
 291              		.thumb_func
 293              	_isatty_r:
 294              	.LFB116:
  61:src/syscalls.c **** 
  62:src/syscalls.c **** 
  63:src/syscalls.c **** int _isatty_r(struct _reent *r, int fd)
  64:src/syscalls.c **** {
 295              		.loc 1 64 0
 296              		.cfi_startproc
 297              		@ args = 0, pretend = 0, frame = 8
 298              		@ frame_needed = 1, uses_anonymous_args = 0
 299              		@ link register save eliminated.
 300 0000 80B4     		push	{r7}
 301              	.LCFI18:
 302              		.cfi_def_cfa_offset 4
 303 0002 83B0     		sub	sp, sp, #12
 304              	.LCFI19:
 305              		.cfi_def_cfa_offset 16
 306 0004 00AF     		add	r7, sp, #0
 307              		.cfi_offset 7, -4
 308              	.LCFI20:
 309              		.cfi_def_cfa_register 7
 310 0006 7860     		str	r0, [r7, #4]
 311 0008 3960     		str	r1, [r7, #0]
  65:src/syscalls.c ****     r  = r;
  66:src/syscalls.c ****     fd = fd;
  67:src/syscalls.c ****     return 1;
 312              		.loc 1 67 0
 313 000a 4FF00103 		mov	r3, #1
  68:src/syscalls.c **** }
 314              		.loc 1 68 0
 315 000e 1846     		mov	r0, r3
 316 0010 07F10C07 		add	r7, r7, #12
 317 0014 BD46     		mov	sp, r7
 318 0016 80BC     		pop	{r7}
 319 0018 7047     		bx	lr
 320              		.cfi_endproc
 321              	.LFE116:
 323 001a 00BF     		.section	.text._sbrk_r,"ax",%progbits
 324              		.align	2
 325              		.global	_sbrk_r
 326              		.thumb
 327              		.thumb_func
 329              	_sbrk_r:
 330              	.LFB117:
  69:src/syscalls.c **** 
  70:src/syscalls.c **** 
  71:src/syscalls.c **** void *_sbrk_r(struct _reent *r, ptrdiff_t incr)
  72:src/syscalls.c **** {
 331              		.loc 1 72 0
 332              		.cfi_startproc
 333              		@ args = 0, pretend = 0, frame = 16
 334              		@ frame_needed = 1, uses_anonymous_args = 0
 335              		@ link register save eliminated.
 336 0000 90B4     		push	{r4, r7}
 337              	.LCFI21:
 338              		.cfi_def_cfa_offset 8
 339 0002 84B0     		sub	sp, sp, #16
 340              	.LCFI22:
 341              		.cfi_def_cfa_offset 24
 342 0004 00AF     		add	r7, sp, #0
 343              		.cfi_offset 7, -4
 344              		.cfi_offset 4, -8
 345              	.LCFI23:
 346              		.cfi_def_cfa_register 7
 347 0006 7860     		str	r0, [r7, #4]
 348 0008 3960     		str	r1, [r7, #0]
  73:src/syscalls.c ****     extern char end;   // provided by the linker script
  74:src/syscalls.c **** 
  75:src/syscalls.c ****     if (__brkval == 0)
 349              		.loc 1 75 0
 350 000a 154B     		ldr	r3, .L15
 351 000c 1B68     		ldr	r3, [r3, #0]
 352 000e 002B     		cmp	r3, #0
 353 0010 02D1     		bne	.L12
  76:src/syscalls.c ****         __brkval = &end;
 354              		.loc 1 76 0
 355 0012 134B     		ldr	r3, .L15
 356 0014 134A     		ldr	r2, .L15+4
 357 0016 1A60     		str	r2, [r3, #0]
 358              	.L12:
  77:src/syscalls.c **** 
  78:src/syscalls.c ****     if (__brkval + incr > (char*)__get_MSP() - __malloc_margin) {
 359              		.loc 1 78 0
 360 0018 114B     		ldr	r3, .L15
 361 001a 1A68     		ldr	r2, [r3, #0]
 362 001c 3B68     		ldr	r3, [r7, #0]
 363 001e D218     		adds	r2, r2, r3
 364              	.LBB4:
 365              	.LBB5:
 366              		.file 2 "libs/CMSIS/Include/core_cmFunc.h"
   1:libs/CMSIS/Include/core_cmFunc.h **** /**************************************************************************//**
   2:libs/CMSIS/Include/core_cmFunc.h ****  * @file     core_cmFunc.h
   3:libs/CMSIS/Include/core_cmFunc.h ****  * @brief    CMSIS Cortex-M Core Function Access Header File
   4:libs/CMSIS/Include/core_cmFunc.h ****  * @version  V2.10
   5:libs/CMSIS/Include/core_cmFunc.h ****  * @date     26. July 2011
   6:libs/CMSIS/Include/core_cmFunc.h ****  *
   7:libs/CMSIS/Include/core_cmFunc.h ****  * @note
   8:libs/CMSIS/Include/core_cmFunc.h ****  * Copyright (C) 2009-2011 ARM Limited. All rights reserved.
   9:libs/CMSIS/Include/core_cmFunc.h ****  *
  10:libs/CMSIS/Include/core_cmFunc.h ****  * @par
  11:libs/CMSIS/Include/core_cmFunc.h ****  * ARM Limited (ARM) is supplying this software for use with Cortex-M 
  12:libs/CMSIS/Include/core_cmFunc.h ****  * processor based microcontrollers.  This file can be freely distributed 
  13:libs/CMSIS/Include/core_cmFunc.h ****  * within development tools that are supporting such ARM based processors. 
  14:libs/CMSIS/Include/core_cmFunc.h ****  *
  15:libs/CMSIS/Include/core_cmFunc.h ****  * @par
  16:libs/CMSIS/Include/core_cmFunc.h ****  * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
  17:libs/CMSIS/Include/core_cmFunc.h ****  * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
  18:libs/CMSIS/Include/core_cmFunc.h ****  * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
  19:libs/CMSIS/Include/core_cmFunc.h ****  * ARM SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL, OR
  20:libs/CMSIS/Include/core_cmFunc.h ****  * CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
  21:libs/CMSIS/Include/core_cmFunc.h ****  *
  22:libs/CMSIS/Include/core_cmFunc.h ****  ******************************************************************************/
  23:libs/CMSIS/Include/core_cmFunc.h **** 
  24:libs/CMSIS/Include/core_cmFunc.h **** #ifndef __CORE_CMFUNC_H
  25:libs/CMSIS/Include/core_cmFunc.h **** #define __CORE_CMFUNC_H
  26:libs/CMSIS/Include/core_cmFunc.h **** 
  27:libs/CMSIS/Include/core_cmFunc.h **** 
  28:libs/CMSIS/Include/core_cmFunc.h **** /* ###########################  Core Function Access  ########################### */
  29:libs/CMSIS/Include/core_cmFunc.h **** /** \ingroup  CMSIS_Core_FunctionInterface   
  30:libs/CMSIS/Include/core_cmFunc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
  31:libs/CMSIS/Include/core_cmFunc.h ****   @{
  32:libs/CMSIS/Include/core_cmFunc.h ****  */
  33:libs/CMSIS/Include/core_cmFunc.h **** 
  34:libs/CMSIS/Include/core_cmFunc.h **** #if   defined ( __CC_ARM ) /*------------------RealView Compiler -----------------*/
  35:libs/CMSIS/Include/core_cmFunc.h **** /* ARM armcc specific functions */
  36:libs/CMSIS/Include/core_cmFunc.h **** 
  37:libs/CMSIS/Include/core_cmFunc.h **** #if (__ARMCC_VERSION < 400677)
  38:libs/CMSIS/Include/core_cmFunc.h ****   #error "Please use ARM Compiler Toolchain V4.0.677 or later!"
  39:libs/CMSIS/Include/core_cmFunc.h **** #endif
  40:libs/CMSIS/Include/core_cmFunc.h **** 
  41:libs/CMSIS/Include/core_cmFunc.h **** /* intrinsic void __enable_irq();     */
  42:libs/CMSIS/Include/core_cmFunc.h **** /* intrinsic void __disable_irq();    */
  43:libs/CMSIS/Include/core_cmFunc.h **** 
  44:libs/CMSIS/Include/core_cmFunc.h **** /** \brief  Get Control Register
  45:libs/CMSIS/Include/core_cmFunc.h **** 
  46:libs/CMSIS/Include/core_cmFunc.h ****     This function returns the content of the Control Register.
  47:libs/CMSIS/Include/core_cmFunc.h **** 
  48:libs/CMSIS/Include/core_cmFunc.h ****     \return               Control Register value
  49:libs/CMSIS/Include/core_cmFunc.h ****  */
  50:libs/CMSIS/Include/core_cmFunc.h **** static __INLINE uint32_t __get_CONTROL(void)
  51:libs/CMSIS/Include/core_cmFunc.h **** {
  52:libs/CMSIS/Include/core_cmFunc.h ****   register uint32_t __regControl         __ASM("control");
  53:libs/CMSIS/Include/core_cmFunc.h ****   return(__regControl);
  54:libs/CMSIS/Include/core_cmFunc.h **** }
  55:libs/CMSIS/Include/core_cmFunc.h **** 
  56:libs/CMSIS/Include/core_cmFunc.h **** 
  57:libs/CMSIS/Include/core_cmFunc.h **** /** \brief  Set Control Register
  58:libs/CMSIS/Include/core_cmFunc.h **** 
  59:libs/CMSIS/Include/core_cmFunc.h ****     This function writes the given value to the Control Register.
  60:libs/CMSIS/Include/core_cmFunc.h **** 
  61:libs/CMSIS/Include/core_cmFunc.h ****     \param [in]    control  Control Register value to set
  62:libs/CMSIS/Include/core_cmFunc.h ****  */
  63:libs/CMSIS/Include/core_cmFunc.h **** static __INLINE void __set_CONTROL(uint32_t control)
  64:libs/CMSIS/Include/core_cmFunc.h **** {
  65:libs/CMSIS/Include/core_cmFunc.h ****   register uint32_t __regControl         __ASM("control");
  66:libs/CMSIS/Include/core_cmFunc.h ****   __regControl = control;
  67:libs/CMSIS/Include/core_cmFunc.h **** }
  68:libs/CMSIS/Include/core_cmFunc.h **** 
  69:libs/CMSIS/Include/core_cmFunc.h **** 
  70:libs/CMSIS/Include/core_cmFunc.h **** /** \brief  Get ISPR Register
  71:libs/CMSIS/Include/core_cmFunc.h **** 
  72:libs/CMSIS/Include/core_cmFunc.h ****     This function returns the content of the ISPR Register.
  73:libs/CMSIS/Include/core_cmFunc.h **** 
  74:libs/CMSIS/Include/core_cmFunc.h ****     \return               ISPR Register value
  75:libs/CMSIS/Include/core_cmFunc.h ****  */
  76:libs/CMSIS/Include/core_cmFunc.h **** static __INLINE uint32_t __get_IPSR(void)
  77:libs/CMSIS/Include/core_cmFunc.h **** {
  78:libs/CMSIS/Include/core_cmFunc.h ****   register uint32_t __regIPSR          __ASM("ipsr");
  79:libs/CMSIS/Include/core_cmFunc.h ****   return(__regIPSR);
  80:libs/CMSIS/Include/core_cmFunc.h **** }
  81:libs/CMSIS/Include/core_cmFunc.h **** 
  82:libs/CMSIS/Include/core_cmFunc.h **** 
  83:libs/CMSIS/Include/core_cmFunc.h **** /** \brief  Get APSR Register
  84:libs/CMSIS/Include/core_cmFunc.h **** 
  85:libs/CMSIS/Include/core_cmFunc.h ****     This function returns the content of the APSR Register.
  86:libs/CMSIS/Include/core_cmFunc.h **** 
  87:libs/CMSIS/Include/core_cmFunc.h ****     \return               APSR Register value
  88:libs/CMSIS/Include/core_cmFunc.h ****  */
  89:libs/CMSIS/Include/core_cmFunc.h **** static __INLINE uint32_t __get_APSR(void)
  90:libs/CMSIS/Include/core_cmFunc.h **** {
  91:libs/CMSIS/Include/core_cmFunc.h ****   register uint32_t __regAPSR          __ASM("apsr");
  92:libs/CMSIS/Include/core_cmFunc.h ****   return(__regAPSR);
  93:libs/CMSIS/Include/core_cmFunc.h **** }
  94:libs/CMSIS/Include/core_cmFunc.h **** 
  95:libs/CMSIS/Include/core_cmFunc.h **** 
  96:libs/CMSIS/Include/core_cmFunc.h **** /** \brief  Get xPSR Register
  97:libs/CMSIS/Include/core_cmFunc.h **** 
  98:libs/CMSIS/Include/core_cmFunc.h ****     This function returns the content of the xPSR Register.
  99:libs/CMSIS/Include/core_cmFunc.h **** 
 100:libs/CMSIS/Include/core_cmFunc.h ****     \return               xPSR Register value
 101:libs/CMSIS/Include/core_cmFunc.h ****  */
 102:libs/CMSIS/Include/core_cmFunc.h **** static __INLINE uint32_t __get_xPSR(void)
 103:libs/CMSIS/Include/core_cmFunc.h **** {
 104:libs/CMSIS/Include/core_cmFunc.h ****   register uint32_t __regXPSR          __ASM("xpsr");
 105:libs/CMSIS/Include/core_cmFunc.h ****   return(__regXPSR);
 106:libs/CMSIS/Include/core_cmFunc.h **** }
 107:libs/CMSIS/Include/core_cmFunc.h **** 
 108:libs/CMSIS/Include/core_cmFunc.h **** 
 109:libs/CMSIS/Include/core_cmFunc.h **** /** \brief  Get Process Stack Pointer
 110:libs/CMSIS/Include/core_cmFunc.h **** 
 111:libs/CMSIS/Include/core_cmFunc.h ****     This function returns the current value of the Process Stack Pointer (PSP).
 112:libs/CMSIS/Include/core_cmFunc.h **** 
 113:libs/CMSIS/Include/core_cmFunc.h ****     \return               PSP Register value
 114:libs/CMSIS/Include/core_cmFunc.h ****  */
 115:libs/CMSIS/Include/core_cmFunc.h **** static __INLINE uint32_t __get_PSP(void)
 116:libs/CMSIS/Include/core_cmFunc.h **** {
 117:libs/CMSIS/Include/core_cmFunc.h ****   register uint32_t __regProcessStackPointer  __ASM("psp");
 118:libs/CMSIS/Include/core_cmFunc.h ****   return(__regProcessStackPointer);
 119:libs/CMSIS/Include/core_cmFunc.h **** }
 120:libs/CMSIS/Include/core_cmFunc.h **** 
 121:libs/CMSIS/Include/core_cmFunc.h **** 
 122:libs/CMSIS/Include/core_cmFunc.h **** /** \brief  Set Process Stack Pointer
 123:libs/CMSIS/Include/core_cmFunc.h **** 
 124:libs/CMSIS/Include/core_cmFunc.h ****     This function assigns the given value to the Process Stack Pointer (PSP).
 125:libs/CMSIS/Include/core_cmFunc.h **** 
 126:libs/CMSIS/Include/core_cmFunc.h ****     \param [in]    topOfProcStack  Process Stack Pointer value to set
 127:libs/CMSIS/Include/core_cmFunc.h ****  */
 128:libs/CMSIS/Include/core_cmFunc.h **** static __INLINE void __set_PSP(uint32_t topOfProcStack)
 129:libs/CMSIS/Include/core_cmFunc.h **** {
 130:libs/CMSIS/Include/core_cmFunc.h ****   register uint32_t __regProcessStackPointer  __ASM("psp");
 131:libs/CMSIS/Include/core_cmFunc.h ****   __regProcessStackPointer = topOfProcStack;
 132:libs/CMSIS/Include/core_cmFunc.h **** }
 133:libs/CMSIS/Include/core_cmFunc.h **** 
 134:libs/CMSIS/Include/core_cmFunc.h **** 
 135:libs/CMSIS/Include/core_cmFunc.h **** /** \brief  Get Main Stack Pointer
 136:libs/CMSIS/Include/core_cmFunc.h **** 
 137:libs/CMSIS/Include/core_cmFunc.h ****     This function returns the current value of the Main Stack Pointer (MSP).
 138:libs/CMSIS/Include/core_cmFunc.h **** 
 139:libs/CMSIS/Include/core_cmFunc.h ****     \return               MSP Register value
 140:libs/CMSIS/Include/core_cmFunc.h ****  */
 141:libs/CMSIS/Include/core_cmFunc.h **** static __INLINE uint32_t __get_MSP(void)
 142:libs/CMSIS/Include/core_cmFunc.h **** {
 143:libs/CMSIS/Include/core_cmFunc.h ****   register uint32_t __regMainStackPointer     __ASM("msp");
 144:libs/CMSIS/Include/core_cmFunc.h ****   return(__regMainStackPointer);
 145:libs/CMSIS/Include/core_cmFunc.h **** }
 146:libs/CMSIS/Include/core_cmFunc.h **** 
 147:libs/CMSIS/Include/core_cmFunc.h **** 
 148:libs/CMSIS/Include/core_cmFunc.h **** /** \brief  Set Main Stack Pointer
 149:libs/CMSIS/Include/core_cmFunc.h **** 
 150:libs/CMSIS/Include/core_cmFunc.h ****     This function assigns the given value to the Main Stack Pointer (MSP).
 151:libs/CMSIS/Include/core_cmFunc.h **** 
 152:libs/CMSIS/Include/core_cmFunc.h ****     \param [in]    topOfMainStack  Main Stack Pointer value to set
 153:libs/CMSIS/Include/core_cmFunc.h ****  */
 154:libs/CMSIS/Include/core_cmFunc.h **** static __INLINE void __set_MSP(uint32_t topOfMainStack)
 155:libs/CMSIS/Include/core_cmFunc.h **** {
 156:libs/CMSIS/Include/core_cmFunc.h ****   register uint32_t __regMainStackPointer     __ASM("msp");
 157:libs/CMSIS/Include/core_cmFunc.h ****   __regMainStackPointer = topOfMainStack;
 158:libs/CMSIS/Include/core_cmFunc.h **** }
 159:libs/CMSIS/Include/core_cmFunc.h **** 
 160:libs/CMSIS/Include/core_cmFunc.h **** 
 161:libs/CMSIS/Include/core_cmFunc.h **** /** \brief  Get Priority Mask
 162:libs/CMSIS/Include/core_cmFunc.h **** 
 163:libs/CMSIS/Include/core_cmFunc.h ****     This function returns the current state of the priority mask bit from the Priority Mask Registe
 164:libs/CMSIS/Include/core_cmFunc.h **** 
 165:libs/CMSIS/Include/core_cmFunc.h ****     \return               Priority Mask value
 166:libs/CMSIS/Include/core_cmFunc.h ****  */
 167:libs/CMSIS/Include/core_cmFunc.h **** static __INLINE uint32_t __get_PRIMASK(void)
 168:libs/CMSIS/Include/core_cmFunc.h **** {
 169:libs/CMSIS/Include/core_cmFunc.h ****   register uint32_t __regPriMask         __ASM("primask");
 170:libs/CMSIS/Include/core_cmFunc.h ****   return(__regPriMask);
 171:libs/CMSIS/Include/core_cmFunc.h **** }
 172:libs/CMSIS/Include/core_cmFunc.h **** 
 173:libs/CMSIS/Include/core_cmFunc.h **** 
 174:libs/CMSIS/Include/core_cmFunc.h **** /** \brief  Set Priority Mask
 175:libs/CMSIS/Include/core_cmFunc.h **** 
 176:libs/CMSIS/Include/core_cmFunc.h ****     This function assigns the given value to the Priority Mask Register.
 177:libs/CMSIS/Include/core_cmFunc.h **** 
 178:libs/CMSIS/Include/core_cmFunc.h ****     \param [in]    priMask  Priority Mask
 179:libs/CMSIS/Include/core_cmFunc.h ****  */
 180:libs/CMSIS/Include/core_cmFunc.h **** static __INLINE void __set_PRIMASK(uint32_t priMask)
 181:libs/CMSIS/Include/core_cmFunc.h **** {
 182:libs/CMSIS/Include/core_cmFunc.h ****   register uint32_t __regPriMask         __ASM("primask");
 183:libs/CMSIS/Include/core_cmFunc.h ****   __regPriMask = (priMask);
 184:libs/CMSIS/Include/core_cmFunc.h **** }
 185:libs/CMSIS/Include/core_cmFunc.h ****  
 186:libs/CMSIS/Include/core_cmFunc.h **** 
 187:libs/CMSIS/Include/core_cmFunc.h **** #if       (__CORTEX_M >= 0x03)
 188:libs/CMSIS/Include/core_cmFunc.h **** 
 189:libs/CMSIS/Include/core_cmFunc.h **** /** \brief  Enable FIQ
 190:libs/CMSIS/Include/core_cmFunc.h **** 
 191:libs/CMSIS/Include/core_cmFunc.h ****     This function enables FIQ interrupts by clearing the F-bit in the CPSR.
 192:libs/CMSIS/Include/core_cmFunc.h ****     Can only be executed in Privileged modes.
 193:libs/CMSIS/Include/core_cmFunc.h ****  */
 194:libs/CMSIS/Include/core_cmFunc.h **** #define __enable_fault_irq                __enable_fiq
 195:libs/CMSIS/Include/core_cmFunc.h **** 
 196:libs/CMSIS/Include/core_cmFunc.h **** 
 197:libs/CMSIS/Include/core_cmFunc.h **** /** \brief  Disable FIQ
 198:libs/CMSIS/Include/core_cmFunc.h **** 
 199:libs/CMSIS/Include/core_cmFunc.h ****     This function disables FIQ interrupts by setting the F-bit in the CPSR.
 200:libs/CMSIS/Include/core_cmFunc.h ****     Can only be executed in Privileged modes.
 201:libs/CMSIS/Include/core_cmFunc.h ****  */
 202:libs/CMSIS/Include/core_cmFunc.h **** #define __disable_fault_irq               __disable_fiq
 203:libs/CMSIS/Include/core_cmFunc.h **** 
 204:libs/CMSIS/Include/core_cmFunc.h **** 
 205:libs/CMSIS/Include/core_cmFunc.h **** /** \brief  Get Base Priority
 206:libs/CMSIS/Include/core_cmFunc.h **** 
 207:libs/CMSIS/Include/core_cmFunc.h ****     This function returns the current value of the Base Priority register.
 208:libs/CMSIS/Include/core_cmFunc.h **** 
 209:libs/CMSIS/Include/core_cmFunc.h ****     \return               Base Priority register value
 210:libs/CMSIS/Include/core_cmFunc.h ****  */
 211:libs/CMSIS/Include/core_cmFunc.h **** static __INLINE uint32_t  __get_BASEPRI(void)
 212:libs/CMSIS/Include/core_cmFunc.h **** {
 213:libs/CMSIS/Include/core_cmFunc.h ****   register uint32_t __regBasePri         __ASM("basepri");
 214:libs/CMSIS/Include/core_cmFunc.h ****   return(__regBasePri);
 215:libs/CMSIS/Include/core_cmFunc.h **** }
 216:libs/CMSIS/Include/core_cmFunc.h **** 
 217:libs/CMSIS/Include/core_cmFunc.h **** 
 218:libs/CMSIS/Include/core_cmFunc.h **** /** \brief  Set Base Priority
 219:libs/CMSIS/Include/core_cmFunc.h **** 
 220:libs/CMSIS/Include/core_cmFunc.h ****     This function assigns the given value to the Base Priority register.
 221:libs/CMSIS/Include/core_cmFunc.h **** 
 222:libs/CMSIS/Include/core_cmFunc.h ****     \param [in]    basePri  Base Priority value to set
 223:libs/CMSIS/Include/core_cmFunc.h ****  */
 224:libs/CMSIS/Include/core_cmFunc.h **** static __INLINE void __set_BASEPRI(uint32_t basePri)
 225:libs/CMSIS/Include/core_cmFunc.h **** {
 226:libs/CMSIS/Include/core_cmFunc.h ****   register uint32_t __regBasePri         __ASM("basepri");
 227:libs/CMSIS/Include/core_cmFunc.h ****   __regBasePri = (basePri & 0xff);
 228:libs/CMSIS/Include/core_cmFunc.h **** }
 229:libs/CMSIS/Include/core_cmFunc.h ****  
 230:libs/CMSIS/Include/core_cmFunc.h **** 
 231:libs/CMSIS/Include/core_cmFunc.h **** /** \brief  Get Fault Mask
 232:libs/CMSIS/Include/core_cmFunc.h **** 
 233:libs/CMSIS/Include/core_cmFunc.h ****     This function returns the current value of the Fault Mask register.
 234:libs/CMSIS/Include/core_cmFunc.h **** 
 235:libs/CMSIS/Include/core_cmFunc.h ****     \return               Fault Mask register value
 236:libs/CMSIS/Include/core_cmFunc.h ****  */
 237:libs/CMSIS/Include/core_cmFunc.h **** static __INLINE uint32_t __get_FAULTMASK(void)
 238:libs/CMSIS/Include/core_cmFunc.h **** {
 239:libs/CMSIS/Include/core_cmFunc.h ****   register uint32_t __regFaultMask       __ASM("faultmask");
 240:libs/CMSIS/Include/core_cmFunc.h ****   return(__regFaultMask);
 241:libs/CMSIS/Include/core_cmFunc.h **** }
 242:libs/CMSIS/Include/core_cmFunc.h **** 
 243:libs/CMSIS/Include/core_cmFunc.h **** 
 244:libs/CMSIS/Include/core_cmFunc.h **** /** \brief  Set Fault Mask
 245:libs/CMSIS/Include/core_cmFunc.h **** 
 246:libs/CMSIS/Include/core_cmFunc.h ****     This function assigns the given value to the Fault Mask register.
 247:libs/CMSIS/Include/core_cmFunc.h **** 
 248:libs/CMSIS/Include/core_cmFunc.h ****     \param [in]    faultMask  Fault Mask value to set
 249:libs/CMSIS/Include/core_cmFunc.h ****  */
 250:libs/CMSIS/Include/core_cmFunc.h **** static __INLINE void __set_FAULTMASK(uint32_t faultMask)
 251:libs/CMSIS/Include/core_cmFunc.h **** {
 252:libs/CMSIS/Include/core_cmFunc.h ****   register uint32_t __regFaultMask       __ASM("faultmask");
 253:libs/CMSIS/Include/core_cmFunc.h ****   __regFaultMask = (faultMask & (uint32_t)1);
 254:libs/CMSIS/Include/core_cmFunc.h **** }
 255:libs/CMSIS/Include/core_cmFunc.h **** 
 256:libs/CMSIS/Include/core_cmFunc.h **** #endif /* (__CORTEX_M >= 0x03) */
 257:libs/CMSIS/Include/core_cmFunc.h **** 
 258:libs/CMSIS/Include/core_cmFunc.h **** 
 259:libs/CMSIS/Include/core_cmFunc.h **** #if       (__CORTEX_M == 0x04)
 260:libs/CMSIS/Include/core_cmFunc.h **** 
 261:libs/CMSIS/Include/core_cmFunc.h **** /** \brief  Get FPSCR
 262:libs/CMSIS/Include/core_cmFunc.h **** 
 263:libs/CMSIS/Include/core_cmFunc.h ****     This function returns the current value of the Floating Point Status/Control register.
 264:libs/CMSIS/Include/core_cmFunc.h **** 
 265:libs/CMSIS/Include/core_cmFunc.h ****     \return               Floating Point Status/Control register value
 266:libs/CMSIS/Include/core_cmFunc.h ****  */
 267:libs/CMSIS/Include/core_cmFunc.h **** static __INLINE uint32_t __get_FPSCR(void)
 268:libs/CMSIS/Include/core_cmFunc.h **** {
 269:libs/CMSIS/Include/core_cmFunc.h **** #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
 270:libs/CMSIS/Include/core_cmFunc.h ****   register uint32_t __regfpscr         __ASM("fpscr");
 271:libs/CMSIS/Include/core_cmFunc.h ****   return(__regfpscr);
 272:libs/CMSIS/Include/core_cmFunc.h **** #else
 273:libs/CMSIS/Include/core_cmFunc.h ****    return(0);
 274:libs/CMSIS/Include/core_cmFunc.h **** #endif
 275:libs/CMSIS/Include/core_cmFunc.h **** }
 276:libs/CMSIS/Include/core_cmFunc.h **** 
 277:libs/CMSIS/Include/core_cmFunc.h **** 
 278:libs/CMSIS/Include/core_cmFunc.h **** /** \brief  Set FPSCR
 279:libs/CMSIS/Include/core_cmFunc.h **** 
 280:libs/CMSIS/Include/core_cmFunc.h ****     This function assigns the given value to the Floating Point Status/Control register.
 281:libs/CMSIS/Include/core_cmFunc.h **** 
 282:libs/CMSIS/Include/core_cmFunc.h ****     \param [in]    fpscr  Floating Point Status/Control value to set
 283:libs/CMSIS/Include/core_cmFunc.h ****  */
 284:libs/CMSIS/Include/core_cmFunc.h **** static __INLINE void __set_FPSCR(uint32_t fpscr)
 285:libs/CMSIS/Include/core_cmFunc.h **** {
 286:libs/CMSIS/Include/core_cmFunc.h **** #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
 287:libs/CMSIS/Include/core_cmFunc.h ****   register uint32_t __regfpscr         __ASM("fpscr");
 288:libs/CMSIS/Include/core_cmFunc.h ****   __regfpscr = (fpscr);
 289:libs/CMSIS/Include/core_cmFunc.h **** #endif
 290:libs/CMSIS/Include/core_cmFunc.h **** }
 291:libs/CMSIS/Include/core_cmFunc.h **** 
 292:libs/CMSIS/Include/core_cmFunc.h **** #endif /* (__CORTEX_M == 0x04) */
 293:libs/CMSIS/Include/core_cmFunc.h **** 
 294:libs/CMSIS/Include/core_cmFunc.h **** 
 295:libs/CMSIS/Include/core_cmFunc.h **** #elif defined ( __ICCARM__ ) /*------------------ ICC Compiler -------------------*/
 296:libs/CMSIS/Include/core_cmFunc.h **** /* IAR iccarm specific functions */
 297:libs/CMSIS/Include/core_cmFunc.h **** 
 298:libs/CMSIS/Include/core_cmFunc.h **** #include <cmsis_iar.h>
 299:libs/CMSIS/Include/core_cmFunc.h **** 
 300:libs/CMSIS/Include/core_cmFunc.h **** #elif defined ( __GNUC__ ) /*------------------ GNU Compiler ---------------------*/
 301:libs/CMSIS/Include/core_cmFunc.h **** /* GNU gcc specific functions */
 302:libs/CMSIS/Include/core_cmFunc.h **** 
 303:libs/CMSIS/Include/core_cmFunc.h **** /** \brief  Enable IRQ Interrupts
 304:libs/CMSIS/Include/core_cmFunc.h **** 
 305:libs/CMSIS/Include/core_cmFunc.h ****   This function enables IRQ interrupts by clearing the I-bit in the CPSR.
 306:libs/CMSIS/Include/core_cmFunc.h ****   Can only be executed in Privileged modes.
 307:libs/CMSIS/Include/core_cmFunc.h ****  */
 308:libs/CMSIS/Include/core_cmFunc.h **** __attribute__( ( always_inline ) ) static __INLINE void __enable_irq(void)
 309:libs/CMSIS/Include/core_cmFunc.h **** {
 310:libs/CMSIS/Include/core_cmFunc.h ****   __ASM volatile ("cpsie i");
 311:libs/CMSIS/Include/core_cmFunc.h **** }
 312:libs/CMSIS/Include/core_cmFunc.h **** 
 313:libs/CMSIS/Include/core_cmFunc.h **** 
 314:libs/CMSIS/Include/core_cmFunc.h **** /** \brief  Disable IRQ Interrupts
 315:libs/CMSIS/Include/core_cmFunc.h **** 
 316:libs/CMSIS/Include/core_cmFunc.h ****   This function disables IRQ interrupts by setting the I-bit in the CPSR.
 317:libs/CMSIS/Include/core_cmFunc.h ****   Can only be executed in Privileged modes.
 318:libs/CMSIS/Include/core_cmFunc.h ****  */
 319:libs/CMSIS/Include/core_cmFunc.h **** __attribute__( ( always_inline ) ) static __INLINE void __disable_irq(void)
 320:libs/CMSIS/Include/core_cmFunc.h **** {
 321:libs/CMSIS/Include/core_cmFunc.h ****   __ASM volatile ("cpsid i");
 322:libs/CMSIS/Include/core_cmFunc.h **** }
 323:libs/CMSIS/Include/core_cmFunc.h **** 
 324:libs/CMSIS/Include/core_cmFunc.h **** 
 325:libs/CMSIS/Include/core_cmFunc.h **** /** \brief  Get Control Register
 326:libs/CMSIS/Include/core_cmFunc.h **** 
 327:libs/CMSIS/Include/core_cmFunc.h ****     This function returns the content of the Control Register.
 328:libs/CMSIS/Include/core_cmFunc.h **** 
 329:libs/CMSIS/Include/core_cmFunc.h ****     \return               Control Register value
 330:libs/CMSIS/Include/core_cmFunc.h ****  */
 331:libs/CMSIS/Include/core_cmFunc.h **** __attribute__( ( always_inline ) ) static __INLINE uint32_t __get_CONTROL(void)
 332:libs/CMSIS/Include/core_cmFunc.h **** {
 333:libs/CMSIS/Include/core_cmFunc.h ****   uint32_t result;
 334:libs/CMSIS/Include/core_cmFunc.h **** 
 335:libs/CMSIS/Include/core_cmFunc.h ****   __ASM volatile ("MRS %0, control" : "=r" (result) );
 336:libs/CMSIS/Include/core_cmFunc.h ****   return(result);
 337:libs/CMSIS/Include/core_cmFunc.h **** }
 338:libs/CMSIS/Include/core_cmFunc.h **** 
 339:libs/CMSIS/Include/core_cmFunc.h **** 
 340:libs/CMSIS/Include/core_cmFunc.h **** /** \brief  Set Control Register
 341:libs/CMSIS/Include/core_cmFunc.h **** 
 342:libs/CMSIS/Include/core_cmFunc.h ****     This function writes the given value to the Control Register.
 343:libs/CMSIS/Include/core_cmFunc.h **** 
 344:libs/CMSIS/Include/core_cmFunc.h ****     \param [in]    control  Control Register value to set
 345:libs/CMSIS/Include/core_cmFunc.h ****  */
 346:libs/CMSIS/Include/core_cmFunc.h **** __attribute__( ( always_inline ) ) static __INLINE void __set_CONTROL(uint32_t control)
 347:libs/CMSIS/Include/core_cmFunc.h **** {
 348:libs/CMSIS/Include/core_cmFunc.h ****   __ASM volatile ("MSR control, %0" : : "r" (control) );
 349:libs/CMSIS/Include/core_cmFunc.h **** }
 350:libs/CMSIS/Include/core_cmFunc.h **** 
 351:libs/CMSIS/Include/core_cmFunc.h **** 
 352:libs/CMSIS/Include/core_cmFunc.h **** /** \brief  Get ISPR Register
 353:libs/CMSIS/Include/core_cmFunc.h **** 
 354:libs/CMSIS/Include/core_cmFunc.h ****     This function returns the content of the ISPR Register.
 355:libs/CMSIS/Include/core_cmFunc.h **** 
 356:libs/CMSIS/Include/core_cmFunc.h ****     \return               ISPR Register value
 357:libs/CMSIS/Include/core_cmFunc.h ****  */
 358:libs/CMSIS/Include/core_cmFunc.h **** __attribute__( ( always_inline ) ) static __INLINE uint32_t __get_IPSR(void)
 359:libs/CMSIS/Include/core_cmFunc.h **** {
 360:libs/CMSIS/Include/core_cmFunc.h ****   uint32_t result;
 361:libs/CMSIS/Include/core_cmFunc.h **** 
 362:libs/CMSIS/Include/core_cmFunc.h ****   __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 363:libs/CMSIS/Include/core_cmFunc.h ****   return(result);
 364:libs/CMSIS/Include/core_cmFunc.h **** }
 365:libs/CMSIS/Include/core_cmFunc.h **** 
 366:libs/CMSIS/Include/core_cmFunc.h **** 
 367:libs/CMSIS/Include/core_cmFunc.h **** /** \brief  Get APSR Register
 368:libs/CMSIS/Include/core_cmFunc.h **** 
 369:libs/CMSIS/Include/core_cmFunc.h ****     This function returns the content of the APSR Register.
 370:libs/CMSIS/Include/core_cmFunc.h **** 
 371:libs/CMSIS/Include/core_cmFunc.h ****     \return               APSR Register value
 372:libs/CMSIS/Include/core_cmFunc.h ****  */
 373:libs/CMSIS/Include/core_cmFunc.h **** __attribute__( ( always_inline ) ) static __INLINE uint32_t __get_APSR(void)
 374:libs/CMSIS/Include/core_cmFunc.h **** {
 375:libs/CMSIS/Include/core_cmFunc.h ****   uint32_t result;
 376:libs/CMSIS/Include/core_cmFunc.h **** 
 377:libs/CMSIS/Include/core_cmFunc.h ****   __ASM volatile ("MRS %0, apsr" : "=r" (result) );
 378:libs/CMSIS/Include/core_cmFunc.h ****   return(result);
 379:libs/CMSIS/Include/core_cmFunc.h **** }
 380:libs/CMSIS/Include/core_cmFunc.h **** 
 381:libs/CMSIS/Include/core_cmFunc.h **** 
 382:libs/CMSIS/Include/core_cmFunc.h **** /** \brief  Get xPSR Register
 383:libs/CMSIS/Include/core_cmFunc.h **** 
 384:libs/CMSIS/Include/core_cmFunc.h ****     This function returns the content of the xPSR Register.
 385:libs/CMSIS/Include/core_cmFunc.h **** 
 386:libs/CMSIS/Include/core_cmFunc.h ****     \return               xPSR Register value
 387:libs/CMSIS/Include/core_cmFunc.h ****  */
 388:libs/CMSIS/Include/core_cmFunc.h **** __attribute__( ( always_inline ) ) static __INLINE uint32_t __get_xPSR(void)
 389:libs/CMSIS/Include/core_cmFunc.h **** {
 390:libs/CMSIS/Include/core_cmFunc.h ****   uint32_t result;
 391:libs/CMSIS/Include/core_cmFunc.h **** 
 392:libs/CMSIS/Include/core_cmFunc.h ****   __ASM volatile ("MRS %0, xpsr" : "=r" (result) );
 393:libs/CMSIS/Include/core_cmFunc.h ****   return(result);
 394:libs/CMSIS/Include/core_cmFunc.h **** }
 395:libs/CMSIS/Include/core_cmFunc.h **** 
 396:libs/CMSIS/Include/core_cmFunc.h **** 
 397:libs/CMSIS/Include/core_cmFunc.h **** /** \brief  Get Process Stack Pointer
 398:libs/CMSIS/Include/core_cmFunc.h **** 
 399:libs/CMSIS/Include/core_cmFunc.h ****     This function returns the current value of the Process Stack Pointer (PSP).
 400:libs/CMSIS/Include/core_cmFunc.h **** 
 401:libs/CMSIS/Include/core_cmFunc.h ****     \return               PSP Register value
 402:libs/CMSIS/Include/core_cmFunc.h ****  */
 403:libs/CMSIS/Include/core_cmFunc.h **** __attribute__( ( always_inline ) ) static __INLINE uint32_t __get_PSP(void)
 404:libs/CMSIS/Include/core_cmFunc.h **** {
 405:libs/CMSIS/Include/core_cmFunc.h ****   register uint32_t result;
 406:libs/CMSIS/Include/core_cmFunc.h **** 
 407:libs/CMSIS/Include/core_cmFunc.h ****   __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 408:libs/CMSIS/Include/core_cmFunc.h ****   return(result);
 409:libs/CMSIS/Include/core_cmFunc.h **** }
 410:libs/CMSIS/Include/core_cmFunc.h ****  
 411:libs/CMSIS/Include/core_cmFunc.h **** 
 412:libs/CMSIS/Include/core_cmFunc.h **** /** \brief  Set Process Stack Pointer
 413:libs/CMSIS/Include/core_cmFunc.h **** 
 414:libs/CMSIS/Include/core_cmFunc.h ****     This function assigns the given value to the Process Stack Pointer (PSP).
 415:libs/CMSIS/Include/core_cmFunc.h **** 
 416:libs/CMSIS/Include/core_cmFunc.h ****     \param [in]    topOfProcStack  Process Stack Pointer value to set
 417:libs/CMSIS/Include/core_cmFunc.h ****  */
 418:libs/CMSIS/Include/core_cmFunc.h **** __attribute__( ( always_inline ) ) static __INLINE void __set_PSP(uint32_t topOfProcStack)
 419:libs/CMSIS/Include/core_cmFunc.h **** {
 420:libs/CMSIS/Include/core_cmFunc.h ****   __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) );
 421:libs/CMSIS/Include/core_cmFunc.h **** }
 422:libs/CMSIS/Include/core_cmFunc.h **** 
 423:libs/CMSIS/Include/core_cmFunc.h **** 
 424:libs/CMSIS/Include/core_cmFunc.h **** /** \brief  Get Main Stack Pointer
 425:libs/CMSIS/Include/core_cmFunc.h **** 
 426:libs/CMSIS/Include/core_cmFunc.h ****     This function returns the current value of the Main Stack Pointer (MSP).
 427:libs/CMSIS/Include/core_cmFunc.h **** 
 428:libs/CMSIS/Include/core_cmFunc.h ****     \return               MSP Register value
 429:libs/CMSIS/Include/core_cmFunc.h ****  */
 430:libs/CMSIS/Include/core_cmFunc.h **** __attribute__( ( always_inline ) ) static __INLINE uint32_t __get_MSP(void)
 431:libs/CMSIS/Include/core_cmFunc.h **** {
 432:libs/CMSIS/Include/core_cmFunc.h ****   register uint32_t result;
 433:libs/CMSIS/Include/core_cmFunc.h **** 
 434:libs/CMSIS/Include/core_cmFunc.h ****   __ASM volatile ("MRS %0, msp\n" : "=r" (result) );
 367              		.loc 2 434 0
 368              	@ 434 "libs/CMSIS/Include/core_cmFunc.h" 1
 369 0020 EFF30884 		MRS r4, msp
 370              	
 371              	@ 0 "" 2
 435:libs/CMSIS/Include/core_cmFunc.h ****   return(result);
 372              		.loc 2 435 0
 373              		.thumb
 374 0024 2346     		mov	r3, r4
 375              		.loc 1 78 0
 376 0026 1946     		mov	r1, r3
 377              	.LBE5:
 378              	.LBE4:
 379 0028 0F4B     		ldr	r3, .L15+8
 380 002a 1B68     		ldr	r3, [r3, #0]
 381 002c CB1A     		subs	r3, r1, r3
 382 002e 9A42     		cmp	r2, r3
 383 0030 06D9     		bls	.L13
  79:src/syscalls.c ****         r->_errno = ENOMEM;
 384              		.loc 1 79 0
 385 0032 7B68     		ldr	r3, [r7, #4]
 386 0034 4FF00C02 		mov	r2, #12
 387 0038 1A60     		str	r2, [r3, #0]
  80:src/syscalls.c ****         return (void*)-1;
 388              		.loc 1 80 0
 389 003a 4FF0FF33 		mov	r3, #-1
 390 003e 09E0     		b	.L14
 391              	.L13:
  81:src/syscalls.c ****     }
  82:src/syscalls.c **** 
  83:src/syscalls.c ****     void *ret = __brkval;
 392              		.loc 1 83 0
 393 0040 074B     		ldr	r3, .L15
 394 0042 1B68     		ldr	r3, [r3, #0]
 395 0044 FB60     		str	r3, [r7, #12]
  84:src/syscalls.c ****     __brkval += incr;
 396              		.loc 1 84 0
 397 0046 064B     		ldr	r3, .L15
 398 0048 1A68     		ldr	r2, [r3, #0]
 399 004a 3B68     		ldr	r3, [r7, #0]
 400 004c D218     		adds	r2, r2, r3
 401 004e 044B     		ldr	r3, .L15
 402 0050 1A60     		str	r2, [r3, #0]
  85:src/syscalls.c **** 
  86:src/syscalls.c ****     return ret;
 403              		.loc 1 86 0
 404 0052 FB68     		ldr	r3, [r7, #12]
 405              	.L14:
  87:src/syscalls.c **** }
 406              		.loc 1 87 0
 407 0054 1846     		mov	r0, r3
 408 0056 07F11007 		add	r7, r7, #16
 409 005a BD46     		mov	sp, r7
 410 005c 90BC     		pop	{r4, r7}
 411 005e 7047     		bx	lr
 412              	.L16:
 413              		.align	2
 414              	.L15:
 415 0060 00000000 		.word	__brkval
 416 0064 00000000 		.word	end
 417 0068 00000000 		.word	__malloc_margin
 418              		.cfi_endproc
 419              	.LFE117:
 421              		.section	.text._kill_r,"ax",%progbits
 422              		.align	2
 423              		.global	_kill_r
 424              		.thumb
 425              		.thumb_func
 427              	_kill_r:
 428              	.LFB118:
  88:src/syscalls.c **** 
  89:src/syscalls.c **** 
  90:src/syscalls.c **** int _kill_r(struct _reent *r, int pid, int signal)
  91:src/syscalls.c **** {
 429              		.loc 1 91 0
 430              		.cfi_startproc
 431              		@ args = 0, pretend = 0, frame = 16
 432              		@ frame_needed = 1, uses_anonymous_args = 0
 433              		@ link register save eliminated.
 434 0000 80B4     		push	{r7}
 435              	.LCFI24:
 436              		.cfi_def_cfa_offset 4
 437 0002 85B0     		sub	sp, sp, #20
 438              	.LCFI25:
 439              		.cfi_def_cfa_offset 24
 440 0004 00AF     		add	r7, sp, #0
 441              		.cfi_offset 7, -4
 442              	.LCFI26:
 443              		.cfi_def_cfa_register 7
 444 0006 F860     		str	r0, [r7, #12]
 445 0008 B960     		str	r1, [r7, #8]
 446 000a 7A60     		str	r2, [r7, #4]
  92:src/syscalls.c ****     r->_errno = ENOSYS;
 447              		.loc 1 92 0
 448 000c FB68     		ldr	r3, [r7, #12]
 449 000e 4FF05802 		mov	r2, #88
 450 0012 1A60     		str	r2, [r3, #0]
  93:src/syscalls.c ****     return -1;
 451              		.loc 1 93 0
 452 0014 4FF0FF33 		mov	r3, #-1
  94:src/syscalls.c **** }
 453              		.loc 1 94 0
 454 0018 1846     		mov	r0, r3
 455 001a 07F11407 		add	r7, r7, #20
 456 001e BD46     		mov	sp, r7
 457 0020 80BC     		pop	{r7}
 458 0022 7047     		bx	lr
 459              		.cfi_endproc
 460              	.LFE118:
 462              		.section	.text._getpid_r,"ax",%progbits
 463              		.align	2
 464              		.global	_getpid_r
 465              		.thumb
 466              		.thumb_func
 468              	_getpid_r:
 469              	.LFB119:
  95:src/syscalls.c **** 
  96:src/syscalls.c **** 
  97:src/syscalls.c **** int _getpid_r(struct _reent *r)
  98:src/syscalls.c **** {
 470              		.loc 1 98 0
 471              		.cfi_startproc
 472              		@ args = 0, pretend = 0, frame = 8
 473              		@ frame_needed = 1, uses_anonymous_args = 0
 474              		@ link register save eliminated.
 475 0000 80B4     		push	{r7}
 476              	.LCFI27:
 477              		.cfi_def_cfa_offset 4
 478 0002 83B0     		sub	sp, sp, #12
 479              	.LCFI28:
 480              		.cfi_def_cfa_offset 16
 481 0004 00AF     		add	r7, sp, #0
 482              		.cfi_offset 7, -4
 483              	.LCFI29:
 484              		.cfi_def_cfa_register 7
 485 0006 7860     		str	r0, [r7, #4]
  99:src/syscalls.c ****     r->_errno = ENOSYS;
 486              		.loc 1 99 0
 487 0008 7B68     		ldr	r3, [r7, #4]
 488 000a 4FF05802 		mov	r2, #88
 489 000e 1A60     		str	r2, [r3, #0]
 100:src/syscalls.c ****     return -1;
 490              		.loc 1 100 0
 491 0010 4FF0FF33 		mov	r3, #-1
 101:src/syscalls.c **** }
 492              		.loc 1 101 0
 493 0014 1846     		mov	r0, r3
 494 0016 07F10C07 		add	r7, r7, #12
 495 001a BD46     		mov	sp, r7
 496 001c 80BC     		pop	{r7}
 497 001e 7047     		bx	lr
 498              		.cfi_endproc
 499              	.LFE119:
 501              		.section	.text.__malloc_lock,"ax",%progbits
 502              		.align	2
 503              		.global	__malloc_lock
 504              		.thumb
 505              		.thumb_func
 507              	__malloc_lock:
 508              	.LFB120:
 102:src/syscalls.c **** 
 103:src/syscalls.c **** 
 104:src/syscalls.c **** void __malloc_lock(struct _reent *r)
 105:src/syscalls.c **** {
 509              		.loc 1 105 0
 510              		.cfi_startproc
 511              		@ args = 0, pretend = 0, frame = 8
 512              		@ frame_needed = 1, uses_anonymous_args = 0
 513 0000 80B5     		push	{r7, lr}
 514              	.LCFI30:
 515              		.cfi_def_cfa_offset 8
 516 0002 82B0     		sub	sp, sp, #8
 517              	.LCFI31:
 518              		.cfi_def_cfa_offset 16
 519 0004 00AF     		add	r7, sp, #0
 520              		.cfi_offset 14, -4
 521              		.cfi_offset 7, -8
 522              	.LCFI32:
 523              		.cfi_def_cfa_register 7
 524 0006 7860     		str	r0, [r7, #4]
 106:src/syscalls.c ****     vPortEnterCritical();
 525              		.loc 1 106 0
 526 0008 FFF7FEFF 		bl	vPortEnterCritical
 107:src/syscalls.c **** }
 527              		.loc 1 107 0
 528 000c 07F10807 		add	r7, r7, #8
 529 0010 BD46     		mov	sp, r7
 530 0012 80BD     		pop	{r7, pc}
 531              		.cfi_endproc
 532              	.LFE120:
 534              		.section	.text.__malloc_unlock,"ax",%progbits
 535              		.align	2
 536              		.global	__malloc_unlock
 537              		.thumb
 538              		.thumb_func
 540              	__malloc_unlock:
 541              	.LFB121:
 108:src/syscalls.c **** 
 109:src/syscalls.c **** 
 110:src/syscalls.c **** void __malloc_unlock(struct _reent *r)
 111:src/syscalls.c **** {
 542              		.loc 1 111 0
 543              		.cfi_startproc
 544              		@ args = 0, pretend = 0, frame = 8
 545              		@ frame_needed = 1, uses_anonymous_args = 0
 546 0000 80B5     		push	{r7, lr}
 547              	.LCFI33:
 548              		.cfi_def_cfa_offset 8
 549 0002 82B0     		sub	sp, sp, #8
 550              	.LCFI34:
 551              		.cfi_def_cfa_offset 16
 552 0004 00AF     		add	r7, sp, #0
 553              		.cfi_offset 14, -4
 554              		.cfi_offset 7, -8
 555              	.LCFI35:
 556              		.cfi_def_cfa_register 7
 557 0006 7860     		str	r0, [r7, #4]
 112:src/syscalls.c ****     vPortExitCritical();
 558              		.loc 1 112 0
 559 0008 FFF7FEFF 		bl	vPortExitCritical
 113:src/syscalls.c **** }
 560              		.loc 1 113 0
 561 000c 07F10807 		add	r7, r7, #8
 562 0010 BD46     		mov	sp, r7
 563 0012 80BD     		pop	{r7, pc}
 564              		.cfi_endproc
 565              	.LFE121:
 567              		.text
 568              	.Letext0:
DEFINED SYMBOLS
                            *ABS*:00000000 syscalls.c
     /tmp/ccddODfo.s:29     .data.__malloc_margin:00000000 __malloc_margin
     /tmp/ccddODfo.s:26     .data.__malloc_margin:00000000 $d
                            *COM*:00000004 __brkval
     /tmp/ccddODfo.s:33     .text._exit:00000000 $t
     /tmp/ccddODfo.s:38     .text._exit:00000000 _exit
     /tmp/ccddODfo.s:64     .text._read_r:00000000 $t
     /tmp/ccddODfo.s:69     .text._read_r:00000000 _read_r
     /tmp/ccddODfo.s:106    .text._write_r:00000000 $t
     /tmp/ccddODfo.s:111    .text._write_r:00000000 _write_r
     /tmp/ccddODfo.s:148    .text._lseek_r:00000000 $t
     /tmp/ccddODfo.s:153    .text._lseek_r:00000000 _lseek_r
     /tmp/ccddODfo.s:190    .text._close_r:00000000 $t
     /tmp/ccddODfo.s:195    .text._close_r:00000000 _close_r
     /tmp/ccddODfo.s:230    .text._fstat_r:00000000 $t
     /tmp/ccddODfo.s:235    .text._fstat_r:00000000 _fstat_r
     /tmp/ccddODfo.s:288    .text._isatty_r:00000000 $t
     /tmp/ccddODfo.s:293    .text._isatty_r:00000000 _isatty_r
     /tmp/ccddODfo.s:324    .text._sbrk_r:00000000 $t
     /tmp/ccddODfo.s:329    .text._sbrk_r:00000000 _sbrk_r
     /tmp/ccddODfo.s:415    .text._sbrk_r:00000060 $d
     /tmp/ccddODfo.s:422    .text._kill_r:00000000 $t
     /tmp/ccddODfo.s:427    .text._kill_r:00000000 _kill_r
     /tmp/ccddODfo.s:463    .text._getpid_r:00000000 $t
     /tmp/ccddODfo.s:468    .text._getpid_r:00000000 _getpid_r
     /tmp/ccddODfo.s:502    .text.__malloc_lock:00000000 $t
     /tmp/ccddODfo.s:507    .text.__malloc_lock:00000000 __malloc_lock
     /tmp/ccddODfo.s:535    .text.__malloc_unlock:00000000 $t
     /tmp/ccddODfo.s:540    .text.__malloc_unlock:00000000 __malloc_unlock
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
uart_read_r
uart_write_r
end
vPortEnterCritical
vPortExitCritical
