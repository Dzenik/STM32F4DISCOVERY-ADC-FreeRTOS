   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 3
   4              		.fpu fpv4-sp-d16
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 6
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"stm32f4xx_cryp_tdes.c"
  22              	.Ltext0:
  23              		.cfi_sections	.debug_frame
  24              		.section	.text.CRYP_TDES_ECB,"ax",%progbits
  25              		.align	2
  26              		.global	CRYP_TDES_ECB
  27              		.thumb
  28              		.thumb_func
  30              	CRYP_TDES_ECB:
  31              	.LFB110:
  32              		.file 1 "libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c"
   1:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c **** /**
   2:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   ******************************************************************************
   3:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   * @file    stm32f4xx_cryp_tdes.c
   4:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   * @author  MCD Application Team
   5:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   * @version V1.0.0RC1
   6:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   * @date    25-August-2011
   7:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   * @brief   This file provides high level functions to encrypt and decrypt an 
   8:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   *          input message using TDES in ECB/CBC modes .
   9:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   *          It uses the stm32f4xx_cryp.c/.h drivers to access the STM32F4xx CRYP
  10:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   *          peripheral.
  11:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   *
  12:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   *  @verbatim
  13:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   *
  14:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   *          ===================================================================
  15:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   *                                   How to use this driver
  16:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   *          ===================================================================
  17:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   *          1. Enable The CRYP controller clock using 
  18:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   *            RCC_AHB2PeriphClockCmd(RCC_AHB2Periph_CRYP, ENABLE); function.
  19:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   *
  20:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   *          2. Encrypt and decrypt using TDES in ECB Mode using CRYP_TDES_ECB()
  21:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   *             function.
  22:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   *
  23:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   *          3. Encrypt and decrypt using TDES in CBC Mode using CRYP_TDES_CBC()
  24:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   *             function.
  25:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   *
  26:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   *  @endverbatim
  27:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   *
  28:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   ******************************************************************************
  29:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   * @attention
  30:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   *
  31:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
  32:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
  33:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
  34:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
  35:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
  36:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
  37:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   *
  38:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   * <h2><center>&copy; COPYRIGHT 2011 STMicroelectronics</center></h2>
  39:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   ******************************************************************************
  40:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   */ 
  41:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c **** 
  42:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c **** /* Includes ------------------------------------------------------------------*/
  43:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c **** #include "stm32f4xx_cryp.h"
  44:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c **** 
  45:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c **** 
  46:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c **** /** @addtogroup STM32F4xx_StdPeriph_Driver
  47:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   * @{
  48:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   */
  49:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c **** 
  50:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c **** /** @defgroup CRYP 
  51:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   * @brief CRYP driver modules
  52:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   * @{
  53:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   */
  54:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c **** 
  55:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c **** /* Private typedef -----------------------------------------------------------*/
  56:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c **** /* Private define ------------------------------------------------------------*/
  57:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c **** #define TDESBUSY_TIMEOUT    ((uint32_t) 0x00010000)
  58:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c **** 
  59:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c **** /* Private macro -------------------------------------------------------------*/
  60:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c **** /* Private variables ---------------------------------------------------------*/
  61:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c **** /* Private function prototypes -----------------------------------------------*/
  62:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c **** /* Private functions ---------------------------------------------------------*/
  63:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c **** 
  64:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c **** 
  65:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c **** /** @defgroup CRYP_Private_Functions
  66:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   * @{
  67:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   */ 
  68:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c **** 
  69:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c **** /** @defgroup CRYP_Group7 High Level TDES functions
  70:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****  *  @brief   High Level TDES functions 
  71:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****  *
  72:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c **** @verbatim   
  73:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****  ===============================================================================
  74:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****                           High Level TDES functions
  75:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****  ===============================================================================
  76:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c **** 
  77:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c **** 
  78:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c **** @endverbatim
  79:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   * @{
  80:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   */
  81:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c **** 
  82:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c **** /**
  83:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   * @brief  Encrypt and decrypt using TDES in ECB Mode
  84:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   * @param  Mode: encryption or decryption Mode.
  85:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   *           This parameter can be one of the following values:
  86:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   *            @arg MODE_ENCRYPT: Encryption
  87:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   *            @arg MODE_DECRYPT: Decryption
  88:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   * @param  Key: Key used for TDES algorithm.
  89:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   * @param  Ilength: length of the Input buffer, must be a multiple of 8.
  90:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   * @param  Input: pointer to the Input buffer.
  91:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   * @param  Output: pointer to the returned buffer.
  92:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   * @retval An ErrorStatus enumeration value:
  93:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   *          - SUCCESS: Operation done
  94:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   *          - ERROR: Operation failed
  95:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   */
  96:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c **** ErrorStatus CRYP_TDES_ECB(uint8_t Mode, uint8_t Key[24], uint8_t *Input, 
  97:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****                           uint32_t Ilength, uint8_t *Output)
  98:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c **** {
  33              		.loc 1 98 0
  34              		.cfi_startproc
  35              		@ args = 4, pretend = 0, frame = 136
  36              		@ frame_needed = 1, uses_anonymous_args = 0
  37 0000 90B5     		push	{r4, r7, lr}
  38              	.LCFI0:
  39              		.cfi_def_cfa_offset 12
  40 0002 A3B0     		sub	sp, sp, #140
  41              	.LCFI1:
  42              		.cfi_def_cfa_offset 152
  43 0004 00AF     		add	r7, sp, #0
  44              		.cfi_offset 14, -4
  45              		.cfi_offset 7, -8
  46              		.cfi_offset 4, -12
  47              	.LCFI2:
  48              		.cfi_def_cfa_register 7
  49 0006 B960     		str	r1, [r7, #8]
  50 0008 7A60     		str	r2, [r7, #4]
  51 000a 3B60     		str	r3, [r7, #0]
  52 000c 0346     		mov	r3, r0
  53 000e FB73     		strb	r3, [r7, #15]
  99:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   CRYP_InitTypeDef TDES_CRYP_InitStructure;
 100:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   CRYP_KeyInitTypeDef TDES_CRYP_KeyInitStructure;
 101:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   __IO uint32_t counter = 0;
  54              		.loc 1 101 0
  55 0010 4FF00003 		mov	r3, #0
  56 0014 7B61     		str	r3, [r7, #20]
 102:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   uint32_t busystatus = 0;
  57              		.loc 1 102 0
  58 0016 4FF00003 		mov	r3, #0
  59 001a 7B67     		str	r3, [r7, #116]
 103:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   ErrorStatus status = SUCCESS;
  60              		.loc 1 103 0
  61 001c 4FF00103 		mov	r3, #1
  62 0020 87F88730 		strb	r3, [r7, #135]
 104:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   uint32_t keyaddr    = (uint32_t)Key;
  63              		.loc 1 104 0
  64 0024 BB68     		ldr	r3, [r7, #8]
  65 0026 3B67     		str	r3, [r7, #112]
 105:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   uint32_t inputaddr  = (uint32_t)Input;
  66              		.loc 1 105 0
  67 0028 7B68     		ldr	r3, [r7, #4]
  68 002a C7F88030 		str	r3, [r7, #128]
 106:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   uint32_t outputaddr = (uint32_t)Output;
  69              		.loc 1 106 0
  70 002e D7F89830 		ldr	r3, [r7, #152]
  71 0032 FB67     		str	r3, [r7, #124]
 107:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   uint32_t i = 0;
  72              		.loc 1 107 0
  73 0034 4FF00003 		mov	r3, #0
  74 0038 BB67     		str	r3, [r7, #120]
 108:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c **** 
 109:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   /* Crypto structures initialisation*/
 110:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   CRYP_KeyStructInit(&TDES_CRYP_KeyInitStructure);
  75              		.loc 1 110 0
  76 003a 07F11803 		add	r3, r7, #24
  77 003e 1846     		mov	r0, r3
  78 0040 FFF7FEFF 		bl	CRYP_KeyStructInit
 111:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c **** 
 112:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   /* Crypto Init for Encryption process */
 113:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   if(Mode == MODE_ENCRYPT) /* TDES encryption */
  79              		.loc 1 113 0
  80 0044 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
  81 0046 012B     		cmp	r3, #1
  82 0048 03D1     		bne	.L2
 114:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   {
 115:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****      TDES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Encrypt;
  83              		.loc 1 115 0
  84 004a 4FF00003 		mov	r3, #0
  85 004e 3B87     		strh	r3, [r7, #56]	@ movhi
  86 0050 02E0     		b	.L3
  87              	.L2:
 116:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   }
 117:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   else /*if(Mode == MODE_DECRYPT)*/ /* TDES decryption */
 118:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   {
 119:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****      TDES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Decrypt;
  88              		.loc 1 119 0
  89 0052 4FF00403 		mov	r3, #4
  90 0056 3B87     		strh	r3, [r7, #56]	@ movhi
  91              	.L3:
 120:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   }
 121:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c **** 
 122:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   TDES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_TDES_ECB;
  92              		.loc 1 122 0
  93 0058 4FF00003 		mov	r3, #0
  94 005c 7B87     		strh	r3, [r7, #58]	@ movhi
 123:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   TDES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
  95              		.loc 1 123 0
  96 005e 4FF08003 		mov	r3, #128
  97 0062 BB87     		strh	r3, [r7, #60]	@ movhi
 124:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   CRYP_Init(&TDES_CRYP_InitStructure);
  98              		.loc 1 124 0
  99 0064 07F13803 		add	r3, r7, #56
 100 0068 1846     		mov	r0, r3
 101 006a FFF7FEFF 		bl	CRYP_Init
 125:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c **** 
 126:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   /* Key Initialisation */
 127:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   TDES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
 102              		.loc 1 127 0
 103 006e 3B6F     		ldr	r3, [r7, #112]
 104 0070 1B68     		ldr	r3, [r3, #0]
 105 0072 FB66     		str	r3, [r7, #108]
 106              	.LBB30:
 107              	.LBB31:
 108              		.file 2 "libs/CMSIS/Include/core_cmInstr.h"
   1:libs/CMSIS/Include/core_cmInstr.h **** /**************************************************************************//**
   2:libs/CMSIS/Include/core_cmInstr.h ****  * @file     core_cmInstr.h
   3:libs/CMSIS/Include/core_cmInstr.h ****  * @brief    CMSIS Cortex-M Core Instruction Access Header File
   4:libs/CMSIS/Include/core_cmInstr.h ****  * @version  V2.10
   5:libs/CMSIS/Include/core_cmInstr.h ****  * @date     19. July 2011
   6:libs/CMSIS/Include/core_cmInstr.h ****  *
   7:libs/CMSIS/Include/core_cmInstr.h ****  * @note
   8:libs/CMSIS/Include/core_cmInstr.h ****  * Copyright (C) 2009-2011 ARM Limited. All rights reserved.
   9:libs/CMSIS/Include/core_cmInstr.h ****  *
  10:libs/CMSIS/Include/core_cmInstr.h ****  * @par
  11:libs/CMSIS/Include/core_cmInstr.h ****  * ARM Limited (ARM) is supplying this software for use with Cortex-M 
  12:libs/CMSIS/Include/core_cmInstr.h ****  * processor based microcontrollers.  This file can be freely distributed 
  13:libs/CMSIS/Include/core_cmInstr.h ****  * within development tools that are supporting such ARM based processors. 
  14:libs/CMSIS/Include/core_cmInstr.h ****  *
  15:libs/CMSIS/Include/core_cmInstr.h ****  * @par
  16:libs/CMSIS/Include/core_cmInstr.h ****  * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
  17:libs/CMSIS/Include/core_cmInstr.h ****  * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
  18:libs/CMSIS/Include/core_cmInstr.h ****  * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
  19:libs/CMSIS/Include/core_cmInstr.h ****  * ARM SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL, OR
  20:libs/CMSIS/Include/core_cmInstr.h ****  * CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
  21:libs/CMSIS/Include/core_cmInstr.h ****  *
  22:libs/CMSIS/Include/core_cmInstr.h ****  ******************************************************************************/
  23:libs/CMSIS/Include/core_cmInstr.h **** 
  24:libs/CMSIS/Include/core_cmInstr.h **** #ifndef __CORE_CMINSTR_H
  25:libs/CMSIS/Include/core_cmInstr.h **** #define __CORE_CMINSTR_H
  26:libs/CMSIS/Include/core_cmInstr.h **** 
  27:libs/CMSIS/Include/core_cmInstr.h **** 
  28:libs/CMSIS/Include/core_cmInstr.h **** /* ##########################  Core Instruction Access  ######################### */
  29:libs/CMSIS/Include/core_cmInstr.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
  30:libs/CMSIS/Include/core_cmInstr.h ****   Access to dedicated instructions
  31:libs/CMSIS/Include/core_cmInstr.h ****   @{
  32:libs/CMSIS/Include/core_cmInstr.h **** */
  33:libs/CMSIS/Include/core_cmInstr.h **** 
  34:libs/CMSIS/Include/core_cmInstr.h **** #if   defined ( __CC_ARM ) /*------------------RealView Compiler -----------------*/
  35:libs/CMSIS/Include/core_cmInstr.h **** /* ARM armcc specific functions */
  36:libs/CMSIS/Include/core_cmInstr.h **** 
  37:libs/CMSIS/Include/core_cmInstr.h **** #if (__ARMCC_VERSION < 400677)
  38:libs/CMSIS/Include/core_cmInstr.h ****   #error "Please use ARM Compiler Toolchain V4.0.677 or later!"
  39:libs/CMSIS/Include/core_cmInstr.h **** #endif
  40:libs/CMSIS/Include/core_cmInstr.h **** 
  41:libs/CMSIS/Include/core_cmInstr.h **** 
  42:libs/CMSIS/Include/core_cmInstr.h **** /** \brief  No Operation
  43:libs/CMSIS/Include/core_cmInstr.h **** 
  44:libs/CMSIS/Include/core_cmInstr.h ****     No Operation does nothing. This instruction can be used for code alignment purposes.
  45:libs/CMSIS/Include/core_cmInstr.h ****  */
  46:libs/CMSIS/Include/core_cmInstr.h **** #define __NOP                             __nop
  47:libs/CMSIS/Include/core_cmInstr.h **** 
  48:libs/CMSIS/Include/core_cmInstr.h **** 
  49:libs/CMSIS/Include/core_cmInstr.h **** /** \brief  Wait For Interrupt
  50:libs/CMSIS/Include/core_cmInstr.h **** 
  51:libs/CMSIS/Include/core_cmInstr.h ****     Wait For Interrupt is a hint instruction that suspends execution
  52:libs/CMSIS/Include/core_cmInstr.h ****     until one of a number of events occurs.
  53:libs/CMSIS/Include/core_cmInstr.h ****  */
  54:libs/CMSIS/Include/core_cmInstr.h **** #define __WFI                             __wfi
  55:libs/CMSIS/Include/core_cmInstr.h **** 
  56:libs/CMSIS/Include/core_cmInstr.h **** 
  57:libs/CMSIS/Include/core_cmInstr.h **** /** \brief  Wait For Event
  58:libs/CMSIS/Include/core_cmInstr.h **** 
  59:libs/CMSIS/Include/core_cmInstr.h ****     Wait For Event is a hint instruction that permits the processor to enter
  60:libs/CMSIS/Include/core_cmInstr.h ****     a low-power state until one of a number of events occurs.
  61:libs/CMSIS/Include/core_cmInstr.h ****  */
  62:libs/CMSIS/Include/core_cmInstr.h **** #define __WFE                             __wfe
  63:libs/CMSIS/Include/core_cmInstr.h **** 
  64:libs/CMSIS/Include/core_cmInstr.h **** 
  65:libs/CMSIS/Include/core_cmInstr.h **** /** \brief  Send Event
  66:libs/CMSIS/Include/core_cmInstr.h **** 
  67:libs/CMSIS/Include/core_cmInstr.h ****     Send Event is a hint instruction. It causes an event to be signaled to the CPU.
  68:libs/CMSIS/Include/core_cmInstr.h ****  */
  69:libs/CMSIS/Include/core_cmInstr.h **** #define __SEV                             __sev
  70:libs/CMSIS/Include/core_cmInstr.h **** 
  71:libs/CMSIS/Include/core_cmInstr.h **** 
  72:libs/CMSIS/Include/core_cmInstr.h **** /** \brief  Instruction Synchronization Barrier
  73:libs/CMSIS/Include/core_cmInstr.h **** 
  74:libs/CMSIS/Include/core_cmInstr.h ****     Instruction Synchronization Barrier flushes the pipeline in the processor, 
  75:libs/CMSIS/Include/core_cmInstr.h ****     so that all instructions following the ISB are fetched from cache or 
  76:libs/CMSIS/Include/core_cmInstr.h ****     memory, after the instruction has been completed.
  77:libs/CMSIS/Include/core_cmInstr.h ****  */
  78:libs/CMSIS/Include/core_cmInstr.h **** #define __ISB()                           __isb(0xF)
  79:libs/CMSIS/Include/core_cmInstr.h **** 
  80:libs/CMSIS/Include/core_cmInstr.h **** 
  81:libs/CMSIS/Include/core_cmInstr.h **** /** \brief  Data Synchronization Barrier
  82:libs/CMSIS/Include/core_cmInstr.h **** 
  83:libs/CMSIS/Include/core_cmInstr.h ****     This function acts as a special kind of Data Memory Barrier. 
  84:libs/CMSIS/Include/core_cmInstr.h ****     It completes when all explicit memory accesses before this instruction complete.
  85:libs/CMSIS/Include/core_cmInstr.h ****  */
  86:libs/CMSIS/Include/core_cmInstr.h **** #define __DSB()                           __dsb(0xF)
  87:libs/CMSIS/Include/core_cmInstr.h **** 
  88:libs/CMSIS/Include/core_cmInstr.h **** 
  89:libs/CMSIS/Include/core_cmInstr.h **** /** \brief  Data Memory Barrier
  90:libs/CMSIS/Include/core_cmInstr.h **** 
  91:libs/CMSIS/Include/core_cmInstr.h ****     This function ensures the apparent order of the explicit memory operations before 
  92:libs/CMSIS/Include/core_cmInstr.h ****     and after the instruction, without ensuring their completion.
  93:libs/CMSIS/Include/core_cmInstr.h ****  */
  94:libs/CMSIS/Include/core_cmInstr.h **** #define __DMB()                           __dmb(0xF)
  95:libs/CMSIS/Include/core_cmInstr.h **** 
  96:libs/CMSIS/Include/core_cmInstr.h **** 
  97:libs/CMSIS/Include/core_cmInstr.h **** /** \brief  Reverse byte order (32 bit)
  98:libs/CMSIS/Include/core_cmInstr.h **** 
  99:libs/CMSIS/Include/core_cmInstr.h ****     This function reverses the byte order in integer value.
 100:libs/CMSIS/Include/core_cmInstr.h **** 
 101:libs/CMSIS/Include/core_cmInstr.h ****     \param [in]    value  Value to reverse
 102:libs/CMSIS/Include/core_cmInstr.h ****     \return               Reversed value
 103:libs/CMSIS/Include/core_cmInstr.h ****  */
 104:libs/CMSIS/Include/core_cmInstr.h **** #define __REV                             __rev
 105:libs/CMSIS/Include/core_cmInstr.h **** 
 106:libs/CMSIS/Include/core_cmInstr.h **** 
 107:libs/CMSIS/Include/core_cmInstr.h **** /** \brief  Reverse byte order (16 bit)
 108:libs/CMSIS/Include/core_cmInstr.h **** 
 109:libs/CMSIS/Include/core_cmInstr.h ****     This function reverses the byte order in two unsigned short values.
 110:libs/CMSIS/Include/core_cmInstr.h **** 
 111:libs/CMSIS/Include/core_cmInstr.h ****     \param [in]    value  Value to reverse
 112:libs/CMSIS/Include/core_cmInstr.h ****     \return               Reversed value
 113:libs/CMSIS/Include/core_cmInstr.h ****  */
 114:libs/CMSIS/Include/core_cmInstr.h **** static __INLINE __ASM uint32_t __REV16(uint32_t value)
 115:libs/CMSIS/Include/core_cmInstr.h **** {
 116:libs/CMSIS/Include/core_cmInstr.h ****   rev16 r0, r0
 117:libs/CMSIS/Include/core_cmInstr.h ****   bx lr
 118:libs/CMSIS/Include/core_cmInstr.h **** }
 119:libs/CMSIS/Include/core_cmInstr.h **** 
 120:libs/CMSIS/Include/core_cmInstr.h **** 
 121:libs/CMSIS/Include/core_cmInstr.h **** /** \brief  Reverse byte order in signed short value
 122:libs/CMSIS/Include/core_cmInstr.h **** 
 123:libs/CMSIS/Include/core_cmInstr.h ****     This function reverses the byte order in a signed short value with sign extension to integer.
 124:libs/CMSIS/Include/core_cmInstr.h **** 
 125:libs/CMSIS/Include/core_cmInstr.h ****     \param [in]    value  Value to reverse
 126:libs/CMSIS/Include/core_cmInstr.h ****     \return               Reversed value
 127:libs/CMSIS/Include/core_cmInstr.h ****  */
 128:libs/CMSIS/Include/core_cmInstr.h **** static __INLINE __ASM int32_t __REVSH(int32_t value)
 129:libs/CMSIS/Include/core_cmInstr.h **** {
 130:libs/CMSIS/Include/core_cmInstr.h ****   revsh r0, r0
 131:libs/CMSIS/Include/core_cmInstr.h ****   bx lr
 132:libs/CMSIS/Include/core_cmInstr.h **** }
 133:libs/CMSIS/Include/core_cmInstr.h **** 
 134:libs/CMSIS/Include/core_cmInstr.h **** 
 135:libs/CMSIS/Include/core_cmInstr.h **** #if       (__CORTEX_M >= 0x03)
 136:libs/CMSIS/Include/core_cmInstr.h **** 
 137:libs/CMSIS/Include/core_cmInstr.h **** /** \brief  Reverse bit order of value
 138:libs/CMSIS/Include/core_cmInstr.h **** 
 139:libs/CMSIS/Include/core_cmInstr.h ****     This function reverses the bit order of the given value.
 140:libs/CMSIS/Include/core_cmInstr.h **** 
 141:libs/CMSIS/Include/core_cmInstr.h ****     \param [in]    value  Value to reverse
 142:libs/CMSIS/Include/core_cmInstr.h ****     \return               Reversed value
 143:libs/CMSIS/Include/core_cmInstr.h ****  */
 144:libs/CMSIS/Include/core_cmInstr.h **** #define __RBIT                            __rbit
 145:libs/CMSIS/Include/core_cmInstr.h **** 
 146:libs/CMSIS/Include/core_cmInstr.h **** 
 147:libs/CMSIS/Include/core_cmInstr.h **** /** \brief  LDR Exclusive (8 bit)
 148:libs/CMSIS/Include/core_cmInstr.h **** 
 149:libs/CMSIS/Include/core_cmInstr.h ****     This function performs a exclusive LDR command for 8 bit value.
 150:libs/CMSIS/Include/core_cmInstr.h **** 
 151:libs/CMSIS/Include/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 152:libs/CMSIS/Include/core_cmInstr.h ****     \return             value of type uint8_t at (*ptr)
 153:libs/CMSIS/Include/core_cmInstr.h ****  */
 154:libs/CMSIS/Include/core_cmInstr.h **** #define __LDREXB(ptr)                     ((uint8_t ) __ldrex(ptr))
 155:libs/CMSIS/Include/core_cmInstr.h **** 
 156:libs/CMSIS/Include/core_cmInstr.h **** 
 157:libs/CMSIS/Include/core_cmInstr.h **** /** \brief  LDR Exclusive (16 bit)
 158:libs/CMSIS/Include/core_cmInstr.h **** 
 159:libs/CMSIS/Include/core_cmInstr.h ****     This function performs a exclusive LDR command for 16 bit values.
 160:libs/CMSIS/Include/core_cmInstr.h **** 
 161:libs/CMSIS/Include/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 162:libs/CMSIS/Include/core_cmInstr.h ****     \return        value of type uint16_t at (*ptr)
 163:libs/CMSIS/Include/core_cmInstr.h ****  */
 164:libs/CMSIS/Include/core_cmInstr.h **** #define __LDREXH(ptr)                     ((uint16_t) __ldrex(ptr))
 165:libs/CMSIS/Include/core_cmInstr.h **** 
 166:libs/CMSIS/Include/core_cmInstr.h **** 
 167:libs/CMSIS/Include/core_cmInstr.h **** /** \brief  LDR Exclusive (32 bit)
 168:libs/CMSIS/Include/core_cmInstr.h **** 
 169:libs/CMSIS/Include/core_cmInstr.h ****     This function performs a exclusive LDR command for 32 bit values.
 170:libs/CMSIS/Include/core_cmInstr.h **** 
 171:libs/CMSIS/Include/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 172:libs/CMSIS/Include/core_cmInstr.h ****     \return        value of type uint32_t at (*ptr)
 173:libs/CMSIS/Include/core_cmInstr.h ****  */
 174:libs/CMSIS/Include/core_cmInstr.h **** #define __LDREXW(ptr)                     ((uint32_t ) __ldrex(ptr))
 175:libs/CMSIS/Include/core_cmInstr.h **** 
 176:libs/CMSIS/Include/core_cmInstr.h **** 
 177:libs/CMSIS/Include/core_cmInstr.h **** /** \brief  STR Exclusive (8 bit)
 178:libs/CMSIS/Include/core_cmInstr.h **** 
 179:libs/CMSIS/Include/core_cmInstr.h ****     This function performs a exclusive STR command for 8 bit values.
 180:libs/CMSIS/Include/core_cmInstr.h **** 
 181:libs/CMSIS/Include/core_cmInstr.h ****     \param [in]  value  Value to store
 182:libs/CMSIS/Include/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 183:libs/CMSIS/Include/core_cmInstr.h ****     \return          0  Function succeeded
 184:libs/CMSIS/Include/core_cmInstr.h ****     \return          1  Function failed
 185:libs/CMSIS/Include/core_cmInstr.h ****  */
 186:libs/CMSIS/Include/core_cmInstr.h **** #define __STREXB(value, ptr)              __strex(value, ptr)
 187:libs/CMSIS/Include/core_cmInstr.h **** 
 188:libs/CMSIS/Include/core_cmInstr.h **** 
 189:libs/CMSIS/Include/core_cmInstr.h **** /** \brief  STR Exclusive (16 bit)
 190:libs/CMSIS/Include/core_cmInstr.h **** 
 191:libs/CMSIS/Include/core_cmInstr.h ****     This function performs a exclusive STR command for 16 bit values.
 192:libs/CMSIS/Include/core_cmInstr.h **** 
 193:libs/CMSIS/Include/core_cmInstr.h ****     \param [in]  value  Value to store
 194:libs/CMSIS/Include/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 195:libs/CMSIS/Include/core_cmInstr.h ****     \return          0  Function succeeded
 196:libs/CMSIS/Include/core_cmInstr.h ****     \return          1  Function failed
 197:libs/CMSIS/Include/core_cmInstr.h ****  */
 198:libs/CMSIS/Include/core_cmInstr.h **** #define __STREXH(value, ptr)              __strex(value, ptr)
 199:libs/CMSIS/Include/core_cmInstr.h **** 
 200:libs/CMSIS/Include/core_cmInstr.h **** 
 201:libs/CMSIS/Include/core_cmInstr.h **** /** \brief  STR Exclusive (32 bit)
 202:libs/CMSIS/Include/core_cmInstr.h **** 
 203:libs/CMSIS/Include/core_cmInstr.h ****     This function performs a exclusive STR command for 32 bit values.
 204:libs/CMSIS/Include/core_cmInstr.h **** 
 205:libs/CMSIS/Include/core_cmInstr.h ****     \param [in]  value  Value to store
 206:libs/CMSIS/Include/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 207:libs/CMSIS/Include/core_cmInstr.h ****     \return          0  Function succeeded
 208:libs/CMSIS/Include/core_cmInstr.h ****     \return          1  Function failed
 209:libs/CMSIS/Include/core_cmInstr.h ****  */
 210:libs/CMSIS/Include/core_cmInstr.h **** #define __STREXW(value, ptr)              __strex(value, ptr)
 211:libs/CMSIS/Include/core_cmInstr.h **** 
 212:libs/CMSIS/Include/core_cmInstr.h **** 
 213:libs/CMSIS/Include/core_cmInstr.h **** /** \brief  Remove the exclusive lock
 214:libs/CMSIS/Include/core_cmInstr.h **** 
 215:libs/CMSIS/Include/core_cmInstr.h ****     This function removes the exclusive lock which is created by LDREX.
 216:libs/CMSIS/Include/core_cmInstr.h **** 
 217:libs/CMSIS/Include/core_cmInstr.h ****  */
 218:libs/CMSIS/Include/core_cmInstr.h **** #define __CLREX                           __clrex
 219:libs/CMSIS/Include/core_cmInstr.h **** 
 220:libs/CMSIS/Include/core_cmInstr.h **** 
 221:libs/CMSIS/Include/core_cmInstr.h **** /** \brief  Signed Saturate
 222:libs/CMSIS/Include/core_cmInstr.h **** 
 223:libs/CMSIS/Include/core_cmInstr.h ****     This function saturates a signed value.
 224:libs/CMSIS/Include/core_cmInstr.h **** 
 225:libs/CMSIS/Include/core_cmInstr.h ****     \param [in]  value  Value to be saturated
 226:libs/CMSIS/Include/core_cmInstr.h ****     \param [in]    sat  Bit position to saturate to (1..32)
 227:libs/CMSIS/Include/core_cmInstr.h ****     \return             Saturated value
 228:libs/CMSIS/Include/core_cmInstr.h ****  */
 229:libs/CMSIS/Include/core_cmInstr.h **** #define __SSAT                            __ssat
 230:libs/CMSIS/Include/core_cmInstr.h **** 
 231:libs/CMSIS/Include/core_cmInstr.h **** 
 232:libs/CMSIS/Include/core_cmInstr.h **** /** \brief  Unsigned Saturate
 233:libs/CMSIS/Include/core_cmInstr.h **** 
 234:libs/CMSIS/Include/core_cmInstr.h ****     This function saturates an unsigned value.
 235:libs/CMSIS/Include/core_cmInstr.h **** 
 236:libs/CMSIS/Include/core_cmInstr.h ****     \param [in]  value  Value to be saturated
 237:libs/CMSIS/Include/core_cmInstr.h ****     \param [in]    sat  Bit position to saturate to (0..31)
 238:libs/CMSIS/Include/core_cmInstr.h ****     \return             Saturated value
 239:libs/CMSIS/Include/core_cmInstr.h ****  */
 240:libs/CMSIS/Include/core_cmInstr.h **** #define __USAT                            __usat
 241:libs/CMSIS/Include/core_cmInstr.h **** 
 242:libs/CMSIS/Include/core_cmInstr.h **** 
 243:libs/CMSIS/Include/core_cmInstr.h **** /** \brief  Count leading zeros
 244:libs/CMSIS/Include/core_cmInstr.h **** 
 245:libs/CMSIS/Include/core_cmInstr.h ****     This function counts the number of leading zeros of a data value.
 246:libs/CMSIS/Include/core_cmInstr.h **** 
 247:libs/CMSIS/Include/core_cmInstr.h ****     \param [in]  value  Value to count the leading zeros
 248:libs/CMSIS/Include/core_cmInstr.h ****     \return             number of leading zeros in value
 249:libs/CMSIS/Include/core_cmInstr.h ****  */
 250:libs/CMSIS/Include/core_cmInstr.h **** #define __CLZ                             __clz 
 251:libs/CMSIS/Include/core_cmInstr.h **** 
 252:libs/CMSIS/Include/core_cmInstr.h **** #endif /* (__CORTEX_M >= 0x03) */
 253:libs/CMSIS/Include/core_cmInstr.h **** 
 254:libs/CMSIS/Include/core_cmInstr.h **** 
 255:libs/CMSIS/Include/core_cmInstr.h **** 
 256:libs/CMSIS/Include/core_cmInstr.h **** #elif defined ( __ICCARM__ ) /*------------------ ICC Compiler -------------------*/
 257:libs/CMSIS/Include/core_cmInstr.h **** /* IAR iccarm specific functions */
 258:libs/CMSIS/Include/core_cmInstr.h **** 
 259:libs/CMSIS/Include/core_cmInstr.h **** #include <cmsis_iar.h>
 260:libs/CMSIS/Include/core_cmInstr.h **** 
 261:libs/CMSIS/Include/core_cmInstr.h **** 
 262:libs/CMSIS/Include/core_cmInstr.h **** #elif defined ( __GNUC__ ) /*------------------ GNU Compiler ---------------------*/
 263:libs/CMSIS/Include/core_cmInstr.h **** /* GNU gcc specific functions */
 264:libs/CMSIS/Include/core_cmInstr.h **** 
 265:libs/CMSIS/Include/core_cmInstr.h **** /** \brief  No Operation
 266:libs/CMSIS/Include/core_cmInstr.h **** 
 267:libs/CMSIS/Include/core_cmInstr.h ****     No Operation does nothing. This instruction can be used for code alignment purposes.
 268:libs/CMSIS/Include/core_cmInstr.h ****  */
 269:libs/CMSIS/Include/core_cmInstr.h **** __attribute__( ( always_inline ) ) static __INLINE void __NOP(void)
 270:libs/CMSIS/Include/core_cmInstr.h **** {
 271:libs/CMSIS/Include/core_cmInstr.h ****   __ASM volatile ("nop");
 272:libs/CMSIS/Include/core_cmInstr.h **** }
 273:libs/CMSIS/Include/core_cmInstr.h **** 
 274:libs/CMSIS/Include/core_cmInstr.h **** 
 275:libs/CMSIS/Include/core_cmInstr.h **** /** \brief  Wait For Interrupt
 276:libs/CMSIS/Include/core_cmInstr.h **** 
 277:libs/CMSIS/Include/core_cmInstr.h ****     Wait For Interrupt is a hint instruction that suspends execution
 278:libs/CMSIS/Include/core_cmInstr.h ****     until one of a number of events occurs.
 279:libs/CMSIS/Include/core_cmInstr.h ****  */
 280:libs/CMSIS/Include/core_cmInstr.h **** __attribute__( ( always_inline ) ) static __INLINE void __WFI(void)
 281:libs/CMSIS/Include/core_cmInstr.h **** {
 282:libs/CMSIS/Include/core_cmInstr.h ****   __ASM volatile ("wfi");
 283:libs/CMSIS/Include/core_cmInstr.h **** }
 284:libs/CMSIS/Include/core_cmInstr.h **** 
 285:libs/CMSIS/Include/core_cmInstr.h **** 
 286:libs/CMSIS/Include/core_cmInstr.h **** /** \brief  Wait For Event
 287:libs/CMSIS/Include/core_cmInstr.h **** 
 288:libs/CMSIS/Include/core_cmInstr.h ****     Wait For Event is a hint instruction that permits the processor to enter
 289:libs/CMSIS/Include/core_cmInstr.h ****     a low-power state until one of a number of events occurs.
 290:libs/CMSIS/Include/core_cmInstr.h ****  */
 291:libs/CMSIS/Include/core_cmInstr.h **** __attribute__( ( always_inline ) ) static __INLINE void __WFE(void)
 292:libs/CMSIS/Include/core_cmInstr.h **** {
 293:libs/CMSIS/Include/core_cmInstr.h ****   __ASM volatile ("wfe");
 294:libs/CMSIS/Include/core_cmInstr.h **** }
 295:libs/CMSIS/Include/core_cmInstr.h **** 
 296:libs/CMSIS/Include/core_cmInstr.h **** 
 297:libs/CMSIS/Include/core_cmInstr.h **** /** \brief  Send Event
 298:libs/CMSIS/Include/core_cmInstr.h **** 
 299:libs/CMSIS/Include/core_cmInstr.h ****     Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 300:libs/CMSIS/Include/core_cmInstr.h ****  */
 301:libs/CMSIS/Include/core_cmInstr.h **** __attribute__( ( always_inline ) ) static __INLINE void __SEV(void)
 302:libs/CMSIS/Include/core_cmInstr.h **** {
 303:libs/CMSIS/Include/core_cmInstr.h ****   __ASM volatile ("sev");
 304:libs/CMSIS/Include/core_cmInstr.h **** }
 305:libs/CMSIS/Include/core_cmInstr.h **** 
 306:libs/CMSIS/Include/core_cmInstr.h **** 
 307:libs/CMSIS/Include/core_cmInstr.h **** /** \brief  Instruction Synchronization Barrier
 308:libs/CMSIS/Include/core_cmInstr.h **** 
 309:libs/CMSIS/Include/core_cmInstr.h ****     Instruction Synchronization Barrier flushes the pipeline in the processor, 
 310:libs/CMSIS/Include/core_cmInstr.h ****     so that all instructions following the ISB are fetched from cache or 
 311:libs/CMSIS/Include/core_cmInstr.h ****     memory, after the instruction has been completed.
 312:libs/CMSIS/Include/core_cmInstr.h ****  */
 313:libs/CMSIS/Include/core_cmInstr.h **** __attribute__( ( always_inline ) ) static __INLINE void __ISB(void)
 314:libs/CMSIS/Include/core_cmInstr.h **** {
 315:libs/CMSIS/Include/core_cmInstr.h ****   __ASM volatile ("isb");
 316:libs/CMSIS/Include/core_cmInstr.h **** }
 317:libs/CMSIS/Include/core_cmInstr.h **** 
 318:libs/CMSIS/Include/core_cmInstr.h **** 
 319:libs/CMSIS/Include/core_cmInstr.h **** /** \brief  Data Synchronization Barrier
 320:libs/CMSIS/Include/core_cmInstr.h **** 
 321:libs/CMSIS/Include/core_cmInstr.h ****     This function acts as a special kind of Data Memory Barrier. 
 322:libs/CMSIS/Include/core_cmInstr.h ****     It completes when all explicit memory accesses before this instruction complete.
 323:libs/CMSIS/Include/core_cmInstr.h ****  */
 324:libs/CMSIS/Include/core_cmInstr.h **** __attribute__( ( always_inline ) ) static __INLINE void __DSB(void)
 325:libs/CMSIS/Include/core_cmInstr.h **** {
 326:libs/CMSIS/Include/core_cmInstr.h ****   __ASM volatile ("dsb");
 327:libs/CMSIS/Include/core_cmInstr.h **** }
 328:libs/CMSIS/Include/core_cmInstr.h **** 
 329:libs/CMSIS/Include/core_cmInstr.h **** 
 330:libs/CMSIS/Include/core_cmInstr.h **** /** \brief  Data Memory Barrier
 331:libs/CMSIS/Include/core_cmInstr.h **** 
 332:libs/CMSIS/Include/core_cmInstr.h ****     This function ensures the apparent order of the explicit memory operations before 
 333:libs/CMSIS/Include/core_cmInstr.h ****     and after the instruction, without ensuring their completion.
 334:libs/CMSIS/Include/core_cmInstr.h ****  */
 335:libs/CMSIS/Include/core_cmInstr.h **** __attribute__( ( always_inline ) ) static __INLINE void __DMB(void)
 336:libs/CMSIS/Include/core_cmInstr.h **** {
 337:libs/CMSIS/Include/core_cmInstr.h ****   __ASM volatile ("dmb");
 338:libs/CMSIS/Include/core_cmInstr.h **** }
 339:libs/CMSIS/Include/core_cmInstr.h **** 
 340:libs/CMSIS/Include/core_cmInstr.h **** 
 341:libs/CMSIS/Include/core_cmInstr.h **** /** \brief  Reverse byte order (32 bit)
 342:libs/CMSIS/Include/core_cmInstr.h **** 
 343:libs/CMSIS/Include/core_cmInstr.h ****     This function reverses the byte order in integer value.
 344:libs/CMSIS/Include/core_cmInstr.h **** 
 345:libs/CMSIS/Include/core_cmInstr.h ****     \param [in]    value  Value to reverse
 346:libs/CMSIS/Include/core_cmInstr.h ****     \return               Reversed value
 347:libs/CMSIS/Include/core_cmInstr.h ****  */
 348:libs/CMSIS/Include/core_cmInstr.h **** __attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
 349:libs/CMSIS/Include/core_cmInstr.h **** {
 350:libs/CMSIS/Include/core_cmInstr.h ****   uint32_t result;
 351:libs/CMSIS/Include/core_cmInstr.h ****   
 352:libs/CMSIS/Include/core_cmInstr.h ****   __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 109              		.loc 2 352 0
 110 0074 FB6E     		ldr	r3, [r7, #108]
 111              	@ 352 "libs/CMSIS/Include/core_cmInstr.h" 1
 112 0076 1CBA     		rev r4, r3
 113              	@ 0 "" 2
 114              		.thumb
 115 0078 BC66     		str	r4, [r7, #104]
 353:libs/CMSIS/Include/core_cmInstr.h ****   return(result);
 116              		.loc 2 353 0
 117 007a BB6E     		ldr	r3, [r7, #104]
 118              	.LBE31:
 119              	.LBE30:
 120              		.loc 1 127 0
 121 007c 3B62     		str	r3, [r7, #32]
 128:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   keyaddr+=4;
 122              		.loc 1 128 0
 123 007e 3B6F     		ldr	r3, [r7, #112]
 124 0080 03F10403 		add	r3, r3, #4
 125 0084 3B67     		str	r3, [r7, #112]
 129:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   TDES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
 126              		.loc 1 129 0
 127 0086 3B6F     		ldr	r3, [r7, #112]
 128 0088 1B68     		ldr	r3, [r3, #0]
 129 008a 7B66     		str	r3, [r7, #100]
 130              	.LBB32:
 131              	.LBB33:
 352:libs/CMSIS/Include/core_cmInstr.h ****   __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 132              		.loc 2 352 0
 133 008c 7B6E     		ldr	r3, [r7, #100]
 134              	@ 352 "libs/CMSIS/Include/core_cmInstr.h" 1
 135 008e 1CBA     		rev r4, r3
 136              	@ 0 "" 2
 137              		.thumb
 138 0090 3C66     		str	r4, [r7, #96]
 139              		.loc 2 353 0
 140 0092 3B6E     		ldr	r3, [r7, #96]
 141              	.LBE33:
 142              	.LBE32:
 143              		.loc 1 129 0
 144 0094 7B62     		str	r3, [r7, #36]
 130:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   keyaddr+=4;
 145              		.loc 1 130 0
 146 0096 3B6F     		ldr	r3, [r7, #112]
 147 0098 03F10403 		add	r3, r3, #4
 148 009c 3B67     		str	r3, [r7, #112]
 131:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   TDES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 149              		.loc 1 131 0
 150 009e 3B6F     		ldr	r3, [r7, #112]
 151 00a0 1B68     		ldr	r3, [r3, #0]
 152 00a2 FB65     		str	r3, [r7, #92]
 153              	.LBB34:
 154              	.LBB35:
 352:libs/CMSIS/Include/core_cmInstr.h ****   __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 155              		.loc 2 352 0
 156 00a4 FB6D     		ldr	r3, [r7, #92]
 157              	@ 352 "libs/CMSIS/Include/core_cmInstr.h" 1
 158 00a6 1CBA     		rev r4, r3
 159              	@ 0 "" 2
 160              		.thumb
 161 00a8 BC65     		str	r4, [r7, #88]
 162              		.loc 2 353 0
 163 00aa BB6D     		ldr	r3, [r7, #88]
 164              	.LBE35:
 165              	.LBE34:
 166              		.loc 1 131 0
 167 00ac BB62     		str	r3, [r7, #40]
 132:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   keyaddr+=4;
 168              		.loc 1 132 0
 169 00ae 3B6F     		ldr	r3, [r7, #112]
 170 00b0 03F10403 		add	r3, r3, #4
 171 00b4 3B67     		str	r3, [r7, #112]
 133:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   TDES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 172              		.loc 1 133 0
 173 00b6 3B6F     		ldr	r3, [r7, #112]
 174 00b8 1B68     		ldr	r3, [r3, #0]
 175 00ba 7B65     		str	r3, [r7, #84]
 176              	.LBB36:
 177              	.LBB37:
 352:libs/CMSIS/Include/core_cmInstr.h ****   __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 178              		.loc 2 352 0
 179 00bc 7B6D     		ldr	r3, [r7, #84]
 180              	@ 352 "libs/CMSIS/Include/core_cmInstr.h" 1
 181 00be 1CBA     		rev r4, r3
 182              	@ 0 "" 2
 183              		.thumb
 184 00c0 3C65     		str	r4, [r7, #80]
 185              		.loc 2 353 0
 186 00c2 3B6D     		ldr	r3, [r7, #80]
 187              	.LBE37:
 188              	.LBE36:
 189              		.loc 1 133 0
 190 00c4 FB62     		str	r3, [r7, #44]
 134:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   keyaddr+=4;
 191              		.loc 1 134 0
 192 00c6 3B6F     		ldr	r3, [r7, #112]
 193 00c8 03F10403 		add	r3, r3, #4
 194 00cc 3B67     		str	r3, [r7, #112]
 135:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   TDES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 195              		.loc 1 135 0
 196 00ce 3B6F     		ldr	r3, [r7, #112]
 197 00d0 1B68     		ldr	r3, [r3, #0]
 198 00d2 FB64     		str	r3, [r7, #76]
 199              	.LBB38:
 200              	.LBB39:
 352:libs/CMSIS/Include/core_cmInstr.h ****   __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 201              		.loc 2 352 0
 202 00d4 FB6C     		ldr	r3, [r7, #76]
 203              	@ 352 "libs/CMSIS/Include/core_cmInstr.h" 1
 204 00d6 1CBA     		rev r4, r3
 205              	@ 0 "" 2
 206              		.thumb
 207 00d8 BC64     		str	r4, [r7, #72]
 208              		.loc 2 353 0
 209 00da BB6C     		ldr	r3, [r7, #72]
 210              	.LBE39:
 211              	.LBE38:
 212              		.loc 1 135 0
 213 00dc 3B63     		str	r3, [r7, #48]
 136:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   keyaddr+=4;
 214              		.loc 1 136 0
 215 00de 3B6F     		ldr	r3, [r7, #112]
 216 00e0 03F10403 		add	r3, r3, #4
 217 00e4 3B67     		str	r3, [r7, #112]
 137:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   TDES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
 218              		.loc 1 137 0
 219 00e6 3B6F     		ldr	r3, [r7, #112]
 220 00e8 1B68     		ldr	r3, [r3, #0]
 221 00ea 7B64     		str	r3, [r7, #68]
 222              	.LBB40:
 223              	.LBB41:
 352:libs/CMSIS/Include/core_cmInstr.h ****   __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 224              		.loc 2 352 0
 225 00ec 7B6C     		ldr	r3, [r7, #68]
 226              	@ 352 "libs/CMSIS/Include/core_cmInstr.h" 1
 227 00ee 1CBA     		rev r4, r3
 228              	@ 0 "" 2
 229              		.thumb
 230 00f0 3C64     		str	r4, [r7, #64]
 231              		.loc 2 353 0
 232 00f2 3B6C     		ldr	r3, [r7, #64]
 233              	.LBE41:
 234              	.LBE40:
 235              		.loc 1 137 0
 236 00f4 7B63     		str	r3, [r7, #52]
 138:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   CRYP_KeyInit(& TDES_CRYP_KeyInitStructure);
 237              		.loc 1 138 0
 238 00f6 07F11803 		add	r3, r7, #24
 239 00fa 1846     		mov	r0, r3
 240 00fc FFF7FEFF 		bl	CRYP_KeyInit
 139:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c **** 
 140:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   /* Flush IN/OUT FIFO */
 141:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   CRYP_FIFOFlush();
 241              		.loc 1 141 0
 242 0100 FFF7FEFF 		bl	CRYP_FIFOFlush
 142:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c **** 
 143:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   /* Enable Crypto processor */
 144:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   CRYP_Cmd(ENABLE);
 243              		.loc 1 144 0
 244 0104 4FF00100 		mov	r0, #1
 245 0108 FFF7FEFF 		bl	CRYP_Cmd
 145:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c **** 
 146:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   for(i=0; ((i<Ilength) && (status != ERROR)); i+=8)
 246              		.loc 1 146 0
 247 010c 4FF00003 		mov	r3, #0
 248 0110 BB67     		str	r3, [r7, #120]
 249 0112 49E0     		b	.L4
 250              	.L10:
 147:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   {
 148:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****     /* Write the Input block in the Input FIFO */
 149:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****     CRYP_DataIn(*(uint32_t*)(inputaddr));
 251              		.loc 1 149 0
 252 0114 D7F88030 		ldr	r3, [r7, #128]
 253 0118 1B68     		ldr	r3, [r3, #0]
 254 011a 1846     		mov	r0, r3
 255 011c FFF7FEFF 		bl	CRYP_DataIn
 150:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****     inputaddr+=4;
 256              		.loc 1 150 0
 257 0120 D7F88030 		ldr	r3, [r7, #128]
 258 0124 03F10403 		add	r3, r3, #4
 259 0128 C7F88030 		str	r3, [r7, #128]
 151:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****     CRYP_DataIn(*(uint32_t*)(inputaddr));
 260              		.loc 1 151 0
 261 012c D7F88030 		ldr	r3, [r7, #128]
 262 0130 1B68     		ldr	r3, [r3, #0]
 263 0132 1846     		mov	r0, r3
 264 0134 FFF7FEFF 		bl	CRYP_DataIn
 152:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****     inputaddr+=4;
 265              		.loc 1 152 0
 266 0138 D7F88030 		ldr	r3, [r7, #128]
 267 013c 03F10403 		add	r3, r3, #4
 268 0140 C7F88030 		str	r3, [r7, #128]
 153:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c **** 
 154:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****     /* Wait until the complete message has been processed */
 155:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****     counter = 0;
 269              		.loc 1 155 0
 270 0144 4FF00003 		mov	r3, #0
 271 0148 7B61     		str	r3, [r7, #20]
 272              	.L6:
 156:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****     do
 157:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****     {
 158:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****       busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
 273              		.loc 1 158 0 discriminator 1
 274 014a 4FF01000 		mov	r0, #16
 275 014e FFF7FEFF 		bl	CRYP_GetFlagStatus
 276 0152 0346     		mov	r3, r0
 277 0154 7B67     		str	r3, [r7, #116]
 159:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****       counter++;
 278              		.loc 1 159 0 discriminator 1
 279 0156 7B69     		ldr	r3, [r7, #20]
 280 0158 03F10103 		add	r3, r3, #1
 281 015c 7B61     		str	r3, [r7, #20]
 160:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****     }while ((counter != TDESBUSY_TIMEOUT) && (busystatus != RESET));
 282              		.loc 1 160 0 discriminator 1
 283 015e 7B69     		ldr	r3, [r7, #20]
 284 0160 B3F5803F 		cmp	r3, #65536
 285 0164 02D0     		beq	.L5
 286 0166 7B6F     		ldr	r3, [r7, #116]
 287 0168 002B     		cmp	r3, #0
 288 016a EED1     		bne	.L6
 289              	.L5:
 161:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c **** 
 162:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****     if (busystatus != RESET)
 290              		.loc 1 162 0
 291 016c 7B6F     		ldr	r3, [r7, #116]
 292 016e 002B     		cmp	r3, #0
 293 0170 04D0     		beq	.L7
 163:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****     {
 164:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****        status = ERROR;
 294              		.loc 1 164 0
 295 0172 4FF00003 		mov	r3, #0
 296 0176 87F88730 		strb	r3, [r7, #135]
 297 017a 11E0     		b	.L8
 298              	.L7:
 165:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****     }
 166:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****     else
 167:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****     {
 168:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c **** 
 169:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****       /* Read the Output block from the Output FIFO */
 170:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****       *(uint32_t*)(outputaddr) = CRYP_DataOut();
 299              		.loc 1 170 0
 300 017c FC6F     		ldr	r4, [r7, #124]
 301 017e FFF7FEFF 		bl	CRYP_DataOut
 302 0182 0346     		mov	r3, r0
 303 0184 2360     		str	r3, [r4, #0]
 171:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****       outputaddr+=4;
 304              		.loc 1 171 0
 305 0186 FB6F     		ldr	r3, [r7, #124]
 306 0188 03F10403 		add	r3, r3, #4
 307 018c FB67     		str	r3, [r7, #124]
 172:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****       *(uint32_t*)(outputaddr) = CRYP_DataOut();
 308              		.loc 1 172 0
 309 018e FC6F     		ldr	r4, [r7, #124]
 310 0190 FFF7FEFF 		bl	CRYP_DataOut
 311 0194 0346     		mov	r3, r0
 312 0196 2360     		str	r3, [r4, #0]
 173:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****       outputaddr+=4;
 313              		.loc 1 173 0
 314 0198 FB6F     		ldr	r3, [r7, #124]
 315 019a 03F10403 		add	r3, r3, #4
 316 019e FB67     		str	r3, [r7, #124]
 317              	.L8:
 146:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   for(i=0; ((i<Ilength) && (status != ERROR)); i+=8)
 318              		.loc 1 146 0
 319 01a0 BB6F     		ldr	r3, [r7, #120]
 320 01a2 03F10803 		add	r3, r3, #8
 321 01a6 BB67     		str	r3, [r7, #120]
 322              	.L4:
 146:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   for(i=0; ((i<Ilength) && (status != ERROR)); i+=8)
 323              		.loc 1 146 0 is_stmt 0 discriminator 1
 324 01a8 BA6F     		ldr	r2, [r7, #120]
 325 01aa 3B68     		ldr	r3, [r7, #0]
 326 01ac 9A42     		cmp	r2, r3
 327 01ae 03D2     		bcs	.L9
 146:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   for(i=0; ((i<Ilength) && (status != ERROR)); i+=8)
 328              		.loc 1 146 0 discriminator 2
 329 01b0 97F88730 		ldrb	r3, [r7, #135]	@ zero_extendqisi2
 330 01b4 002B     		cmp	r3, #0
 331 01b6 ADD1     		bne	.L10
 332              	.L9:
 174:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****     }
 175:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   }
 176:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c **** 
 177:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   /* Disable Crypto */
 178:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   CRYP_Cmd(DISABLE);
 333              		.loc 1 178 0 is_stmt 1
 334 01b8 4FF00000 		mov	r0, #0
 335 01bc FFF7FEFF 		bl	CRYP_Cmd
 179:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c **** 
 180:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   return status; 
 336              		.loc 1 180 0
 337 01c0 97F88730 		ldrb	r3, [r7, #135]	@ zero_extendqisi2
 181:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c **** }
 338              		.loc 1 181 0
 339 01c4 1846     		mov	r0, r3
 340 01c6 07F18C07 		add	r7, r7, #140
 341 01ca BD46     		mov	sp, r7
 342 01cc 90BD     		pop	{r4, r7, pc}
 343              		.cfi_endproc
 344              	.LFE110:
 346 01ce 00BF     		.section	.text.CRYP_TDES_CBC,"ax",%progbits
 347              		.align	2
 348              		.global	CRYP_TDES_CBC
 349              		.thumb
 350              		.thumb_func
 352              	CRYP_TDES_CBC:
 353              	.LFB111:
 182:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c **** 
 183:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c **** /**
 184:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   * @brief  Encrypt and decrypt using TDES in CBC Mode
 185:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   * @param  Mode: encryption or decryption Mode.
 186:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   *           This parameter can be one of the following values:
 187:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   *            @arg MODE_ENCRYPT: Encryption
 188:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   *            @arg MODE_DECRYPT: Decryption
 189:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   * @param  Key: Key used for TDES algorithm.
 190:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   * @param  InitVectors: Initialisation Vectors used for TDES algorithm.
 191:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   * @param  Input: pointer to the Input buffer.
 192:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   * @param  Ilength: length of the Input buffer, must be a multiple of 8.
 193:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   * @param  Output: pointer to the returned buffer.
 194:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   * @retval An ErrorStatus enumeration value:
 195:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   *          - SUCCESS: Operation done
 196:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   *          - ERROR: Operation failed
 197:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   */
 198:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c **** ErrorStatus CRYP_TDES_CBC(uint8_t Mode, uint8_t Key[24], uint8_t InitVectors[8],
 199:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****                           uint8_t *Input, uint32_t Ilength, uint8_t *Output)
 200:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c **** {
 354              		.loc 1 200 0
 355              		.cfi_startproc
 356              		@ args = 8, pretend = 0, frame = 168
 357              		@ frame_needed = 1, uses_anonymous_args = 0
 358 0000 90B5     		push	{r4, r7, lr}
 359              	.LCFI3:
 360              		.cfi_def_cfa_offset 12
 361 0002 ABB0     		sub	sp, sp, #172
 362              	.LCFI4:
 363              		.cfi_def_cfa_offset 184
 364 0004 00AF     		add	r7, sp, #0
 365              		.cfi_offset 14, -4
 366              		.cfi_offset 7, -8
 367              		.cfi_offset 4, -12
 368              	.LCFI5:
 369              		.cfi_def_cfa_register 7
 370 0006 B960     		str	r1, [r7, #8]
 371 0008 7A60     		str	r2, [r7, #4]
 372 000a 3B60     		str	r3, [r7, #0]
 373 000c 0346     		mov	r3, r0
 374 000e FB73     		strb	r3, [r7, #15]
 201:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   CRYP_InitTypeDef TDES_CRYP_InitStructure;
 202:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   CRYP_KeyInitTypeDef TDES_CRYP_KeyInitStructure;
 203:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   CRYP_IVInitTypeDef TDES_CRYP_IVInitStructure;
 204:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   __IO uint32_t counter = 0;
 375              		.loc 1 204 0
 376 0010 4FF00003 		mov	r3, #0
 377 0014 3B61     		str	r3, [r7, #16]
 205:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   uint32_t busystatus = 0;
 378              		.loc 1 205 0
 379 0016 4FF00003 		mov	r3, #0
 380 001a C7F89430 		str	r3, [r7, #148]
 206:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   ErrorStatus status = SUCCESS;
 381              		.loc 1 206 0
 382 001e 4FF00103 		mov	r3, #1
 383 0022 87F8A730 		strb	r3, [r7, #167]
 207:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   uint32_t keyaddr    = (uint32_t)Key;
 384              		.loc 1 207 0
 385 0026 BB68     		ldr	r3, [r7, #8]
 386 0028 C7F89030 		str	r3, [r7, #144]
 208:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   uint32_t inputaddr  = (uint32_t)Input;
 387              		.loc 1 208 0
 388 002c 3B68     		ldr	r3, [r7, #0]
 389 002e C7F8A030 		str	r3, [r7, #160]
 209:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   uint32_t outputaddr = (uint32_t)Output;
 390              		.loc 1 209 0
 391 0032 D7F8BC30 		ldr	r3, [r7, #188]
 392 0036 C7F89C30 		str	r3, [r7, #156]
 210:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   uint32_t ivaddr     = (uint32_t)InitVectors;
 393              		.loc 1 210 0
 394 003a 7B68     		ldr	r3, [r7, #4]
 395 003c C7F88C30 		str	r3, [r7, #140]
 211:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   uint32_t i = 0;
 396              		.loc 1 211 0
 397 0040 4FF00003 		mov	r3, #0
 398 0044 C7F89830 		str	r3, [r7, #152]
 212:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c **** 
 213:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   /* Crypto structures initialisation*/
 214:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   CRYP_KeyStructInit(&TDES_CRYP_KeyInitStructure);
 399              		.loc 1 214 0
 400 0048 07F12403 		add	r3, r7, #36
 401 004c 1846     		mov	r0, r3
 402 004e FFF7FEFF 		bl	CRYP_KeyStructInit
 215:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c **** 
 216:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   /* Crypto Init for Encryption process */
 217:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   if(Mode == MODE_ENCRYPT) /* TDES encryption */
 403              		.loc 1 217 0
 404 0052 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 405 0054 012B     		cmp	r3, #1
 406 0056 04D1     		bne	.L12
 218:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   {
 219:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****     TDES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Encrypt;
 407              		.loc 1 219 0
 408 0058 4FF00003 		mov	r3, #0
 409 005c A7F84430 		strh	r3, [r7, #68]	@ movhi
 410 0060 03E0     		b	.L13
 411              	.L12:
 220:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   }
 221:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   else
 222:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   {
 223:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****     TDES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Decrypt;
 412              		.loc 1 223 0
 413 0062 4FF00403 		mov	r3, #4
 414 0066 A7F84430 		strh	r3, [r7, #68]	@ movhi
 415              	.L13:
 224:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   }
 225:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   TDES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_TDES_CBC;
 416              		.loc 1 225 0
 417 006a 4FF00803 		mov	r3, #8
 418 006e A7F84630 		strh	r3, [r7, #70]	@ movhi
 226:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   TDES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
 419              		.loc 1 226 0
 420 0072 4FF08003 		mov	r3, #128
 421 0076 A7F84830 		strh	r3, [r7, #72]	@ movhi
 227:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c **** 
 228:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   CRYP_Init(&TDES_CRYP_InitStructure);
 422              		.loc 1 228 0
 423 007a 07F14403 		add	r3, r7, #68
 424 007e 1846     		mov	r0, r3
 425 0080 FFF7FEFF 		bl	CRYP_Init
 229:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c **** 
 230:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   /* Key Initialisation */
 231:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   TDES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
 426              		.loc 1 231 0
 427 0084 D7F89030 		ldr	r3, [r7, #144]
 428 0088 1B68     		ldr	r3, [r3, #0]
 429 008a C7F88830 		str	r3, [r7, #136]
 430              	.LBB42:
 431              	.LBB43:
 352:libs/CMSIS/Include/core_cmInstr.h ****   __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 432              		.loc 2 352 0
 433 008e D7F88830 		ldr	r3, [r7, #136]
 434              	@ 352 "libs/CMSIS/Include/core_cmInstr.h" 1
 435 0092 1CBA     		rev r4, r3
 436              	@ 0 "" 2
 437              		.thumb
 438 0094 C7F88440 		str	r4, [r7, #132]
 439              		.loc 2 353 0
 440 0098 D7F88430 		ldr	r3, [r7, #132]
 441              	.LBE43:
 442              	.LBE42:
 443              		.loc 1 231 0
 444 009c FB62     		str	r3, [r7, #44]
 232:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   keyaddr+=4;
 445              		.loc 1 232 0
 446 009e D7F89030 		ldr	r3, [r7, #144]
 447 00a2 03F10403 		add	r3, r3, #4
 448 00a6 C7F89030 		str	r3, [r7, #144]
 233:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   TDES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
 449              		.loc 1 233 0
 450 00aa D7F89030 		ldr	r3, [r7, #144]
 451 00ae 1B68     		ldr	r3, [r3, #0]
 452 00b0 C7F88030 		str	r3, [r7, #128]
 453              	.LBB44:
 454              	.LBB45:
 352:libs/CMSIS/Include/core_cmInstr.h ****   __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 455              		.loc 2 352 0
 456 00b4 D7F88030 		ldr	r3, [r7, #128]
 457              	@ 352 "libs/CMSIS/Include/core_cmInstr.h" 1
 458 00b8 1CBA     		rev r4, r3
 459              	@ 0 "" 2
 460              		.thumb
 461 00ba FC67     		str	r4, [r7, #124]
 462              		.loc 2 353 0
 463 00bc FB6F     		ldr	r3, [r7, #124]
 464              	.LBE45:
 465              	.LBE44:
 466              		.loc 1 233 0
 467 00be 3B63     		str	r3, [r7, #48]
 234:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   keyaddr+=4;
 468              		.loc 1 234 0
 469 00c0 D7F89030 		ldr	r3, [r7, #144]
 470 00c4 03F10403 		add	r3, r3, #4
 471 00c8 C7F89030 		str	r3, [r7, #144]
 235:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   TDES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 472              		.loc 1 235 0
 473 00cc D7F89030 		ldr	r3, [r7, #144]
 474 00d0 1B68     		ldr	r3, [r3, #0]
 475 00d2 BB67     		str	r3, [r7, #120]
 476              	.LBB46:
 477              	.LBB47:
 352:libs/CMSIS/Include/core_cmInstr.h ****   __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 478              		.loc 2 352 0
 479 00d4 BB6F     		ldr	r3, [r7, #120]
 480              	@ 352 "libs/CMSIS/Include/core_cmInstr.h" 1
 481 00d6 1CBA     		rev r4, r3
 482              	@ 0 "" 2
 483              		.thumb
 484 00d8 7C67     		str	r4, [r7, #116]
 485              		.loc 2 353 0
 486 00da 7B6F     		ldr	r3, [r7, #116]
 487              	.LBE47:
 488              	.LBE46:
 489              		.loc 1 235 0
 490 00dc 7B63     		str	r3, [r7, #52]
 236:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   keyaddr+=4;
 491              		.loc 1 236 0
 492 00de D7F89030 		ldr	r3, [r7, #144]
 493 00e2 03F10403 		add	r3, r3, #4
 494 00e6 C7F89030 		str	r3, [r7, #144]
 237:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   TDES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 495              		.loc 1 237 0
 496 00ea D7F89030 		ldr	r3, [r7, #144]
 497 00ee 1B68     		ldr	r3, [r3, #0]
 498 00f0 3B67     		str	r3, [r7, #112]
 499              	.LBB48:
 500              	.LBB49:
 352:libs/CMSIS/Include/core_cmInstr.h ****   __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 501              		.loc 2 352 0
 502 00f2 3B6F     		ldr	r3, [r7, #112]
 503              	@ 352 "libs/CMSIS/Include/core_cmInstr.h" 1
 504 00f4 1CBA     		rev r4, r3
 505              	@ 0 "" 2
 506              		.thumb
 507 00f6 FC66     		str	r4, [r7, #108]
 508              		.loc 2 353 0
 509 00f8 FB6E     		ldr	r3, [r7, #108]
 510              	.LBE49:
 511              	.LBE48:
 512              		.loc 1 237 0
 513 00fa BB63     		str	r3, [r7, #56]
 238:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   keyaddr+=4;
 514              		.loc 1 238 0
 515 00fc D7F89030 		ldr	r3, [r7, #144]
 516 0100 03F10403 		add	r3, r3, #4
 517 0104 C7F89030 		str	r3, [r7, #144]
 239:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   TDES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 518              		.loc 1 239 0
 519 0108 D7F89030 		ldr	r3, [r7, #144]
 520 010c 1B68     		ldr	r3, [r3, #0]
 521 010e BB66     		str	r3, [r7, #104]
 522              	.LBB50:
 523              	.LBB51:
 352:libs/CMSIS/Include/core_cmInstr.h ****   __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 524              		.loc 2 352 0
 525 0110 BB6E     		ldr	r3, [r7, #104]
 526              	@ 352 "libs/CMSIS/Include/core_cmInstr.h" 1
 527 0112 1CBA     		rev r4, r3
 528              	@ 0 "" 2
 529              		.thumb
 530 0114 7C66     		str	r4, [r7, #100]
 531              		.loc 2 353 0
 532 0116 7B6E     		ldr	r3, [r7, #100]
 533              	.LBE51:
 534              	.LBE50:
 535              		.loc 1 239 0
 536 0118 FB63     		str	r3, [r7, #60]
 240:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   keyaddr+=4;
 537              		.loc 1 240 0
 538 011a D7F89030 		ldr	r3, [r7, #144]
 539 011e 03F10403 		add	r3, r3, #4
 540 0122 C7F89030 		str	r3, [r7, #144]
 241:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   TDES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
 541              		.loc 1 241 0
 542 0126 D7F89030 		ldr	r3, [r7, #144]
 543 012a 1B68     		ldr	r3, [r3, #0]
 544 012c 3B66     		str	r3, [r7, #96]
 545              	.LBB52:
 546              	.LBB53:
 352:libs/CMSIS/Include/core_cmInstr.h ****   __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 547              		.loc 2 352 0
 548 012e 3B6E     		ldr	r3, [r7, #96]
 549              	@ 352 "libs/CMSIS/Include/core_cmInstr.h" 1
 550 0130 1CBA     		rev r4, r3
 551              	@ 0 "" 2
 552              		.thumb
 553 0132 FC65     		str	r4, [r7, #92]
 554              		.loc 2 353 0
 555 0134 FB6D     		ldr	r3, [r7, #92]
 556              	.LBE53:
 557              	.LBE52:
 558              		.loc 1 241 0
 559 0136 3B64     		str	r3, [r7, #64]
 242:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   CRYP_KeyInit(& TDES_CRYP_KeyInitStructure);
 560              		.loc 1 242 0
 561 0138 07F12403 		add	r3, r7, #36
 562 013c 1846     		mov	r0, r3
 563 013e FFF7FEFF 		bl	CRYP_KeyInit
 243:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c **** 
 244:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   /* Initialization Vectors */
 245:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   TDES_CRYP_IVInitStructure.CRYP_IV0Left = __REV(*(uint32_t*)(ivaddr));
 564              		.loc 1 245 0
 565 0142 D7F88C30 		ldr	r3, [r7, #140]
 566 0146 1B68     		ldr	r3, [r3, #0]
 567 0148 BB65     		str	r3, [r7, #88]
 568              	.LBB54:
 569              	.LBB55:
 352:libs/CMSIS/Include/core_cmInstr.h ****   __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 570              		.loc 2 352 0
 571 014a BB6D     		ldr	r3, [r7, #88]
 572              	@ 352 "libs/CMSIS/Include/core_cmInstr.h" 1
 573 014c 1CBA     		rev r4, r3
 574              	@ 0 "" 2
 575              		.thumb
 576 014e 7C65     		str	r4, [r7, #84]
 577              		.loc 2 353 0
 578 0150 7B6D     		ldr	r3, [r7, #84]
 579              	.LBE55:
 580              	.LBE54:
 581              		.loc 1 245 0
 582 0152 7B61     		str	r3, [r7, #20]
 246:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   ivaddr+=4;
 583              		.loc 1 246 0
 584 0154 D7F88C30 		ldr	r3, [r7, #140]
 585 0158 03F10403 		add	r3, r3, #4
 586 015c C7F88C30 		str	r3, [r7, #140]
 247:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   TDES_CRYP_IVInitStructure.CRYP_IV0Right= __REV(*(uint32_t*)(ivaddr));
 587              		.loc 1 247 0
 588 0160 D7F88C30 		ldr	r3, [r7, #140]
 589 0164 1B68     		ldr	r3, [r3, #0]
 590 0166 3B65     		str	r3, [r7, #80]
 591              	.LBB56:
 592              	.LBB57:
 352:libs/CMSIS/Include/core_cmInstr.h ****   __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 593              		.loc 2 352 0
 594 0168 3B6D     		ldr	r3, [r7, #80]
 595              	@ 352 "libs/CMSIS/Include/core_cmInstr.h" 1
 596 016a 1CBA     		rev r4, r3
 597              	@ 0 "" 2
 598              		.thumb
 599 016c FC64     		str	r4, [r7, #76]
 600              		.loc 2 353 0
 601 016e FB6C     		ldr	r3, [r7, #76]
 602              	.LBE57:
 603              	.LBE56:
 604              		.loc 1 247 0
 605 0170 BB61     		str	r3, [r7, #24]
 248:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   CRYP_IVInit(&TDES_CRYP_IVInitStructure);
 606              		.loc 1 248 0
 607 0172 07F11403 		add	r3, r7, #20
 608 0176 1846     		mov	r0, r3
 609 0178 FFF7FEFF 		bl	CRYP_IVInit
 249:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c **** 
 250:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   /* Flush IN/OUT FIFO */
 251:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   CRYP_FIFOFlush();
 610              		.loc 1 251 0
 611 017c FFF7FEFF 		bl	CRYP_FIFOFlush
 252:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c **** 
 253:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   /* Enable Crypto processor */
 254:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   CRYP_Cmd(ENABLE);
 612              		.loc 1 254 0
 613 0180 4FF00100 		mov	r0, #1
 614 0184 FFF7FEFF 		bl	CRYP_Cmd
 255:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c **** 
 256:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   for(i=0; ((i<Ilength) && (status != ERROR)); i+=8)
 615              		.loc 1 256 0
 616 0188 4FF00003 		mov	r3, #0
 617 018c C7F89830 		str	r3, [r7, #152]
 618 0190 54E0     		b	.L14
 619              	.L20:
 257:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   {
 258:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****     /* Write the Input block in the Input FIFO */
 259:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****     CRYP_DataIn(*(uint32_t*)(inputaddr));
 620              		.loc 1 259 0
 621 0192 D7F8A030 		ldr	r3, [r7, #160]
 622 0196 1B68     		ldr	r3, [r3, #0]
 623 0198 1846     		mov	r0, r3
 624 019a FFF7FEFF 		bl	CRYP_DataIn
 260:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****     inputaddr+=4;
 625              		.loc 1 260 0
 626 019e D7F8A030 		ldr	r3, [r7, #160]
 627 01a2 03F10403 		add	r3, r3, #4
 628 01a6 C7F8A030 		str	r3, [r7, #160]
 261:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****     CRYP_DataIn(*(uint32_t*)(inputaddr));
 629              		.loc 1 261 0
 630 01aa D7F8A030 		ldr	r3, [r7, #160]
 631 01ae 1B68     		ldr	r3, [r3, #0]
 632 01b0 1846     		mov	r0, r3
 633 01b2 FFF7FEFF 		bl	CRYP_DataIn
 262:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****     inputaddr+=4;
 634              		.loc 1 262 0
 635 01b6 D7F8A030 		ldr	r3, [r7, #160]
 636 01ba 03F10403 		add	r3, r3, #4
 637 01be C7F8A030 		str	r3, [r7, #160]
 263:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c **** 
 264:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****     /* Wait until the complete message has been processed */
 265:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****     counter = 0;
 638              		.loc 1 265 0
 639 01c2 4FF00003 		mov	r3, #0
 640 01c6 3B61     		str	r3, [r7, #16]
 641              	.L16:
 266:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****     do
 267:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****     {
 268:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****       busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
 642              		.loc 1 268 0 discriminator 1
 643 01c8 4FF01000 		mov	r0, #16
 644 01cc FFF7FEFF 		bl	CRYP_GetFlagStatus
 645 01d0 0346     		mov	r3, r0
 646 01d2 C7F89430 		str	r3, [r7, #148]
 269:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****       counter++;
 647              		.loc 1 269 0 discriminator 1
 648 01d6 3B69     		ldr	r3, [r7, #16]
 649 01d8 03F10103 		add	r3, r3, #1
 650 01dc 3B61     		str	r3, [r7, #16]
 270:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****     }while ((counter != TDESBUSY_TIMEOUT) && (busystatus != RESET));
 651              		.loc 1 270 0 discriminator 1
 652 01de 3B69     		ldr	r3, [r7, #16]
 653 01e0 B3F5803F 		cmp	r3, #65536
 654 01e4 03D0     		beq	.L15
 655 01e6 D7F89430 		ldr	r3, [r7, #148]
 656 01ea 002B     		cmp	r3, #0
 657 01ec ECD1     		bne	.L16
 658              	.L15:
 271:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c **** 
 272:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****     if (busystatus != RESET)
 659              		.loc 1 272 0
 660 01ee D7F89430 		ldr	r3, [r7, #148]
 661 01f2 002B     		cmp	r3, #0
 662 01f4 04D0     		beq	.L17
 273:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****    {
 274:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****        status = ERROR;
 663              		.loc 1 274 0
 664 01f6 4FF00003 		mov	r3, #0
 665 01fa 87F8A730 		strb	r3, [r7, #167]
 666 01fe 17E0     		b	.L18
 667              	.L17:
 275:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****     }
 276:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****     else
 277:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****     {
 278:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c **** 
 279:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****       /* Read the Output block from the Output FIFO */
 280:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****       *(uint32_t*)(outputaddr) = CRYP_DataOut();
 668              		.loc 1 280 0
 669 0200 D7F89C40 		ldr	r4, [r7, #156]
 670 0204 FFF7FEFF 		bl	CRYP_DataOut
 671 0208 0346     		mov	r3, r0
 672 020a 2360     		str	r3, [r4, #0]
 281:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****       outputaddr+=4;
 673              		.loc 1 281 0
 674 020c D7F89C30 		ldr	r3, [r7, #156]
 675 0210 03F10403 		add	r3, r3, #4
 676 0214 C7F89C30 		str	r3, [r7, #156]
 282:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****       *(uint32_t*)(outputaddr) = CRYP_DataOut();
 677              		.loc 1 282 0
 678 0218 D7F89C40 		ldr	r4, [r7, #156]
 679 021c FFF7FEFF 		bl	CRYP_DataOut
 680 0220 0346     		mov	r3, r0
 681 0222 2360     		str	r3, [r4, #0]
 283:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****       outputaddr+=4;
 682              		.loc 1 283 0
 683 0224 D7F89C30 		ldr	r3, [r7, #156]
 684 0228 03F10403 		add	r3, r3, #4
 685 022c C7F89C30 		str	r3, [r7, #156]
 686              	.L18:
 256:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   for(i=0; ((i<Ilength) && (status != ERROR)); i+=8)
 687              		.loc 1 256 0
 688 0230 D7F89830 		ldr	r3, [r7, #152]
 689 0234 03F10803 		add	r3, r3, #8
 690 0238 C7F89830 		str	r3, [r7, #152]
 691              	.L14:
 256:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   for(i=0; ((i<Ilength) && (status != ERROR)); i+=8)
 692              		.loc 1 256 0 is_stmt 0 discriminator 1
 693 023c D7F89820 		ldr	r2, [r7, #152]
 694 0240 D7F8B830 		ldr	r3, [r7, #184]
 695 0244 9A42     		cmp	r2, r3
 696 0246 03D2     		bcs	.L19
 256:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   for(i=0; ((i<Ilength) && (status != ERROR)); i+=8)
 697              		.loc 1 256 0 discriminator 2
 698 0248 97F8A730 		ldrb	r3, [r7, #167]	@ zero_extendqisi2
 699 024c 002B     		cmp	r3, #0
 700 024e A0D1     		bne	.L20
 701              	.L19:
 284:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****     }
 285:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   }
 286:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c **** 
 287:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   /* Disable Crypto */
 288:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   CRYP_Cmd(DISABLE);
 702              		.loc 1 288 0 is_stmt 1
 703 0250 4FF00000 		mov	r0, #0
 704 0254 FFF7FEFF 		bl	CRYP_Cmd
 289:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c **** 
 290:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   return status; 
 705              		.loc 1 290 0
 706 0258 97F8A730 		ldrb	r3, [r7, #167]	@ zero_extendqisi2
 291:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c **** }
 707              		.loc 1 291 0
 708 025c 1846     		mov	r0, r3
 709 025e 07F1AC07 		add	r7, r7, #172
 710 0262 BD46     		mov	sp, r7
 711 0264 90BD     		pop	{r4, r7, pc}
 712              		.cfi_endproc
 713              	.LFE111:
 715 0266 00BF     		.text
 716              	.Letext0:
DEFINED SYMBOLS
                            *ABS*:00000000 stm32f4xx_cryp_tdes.c
     /tmp/ccBmIZ5P.s:25     .text.CRYP_TDES_ECB:00000000 $t
     /tmp/ccBmIZ5P.s:30     .text.CRYP_TDES_ECB:00000000 CRYP_TDES_ECB
     /tmp/ccBmIZ5P.s:347    .text.CRYP_TDES_CBC:00000000 $t
     /tmp/ccBmIZ5P.s:352    .text.CRYP_TDES_CBC:00000000 CRYP_TDES_CBC
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
CRYP_KeyStructInit
CRYP_Init
CRYP_KeyInit
CRYP_FIFOFlush
CRYP_Cmd
CRYP_DataIn
CRYP_GetFlagStatus
CRYP_DataOut
CRYP_IVInit
