   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 3
   4              		.fpu fpv4-sp-d16
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 6
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"stm32f4xx_rtc.c"
  22              	.Ltext0:
  23              		.cfi_sections	.debug_frame
  24              		.section	.text.RTC_DeInit,"ax",%progbits
  25              		.align	2
  26              		.global	RTC_DeInit
  27              		.thumb
  28              		.thumb_func
  30              	RTC_DeInit:
  31              	.LFB110:
  32              		.file 1 "libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c"
   1:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
   2:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ******************************************************************************
   3:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @file    stm32f4xx_rtc.c
   4:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @author  MCD Application Team
   5:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @version V1.0.0RC1
   6:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @date    25-August-2011
   7:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief   This file provides firmware functions to manage the following 
   8:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          functionalities of the Real-Time Clock (RTC) peripheral:
   9:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           - Initialization
  10:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           - Calendar (Time and Date) configuration
  11:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           - Alarms (Alarm A and Alarm B) configuration
  12:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           - WakeUp Timer configuration
  13:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           - Daylight Saving configuration
  14:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           - Output pin Configuration
  15:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           - Coarse digital Calibration configuration
  16:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           - Smooth digital Calibration configuration
  17:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           - TimeStamp configuration
  18:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           - Tampers configuration
  19:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           - Backup Data Registers configuration
  20:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           - Shift control synchronisation    
  21:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           - RTC Tamper and TimeStamp Pins Selection and Output Type Config configuration
  22:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           - Interrupts and flags management
  23:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
  24:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *  @verbatim
  25:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
  26:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===================================================================
  27:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                               Backup Domain Operating Condition
  28:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===================================================================
  29:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          The real-time clock (RTC), the RTC backup registers, and the backup 
  30:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          SRAM (BKP SRAM) can be powered from the VBAT voltage when the main 
  31:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          VDD supply is powered off.
  32:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          To retain the content of the RTC backup registers, backup SRAM, 
  33:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          and supply the RTC when VDD is turned off, VBAT pin can be connected 
  34:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          to an optional standby voltage supplied by a battery or by another 
  35:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          source.
  36:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
  37:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          To allow the RTC to operate even when the main digital supply (VDD) 
  38:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          is turned off, the VBAT pin powers the following blocks:
  39:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            1 - The RTC
  40:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            2 - The LSE oscillator
  41:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            3 - The backup SRAM when the low power backup regulator is enabled
  42:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            4 - PC13 to PC15 I/Os, plus PI8 I/O (when available)
  43:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
  44:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          When the backup domain is supplied by VDD (analog switch connected 
  45:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          to VDD), the following functions are available:
  46:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            1 - PC14 and PC15 can be used as either GPIO or LSE pins
  47:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            2 - PC13 can be used as a GPIO or as the RTC_AF1 pin
  48:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            3 - PI8 can be used as a GPIO or as the RTC_AF2 pin
  49:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
  50:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          When the backup domain is supplied by VBAT (analog switch connected 
  51:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          to VBAT because VDD is not present), the following functions are available:
  52:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            1 - PC14 and PC15 can be used as LSE pins only
  53:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            2 - PC13 can be used as the RTC_AF1 pin 
  54:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            3 - PI8 can be used as the RTC_AF2 pin
  55:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
  56:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===================================================================
  57:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                    Backup Domain Reset
  58:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===================================================================
  59:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          The backup domain reset sets all RTC registers and the RCC_BDCR 
  60:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          register to their reset values. The BKPSRAM is not affected by this
  61:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          reset. The only way of resetting the BKPSRAM is through the Flash 
  62:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          interface by requesting a protection level change from 1 to 0.
  63:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          A backup domain reset is generated when one of the following events
  64:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          occurs:
  65:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            1 - Software reset, triggered by setting the BDRST bit in the 
  66:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                RCC Backup domain control register (RCC_BDCR). You can use the
  67:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                RCC_BackupResetCmd().
  68:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            2 - VDD or VBAT power on, if both supplies have previously been
  69:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                powered off.
  70:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
  71:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===================================================================
  72:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                   Backup Domain Access
  73:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===================================================================
  74:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          After reset, the backup domain (RTC registers, RTC backup data 
  75:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          registers and backup SRAM) is protected against possible unwanted 
  76:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          write accesses. 
  77:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          To enable access to the RTC Domain and RTC registers, proceed as follows:
  78:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Enable the Power Controller (PWR) APB1 interface clock using the
  79:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              RCC_APB1PeriphClockCmd() function.
  80:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Enable access to RTC domain using the PWR_BackupAccessCmd() function.
  81:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Select the RTC clock source using the RCC_RTCCLKConfig() function.
  82:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Enable RTC Clock using the RCC_RTCCLKCmd() function.
  83:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
  84:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===================================================================
  85:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                   RTC Driver: how to use it
  86:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===================================================================
  87:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Enable the RTC domain access (see description in the section above)
  88:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Configure the RTC Prescaler (Asynchronous and Synchronous) and
  89:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              RTC hour format using the RTC_Init() function.
  90:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
  91:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          Time and Date configuration
  92:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===========================
  93:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - To configure the RTC Calendar (Time and Date) use the RTC_SetTime()
  94:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              and RTC_SetDate() functions.
  95:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - To read the RTC Calendar, use the RTC_GetTime() and RTC_GetDate()
  96:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              functions.
  97:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Use the RTC_DayLightSavingConfig() function to add or sub one
  98:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              hour to the RTC Calendar.    
  99:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 100:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          Alarm configuration
 101:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===================
 102:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - To configure the RTC Alarm use the RTC_SetAlarm() function.
 103:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Enable the selected RTC Alarm using the RTC_AlarmCmd() function
 104:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - To read the RTC Alarm, use the RTC_GetAlarm() function.
 105:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - To read the RTC alarm SubSecond, use the RTC_GetAlarmSubSecond() function.
 106:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 107:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          RTC Wakeup configuration
 108:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ========================
 109:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Configure the RTC Wakeup Clock source use the RTC_WakeUpClockConfig()
 110:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              function.
 111:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Configure the RTC WakeUp Counter using the RTC_SetWakeUpCounter() 
 112:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              function  
 113:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Enable the RTC WakeUp using the RTC_WakeUpCmd() function  
 114:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - To read the RTC WakeUp Counter register, use the RTC_GetWakeUpCounter() 
 115:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              function.
 116:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 117:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          Outputs configuration
 118:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          =====================
 119:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          The RTC has 2 different outputs:
 120:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - AFO_ALARM: this output is used to manage the RTC Alarm A, Alarm B
 121:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              and WaKeUp signals.          
 122:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              To output the selected RTC signal on RTC_AF1 pin, use the 
 123:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              RTC_OutputConfig() function.                
 124:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - AFO_CALIB: this output is 512Hz signal or 1Hz .  
 125:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              To output the RTC Clock on RTC_AF1 pin, use the RTC_CalibOutputCmd()
 126:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              function.
 127:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 128:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          Smooth digital Calibration configuration
 129:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          =================================    
 130:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Configure the RTC Original Digital Calibration Value and the corresponding
 131:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              calibration cycle period (32s,16s and 8s) using the RTC_SmoothCalibConfig() 
 132:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              function.
 133:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 134:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          Coarse digital Calibration configuration
 135:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          =================================
 136:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Configure the RTC Coarse Calibration Value and the corresponding
 137:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              sign using the RTC_CoarseCalibConfig() function.
 138:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Enable the RTC Coarse Calibration using the RTC_CoarseCalibCmd() 
 139:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              function  
 140:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 141:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          TimeStamp configuration
 142:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          =======================
 143:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Configure the RTC_AF1 trigger and enables the RTC TimeStamp 
 144:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              using the RTC_TimeStampCmd() function.
 145:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - To read the RTC TimeStamp Time and Date register, use the 
 146:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              RTC_GetTimeStamp() function.
 147:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - To read the RTC TimeStamp SubSecond register, use the 
 148:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              RTC_GetTimeStampSubSecond() function.
 149:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - The TAMPER1 alternate function can be mapped either to RTC_AF1(PC13)
 150:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              or RTC_AF2 (PI8) depending on the value of TAMP1INSEL bit in 
 151:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              RTC_TAFCR register. You can use the  RTC_TamperPinSelection()
 152:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              function to select the corresponding pin.     
 153:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 154:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          Tamper configuration
 155:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ====================
 156:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Enable the RTC Tamper using the RTC_TamperCmd() function.
 157:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *             - Configure the Tamper filter count using RTC_TamperFilterConfig()
 158:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              function. 
 159:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Configure the RTC Tamper trigger Edge or Level according to the Tamper 
 160:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              filter (if equal to 0 Edge else Level) value using the RTC_TamperConfig() function
 161:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Configure the Tamper sampling frequency using RTC_TamperSamplingFreqConfig()
 162:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              function.
 163:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Configure the Tamper precharge or discharge duration using 
 164:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              RTC_TamperPinsPrechargeDuration() function.
 165:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Enable the Tamper Pull-UP using RTC_TamperPullUpDisableCmd() function.
 166:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Enable the Time stamp on Tamper detection event using  
 167:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              RTC_TSOnTamperDetecCmd() function.
 168:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - The TIMESTAMP alternate function can be mapped to either RTC_AF1 
 169:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              or RTC_AF2 depending on the value of the TSINSEL bit in the 
 170:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              RTC_TAFCR register. You can use the  RTC_TimeStampPinSelection()
 171:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              function to select the corresponding pin. 
 172:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 173:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          Backup Data Registers configuration
 174:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===================================
 175:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - To write to the RTC Backup Data registers, use the RTC_WriteBackupRegister()
 176:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              function.  
 177:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - To read the RTC Backup Data registers, use the RTC_ReadBackupRegister()
 178:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              function.
 179:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * 
 180:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===================================================================
 181:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                  RTC and low power modes
 182:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===================================================================
 183:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           The MCU can be woken up from a low power mode by an RTC alternate 
 184:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           function.
 185:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           The RTC alternate functions are the RTC alarms (Alarm A and Alarm B), 
 186:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           RTC wakeup, RTC tamper event detection and RTC time stamp event detection.
 187:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           These RTC alternate functions can wake up the system from the Stop 
 188:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           and Standby lowpower modes.
 189:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           The system can also wake up from low power modes without depending 
 190:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           on an external interrupt (Auto-wakeup mode), by using the RTC alarm 
 191:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           or the RTC wakeup events.
 192:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           The RTC provides a programmable time base for waking up from the 
 193:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           Stop or Standby mode at regular intervals.
 194:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           Wakeup from STOP and Standby modes is possible only when the RTC 
 195:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           clock source is LSE or LSI.
 196:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 197:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===================================================================
 198:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                            Selection of RTC_AF1 alternate functions
 199:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===================================================================
 200:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          The RTC_AF1 pin (PC13) can be used for the following purposes:
 201:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - AFO_ALARM output
 202:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - AFO_CALIB output
 203:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - AFI_TAMPER
 204:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - AFI_TIMESTAMP
 205:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 206:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * +----------------------------------------------------------------------------------------------
 207:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |     Pin         |AFO_ALARM |AFO_CALIB |AFI_TAMPER |AFI_TIMESTAMP | TAMP1INSEL |   TSINSEL    
 208:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |  configuration  | ENABLED  | ENABLED  |  ENABLED  |   ENABLED    |TAMPER1 pin |TIMESTAMP pin 
 209:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |  and function   |          |          |           |              | selection  |  selection   
 210:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |-----------------|----------|----------|-----------|--------------|------------|--------------
 211:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |   Alarm out     |          |          |           |              |    Don't   |     Don't    
 212:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |   output OD     |     1    |Don't care|Don't care | Don't care   |    care    |     care     
 213:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |-----------------|----------|----------|-----------|--------------|------------|--------------
 214:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |   Alarm out     |          |          |           |              |    Don't   |     Don't    
 215:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |   output PP     |     1    |Don't care|Don't care | Don't care   |    care    |     care     
 216:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |-----------------|----------|----------|-----------|--------------|------------|--------------
 217:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * | Calibration out |          |          |           |              |    Don't   |     Don't    
 218:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |   output PP     |     0    |    1     |Don't care | Don't care   |    care    |     care     
 219:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |-----------------|----------|----------|-----------|--------------|------------|--------------
 220:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |  TAMPER input   |          |          |           |              |            |     Don't    
 221:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |   floating      |     0    |    0     |     1     |      0       |      0     |     care     
 222:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |-----------------|----------|----------|-----------|--------------|------------|--------------
 223:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |  TIMESTAMP and  |          |          |           |              |            |              
 224:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |  TAMPER input   |     0    |    0     |     1     |      1       |      0     |      0       
 225:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |   floating      |          |          |           |              |            |              
 226:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |-----------------|----------|----------|-----------|--------------|------------|--------------
 227:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * | TIMESTAMP input |          |          |           |              |    Don't   |              
 228:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |    floating     |     0    |    0     |     0     |      1       |    care    |      0       
 229:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |-----------------|----------|----------|-----------|--------------|------------|--------------
 230:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |  Standard GPIO  |     0    |    0     |     0     |      0       | Don't care |  Don't care  
 231:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * +----------------------------------------------------------------------------------------------
 232:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 233:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 234:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===================================================================
 235:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                            Selection of RTC_AF2 alternate functions
 236:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===================================================================
 237:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          The RTC_AF2 pin (PI8) can be used for the following purposes:
 238:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - AFI_TAMPER
 239:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - AFI_TIMESTAMP
 240:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 241:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * +---------------------------------------------------------------------------------------+
 242:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |     Pin         |AFI_TAMPER |AFI_TIMESTAMP | TAMP1INSEL |   TSINSEL    |ALARMOUTTYPE  |
 243:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |  configuration  |  ENABLED  |   ENABLED    |TAMPER1 pin |TIMESTAMP pin |  AFO_ALARM   |
 244:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |  and function   |           |              | selection  |  selection   |Configuration |
 245:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |-----------------|-----------|--------------|------------|--------------|--------------|
 246:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |  TAMPER input   |           |              |            |     Don't    |              |
 247:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |   floating      |     1     |      0       |      1     |     care     |  Don't care  |
 248:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |-----------------|-----------|--------------|------------|--------------|--------------|
 249:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |  TIMESTAMP and  |           |              |            |              |              |
 250:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |  TAMPER input   |     1     |      1       |      1     |      1       |  Don't care  |
 251:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |   floating      |           |              |            |              |              |
 252:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |-----------------|-----------|--------------|------------|--------------|--------------|
 253:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * | TIMESTAMP input |           |              |    Don't   |              |              |
 254:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |    floating     |     0     |      1       |    care    |      1       |  Don't care  |
 255:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |-----------------|-----------|--------------|------------|--------------|--------------|
 256:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |  Standard GPIO  |     0     |      0       | Don't care |  Don't care  |  Don't care  |
 257:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * +---------------------------------------------------------------------------------------+
 258:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * 
 259:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 260:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *  @endverbatim
 261:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 262:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ******************************************************************************
 263:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @attention
 264:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 265:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
 266:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
 267:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
 268:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
 269:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
 270:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
 271:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 272:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * <h2><center>&copy; COPYRIGHT 2011 STMicroelectronics</center></h2>
 273:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ******************************************************************************
 274:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */ 
 275:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 276:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /* Includes ------------------------------------------------------------------*/
 277:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** #include "stm32f4xx_rtc.h"
 278:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** #include "stm32f4xx_rcc.h"
 279:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 280:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /** @addtogroup STM32F4xx_StdPeriph_Driver
 281:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @{
 282:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 283:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 284:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /** @defgroup RTC 
 285:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief RTC driver modules
 286:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @{
 287:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 288:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 289:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /* Private typedef -----------------------------------------------------------*/
 290:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /* Private define ------------------------------------------------------------*/
 291:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 292:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /* Masks Definition */
 293:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** #define RTC_TR_RESERVED_MASK    ((uint32_t)0x007F7F7F)
 294:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** #define RTC_DR_RESERVED_MASK    ((uint32_t)0x00FFFF3F) 
 295:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** #define RTC_INIT_MASK           ((uint32_t)0xFFFFFFFF)  
 296:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** #define RTC_RSF_MASK            ((uint32_t)0xFFFFFF5F)
 297:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** #define RTC_FLAGS_MASK          ((uint32_t)(RTC_FLAG_TSOVF | RTC_FLAG_TSF | RTC_FLAG_WUTF | \
 298:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                                             RTC_FLAG_ALRBF | RTC_FLAG_ALRAF | RTC_FLAG_INITF | \
 299:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                                             RTC_FLAG_RSF | RTC_FLAG_INITS | RTC_FLAG_WUTWF | \
 300:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                                             RTC_FLAG_ALRBWF | RTC_FLAG_ALRAWF | RTC_FLAG_TAMP1F ))
 301:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 302:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** #define INITMODE_TIMEOUT         ((uint32_t) 0x00010000)
 303:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** #define SYNCHRO_TIMEOUT          ((uint32_t) 0x00020000)
 304:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** #define RECALPF_TIMEOUT          ((uint32_t) 0x00020000)
 305:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** #define SHPF_TIMEOUT             ((uint32_t) 0x00001000)
 306:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 307:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /* Private macro -------------------------------------------------------------*/
 308:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /* Private variables ---------------------------------------------------------*/
 309:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /* Private function prototypes -----------------------------------------------*/
 310:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** static uint8_t RTC_ByteToBcd2(uint8_t Value);
 311:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** static uint8_t RTC_Bcd2ToByte(uint8_t Value);
 312:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 313:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /* Private functions ---------------------------------------------------------*/
 314:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 315:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Private_Functions
 316:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @{
 317:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */ 
 318:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 319:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group1 Initialization and Configuration functions
 320:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *  @brief   Initialization and Configuration functions 
 321:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *
 322:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @verbatim   
 323:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================
 324:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                  Initialization and Configuration functions
 325:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================
 326:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 327:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   This section provide functions allowing to initialize and configure the RTC
 328:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   Prescaler (Synchronous and Asynchronous), RTC Hour format, disable RTC registers
 329:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   Write protection, enter and exit the RTC initialization mode, RTC registers
 330:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   synchronization check and reference clock detection enable.
 331:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 332:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   1. The RTC Prescaler is programmed to generate the RTC 1Hz time base. It is
 333:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      split into 2 programmable prescalers to minimize power consumption.
 334:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      - A 7-bit asynchronous prescaler and A 13-bit synchronous prescaler.
 335:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      - When both prescalers are used, it is recommended to configure the asynchronous
 336:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****        prescaler to a high value to minimize consumption.
 337:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 338:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   2. All RTC registers are Write protected. Writing to the RTC registers
 339:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      is enabled by writing a key into the Write Protection register, RTC_WPR.
 340:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 341:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   3. To Configure the RTC Calendar, user application should enter initialization
 342:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      mode. In this mode, the calendar counter is stopped and its value can be 
 343:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      updated. When the initialization sequence is complete, the calendar restarts 
 344:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      counting after 4 RTCCLK cycles.
 345:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 346:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   4. To read the calendar through the shadow registers after Calendar initialization,
 347:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      calendar update or after wakeup from low power modes the software must first 
 348:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      clear the RSF flag. The software must then wait until it is set again before 
 349:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      reading the calendar, which means that the calendar registers have been 
 350:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      correctly copied into the RTC_TR and RTC_DR shadow registers.
 351:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      The RTC_WaitForSynchro() function implements the above software sequence 
 352:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      (RSF clear and RSF check).
 353:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 354:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @endverbatim
 355:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @{
 356:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 357:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 358:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
 359:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Deinitializes the RTC registers to their default reset values.
 360:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   This function doesn't reset the RTC Clock source and RTC Backup Data
 361:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         registers.       
 362:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  None
 363:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
 364:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC registers are deinitialized
 365:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - ERROR: RTC registers are not deinitialized
 366:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 367:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** ErrorStatus RTC_DeInit(void)
 368:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
  33              		.loc 1 368 0
  34              		.cfi_startproc
  35              		@ args = 0, pretend = 0, frame = 16
  36              		@ frame_needed = 1, uses_anonymous_args = 0
  37 0000 80B5     		push	{r7, lr}
  38              	.LCFI0:
  39              		.cfi_def_cfa_offset 8
  40 0002 84B0     		sub	sp, sp, #16
  41              	.LCFI1:
  42              		.cfi_def_cfa_offset 24
  43 0004 00AF     		add	r7, sp, #0
  44              		.cfi_offset 14, -4
  45              		.cfi_offset 7, -8
  46              	.LCFI2:
  47              		.cfi_def_cfa_register 7
 369:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   __IO uint32_t wutcounter = 0x00;
  48              		.loc 1 369 0
  49 0006 4FF00003 		mov	r3, #0
  50 000a 7B60     		str	r3, [r7, #4]
 370:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t wutwfstatus = 0x00;
  51              		.loc 1 370 0
  52 000c 4FF00003 		mov	r3, #0
  53 0010 BB60     		str	r3, [r7, #8]
 371:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
  54              		.loc 1 371 0
  55 0012 4FF00003 		mov	r3, #0
  56 0016 FB73     		strb	r3, [r7, #15]
 372:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 373:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
 374:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
  57              		.loc 1 374 0
  58 0018 374B     		ldr	r3, .L8
  59 001a 4FF0CA02 		mov	r2, #202
  60 001e 5A62     		str	r2, [r3, #36]
 375:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
  61              		.loc 1 375 0
  62 0020 354B     		ldr	r3, .L8
  63 0022 4FF05302 		mov	r2, #83
  64 0026 5A62     		str	r2, [r3, #36]
 376:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 377:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Set Initialization mode */
 378:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_EnterInitMode() == ERROR)
  65              		.loc 1 378 0
  66 0028 FFF7FEFF 		bl	RTC_EnterInitMode
  67 002c 0346     		mov	r3, r0
  68 002e 002B     		cmp	r3, #0
  69 0030 03D1     		bne	.L2
 379:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 380:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = ERROR;
  70              		.loc 1 380 0
  71 0032 4FF00003 		mov	r3, #0
  72 0036 FB73     		strb	r3, [r7, #15]
  73 0038 54E0     		b	.L3
  74              	.L2:
 381:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }  
 382:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
 383:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 384:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Reset TR, DR and CR registers */
 385:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->TR = (uint32_t)0x00000000;
  75              		.loc 1 385 0
  76 003a 2F4B     		ldr	r3, .L8
  77 003c 4FF00002 		mov	r2, #0
  78 0040 1A60     		str	r2, [r3, #0]
 386:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->DR = (uint32_t)0x00002101;
  79              		.loc 1 386 0
  80 0042 2D4B     		ldr	r3, .L8
  81 0044 42F20112 		movw	r2, #8449
  82 0048 5A60     		str	r2, [r3, #4]
 387:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Reset All CR bits except CR[2:0] */
 388:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CR &= (uint32_t)0x00000007;
  83              		.loc 1 388 0
  84 004a 2B4B     		ldr	r3, .L8
  85 004c 2A4A     		ldr	r2, .L8
  86 004e 9268     		ldr	r2, [r2, #8]
  87 0050 02F00702 		and	r2, r2, #7
  88 0054 9A60     		str	r2, [r3, #8]
  89              	.L5:
 389:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 390:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
 391:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     do
 392:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 393:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       wutwfstatus = RTC->ISR & RTC_ISR_WUTWF;
  90              		.loc 1 393 0 discriminator 1
  91 0056 284B     		ldr	r3, .L8
  92 0058 DB68     		ldr	r3, [r3, #12]
  93 005a 03F00403 		and	r3, r3, #4
  94 005e BB60     		str	r3, [r7, #8]
 394:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       wutcounter++;  
  95              		.loc 1 394 0 discriminator 1
  96 0060 7B68     		ldr	r3, [r7, #4]
  97 0062 03F10103 		add	r3, r3, #1
  98 0066 7B60     		str	r3, [r7, #4]
 395:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     } while((wutcounter != INITMODE_TIMEOUT) && (wutwfstatus == 0x00));
  99              		.loc 1 395 0 discriminator 1
 100 0068 7B68     		ldr	r3, [r7, #4]
 101 006a B3F5803F 		cmp	r3, #65536
 102 006e 02D0     		beq	.L4
 103 0070 BB68     		ldr	r3, [r7, #8]
 104 0072 002B     		cmp	r3, #0
 105 0074 EFD0     		beq	.L5
 106              	.L4:
 396:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
 397:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if ((RTC->ISR & RTC_ISR_WUTWF) == RESET)
 107              		.loc 1 397 0
 108 0076 204B     		ldr	r3, .L8
 109 0078 DB68     		ldr	r3, [r3, #12]
 110 007a 03F00403 		and	r3, r3, #4
 111 007e 002B     		cmp	r3, #0
 112 0080 03D1     		bne	.L6
 398:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 399:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       status = ERROR;
 113              		.loc 1 399 0
 114 0082 4FF00003 		mov	r3, #0
 115 0086 FB73     		strb	r3, [r7, #15]
 116 0088 2CE0     		b	.L3
 117              	.L6:
 400:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
 401:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     else
 402:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 403:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       /* Reset all RTC CR register bits */
 404:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->CR &= (uint32_t)0x00000000;
 118              		.loc 1 404 0
 119 008a 1B4B     		ldr	r3, .L8
 120 008c 9B68     		ldr	r3, [r3, #8]
 121 008e 1A4B     		ldr	r3, .L8
 122 0090 4FF00002 		mov	r2, #0
 123 0094 9A60     		str	r2, [r3, #8]
 405:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->WUTR = (uint32_t)0x0000FFFF;
 124              		.loc 1 405 0
 125 0096 184B     		ldr	r3, .L8
 126 0098 4FF6FF72 		movw	r2, #65535
 127 009c 5A61     		str	r2, [r3, #20]
 406:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->PRER = (uint32_t)0x007F00FF;
 128              		.loc 1 406 0
 129 009e 164B     		ldr	r3, .L8
 130 00a0 164A     		ldr	r2, .L8+4
 131 00a2 1A61     		str	r2, [r3, #16]
 407:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->CALIBR = (uint32_t)0x00000000;
 132              		.loc 1 407 0
 133 00a4 144B     		ldr	r3, .L8
 134 00a6 4FF00002 		mov	r2, #0
 135 00aa 9A61     		str	r2, [r3, #24]
 408:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->ALRMAR = (uint32_t)0x00000000;        
 136              		.loc 1 408 0
 137 00ac 124B     		ldr	r3, .L8
 138 00ae 4FF00002 		mov	r2, #0
 139 00b2 DA61     		str	r2, [r3, #28]
 409:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->ALRMBR = (uint32_t)0x00000000;
 140              		.loc 1 409 0
 141 00b4 104B     		ldr	r3, .L8
 142 00b6 4FF00002 		mov	r2, #0
 143 00ba 1A62     		str	r2, [r3, #32]
 410:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       
 411:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       /* Reset ISR register and exit initialization mode */
 412:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->ISR = (uint32_t)0x00000000;
 144              		.loc 1 412 0
 145 00bc 0E4B     		ldr	r3, .L8
 146 00be 4FF00002 		mov	r2, #0
 147 00c2 DA60     		str	r2, [r3, #12]
 413:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       
 414:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       /* Reset Tamper and alternate functions configuration register */
 415:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->TAFCR = 0x00000000;
 148              		.loc 1 415 0
 149 00c4 0C4B     		ldr	r3, .L8
 150 00c6 4FF00002 		mov	r2, #0
 151 00ca 1A64     		str	r2, [r3, #64]
 416:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 417:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       if(RTC_WaitForSynchro() == ERROR)
 152              		.loc 1 417 0
 153 00cc FFF7FEFF 		bl	RTC_WaitForSynchro
 154 00d0 0346     		mov	r3, r0
 155 00d2 002B     		cmp	r3, #0
 156 00d4 03D1     		bne	.L7
 418:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       {
 419:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****         status = ERROR;
 157              		.loc 1 419 0
 158 00d6 4FF00003 		mov	r3, #0
 159 00da FB73     		strb	r3, [r7, #15]
 160 00dc 02E0     		b	.L3
 161              	.L7:
 420:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       }
 421:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       else
 422:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       {
 423:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****         status = SUCCESS;      
 162              		.loc 1 423 0
 163 00de 4FF00103 		mov	r3, #1
 164 00e2 FB73     		strb	r3, [r7, #15]
 165              	.L3:
 424:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       }
 425:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
 426:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 427:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 428:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
 429:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF;  
 166              		.loc 1 429 0
 167 00e4 044B     		ldr	r3, .L8
 168 00e6 4FF0FF02 		mov	r2, #255
 169 00ea 5A62     		str	r2, [r3, #36]
 430:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 431:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return status;
 170              		.loc 1 431 0
 171 00ec FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 432:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 172              		.loc 1 432 0
 173 00ee 1846     		mov	r0, r3
 174 00f0 07F11007 		add	r7, r7, #16
 175 00f4 BD46     		mov	sp, r7
 176 00f6 80BD     		pop	{r7, pc}
 177              	.L9:
 178              		.align	2
 179              	.L8:
 180 00f8 00280040 		.word	1073752064
 181 00fc FF007F00 		.word	8323327
 182              		.cfi_endproc
 183              	.LFE110:
 185              		.section	.text.RTC_Init,"ax",%progbits
 186              		.align	2
 187              		.global	RTC_Init
 188              		.thumb
 189              		.thumb_func
 191              	RTC_Init:
 192              	.LFB111:
 433:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 434:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
 435:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Initializes the RTC registers according to the specified parameters 
 436:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         in RTC_InitStruct.
 437:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_InitStruct: pointer to a RTC_InitTypeDef structure that contains 
 438:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         the configuration information for the RTC peripheral.
 439:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   The RTC Prescaler register is write protected and can be written in 
 440:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         initialization mode only.  
 441:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
 442:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC registers are initialized
 443:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - ERROR: RTC registers are not initialized  
 444:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 445:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** ErrorStatus RTC_Init(RTC_InitTypeDef* RTC_InitStruct)
 446:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 193              		.loc 1 446 0
 194              		.cfi_startproc
 195              		@ args = 0, pretend = 0, frame = 16
 196              		@ frame_needed = 1, uses_anonymous_args = 0
 197 0000 80B5     		push	{r7, lr}
 198              	.LCFI3:
 199              		.cfi_def_cfa_offset 8
 200 0002 84B0     		sub	sp, sp, #16
 201              	.LCFI4:
 202              		.cfi_def_cfa_offset 24
 203 0004 00AF     		add	r7, sp, #0
 204              		.cfi_offset 14, -4
 205              		.cfi_offset 7, -8
 206              	.LCFI5:
 207              		.cfi_def_cfa_register 7
 208 0006 7860     		str	r0, [r7, #4]
 447:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 209              		.loc 1 447 0
 210 0008 4FF00003 		mov	r3, #0
 211 000c FB73     		strb	r3, [r7, #15]
 448:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 449:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
 450:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_HOUR_FORMAT(RTC_InitStruct->RTC_HourFormat));
 451:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_ASYNCH_PREDIV(RTC_InitStruct->RTC_AsynchPrediv));
 452:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_SYNCH_PREDIV(RTC_InitStruct->RTC_SynchPrediv));
 453:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 454:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
 455:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 212              		.loc 1 455 0
 213 000e 1E4B     		ldr	r3, .L13
 214 0010 4FF0CA02 		mov	r2, #202
 215 0014 5A62     		str	r2, [r3, #36]
 456:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 216              		.loc 1 456 0
 217 0016 1C4B     		ldr	r3, .L13
 218 0018 4FF05302 		mov	r2, #83
 219 001c 5A62     		str	r2, [r3, #36]
 457:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 458:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Set Initialization mode */
 459:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_EnterInitMode() == ERROR)
 220              		.loc 1 459 0
 221 001e FFF7FEFF 		bl	RTC_EnterInitMode
 222 0022 0346     		mov	r3, r0
 223 0024 002B     		cmp	r3, #0
 224 0026 03D1     		bne	.L11
 460:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 461:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = ERROR;
 225              		.loc 1 461 0
 226 0028 4FF00003 		mov	r3, #0
 227 002c FB73     		strb	r3, [r7, #15]
 228 002e 20E0     		b	.L12
 229              	.L11:
 462:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   } 
 463:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
 464:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 465:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Clear RTC CR FMT Bit */
 466:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CR &= ((uint32_t)~(RTC_CR_FMT));
 230              		.loc 1 466 0
 231 0030 154B     		ldr	r3, .L13
 232 0032 154A     		ldr	r2, .L13
 233 0034 9268     		ldr	r2, [r2, #8]
 234 0036 22F04002 		bic	r2, r2, #64
 235 003a 9A60     		str	r2, [r3, #8]
 467:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Set RTC_CR register */
 468:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CR |=  ((uint32_t)(RTC_InitStruct->RTC_HourFormat));
 236              		.loc 1 468 0
 237 003c 124B     		ldr	r3, .L13
 238 003e 124A     		ldr	r2, .L13
 239 0040 9168     		ldr	r1, [r2, #8]
 240 0042 7A68     		ldr	r2, [r7, #4]
 241 0044 1268     		ldr	r2, [r2, #0]
 242 0046 41EA0202 		orr	r2, r1, r2
 243 004a 9A60     		str	r2, [r3, #8]
 469:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 470:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Configure the RTC PRER */
 471:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->PRER = (uint32_t)(RTC_InitStruct->RTC_SynchPrediv);
 244              		.loc 1 471 0
 245 004c 0E4B     		ldr	r3, .L13
 246 004e 7A68     		ldr	r2, [r7, #4]
 247 0050 9268     		ldr	r2, [r2, #8]
 248 0052 1A61     		str	r2, [r3, #16]
 472:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->PRER |= (uint32_t)(RTC_InitStruct->RTC_AsynchPrediv << 16);
 249              		.loc 1 472 0
 250 0054 0C4B     		ldr	r3, .L13
 251 0056 0C4A     		ldr	r2, .L13
 252 0058 1169     		ldr	r1, [r2, #16]
 253 005a 7A68     		ldr	r2, [r7, #4]
 254 005c 5268     		ldr	r2, [r2, #4]
 255 005e 4FEA0242 		lsl	r2, r2, #16
 256 0062 41EA0202 		orr	r2, r1, r2
 257 0066 1A61     		str	r2, [r3, #16]
 473:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 474:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Exit Initialization mode */
 475:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_ExitInitMode();
 258              		.loc 1 475 0
 259 0068 FFF7FEFF 		bl	RTC_ExitInitMode
 476:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 477:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = SUCCESS;    
 260              		.loc 1 477 0
 261 006c 4FF00103 		mov	r3, #1
 262 0070 FB73     		strb	r3, [r7, #15]
 263              	.L12:
 478:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 479:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
 480:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 264              		.loc 1 480 0
 265 0072 054B     		ldr	r3, .L13
 266 0074 4FF0FF02 		mov	r2, #255
 267 0078 5A62     		str	r2, [r3, #36]
 481:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 482:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return status;
 268              		.loc 1 482 0
 269 007a FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 483:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 270              		.loc 1 483 0
 271 007c 1846     		mov	r0, r3
 272 007e 07F11007 		add	r7, r7, #16
 273 0082 BD46     		mov	sp, r7
 274 0084 80BD     		pop	{r7, pc}
 275              	.L14:
 276 0086 00BF     		.align	2
 277              	.L13:
 278 0088 00280040 		.word	1073752064
 279              		.cfi_endproc
 280              	.LFE111:
 282              		.section	.text.RTC_StructInit,"ax",%progbits
 283              		.align	2
 284              		.global	RTC_StructInit
 285              		.thumb
 286              		.thumb_func
 288              	RTC_StructInit:
 289              	.LFB112:
 484:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 485:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
 486:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Fills each RTC_InitStruct member with its default value.
 487:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_InitStruct: pointer to a RTC_InitTypeDef structure which will be 
 488:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         initialized.
 489:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
 490:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 491:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_StructInit(RTC_InitTypeDef* RTC_InitStruct)
 492:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 290              		.loc 1 492 0
 291              		.cfi_startproc
 292              		@ args = 0, pretend = 0, frame = 8
 293              		@ frame_needed = 1, uses_anonymous_args = 0
 294              		@ link register save eliminated.
 295 0000 80B4     		push	{r7}
 296              	.LCFI6:
 297              		.cfi_def_cfa_offset 4
 298 0002 83B0     		sub	sp, sp, #12
 299              	.LCFI7:
 300              		.cfi_def_cfa_offset 16
 301 0004 00AF     		add	r7, sp, #0
 302              		.cfi_offset 7, -4
 303              	.LCFI8:
 304              		.cfi_def_cfa_register 7
 305 0006 7860     		str	r0, [r7, #4]
 493:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Initialize the RTC_HourFormat member */
 494:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_InitStruct->RTC_HourFormat = RTC_HourFormat_24;
 306              		.loc 1 494 0
 307 0008 7B68     		ldr	r3, [r7, #4]
 308 000a 4FF00002 		mov	r2, #0
 309 000e 1A60     		str	r2, [r3, #0]
 495:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
 496:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Initialize the RTC_AsynchPrediv member */
 497:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_InitStruct->RTC_AsynchPrediv = (uint32_t)0x7F;
 310              		.loc 1 497 0
 311 0010 7B68     		ldr	r3, [r7, #4]
 312 0012 4FF07F02 		mov	r2, #127
 313 0016 5A60     		str	r2, [r3, #4]
 498:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 499:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Initialize the RTC_SynchPrediv member */
 500:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_InitStruct->RTC_SynchPrediv = (uint32_t)0xFF; 
 314              		.loc 1 500 0
 315 0018 7B68     		ldr	r3, [r7, #4]
 316 001a 4FF0FF02 		mov	r2, #255
 317 001e 9A60     		str	r2, [r3, #8]
 501:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 318              		.loc 1 501 0
 319 0020 07F10C07 		add	r7, r7, #12
 320 0024 BD46     		mov	sp, r7
 321 0026 80BC     		pop	{r7}
 322 0028 7047     		bx	lr
 323              		.cfi_endproc
 324              	.LFE112:
 326 002a 00BF     		.section	.text.RTC_WriteProtectionCmd,"ax",%progbits
 327              		.align	2
 328              		.global	RTC_WriteProtectionCmd
 329              		.thumb
 330              		.thumb_func
 332              	RTC_WriteProtectionCmd:
 333              	.LFB113:
 502:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 503:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
 504:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Enables or disables the RTC registers write protection.
 505:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   All the RTC registers are write protected except for RTC_ISR[13:8], 
 506:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         RTC_TAFCR and RTC_BKPxR.
 507:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   Writing a wrong key reactivates the write protection.
 508:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   The protection mechanism is not affected by system reset.  
 509:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  NewState: new state of the write protection.
 510:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be: ENABLE or DISABLE.
 511:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
 512:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 513:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_WriteProtectionCmd(FunctionalState NewState)
 514:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 334              		.loc 1 514 0
 335              		.cfi_startproc
 336              		@ args = 0, pretend = 0, frame = 8
 337              		@ frame_needed = 1, uses_anonymous_args = 0
 338              		@ link register save eliminated.
 339 0000 80B4     		push	{r7}
 340              	.LCFI9:
 341              		.cfi_def_cfa_offset 4
 342 0002 83B0     		sub	sp, sp, #12
 343              	.LCFI10:
 344              		.cfi_def_cfa_offset 16
 345 0004 00AF     		add	r7, sp, #0
 346              		.cfi_offset 7, -4
 347              	.LCFI11:
 348              		.cfi_def_cfa_register 7
 349 0006 0346     		mov	r3, r0
 350 0008 FB71     		strb	r3, [r7, #7]
 515:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
 516:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 517:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
 518:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (NewState != DISABLE)
 351              		.loc 1 518 0
 352 000a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 353 000c 002B     		cmp	r3, #0
 354 000e 04D0     		beq	.L17
 519:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 520:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Enable the write protection for RTC registers */
 521:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->WPR = 0xFF;   
 355              		.loc 1 521 0
 356 0010 084B     		ldr	r3, .L19
 357 0012 4FF0FF02 		mov	r2, #255
 358 0016 5A62     		str	r2, [r3, #36]
 359 0018 07E0     		b	.L16
 360              	.L17:
 522:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 523:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
 524:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 525:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Disable the write protection for RTC registers */
 526:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->WPR = 0xCA;
 361              		.loc 1 526 0
 362 001a 064B     		ldr	r3, .L19
 363 001c 4FF0CA02 		mov	r2, #202
 364 0020 5A62     		str	r2, [r3, #36]
 527:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->WPR = 0x53;    
 365              		.loc 1 527 0
 366 0022 044B     		ldr	r3, .L19
 367 0024 4FF05302 		mov	r2, #83
 368 0028 5A62     		str	r2, [r3, #36]
 369              	.L16:
 528:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 529:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 370              		.loc 1 529 0
 371 002a 07F10C07 		add	r7, r7, #12
 372 002e BD46     		mov	sp, r7
 373 0030 80BC     		pop	{r7}
 374 0032 7047     		bx	lr
 375              	.L20:
 376              		.align	2
 377              	.L19:
 378 0034 00280040 		.word	1073752064
 379              		.cfi_endproc
 380              	.LFE113:
 382              		.section	.text.RTC_EnterInitMode,"ax",%progbits
 383              		.align	2
 384              		.global	RTC_EnterInitMode
 385              		.thumb
 386              		.thumb_func
 388              	RTC_EnterInitMode:
 389              	.LFB114:
 530:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 531:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
 532:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Enters the RTC Initialization mode.
 533:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   The RTC Initialization mode is write protected, use the 
 534:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         RTC_WriteProtectionCmd(DISABLE) before calling this function.    
 535:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  None
 536:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
 537:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC is in Init mode
 538:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - ERROR: RTC is not in Init mode  
 539:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 540:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** ErrorStatus RTC_EnterInitMode(void)
 541:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 390              		.loc 1 541 0
 391              		.cfi_startproc
 392              		@ args = 0, pretend = 0, frame = 16
 393              		@ frame_needed = 1, uses_anonymous_args = 0
 394              		@ link register save eliminated.
 395 0000 80B4     		push	{r7}
 396              	.LCFI12:
 397              		.cfi_def_cfa_offset 4
 398 0002 85B0     		sub	sp, sp, #20
 399              	.LCFI13:
 400              		.cfi_def_cfa_offset 24
 401 0004 00AF     		add	r7, sp, #0
 402              		.cfi_offset 7, -4
 403              	.LCFI14:
 404              		.cfi_def_cfa_register 7
 542:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   __IO uint32_t initcounter = 0x00;
 405              		.loc 1 542 0
 406 0006 4FF00003 		mov	r3, #0
 407 000a 7B60     		str	r3, [r7, #4]
 543:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 408              		.loc 1 543 0
 409 000c 4FF00003 		mov	r3, #0
 410 0010 FB73     		strb	r3, [r7, #15]
 544:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t initstatus = 0x00;
 411              		.loc 1 544 0
 412 0012 4FF00003 		mov	r3, #0
 413 0016 BB60     		str	r3, [r7, #8]
 545:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      
 546:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check if the Initialization mode is set */
 547:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if ((RTC->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 414              		.loc 1 547 0
 415 0018 184B     		ldr	r3, .L27
 416 001a DB68     		ldr	r3, [r3, #12]
 417 001c 03F04003 		and	r3, r3, #64
 418 0020 002B     		cmp	r3, #0
 419 0022 21D1     		bne	.L22
 548:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 549:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Set the Initialization mode */
 550:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->ISR = (uint32_t)RTC_INIT_MASK;
 420              		.loc 1 550 0
 421 0024 154B     		ldr	r3, .L27
 422 0026 4FF0FF32 		mov	r2, #-1
 423 002a DA60     		str	r2, [r3, #12]
 424              	.L24:
 551:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
 552:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Wait till RTC is in INIT state and if Time out is reached exit */
 553:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     do
 554:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 555:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       initstatus = RTC->ISR & RTC_ISR_INITF;
 425              		.loc 1 555 0 discriminator 1
 426 002c 134B     		ldr	r3, .L27
 427 002e DB68     		ldr	r3, [r3, #12]
 428 0030 03F04003 		and	r3, r3, #64
 429 0034 BB60     		str	r3, [r7, #8]
 556:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       initcounter++;  
 430              		.loc 1 556 0 discriminator 1
 431 0036 7B68     		ldr	r3, [r7, #4]
 432 0038 03F10103 		add	r3, r3, #1
 433 003c 7B60     		str	r3, [r7, #4]
 557:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     } while((initcounter != INITMODE_TIMEOUT) && (initstatus == 0x00));
 434              		.loc 1 557 0 discriminator 1
 435 003e 7B68     		ldr	r3, [r7, #4]
 436 0040 B3F5803F 		cmp	r3, #65536
 437 0044 02D0     		beq	.L23
 438 0046 BB68     		ldr	r3, [r7, #8]
 439 0048 002B     		cmp	r3, #0
 440 004a EFD0     		beq	.L24
 441              	.L23:
 558:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
 559:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if ((RTC->ISR & RTC_ISR_INITF) != RESET)
 442              		.loc 1 559 0
 443 004c 0B4B     		ldr	r3, .L27
 444 004e DB68     		ldr	r3, [r3, #12]
 445 0050 03F04003 		and	r3, r3, #64
 446 0054 002B     		cmp	r3, #0
 447 0056 03D0     		beq	.L25
 560:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 561:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       status = SUCCESS;
 448              		.loc 1 561 0
 449 0058 4FF00103 		mov	r3, #1
 450 005c FB73     		strb	r3, [r7, #15]
 451 005e 06E0     		b	.L26
 452              	.L25:
 562:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
 563:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     else
 564:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 565:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       status = ERROR;
 453              		.loc 1 565 0
 454 0060 4FF00003 		mov	r3, #0
 455 0064 FB73     		strb	r3, [r7, #15]
 456 0066 02E0     		b	.L26
 457              	.L22:
 566:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }        
 567:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 568:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
 569:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 570:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = SUCCESS;  
 458              		.loc 1 570 0
 459 0068 4FF00103 		mov	r3, #1
 460 006c FB73     		strb	r3, [r7, #15]
 461              	.L26:
 571:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   } 
 572:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
 573:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return (status);  
 462              		.loc 1 573 0
 463 006e FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 574:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 464              		.loc 1 574 0
 465 0070 1846     		mov	r0, r3
 466 0072 07F11407 		add	r7, r7, #20
 467 0076 BD46     		mov	sp, r7
 468 0078 80BC     		pop	{r7}
 469 007a 7047     		bx	lr
 470              	.L28:
 471              		.align	2
 472              	.L27:
 473 007c 00280040 		.word	1073752064
 474              		.cfi_endproc
 475              	.LFE114:
 477              		.section	.text.RTC_ExitInitMode,"ax",%progbits
 478              		.align	2
 479              		.global	RTC_ExitInitMode
 480              		.thumb
 481              		.thumb_func
 483              	RTC_ExitInitMode:
 484              	.LFB115:
 575:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 576:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
 577:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Exits the RTC Initialization mode.
 578:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   When the initialization sequence is complete, the calendar restarts 
 579:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         counting after 4 RTCCLK cycles.  
 580:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   The RTC Initialization mode is write protected, use the 
 581:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         RTC_WriteProtectionCmd(DISABLE) before calling this function.      
 582:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  None
 583:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
 584:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 585:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_ExitInitMode(void)
 586:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** { 
 485              		.loc 1 586 0
 486              		.cfi_startproc
 487              		@ args = 0, pretend = 0, frame = 0
 488              		@ frame_needed = 1, uses_anonymous_args = 0
 489              		@ link register save eliminated.
 490 0000 80B4     		push	{r7}
 491              	.LCFI15:
 492              		.cfi_def_cfa_offset 4
 493 0002 00AF     		add	r7, sp, #0
 494              		.cfi_offset 7, -4
 495              	.LCFI16:
 496              		.cfi_def_cfa_register 7
 587:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Exit Initialization mode */
 588:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->ISR &= (uint32_t)~RTC_ISR_INIT;  
 497              		.loc 1 588 0
 498 0004 044B     		ldr	r3, .L30
 499 0006 044A     		ldr	r2, .L30
 500 0008 D268     		ldr	r2, [r2, #12]
 501 000a 22F08002 		bic	r2, r2, #128
 502 000e DA60     		str	r2, [r3, #12]
 589:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 503              		.loc 1 589 0
 504 0010 BD46     		mov	sp, r7
 505 0012 80BC     		pop	{r7}
 506 0014 7047     		bx	lr
 507              	.L31:
 508 0016 00BF     		.align	2
 509              	.L30:
 510 0018 00280040 		.word	1073752064
 511              		.cfi_endproc
 512              	.LFE115:
 514              		.section	.text.RTC_WaitForSynchro,"ax",%progbits
 515              		.align	2
 516              		.global	RTC_WaitForSynchro
 517              		.thumb
 518              		.thumb_func
 520              	RTC_WaitForSynchro:
 521              	.LFB116:
 590:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 591:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
 592:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Waits until the RTC Time and Date registers (RTC_TR and RTC_DR) are 
 593:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         synchronized with RTC APB clock.
 594:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   The RTC Resynchronization mode is write protected, use the 
 595:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         RTC_WriteProtectionCmd(DISABLE) before calling this function. 
 596:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   To read the calendar through the shadow registers after Calendar 
 597:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         initialization, calendar update or after wakeup from low power modes 
 598:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         the software must first clear the RSF flag. 
 599:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         The software must then wait until it is set again before reading 
 600:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         the calendar, which means that the calendar registers have been 
 601:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         correctly copied into the RTC_TR and RTC_DR shadow registers.   
 602:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  None
 603:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
 604:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC registers are synchronised
 605:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - ERROR: RTC registers are not synchronised
 606:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 607:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** ErrorStatus RTC_WaitForSynchro(void)
 608:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 522              		.loc 1 608 0
 523              		.cfi_startproc
 524              		@ args = 0, pretend = 0, frame = 16
 525              		@ frame_needed = 1, uses_anonymous_args = 0
 526              		@ link register save eliminated.
 527 0000 80B4     		push	{r7}
 528              	.LCFI17:
 529              		.cfi_def_cfa_offset 4
 530 0002 85B0     		sub	sp, sp, #20
 531              	.LCFI18:
 532              		.cfi_def_cfa_offset 24
 533 0004 00AF     		add	r7, sp, #0
 534              		.cfi_offset 7, -4
 535              	.LCFI19:
 536              		.cfi_def_cfa_register 7
 609:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   __IO uint32_t synchrocounter = 0;
 537              		.loc 1 609 0
 538 0006 4FF00003 		mov	r3, #0
 539 000a 7B60     		str	r3, [r7, #4]
 610:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 540              		.loc 1 610 0
 541 000c 4FF00003 		mov	r3, #0
 542 0010 FB73     		strb	r3, [r7, #15]
 611:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t synchrostatus = 0x00;
 543              		.loc 1 611 0
 544 0012 4FF00003 		mov	r3, #0
 545 0016 BB60     		str	r3, [r7, #8]
 612:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 613:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
 614:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 546              		.loc 1 614 0
 547 0018 1A4B     		ldr	r3, .L37
 548 001a 4FF0CA02 		mov	r2, #202
 549 001e 5A62     		str	r2, [r3, #36]
 615:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 550              		.loc 1 615 0
 551 0020 184B     		ldr	r3, .L37
 552 0022 4FF05302 		mov	r2, #83
 553 0026 5A62     		str	r2, [r3, #36]
 616:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
 617:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Clear RSF flag */
 618:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->ISR &= (uint32_t)RTC_RSF_MASK;
 554              		.loc 1 618 0
 555 0028 164B     		ldr	r3, .L37
 556 002a 164A     		ldr	r2, .L37
 557 002c D268     		ldr	r2, [r2, #12]
 558 002e 22F0A002 		bic	r2, r2, #160
 559 0032 DA60     		str	r2, [r3, #12]
 560              	.L34:
 619:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
 620:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Wait the registers to be synchronised */
 621:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   do
 622:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 623:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     synchrostatus = RTC->ISR & RTC_ISR_RSF;
 561              		.loc 1 623 0 discriminator 1
 562 0034 134B     		ldr	r3, .L37
 563 0036 DB68     		ldr	r3, [r3, #12]
 564 0038 03F02003 		and	r3, r3, #32
 565 003c BB60     		str	r3, [r7, #8]
 624:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     synchrocounter++;  
 566              		.loc 1 624 0 discriminator 1
 567 003e 7B68     		ldr	r3, [r7, #4]
 568 0040 03F10103 		add	r3, r3, #1
 569 0044 7B60     		str	r3, [r7, #4]
 625:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   } while((synchrocounter != SYNCHRO_TIMEOUT) && (synchrostatus == 0x00));
 570              		.loc 1 625 0 discriminator 1
 571 0046 7B68     		ldr	r3, [r7, #4]
 572 0048 B3F5003F 		cmp	r3, #131072
 573 004c 02D0     		beq	.L33
 574 004e BB68     		ldr	r3, [r7, #8]
 575 0050 002B     		cmp	r3, #0
 576 0052 EFD0     		beq	.L34
 577              	.L33:
 626:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
 627:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if ((RTC->ISR & RTC_ISR_RSF) != RESET)
 578              		.loc 1 627 0
 579 0054 0B4B     		ldr	r3, .L37
 580 0056 DB68     		ldr	r3, [r3, #12]
 581 0058 03F02003 		and	r3, r3, #32
 582 005c 002B     		cmp	r3, #0
 583 005e 03D0     		beq	.L35
 628:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 629:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = SUCCESS;
 584              		.loc 1 629 0
 585 0060 4FF00103 		mov	r3, #1
 586 0064 FB73     		strb	r3, [r7, #15]
 587 0066 02E0     		b	.L36
 588              	.L35:
 630:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 631:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
 632:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 633:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = ERROR;
 589              		.loc 1 633 0
 590 0068 4FF00003 		mov	r3, #0
 591 006c FB73     		strb	r3, [r7, #15]
 592              	.L36:
 634:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }        
 635:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 636:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
 637:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 593              		.loc 1 637 0
 594 006e 054B     		ldr	r3, .L37
 595 0070 4FF0FF02 		mov	r2, #255
 596 0074 5A62     		str	r2, [r3, #36]
 638:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
 639:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return (status); 
 597              		.loc 1 639 0
 598 0076 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 640:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 599              		.loc 1 640 0
 600 0078 1846     		mov	r0, r3
 601 007a 07F11407 		add	r7, r7, #20
 602 007e BD46     		mov	sp, r7
 603 0080 80BC     		pop	{r7}
 604 0082 7047     		bx	lr
 605              	.L38:
 606              		.align	2
 607              	.L37:
 608 0084 00280040 		.word	1073752064
 609              		.cfi_endproc
 610              	.LFE116:
 612              		.section	.text.RTC_RefClockCmd,"ax",%progbits
 613              		.align	2
 614              		.global	RTC_RefClockCmd
 615              		.thumb
 616              		.thumb_func
 618              	RTC_RefClockCmd:
 619              	.LFB117:
 641:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 642:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
 643:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Enables or disables the RTC reference clock detection.
 644:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  NewState: new state of the RTC reference clock.
 645:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be: ENABLE or DISABLE.
 646:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
 647:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC reference clock detection is enabled
 648:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - ERROR: RTC reference clock detection is disabled  
 649:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 650:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** ErrorStatus RTC_RefClockCmd(FunctionalState NewState)
 651:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** { 
 620              		.loc 1 651 0
 621              		.cfi_startproc
 622              		@ args = 0, pretend = 0, frame = 16
 623              		@ frame_needed = 1, uses_anonymous_args = 0
 624 0000 80B5     		push	{r7, lr}
 625              	.LCFI20:
 626              		.cfi_def_cfa_offset 8
 627 0002 84B0     		sub	sp, sp, #16
 628              	.LCFI21:
 629              		.cfi_def_cfa_offset 24
 630 0004 00AF     		add	r7, sp, #0
 631              		.cfi_offset 14, -4
 632              		.cfi_offset 7, -8
 633              	.LCFI22:
 634              		.cfi_def_cfa_register 7
 635 0006 0346     		mov	r3, r0
 636 0008 FB71     		strb	r3, [r7, #7]
 652:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 637              		.loc 1 652 0
 638 000a 4FF00003 		mov	r3, #0
 639 000e FB73     		strb	r3, [r7, #15]
 653:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 654:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
 655:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 656:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 657:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
 658:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 640              		.loc 1 658 0
 641 0010 174B     		ldr	r3, .L44
 642 0012 4FF0CA02 		mov	r2, #202
 643 0016 5A62     		str	r2, [r3, #36]
 659:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 644              		.loc 1 659 0
 645 0018 154B     		ldr	r3, .L44
 646 001a 4FF05302 		mov	r2, #83
 647 001e 5A62     		str	r2, [r3, #36]
 660:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
 661:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Set Initialization mode */
 662:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_EnterInitMode() == ERROR)
 648              		.loc 1 662 0
 649 0020 FFF7FEFF 		bl	RTC_EnterInitMode
 650 0024 0346     		mov	r3, r0
 651 0026 002B     		cmp	r3, #0
 652 0028 03D1     		bne	.L40
 663:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 664:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = ERROR;
 653              		.loc 1 664 0
 654 002a 4FF00003 		mov	r3, #0
 655 002e FB73     		strb	r3, [r7, #15]
 656 0030 14E0     		b	.L41
 657              	.L40:
 665:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   } 
 666:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
 667:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {  
 668:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if (NewState != DISABLE)
 658              		.loc 1 668 0
 659 0032 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 660 0034 002B     		cmp	r3, #0
 661 0036 06D0     		beq	.L42
 669:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 670:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       /* Enable the RTC reference clock detection */
 671:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->CR |= RTC_CR_REFCKON;   
 662              		.loc 1 671 0
 663 0038 0D4B     		ldr	r3, .L44
 664 003a 0D4A     		ldr	r2, .L44
 665 003c 9268     		ldr	r2, [r2, #8]
 666 003e 42F01002 		orr	r2, r2, #16
 667 0042 9A60     		str	r2, [r3, #8]
 668 0044 05E0     		b	.L43
 669              	.L42:
 672:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
 673:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     else
 674:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 675:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       /* Disable the RTC reference clock detection */
 676:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->CR &= ~RTC_CR_REFCKON;    
 670              		.loc 1 676 0
 671 0046 0A4B     		ldr	r3, .L44
 672 0048 094A     		ldr	r2, .L44
 673 004a 9268     		ldr	r2, [r2, #8]
 674 004c 22F01002 		bic	r2, r2, #16
 675 0050 9A60     		str	r2, [r3, #8]
 676              	.L43:
 677:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
 678:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Exit Initialization mode */
 679:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_ExitInitMode();
 677              		.loc 1 679 0
 678 0052 FFF7FEFF 		bl	RTC_ExitInitMode
 680:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
 681:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = SUCCESS;
 679              		.loc 1 681 0
 680 0056 4FF00103 		mov	r3, #1
 681 005a FB73     		strb	r3, [r7, #15]
 682              	.L41:
 682:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 683:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 684:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
 685:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF;  
 683              		.loc 1 685 0
 684 005c 044B     		ldr	r3, .L44
 685 005e 4FF0FF02 		mov	r2, #255
 686 0062 5A62     		str	r2, [r3, #36]
 686:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 687:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return status; 
 687              		.loc 1 687 0
 688 0064 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 688:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 689              		.loc 1 688 0
 690 0066 1846     		mov	r0, r3
 691 0068 07F11007 		add	r7, r7, #16
 692 006c BD46     		mov	sp, r7
 693 006e 80BD     		pop	{r7, pc}
 694              	.L45:
 695              		.align	2
 696              	.L44:
 697 0070 00280040 		.word	1073752064
 698              		.cfi_endproc
 699              	.LFE117:
 701              		.section	.text.RTC_BypassShadowCmd,"ax",%progbits
 702              		.align	2
 703              		.global	RTC_BypassShadowCmd
 704              		.thumb
 705              		.thumb_func
 707              	RTC_BypassShadowCmd:
 708              	.LFB118:
 689:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 690:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
 691:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Enables or Disables the Bypass Shadow feature.
 692:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   When the Bypass Shadow is enabled the calendar value are taken 
 693:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         directly from the Calendar counter.
 694:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  NewState: new state of the Bypass Shadow feature.
 695:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         This parameter can be: ENABLE or DISABLE.
 696:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
 697:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** */
 698:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_BypassShadowCmd(FunctionalState NewState)
 699:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 709              		.loc 1 699 0
 710              		.cfi_startproc
 711              		@ args = 0, pretend = 0, frame = 8
 712              		@ frame_needed = 1, uses_anonymous_args = 0
 713              		@ link register save eliminated.
 714 0000 80B4     		push	{r7}
 715              	.LCFI23:
 716              		.cfi_def_cfa_offset 4
 717 0002 83B0     		sub	sp, sp, #12
 718              	.LCFI24:
 719              		.cfi_def_cfa_offset 16
 720 0004 00AF     		add	r7, sp, #0
 721              		.cfi_offset 7, -4
 722              	.LCFI25:
 723              		.cfi_def_cfa_register 7
 724 0006 0346     		mov	r3, r0
 725 0008 FB71     		strb	r3, [r7, #7]
 700:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
 701:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 702:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 703:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
 704:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 726              		.loc 1 704 0
 727 000a 104B     		ldr	r3, .L49
 728 000c 4FF0CA02 		mov	r2, #202
 729 0010 5A62     		str	r2, [r3, #36]
 705:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 730              		.loc 1 705 0
 731 0012 0E4B     		ldr	r3, .L49
 732 0014 4FF05302 		mov	r2, #83
 733 0018 5A62     		str	r2, [r3, #36]
 706:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 707:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (NewState != DISABLE)
 734              		.loc 1 707 0
 735 001a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 736 001c 002B     		cmp	r3, #0
 737 001e 06D0     		beq	.L47
 708:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 709:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Set the BYPSHAD bit */
 710:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CR |= (uint8_t)RTC_CR_BYPSHAD;
 738              		.loc 1 710 0
 739 0020 0A4B     		ldr	r3, .L49
 740 0022 0A4A     		ldr	r2, .L49
 741 0024 9268     		ldr	r2, [r2, #8]
 742 0026 42F02002 		orr	r2, r2, #32
 743 002a 9A60     		str	r2, [r3, #8]
 744 002c 05E0     		b	.L48
 745              	.L47:
 711:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 712:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
 713:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 714:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Reset the BYPSHAD bit */
 715:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CR &= (uint8_t)~RTC_CR_BYPSHAD;
 746              		.loc 1 715 0
 747 002e 074B     		ldr	r3, .L49
 748 0030 064A     		ldr	r2, .L49
 749 0032 9268     		ldr	r2, [r2, #8]
 750 0034 02F0DF02 		and	r2, r2, #223
 751 0038 9A60     		str	r2, [r3, #8]
 752              	.L48:
 716:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 717:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 718:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
 719:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF;
 753              		.loc 1 719 0
 754 003a 044B     		ldr	r3, .L49
 755 003c 4FF0FF02 		mov	r2, #255
 756 0040 5A62     		str	r2, [r3, #36]
 720:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 757              		.loc 1 720 0
 758 0042 07F10C07 		add	r7, r7, #12
 759 0046 BD46     		mov	sp, r7
 760 0048 80BC     		pop	{r7}
 761 004a 7047     		bx	lr
 762              	.L50:
 763              		.align	2
 764              	.L49:
 765 004c 00280040 		.word	1073752064
 766              		.cfi_endproc
 767              	.LFE118:
 769              		.section	.text.RTC_SetTime,"ax",%progbits
 770              		.align	2
 771              		.global	RTC_SetTime
 772              		.thumb
 773              		.thumb_func
 775              	RTC_SetTime:
 776              	.LFB119:
 721:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 722:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
 723:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @}
 724:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 725:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 726:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group2 Time and Date configuration functions
 727:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *  @brief   Time and Date configuration functions 
 728:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *
 729:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @verbatim   
 730:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================
 731:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                    Time and Date configuration functions
 732:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================  
 733:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 734:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   This section provide functions allowing to program and read the RTC Calendar
 735:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   (Time and Date).
 736:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 737:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @endverbatim
 738:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @{
 739:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 740:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 741:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
 742:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Set the RTC current time.
 743:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_Format: specifies the format of the entered parameters.
 744:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be  one of the following values:
 745:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BIN:  Binary data format 
 746:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BCD:  BCD data format
 747:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_TimeStruct: pointer to a RTC_TimeTypeDef structure that contains 
 748:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                        the time configuration information for the RTC.     
 749:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
 750:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC Time register is configured
 751:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - ERROR: RTC Time register is not configured
 752:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 753:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** ErrorStatus RTC_SetTime(uint32_t RTC_Format, RTC_TimeTypeDef* RTC_TimeStruct)
 754:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 777              		.loc 1 754 0
 778              		.cfi_startproc
 779              		@ args = 0, pretend = 0, frame = 16
 780              		@ frame_needed = 1, uses_anonymous_args = 0
 781 0000 90B5     		push	{r4, r7, lr}
 782              	.LCFI26:
 783              		.cfi_def_cfa_offset 12
 784 0002 85B0     		sub	sp, sp, #20
 785              	.LCFI27:
 786              		.cfi_def_cfa_offset 32
 787 0004 00AF     		add	r7, sp, #0
 788              		.cfi_offset 14, -4
 789              		.cfi_offset 7, -8
 790              		.cfi_offset 4, -12
 791              	.LCFI28:
 792              		.cfi_def_cfa_register 7
 793 0006 7860     		str	r0, [r7, #4]
 794 0008 3960     		str	r1, [r7, #0]
 755:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 795              		.loc 1 755 0
 796 000a 4FF00003 		mov	r3, #0
 797 000e FB60     		str	r3, [r7, #12]
 756:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 798              		.loc 1 756 0
 799 0010 4FF00003 		mov	r3, #0
 800 0014 FB72     		strb	r3, [r7, #11]
 757:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
 758:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
 759:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_FORMAT(RTC_Format));
 760:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 761:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_Format == RTC_Format_BIN)
 801              		.loc 1 761 0
 802 0016 7B68     		ldr	r3, [r7, #4]
 803 0018 002B     		cmp	r3, #0
 804 001a 0AD1     		bne	.L52
 762:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 763:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if ((RTC->CR & RTC_CR_FMT) != (uint32_t)RESET)
 805              		.loc 1 763 0
 806 001c 414B     		ldr	r3, .L60
 807 001e 9B68     		ldr	r3, [r3, #8]
 808 0020 03F04003 		and	r3, r3, #64
 809 0024 002B     		cmp	r3, #0
 810 0026 16D1     		bne	.L53
 764:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 765:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_HOUR12(RTC_TimeStruct->RTC_Hours));
 766:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_H12(RTC_TimeStruct->RTC_H12));
 767:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     } 
 768:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     else
 769:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 770:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC_TimeStruct->RTC_H12 = 0x00;
 811              		.loc 1 770 0
 812 0028 3B68     		ldr	r3, [r7, #0]
 813 002a 4FF00002 		mov	r2, #0
 814 002e DA70     		strb	r2, [r3, #3]
 815 0030 11E0     		b	.L53
 816              	.L52:
 771:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_HOUR24(RTC_TimeStruct->RTC_Hours));
 772:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
 773:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_MINUTES(RTC_TimeStruct->RTC_Minutes));
 774:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_SECONDS(RTC_TimeStruct->RTC_Seconds));
 775:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 776:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
 777:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 778:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if ((RTC->CR & RTC_CR_FMT) != (uint32_t)RESET)
 817              		.loc 1 778 0
 818 0032 3C4B     		ldr	r3, .L60
 819 0034 9B68     		ldr	r3, [r3, #8]
 820 0036 03F04003 		and	r3, r3, #64
 821 003a 002B     		cmp	r3, #0
 822 003c 07D0     		beq	.L54
 779:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 780:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       tmpreg = RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Hours);
 823              		.loc 1 780 0
 824 003e 3B68     		ldr	r3, [r7, #0]
 825 0040 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 826 0042 1846     		mov	r0, r3
 827 0044 FFF7FEFF 		bl	RTC_Bcd2ToByte
 828 0048 0346     		mov	r3, r0
 829 004a FB60     		str	r3, [r7, #12]
 830 004c 03E0     		b	.L53
 831              	.L54:
 781:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_HOUR12(tmpreg));
 782:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_H12(RTC_TimeStruct->RTC_H12)); 
 783:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     } 
 784:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     else
 785:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 786:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC_TimeStruct->RTC_H12 = 0x00;
 832              		.loc 1 786 0
 833 004e 3B68     		ldr	r3, [r7, #0]
 834 0050 4FF00002 		mov	r2, #0
 835 0054 DA70     		strb	r2, [r3, #3]
 836              	.L53:
 787:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Hours)));
 788:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
 789:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Minutes)));
 790:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Seconds)));
 791:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 792:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 793:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the input parameters format */
 794:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_Format != RTC_Format_BIN)
 837              		.loc 1 794 0
 838 0056 7B68     		ldr	r3, [r7, #4]
 839 0058 002B     		cmp	r3, #0
 840 005a 13D0     		beq	.L55
 795:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 796:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (((uint32_t)(RTC_TimeStruct->RTC_Hours) << 16) | \
 841              		.loc 1 796 0
 842 005c 3B68     		ldr	r3, [r7, #0]
 843 005e 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 844 0060 4FEA0342 		lsl	r2, r3, #16
 797:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****              ((uint32_t)(RTC_TimeStruct->RTC_Minutes) << 8) | \
 845              		.loc 1 797 0
 846 0064 3B68     		ldr	r3, [r7, #0]
 847 0066 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 848 0068 4FEA0323 		lsl	r3, r3, #8
 796:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (((uint32_t)(RTC_TimeStruct->RTC_Hours) << 16) | \
 849              		.loc 1 796 0
 850 006c 1A43     		orrs	r2, r2, r3
 798:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****              ((uint32_t)RTC_TimeStruct->RTC_Seconds) | \
 851              		.loc 1 798 0
 852 006e 3B68     		ldr	r3, [r7, #0]
 853 0070 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 797:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****              ((uint32_t)(RTC_TimeStruct->RTC_Minutes) << 8) | \
 854              		.loc 1 797 0
 855 0072 1A43     		orrs	r2, r2, r3
 799:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****              ((uint32_t)(RTC_TimeStruct->RTC_H12) << 16)); 
 856              		.loc 1 799 0
 857 0074 3B68     		ldr	r3, [r7, #0]
 858 0076 DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 859 0078 4FEA0343 		lsl	r3, r3, #16
 796:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (((uint32_t)(RTC_TimeStruct->RTC_Hours) << 16) | \
 860              		.loc 1 796 0
 861 007c 42EA0303 		orr	r3, r2, r3
 862 0080 FB60     		str	r3, [r7, #12]
 863 0082 1FE0     		b	.L56
 864              	.L55:
 800:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }  
 801:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
 802:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 803:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Hours) << 16) | \
 865              		.loc 1 803 0
 866 0084 3B68     		ldr	r3, [r7, #0]
 867 0086 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 868 0088 1846     		mov	r0, r3
 869 008a FFF7FEFF 		bl	RTC_ByteToBcd2
 870 008e 0346     		mov	r3, r0
 871 0090 4FEA0344 		lsl	r4, r3, #16
 804:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                    ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Minutes) << 8) | \
 872              		.loc 1 804 0
 873 0094 3B68     		ldr	r3, [r7, #0]
 874 0096 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 875 0098 1846     		mov	r0, r3
 876 009a FFF7FEFF 		bl	RTC_ByteToBcd2
 877 009e 0346     		mov	r3, r0
 878 00a0 4FEA0323 		lsl	r3, r3, #8
 803:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Hours) << 16) | \
 879              		.loc 1 803 0
 880 00a4 1C43     		orrs	r4, r4, r3
 805:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                    ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Seconds)) | \
 881              		.loc 1 805 0
 882 00a6 3B68     		ldr	r3, [r7, #0]
 883 00a8 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 884 00aa 1846     		mov	r0, r3
 885 00ac FFF7FEFF 		bl	RTC_ByteToBcd2
 886 00b0 0346     		mov	r3, r0
 804:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                    ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Minutes) << 8) | \
 887              		.loc 1 804 0
 888 00b2 44EA0302 		orr	r2, r4, r3
 806:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                    (((uint32_t)RTC_TimeStruct->RTC_H12) << 16));
 889              		.loc 1 806 0
 890 00b6 3B68     		ldr	r3, [r7, #0]
 891 00b8 DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 892 00ba 4FEA0343 		lsl	r3, r3, #16
 803:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Hours) << 16) | \
 893              		.loc 1 803 0
 894 00be 42EA0303 		orr	r3, r2, r3
 895 00c2 FB60     		str	r3, [r7, #12]
 896              	.L56:
 807:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }  
 808:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 809:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
 810:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 897              		.loc 1 810 0
 898 00c4 174B     		ldr	r3, .L60
 899 00c6 4FF0CA02 		mov	r2, #202
 900 00ca 5A62     		str	r2, [r3, #36]
 811:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 901              		.loc 1 811 0
 902 00cc 154B     		ldr	r3, .L60
 903 00ce 4FF05302 		mov	r2, #83
 904 00d2 5A62     		str	r2, [r3, #36]
 812:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 813:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Set Initialization mode */
 814:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_EnterInitMode() == ERROR)
 905              		.loc 1 814 0
 906 00d4 FFF7FEFF 		bl	RTC_EnterInitMode
 907 00d8 0346     		mov	r3, r0
 908 00da 002B     		cmp	r3, #0
 909 00dc 03D1     		bne	.L57
 815:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 816:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = ERROR;
 910              		.loc 1 816 0
 911 00de 4FF00003 		mov	r3, #0
 912 00e2 FB72     		strb	r3, [r7, #11]
 913 00e4 13E0     		b	.L58
 914              	.L57:
 817:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   } 
 818:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
 819:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 820:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Set the RTC_TR register */
 821:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 915              		.loc 1 821 0
 916 00e6 0F4A     		ldr	r2, .L60
 917 00e8 F968     		ldr	r1, [r7, #12]
 918 00ea 0F4B     		ldr	r3, .L60+4
 919 00ec 01EA0303 		and	r3, r1, r3
 920 00f0 1360     		str	r3, [r2, #0]
 822:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 823:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Exit Initialization mode */
 824:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_ExitInitMode(); 
 921              		.loc 1 824 0
 922 00f2 FFF7FEFF 		bl	RTC_ExitInitMode
 825:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 826:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if(RTC_WaitForSynchro() == ERROR)
 923              		.loc 1 826 0
 924 00f6 FFF7FEFF 		bl	RTC_WaitForSynchro
 925 00fa 0346     		mov	r3, r0
 926 00fc 002B     		cmp	r3, #0
 927 00fe 03D1     		bne	.L59
 827:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 828:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       status = ERROR;
 928              		.loc 1 828 0
 929 0100 4FF00003 		mov	r3, #0
 930 0104 FB72     		strb	r3, [r7, #11]
 931 0106 02E0     		b	.L58
 932              	.L59:
 829:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
 830:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     else
 831:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 832:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       status = SUCCESS;
 933              		.loc 1 832 0
 934 0108 4FF00103 		mov	r3, #1
 935 010c FB72     		strb	r3, [r7, #11]
 936              	.L58:
 833:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
 834:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 835:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 836:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
 837:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 937              		.loc 1 837 0
 938 010e 054B     		ldr	r3, .L60
 939 0110 4FF0FF02 		mov	r2, #255
 940 0114 5A62     		str	r2, [r3, #36]
 838:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
 839:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return status;
 941              		.loc 1 839 0
 942 0116 FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 840:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 943              		.loc 1 840 0
 944 0118 1846     		mov	r0, r3
 945 011a 07F11407 		add	r7, r7, #20
 946 011e BD46     		mov	sp, r7
 947 0120 90BD     		pop	{r4, r7, pc}
 948              	.L61:
 949 0122 00BF     		.align	2
 950              	.L60:
 951 0124 00280040 		.word	1073752064
 952 0128 7F7F7F00 		.word	8355711
 953              		.cfi_endproc
 954              	.LFE119:
 956              		.section	.text.RTC_TimeStructInit,"ax",%progbits
 957              		.align	2
 958              		.global	RTC_TimeStructInit
 959              		.thumb
 960              		.thumb_func
 962              	RTC_TimeStructInit:
 963              	.LFB120:
 841:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 842:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
 843:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Fills each RTC_TimeStruct member with its default value
 844:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         (Time = 00h:00min:00sec).
 845:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_TimeStruct: pointer to a RTC_TimeTypeDef structure which will be 
 846:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         initialized.
 847:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
 848:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 849:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_TimeStructInit(RTC_TimeTypeDef* RTC_TimeStruct)
 850:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 964              		.loc 1 850 0
 965              		.cfi_startproc
 966              		@ args = 0, pretend = 0, frame = 8
 967              		@ frame_needed = 1, uses_anonymous_args = 0
 968              		@ link register save eliminated.
 969 0000 80B4     		push	{r7}
 970              	.LCFI29:
 971              		.cfi_def_cfa_offset 4
 972 0002 83B0     		sub	sp, sp, #12
 973              	.LCFI30:
 974              		.cfi_def_cfa_offset 16
 975 0004 00AF     		add	r7, sp, #0
 976              		.cfi_offset 7, -4
 977              	.LCFI31:
 978              		.cfi_def_cfa_register 7
 979 0006 7860     		str	r0, [r7, #4]
 851:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Time = 00h:00min:00sec */
 852:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_H12 = RTC_H12_AM;
 980              		.loc 1 852 0
 981 0008 7B68     		ldr	r3, [r7, #4]
 982 000a 4FF00002 		mov	r2, #0
 983 000e DA70     		strb	r2, [r3, #3]
 853:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_Hours = 0;
 984              		.loc 1 853 0
 985 0010 7B68     		ldr	r3, [r7, #4]
 986 0012 4FF00002 		mov	r2, #0
 987 0016 1A70     		strb	r2, [r3, #0]
 854:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_Minutes = 0;
 988              		.loc 1 854 0
 989 0018 7B68     		ldr	r3, [r7, #4]
 990 001a 4FF00002 		mov	r2, #0
 991 001e 5A70     		strb	r2, [r3, #1]
 855:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_Seconds = 0; 
 992              		.loc 1 855 0
 993 0020 7B68     		ldr	r3, [r7, #4]
 994 0022 4FF00002 		mov	r2, #0
 995 0026 9A70     		strb	r2, [r3, #2]
 856:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 996              		.loc 1 856 0
 997 0028 07F10C07 		add	r7, r7, #12
 998 002c BD46     		mov	sp, r7
 999 002e 80BC     		pop	{r7}
 1000 0030 7047     		bx	lr
 1001              		.cfi_endproc
 1002              	.LFE120:
 1004 0032 00BF     		.section	.text.RTC_GetTime,"ax",%progbits
 1005              		.align	2
 1006              		.global	RTC_GetTime
 1007              		.thumb
 1008              		.thumb_func
 1010              	RTC_GetTime:
 1011              	.LFB121:
 857:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 858:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
 859:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Get the RTC current Time.
 860:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_Format: specifies the format of the returned parameters.
 861:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be  one of the following values:
 862:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BIN:  Binary data format 
 863:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BCD:  BCD data format
 864:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_TimeStruct: pointer to a RTC_TimeTypeDef structure that will 
 865:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                        contain the returned current time configuration.     
 866:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
 867:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 868:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_GetTime(uint32_t RTC_Format, RTC_TimeTypeDef* RTC_TimeStruct)
 869:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 1012              		.loc 1 869 0
 1013              		.cfi_startproc
 1014              		@ args = 0, pretend = 0, frame = 16
 1015              		@ frame_needed = 1, uses_anonymous_args = 0
 1016 0000 80B5     		push	{r7, lr}
 1017              	.LCFI32:
 1018              		.cfi_def_cfa_offset 8
 1019 0002 84B0     		sub	sp, sp, #16
 1020              	.LCFI33:
 1021              		.cfi_def_cfa_offset 24
 1022 0004 00AF     		add	r7, sp, #0
 1023              		.cfi_offset 14, -4
 1024              		.cfi_offset 7, -8
 1025              	.LCFI34:
 1026              		.cfi_def_cfa_register 7
 1027 0006 7860     		str	r0, [r7, #4]
 1028 0008 3960     		str	r1, [r7, #0]
 870:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 1029              		.loc 1 870 0
 1030 000a 4FF00003 		mov	r3, #0
 1031 000e FB60     		str	r3, [r7, #12]
 871:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 872:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
 873:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_FORMAT(RTC_Format));
 874:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 875:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Get the RTC_TR register */
 876:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmpreg = (uint32_t)(RTC->TR & RTC_TR_RESERVED_MASK); 
 1032              		.loc 1 876 0
 1033 0010 234B     		ldr	r3, .L65
 1034 0012 1A68     		ldr	r2, [r3, #0]
 1035 0014 234B     		ldr	r3, .L65+4
 1036 0016 02EA0303 		and	r3, r2, r3
 1037 001a FB60     		str	r3, [r7, #12]
 877:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 878:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Fill the structure fields with the read parameters */
 879:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 1038              		.loc 1 879 0
 1039 001c FB68     		ldr	r3, [r7, #12]
 1040 001e 03F47C13 		and	r3, r3, #4128768
 1041 0022 4FEA1343 		lsr	r3, r3, #16
 1042 0026 DAB2     		uxtb	r2, r3
 1043 0028 3B68     		ldr	r3, [r7, #0]
 1044 002a 1A70     		strb	r2, [r3, #0]
 880:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8);
 1045              		.loc 1 880 0
 1046 002c FB68     		ldr	r3, [r7, #12]
 1047 002e 03F4FE43 		and	r3, r3, #32512
 1048 0032 4FEA1323 		lsr	r3, r3, #8
 1049 0036 DAB2     		uxtb	r2, r3
 1050 0038 3B68     		ldr	r3, [r7, #0]
 1051 003a 5A70     		strb	r2, [r3, #1]
 881:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 1052              		.loc 1 881 0
 1053 003c FB68     		ldr	r3, [r7, #12]
 1054 003e DBB2     		uxtb	r3, r3
 1055 0040 03F07F03 		and	r3, r3, #127
 1056 0044 DAB2     		uxtb	r2, r3
 1057 0046 3B68     		ldr	r3, [r7, #0]
 1058 0048 9A70     		strb	r2, [r3, #2]
 882:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_H12 = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16);  
 1059              		.loc 1 882 0
 1060 004a FB68     		ldr	r3, [r7, #12]
 1061 004c 03F48003 		and	r3, r3, #4194304
 1062 0050 4FEA1343 		lsr	r3, r3, #16
 1063 0054 DAB2     		uxtb	r2, r3
 1064 0056 3B68     		ldr	r3, [r7, #0]
 1065 0058 DA70     		strb	r2, [r3, #3]
 883:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 884:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the input parameters format */
 885:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_Format == RTC_Format_BIN)
 1066              		.loc 1 885 0
 1067 005a 7B68     		ldr	r3, [r7, #4]
 1068 005c 002B     		cmp	r3, #0
 1069 005e 1AD1     		bne	.L63
 886:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 887:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Convert the structure parameters to Binary format */
 888:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_TimeStruct->RTC_Hours = (uint8_t)RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Hours);
 1070              		.loc 1 888 0
 1071 0060 3B68     		ldr	r3, [r7, #0]
 1072 0062 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1073 0064 1846     		mov	r0, r3
 1074 0066 FFF7FEFF 		bl	RTC_Bcd2ToByte
 1075 006a 0346     		mov	r3, r0
 1076 006c 1A46     		mov	r2, r3
 1077 006e 3B68     		ldr	r3, [r7, #0]
 1078 0070 1A70     		strb	r2, [r3, #0]
 889:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_TimeStruct->RTC_Minutes = (uint8_t)RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Minutes);
 1079              		.loc 1 889 0
 1080 0072 3B68     		ldr	r3, [r7, #0]
 1081 0074 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1082 0076 1846     		mov	r0, r3
 1083 0078 FFF7FEFF 		bl	RTC_Bcd2ToByte
 1084 007c 0346     		mov	r3, r0
 1085 007e 1A46     		mov	r2, r3
 1086 0080 3B68     		ldr	r3, [r7, #0]
 1087 0082 5A70     		strb	r2, [r3, #1]
 890:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_TimeStruct->RTC_Seconds = (uint8_t)RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Seconds);   
 1088              		.loc 1 890 0
 1089 0084 3B68     		ldr	r3, [r7, #0]
 1090 0086 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 1091 0088 1846     		mov	r0, r3
 1092 008a FFF7FEFF 		bl	RTC_Bcd2ToByte
 1093 008e 0346     		mov	r3, r0
 1094 0090 1A46     		mov	r2, r3
 1095 0092 3B68     		ldr	r3, [r7, #0]
 1096 0094 9A70     		strb	r2, [r3, #2]
 1097              	.L63:
 891:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 892:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 1098              		.loc 1 892 0
 1099 0096 07F11007 		add	r7, r7, #16
 1100 009a BD46     		mov	sp, r7
 1101 009c 80BD     		pop	{r7, pc}
 1102              	.L66:
 1103 009e 00BF     		.align	2
 1104              	.L65:
 1105 00a0 00280040 		.word	1073752064
 1106 00a4 7F7F7F00 		.word	8355711
 1107              		.cfi_endproc
 1108              	.LFE121:
 1110              		.section	.text.RTC_GetSubSecond,"ax",%progbits
 1111              		.align	2
 1112              		.global	RTC_GetSubSecond
 1113              		.thumb
 1114              		.thumb_func
 1116              	RTC_GetSubSecond:
 1117              	.LFB122:
 893:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 894:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
 895:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Gets the RTC current Calendar Subseconds value.
 896:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   This function freeze the Time and Date registers after reading the 
 897:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         SSR register.
 898:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  None
 899:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval RTC current Calendar Subseconds value.
 900:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 901:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** uint32_t RTC_GetSubSecond(void)
 902:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 1118              		.loc 1 902 0
 1119              		.cfi_startproc
 1120              		@ args = 0, pretend = 0, frame = 8
 1121              		@ frame_needed = 1, uses_anonymous_args = 0
 1122              		@ link register save eliminated.
 1123 0000 80B4     		push	{r7}
 1124              	.LCFI35:
 1125              		.cfi_def_cfa_offset 4
 1126 0002 83B0     		sub	sp, sp, #12
 1127              	.LCFI36:
 1128              		.cfi_def_cfa_offset 16
 1129 0004 00AF     		add	r7, sp, #0
 1130              		.cfi_offset 7, -4
 1131              	.LCFI37:
 1132              		.cfi_def_cfa_register 7
 903:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 1133              		.loc 1 903 0
 1134 0006 4FF00003 		mov	r3, #0
 1135 000a 7B60     		str	r3, [r7, #4]
 904:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 905:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Get subseconds values from the correspondent registers*/
 906:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmpreg = (uint32_t)(RTC->SSR);
 1136              		.loc 1 906 0
 1137 000c 054B     		ldr	r3, .L68
 1138 000e 9B6A     		ldr	r3, [r3, #40]
 1139 0010 7B60     		str	r3, [r7, #4]
 907:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 908:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Read DR register to unfroze calendar registers */
 909:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   (void) (RTC->DR);
 1140              		.loc 1 909 0
 1141 0012 044B     		ldr	r3, .L68
 1142 0014 5B68     		ldr	r3, [r3, #4]
 910:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 911:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return (tmpreg);
 1143              		.loc 1 911 0
 1144 0016 7B68     		ldr	r3, [r7, #4]
 912:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 1145              		.loc 1 912 0
 1146 0018 1846     		mov	r0, r3
 1147 001a 07F10C07 		add	r7, r7, #12
 1148 001e BD46     		mov	sp, r7
 1149 0020 80BC     		pop	{r7}
 1150 0022 7047     		bx	lr
 1151              	.L69:
 1152              		.align	2
 1153              	.L68:
 1154 0024 00280040 		.word	1073752064
 1155              		.cfi_endproc
 1156              	.LFE122:
 1158              		.section	.text.RTC_SetDate,"ax",%progbits
 1159              		.align	2
 1160              		.global	RTC_SetDate
 1161              		.thumb
 1162              		.thumb_func
 1164              	RTC_SetDate:
 1165              	.LFB123:
 913:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 914:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
 915:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Set the RTC current date.
 916:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_Format: specifies the format of the entered parameters.
 917:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be  one of the following values:
 918:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BIN:  Binary data format 
 919:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BCD:  BCD data format
 920:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_DateStruct: pointer to a RTC_DateTypeDef structure that contains 
 921:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                         the date configuration information for the RTC.
 922:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
 923:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC Date register is configured
 924:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - ERROR: RTC Date register is not configured
 925:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 926:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** ErrorStatus RTC_SetDate(uint32_t RTC_Format, RTC_DateTypeDef* RTC_DateStruct)
 927:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 1166              		.loc 1 927 0
 1167              		.cfi_startproc
 1168              		@ args = 0, pretend = 0, frame = 16
 1169              		@ frame_needed = 1, uses_anonymous_args = 0
 1170 0000 90B5     		push	{r4, r7, lr}
 1171              	.LCFI38:
 1172              		.cfi_def_cfa_offset 12
 1173 0002 85B0     		sub	sp, sp, #20
 1174              	.LCFI39:
 1175              		.cfi_def_cfa_offset 32
 1176 0004 00AF     		add	r7, sp, #0
 1177              		.cfi_offset 14, -4
 1178              		.cfi_offset 7, -8
 1179              		.cfi_offset 4, -12
 1180              	.LCFI40:
 1181              		.cfi_def_cfa_register 7
 1182 0006 7860     		str	r0, [r7, #4]
 1183 0008 3960     		str	r1, [r7, #0]
 928:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 1184              		.loc 1 928 0
 1185 000a 4FF00003 		mov	r3, #0
 1186 000e FB60     		str	r3, [r7, #12]
 929:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 1187              		.loc 1 929 0
 1188 0010 4FF00003 		mov	r3, #0
 1189 0014 FB72     		strb	r3, [r7, #11]
 930:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 931:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
 932:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_FORMAT(RTC_Format));
 933:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 934:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if ((RTC_Format == RTC_Format_BIN) && ((RTC_DateStruct->RTC_Month & 0x10) == 0x10))
 1190              		.loc 1 934 0
 1191 0016 7B68     		ldr	r3, [r7, #4]
 1192 0018 002B     		cmp	r3, #0
 1193 001a 0FD1     		bne	.L71
 1194              		.loc 1 934 0 is_stmt 0 discriminator 1
 1195 001c 3B68     		ldr	r3, [r7, #0]
 1196 001e 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1197 0020 03F01003 		and	r3, r3, #16
 1198 0024 002B     		cmp	r3, #0
 1199 0026 09D0     		beq	.L71
 935:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 936:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_DateStruct->RTC_Month = (RTC_DateStruct->RTC_Month & (uint32_t)~(0x10)) + 0x0A;
 1200              		.loc 1 936 0 is_stmt 1
 1201 0028 3B68     		ldr	r3, [r7, #0]
 1202 002a 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1203 002c 23F01003 		bic	r3, r3, #16
 1204 0030 DBB2     		uxtb	r3, r3
 1205 0032 03F10A03 		add	r3, r3, #10
 1206 0036 DAB2     		uxtb	r2, r3
 1207 0038 3B68     		ldr	r3, [r7, #0]
 1208 003a 5A70     		strb	r2, [r3, #1]
 1209              	.L71:
 937:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }  
 938:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_Format == RTC_Format_BIN)
 1210              		.loc 1 938 0
 1211 003c 7B68     		ldr	r3, [r7, #4]
 1212 003e 002B     		cmp	r3, #0
 1213 0040 0DD0     		beq	.L72
 939:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 940:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_YEAR(RTC_DateStruct->RTC_Year));
 941:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_MONTH(RTC_DateStruct->RTC_Month));
 942:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_DATE(RTC_DateStruct->RTC_Date));
 943:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 944:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
 945:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 946:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(RTC_DateStruct->RTC_Year)));
 947:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = RTC_Bcd2ToByte(RTC_DateStruct->RTC_Month);
 1214              		.loc 1 947 0
 1215 0042 3B68     		ldr	r3, [r7, #0]
 1216 0044 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1217 0046 1846     		mov	r0, r3
 1218 0048 FFF7FEFF 		bl	RTC_Bcd2ToByte
 1219 004c 0346     		mov	r3, r0
 1220 004e FB60     		str	r3, [r7, #12]
 948:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_MONTH(tmpreg));
 949:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = RTC_Bcd2ToByte(RTC_DateStruct->RTC_Date);
 1221              		.loc 1 949 0
 1222 0050 3B68     		ldr	r3, [r7, #0]
 1223 0052 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 1224 0054 1846     		mov	r0, r3
 1225 0056 FFF7FEFF 		bl	RTC_Bcd2ToByte
 1226 005a 0346     		mov	r3, r0
 1227 005c FB60     		str	r3, [r7, #12]
 1228              	.L72:
 950:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_DATE(tmpreg));
 951:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 952:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_WEEKDAY(RTC_DateStruct->RTC_WeekDay));
 953:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 954:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the input parameters format */
 955:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_Format != RTC_Format_BIN)
 1229              		.loc 1 955 0
 1230 005e 7B68     		ldr	r3, [r7, #4]
 1231 0060 002B     		cmp	r3, #0
 1232 0062 13D0     		beq	.L73
 956:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 957:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = ((((uint32_t)RTC_DateStruct->RTC_Year) << 16) | \
 1233              		.loc 1 957 0
 1234 0064 3B68     		ldr	r3, [r7, #0]
 1235 0066 DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 1236 0068 4FEA0342 		lsl	r2, r3, #16
 958:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               (((uint32_t)RTC_DateStruct->RTC_Month) << 8) | \
 1237              		.loc 1 958 0
 1238 006c 3B68     		ldr	r3, [r7, #0]
 1239 006e 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1240 0070 4FEA0323 		lsl	r3, r3, #8
 957:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = ((((uint32_t)RTC_DateStruct->RTC_Year) << 16) | \
 1241              		.loc 1 957 0
 1242 0074 1A43     		orrs	r2, r2, r3
 959:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_DateStruct->RTC_Date) | \
 1243              		.loc 1 959 0
 1244 0076 3B68     		ldr	r3, [r7, #0]
 1245 0078 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 958:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               (((uint32_t)RTC_DateStruct->RTC_Month) << 8) | \
 1246              		.loc 1 958 0
 1247 007a 1A43     		orrs	r2, r2, r3
 960:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               (((uint32_t)RTC_DateStruct->RTC_WeekDay) << 13)); 
 1248              		.loc 1 960 0
 1249 007c 3B68     		ldr	r3, [r7, #0]
 1250 007e 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1251 0080 4FEA4333 		lsl	r3, r3, #13
 957:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = ((((uint32_t)RTC_DateStruct->RTC_Year) << 16) | \
 1252              		.loc 1 957 0
 1253 0084 42EA0303 		orr	r3, r2, r3
 1254 0088 FB60     		str	r3, [r7, #12]
 1255 008a 1FE0     		b	.L74
 1256              	.L73:
 961:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }  
 962:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
 963:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 964:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Year) << 16) | \
 1257              		.loc 1 964 0
 1258 008c 3B68     		ldr	r3, [r7, #0]
 1259 008e DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 1260 0090 1846     		mov	r0, r3
 1261 0092 FFF7FEFF 		bl	RTC_ByteToBcd2
 1262 0096 0346     		mov	r3, r0
 1263 0098 4FEA0344 		lsl	r4, r3, #16
 965:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Month) << 8) | \
 1264              		.loc 1 965 0
 1265 009c 3B68     		ldr	r3, [r7, #0]
 1266 009e 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1267 00a0 1846     		mov	r0, r3
 1268 00a2 FFF7FEFF 		bl	RTC_ByteToBcd2
 1269 00a6 0346     		mov	r3, r0
 1270 00a8 4FEA0323 		lsl	r3, r3, #8
 964:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Year) << 16) | \
 1271              		.loc 1 964 0
 1272 00ac 1C43     		orrs	r4, r4, r3
 966:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Date)) | \
 1273              		.loc 1 966 0
 1274 00ae 3B68     		ldr	r3, [r7, #0]
 1275 00b0 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 1276 00b2 1846     		mov	r0, r3
 1277 00b4 FFF7FEFF 		bl	RTC_ByteToBcd2
 1278 00b8 0346     		mov	r3, r0
 965:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Month) << 8) | \
 1279              		.loc 1 965 0
 1280 00ba 44EA0302 		orr	r2, r4, r3
 967:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_DateStruct->RTC_WeekDay << 13));
 1281              		.loc 1 967 0
 1282 00be 3B68     		ldr	r3, [r7, #0]
 1283 00c0 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1284 00c2 4FEA4333 		lsl	r3, r3, #13
 964:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Year) << 16) | \
 1285              		.loc 1 964 0
 1286 00c6 42EA0303 		orr	r3, r2, r3
 1287 00ca FB60     		str	r3, [r7, #12]
 1288              	.L74:
 968:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 969:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 970:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
 971:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 1289              		.loc 1 971 0
 1290 00cc 174B     		ldr	r3, .L78
 1291 00ce 4FF0CA02 		mov	r2, #202
 1292 00d2 5A62     		str	r2, [r3, #36]
 972:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 1293              		.loc 1 972 0
 1294 00d4 154B     		ldr	r3, .L78
 1295 00d6 4FF05302 		mov	r2, #83
 1296 00da 5A62     		str	r2, [r3, #36]
 973:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 974:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Set Initialization mode */
 975:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_EnterInitMode() == ERROR)
 1297              		.loc 1 975 0
 1298 00dc FFF7FEFF 		bl	RTC_EnterInitMode
 1299 00e0 0346     		mov	r3, r0
 1300 00e2 002B     		cmp	r3, #0
 1301 00e4 03D1     		bne	.L75
 976:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 977:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = ERROR;
 1302              		.loc 1 977 0
 1303 00e6 4FF00003 		mov	r3, #0
 1304 00ea FB72     		strb	r3, [r7, #11]
 1305 00ec 14E0     		b	.L76
 1306              	.L75:
 978:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   } 
 979:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
 980:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 981:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Set the RTC_DR register */
 982:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->DR = (uint32_t)(tmpreg & RTC_DR_RESERVED_MASK);
 1307              		.loc 1 982 0
 1308 00ee 0F4A     		ldr	r2, .L78
 1309 00f0 FB68     		ldr	r3, [r7, #12]
 1310 00f2 23F07F43 		bic	r3, r3, #-16777216
 1311 00f6 23F0C003 		bic	r3, r3, #192
 1312 00fa 5360     		str	r3, [r2, #4]
 983:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 984:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Exit Initialization mode */
 985:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_ExitInitMode(); 
 1313              		.loc 1 985 0
 1314 00fc FFF7FEFF 		bl	RTC_ExitInitMode
 986:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 987:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if(RTC_WaitForSynchro() == ERROR)
 1315              		.loc 1 987 0
 1316 0100 FFF7FEFF 		bl	RTC_WaitForSynchro
 1317 0104 0346     		mov	r3, r0
 1318 0106 002B     		cmp	r3, #0
 1319 0108 03D1     		bne	.L77
 988:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 989:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       status = ERROR;
 1320              		.loc 1 989 0
 1321 010a 4FF00003 		mov	r3, #0
 1322 010e FB72     		strb	r3, [r7, #11]
 1323 0110 02E0     		b	.L76
 1324              	.L77:
 990:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
 991:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     else
 992:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 993:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       status = SUCCESS;
 1325              		.loc 1 993 0
 1326 0112 4FF00103 		mov	r3, #1
 1327 0116 FB72     		strb	r3, [r7, #11]
 1328              	.L76:
 994:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
 995:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 996:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
 997:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF;   
 1329              		.loc 1 997 0
 1330 0118 044B     		ldr	r3, .L78
 1331 011a 4FF0FF02 		mov	r2, #255
 1332 011e 5A62     		str	r2, [r3, #36]
 998:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 999:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return status;
 1333              		.loc 1 999 0
 1334 0120 FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
1000:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 1335              		.loc 1 1000 0
 1336 0122 1846     		mov	r0, r3
 1337 0124 07F11407 		add	r7, r7, #20
 1338 0128 BD46     		mov	sp, r7
 1339 012a 90BD     		pop	{r4, r7, pc}
 1340              	.L79:
 1341              		.align	2
 1342              	.L78:
 1343 012c 00280040 		.word	1073752064
 1344              		.cfi_endproc
 1345              	.LFE123:
 1347              		.section	.text.RTC_DateStructInit,"ax",%progbits
 1348              		.align	2
 1349              		.global	RTC_DateStructInit
 1350              		.thumb
 1351              		.thumb_func
 1353              	RTC_DateStructInit:
 1354              	.LFB124:
1001:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1002:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1003:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Fills each RTC_DateStruct member with its default value
1004:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         (Monday, January 01 xx00).
1005:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_DateStruct: pointer to a RTC_DateTypeDef structure which will be 
1006:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         initialized.
1007:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
1008:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1009:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_DateStructInit(RTC_DateTypeDef* RTC_DateStruct)
1010:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 1355              		.loc 1 1010 0
 1356              		.cfi_startproc
 1357              		@ args = 0, pretend = 0, frame = 8
 1358              		@ frame_needed = 1, uses_anonymous_args = 0
 1359              		@ link register save eliminated.
 1360 0000 80B4     		push	{r7}
 1361              	.LCFI41:
 1362              		.cfi_def_cfa_offset 4
 1363 0002 83B0     		sub	sp, sp, #12
 1364              	.LCFI42:
 1365              		.cfi_def_cfa_offset 16
 1366 0004 00AF     		add	r7, sp, #0
 1367              		.cfi_offset 7, -4
 1368              	.LCFI43:
 1369              		.cfi_def_cfa_register 7
 1370 0006 7860     		str	r0, [r7, #4]
1011:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Monday, January 01 xx00 */
1012:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_WeekDay = RTC_Weekday_Monday;
 1371              		.loc 1 1012 0
 1372 0008 7B68     		ldr	r3, [r7, #4]
 1373 000a 4FF00102 		mov	r2, #1
 1374 000e 1A70     		strb	r2, [r3, #0]
1013:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_Date = 1;
 1375              		.loc 1 1013 0
 1376 0010 7B68     		ldr	r3, [r7, #4]
 1377 0012 4FF00102 		mov	r2, #1
 1378 0016 9A70     		strb	r2, [r3, #2]
1014:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_Month = RTC_Month_January;
 1379              		.loc 1 1014 0
 1380 0018 7B68     		ldr	r3, [r7, #4]
 1381 001a 4FF00102 		mov	r2, #1
 1382 001e 5A70     		strb	r2, [r3, #1]
1015:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_Year = 0;
 1383              		.loc 1 1015 0
 1384 0020 7B68     		ldr	r3, [r7, #4]
 1385 0022 4FF00002 		mov	r2, #0
 1386 0026 DA70     		strb	r2, [r3, #3]
1016:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 1387              		.loc 1 1016 0
 1388 0028 07F10C07 		add	r7, r7, #12
 1389 002c BD46     		mov	sp, r7
 1390 002e 80BC     		pop	{r7}
 1391 0030 7047     		bx	lr
 1392              		.cfi_endproc
 1393              	.LFE124:
 1395 0032 00BF     		.section	.text.RTC_GetDate,"ax",%progbits
 1396              		.align	2
 1397              		.global	RTC_GetDate
 1398              		.thumb
 1399              		.thumb_func
 1401              	RTC_GetDate:
 1402              	.LFB125:
1017:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1018:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1019:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Get the RTC current date. 
1020:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_Format: specifies the format of the returned parameters.
1021:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
1022:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BIN: Binary data format 
1023:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BCD: BCD data format
1024:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param RTC_DateStruct: pointer to a RTC_DateTypeDef structure that will 
1025:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                        contain the returned current date configuration.     
1026:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
1027:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1028:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_GetDate(uint32_t RTC_Format, RTC_DateTypeDef* RTC_DateStruct)
1029:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 1403              		.loc 1 1029 0
 1404              		.cfi_startproc
 1405              		@ args = 0, pretend = 0, frame = 16
 1406              		@ frame_needed = 1, uses_anonymous_args = 0
 1407 0000 80B5     		push	{r7, lr}
 1408              	.LCFI44:
 1409              		.cfi_def_cfa_offset 8
 1410 0002 84B0     		sub	sp, sp, #16
 1411              	.LCFI45:
 1412              		.cfi_def_cfa_offset 24
 1413 0004 00AF     		add	r7, sp, #0
 1414              		.cfi_offset 14, -4
 1415              		.cfi_offset 7, -8
 1416              	.LCFI46:
 1417              		.cfi_def_cfa_register 7
 1418 0006 7860     		str	r0, [r7, #4]
 1419 0008 3960     		str	r1, [r7, #0]
1030:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 1420              		.loc 1 1030 0
 1421 000a 4FF00003 		mov	r3, #0
 1422 000e FB60     		str	r3, [r7, #12]
1031:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1032:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1033:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_FORMAT(RTC_Format));
1034:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1035:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Get the RTC_TR register */
1036:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmpreg = (uint32_t)(RTC->DR & RTC_DR_RESERVED_MASK); 
 1423              		.loc 1 1036 0
 1424 0010 254B     		ldr	r3, .L83
 1425 0012 5B68     		ldr	r3, [r3, #4]
 1426 0014 23F07F43 		bic	r3, r3, #-16777216
 1427 0018 23F0C003 		bic	r3, r3, #192
 1428 001c FB60     		str	r3, [r7, #12]
1037:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1038:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Fill the structure fields with the read parameters */
1039:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_Year = (uint8_t)((tmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16);
 1429              		.loc 1 1039 0
 1430 001e FB68     		ldr	r3, [r7, #12]
 1431 0020 03F47F03 		and	r3, r3, #16711680
 1432 0024 4FEA1343 		lsr	r3, r3, #16
 1433 0028 DAB2     		uxtb	r2, r3
 1434 002a 3B68     		ldr	r3, [r7, #0]
 1435 002c DA70     		strb	r2, [r3, #3]
1040:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_Month = (uint8_t)((tmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 1436              		.loc 1 1040 0
 1437 002e FB68     		ldr	r3, [r7, #12]
 1438 0030 03F4F853 		and	r3, r3, #7936
 1439 0034 4FEA1323 		lsr	r3, r3, #8
 1440 0038 DAB2     		uxtb	r2, r3
 1441 003a 3B68     		ldr	r3, [r7, #0]
 1442 003c 5A70     		strb	r2, [r3, #1]
1041:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_Date = (uint8_t)(tmpreg & (RTC_DR_DT | RTC_DR_DU));
 1443              		.loc 1 1041 0
 1444 003e FB68     		ldr	r3, [r7, #12]
 1445 0040 DBB2     		uxtb	r3, r3
 1446 0042 03F03F03 		and	r3, r3, #63
 1447 0046 DAB2     		uxtb	r2, r3
 1448 0048 3B68     		ldr	r3, [r7, #0]
 1449 004a 9A70     		strb	r2, [r3, #2]
1042:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_WeekDay = (uint8_t)((tmpreg & (RTC_DR_WDU)) >> 13);  
 1450              		.loc 1 1042 0
 1451 004c FB68     		ldr	r3, [r7, #12]
 1452 004e 03F46043 		and	r3, r3, #57344
 1453 0052 4FEA5333 		lsr	r3, r3, #13
 1454 0056 DAB2     		uxtb	r2, r3
 1455 0058 3B68     		ldr	r3, [r7, #0]
 1456 005a 1A70     		strb	r2, [r3, #0]
1043:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1044:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the input parameters format */
1045:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_Format == RTC_Format_BIN)
 1457              		.loc 1 1045 0
 1458 005c 7B68     		ldr	r3, [r7, #4]
 1459 005e 002B     		cmp	r3, #0
 1460 0060 1ED1     		bne	.L81
1046:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1047:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Convert the structure parameters to Binary format */
1048:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_DateStruct->RTC_Year = (uint8_t)RTC_Bcd2ToByte(RTC_DateStruct->RTC_Year);
 1461              		.loc 1 1048 0
 1462 0062 3B68     		ldr	r3, [r7, #0]
 1463 0064 DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 1464 0066 1846     		mov	r0, r3
 1465 0068 FFF7FEFF 		bl	RTC_Bcd2ToByte
 1466 006c 0346     		mov	r3, r0
 1467 006e 1A46     		mov	r2, r3
 1468 0070 3B68     		ldr	r3, [r7, #0]
 1469 0072 DA70     		strb	r2, [r3, #3]
1049:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_DateStruct->RTC_Month = (uint8_t)RTC_Bcd2ToByte(RTC_DateStruct->RTC_Month);
 1470              		.loc 1 1049 0
 1471 0074 3B68     		ldr	r3, [r7, #0]
 1472 0076 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1473 0078 1846     		mov	r0, r3
 1474 007a FFF7FEFF 		bl	RTC_Bcd2ToByte
 1475 007e 0346     		mov	r3, r0
 1476 0080 1A46     		mov	r2, r3
 1477 0082 3B68     		ldr	r3, [r7, #0]
 1478 0084 5A70     		strb	r2, [r3, #1]
1050:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_DateStruct->RTC_Date = (uint8_t)RTC_Bcd2ToByte(RTC_DateStruct->RTC_Date);
 1479              		.loc 1 1050 0
 1480 0086 3B68     		ldr	r3, [r7, #0]
 1481 0088 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 1482 008a 1846     		mov	r0, r3
 1483 008c FFF7FEFF 		bl	RTC_Bcd2ToByte
 1484 0090 0346     		mov	r3, r0
 1485 0092 1A46     		mov	r2, r3
 1486 0094 3B68     		ldr	r3, [r7, #0]
 1487 0096 9A70     		strb	r2, [r3, #2]
1051:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_DateStruct->RTC_WeekDay = (uint8_t)(RTC_DateStruct->RTC_WeekDay);   
 1488              		.loc 1 1051 0
 1489 0098 3B68     		ldr	r3, [r7, #0]
 1490 009a 1A78     		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 1491 009c 3B68     		ldr	r3, [r7, #0]
 1492 009e 1A70     		strb	r2, [r3, #0]
 1493              	.L81:
1052:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1053:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 1494              		.loc 1 1053 0
 1495 00a0 07F11007 		add	r7, r7, #16
 1496 00a4 BD46     		mov	sp, r7
 1497 00a6 80BD     		pop	{r7, pc}
 1498              	.L84:
 1499              		.align	2
 1500              	.L83:
 1501 00a8 00280040 		.word	1073752064
 1502              		.cfi_endproc
 1503              	.LFE125:
 1505              		.section	.text.RTC_SetAlarm,"ax",%progbits
 1506              		.align	2
 1507              		.global	RTC_SetAlarm
 1508              		.thumb
 1509              		.thumb_func
 1511              	RTC_SetAlarm:
 1512              	.LFB126:
1054:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1055:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1056:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @}
1057:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1058:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1059:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group3 Alarms configuration functions
1060:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *  @brief   Alarms (Alarm A and Alarm B) configuration functions 
1061:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *
1062:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @verbatim   
1063:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================
1064:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               Alarms (Alarm A and Alarm B) configuration functions
1065:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================  
1066:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1067:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   This section provide functions allowing to program and read the RTC Alarms.
1068:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1069:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @endverbatim
1070:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @{
1071:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1072:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1073:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1074:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Set the specified RTC Alarm.
1075:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   The Alarm register can only be written when the corresponding Alarm
1076:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         is disabled (Use the RTC_AlarmCmd(DISABLE)).    
1077:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_Format: specifies the format of the returned parameters.
1078:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
1079:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BIN: Binary data format 
1080:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BCD: BCD data format
1081:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_Alarm: specifies the alarm to be configured.
1082:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
1083:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Alarm_A: to select Alarm A
1084:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Alarm_B: to select Alarm B  
1085:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_AlarmStruct: pointer to a RTC_AlarmTypeDef structure that 
1086:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                          contains the alarm configuration parameters.     
1087:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
1088:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1089:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_SetAlarm(uint32_t RTC_Format, uint32_t RTC_Alarm, RTC_AlarmTypeDef* RTC_AlarmStruct)
1090:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 1513              		.loc 1 1090 0
 1514              		.cfi_startproc
 1515              		@ args = 0, pretend = 0, frame = 24
 1516              		@ frame_needed = 1, uses_anonymous_args = 0
 1517 0000 90B5     		push	{r4, r7, lr}
 1518              	.LCFI47:
 1519              		.cfi_def_cfa_offset 12
 1520 0002 87B0     		sub	sp, sp, #28
 1521              	.LCFI48:
 1522              		.cfi_def_cfa_offset 40
 1523 0004 00AF     		add	r7, sp, #0
 1524              		.cfi_offset 14, -4
 1525              		.cfi_offset 7, -8
 1526              		.cfi_offset 4, -12
 1527              	.LCFI49:
 1528              		.cfi_def_cfa_register 7
 1529 0006 F860     		str	r0, [r7, #12]
 1530 0008 B960     		str	r1, [r7, #8]
 1531 000a 7A60     		str	r2, [r7, #4]
1091:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 1532              		.loc 1 1091 0
 1533 000c 4FF00003 		mov	r3, #0
 1534 0010 7B61     		str	r3, [r7, #20]
1092:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1093:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1094:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_FORMAT(RTC_Format));
1095:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_ALARM(RTC_Alarm));
1096:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_ALARM_MASK(RTC_AlarmStruct->RTC_AlarmMask));
1097:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(RTC_AlarmStruct->RTC_AlarmDateWeekDaySel));
1098:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1099:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_Format == RTC_Format_BIN)
 1535              		.loc 1 1099 0
 1536 0012 FB68     		ldr	r3, [r7, #12]
 1537 0014 002B     		cmp	r3, #0
 1538 0016 0AD1     		bne	.L86
1100:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1101:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if ((RTC->CR & RTC_CR_FMT) != (uint32_t)RESET)
 1539              		.loc 1 1101 0
 1540 0018 4E4B     		ldr	r3, .L96
 1541 001a 9B68     		ldr	r3, [r3, #8]
 1542 001c 03F04003 		and	r3, r3, #64
 1543 0020 002B     		cmp	r3, #0
 1544 0022 29D1     		bne	.L88
1102:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
1103:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_HOUR12(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours));
1104:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_H12(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12));
1105:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     } 
1106:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     else
1107:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
1108:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC_AlarmStruct->RTC_AlarmTime.RTC_H12 = 0x00;
 1545              		.loc 1 1108 0
 1546 0024 7B68     		ldr	r3, [r7, #4]
 1547 0026 4FF00002 		mov	r2, #0
 1548 002a DA70     		strb	r2, [r3, #3]
 1549 002c 24E0     		b	.L88
 1550              	.L86:
1109:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_HOUR24(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours));
1110:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
1111:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_MINUTES(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes));
1112:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_SECONDS(RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds));
1113:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
1114:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if(RTC_AlarmStruct->RTC_AlarmDateWeekDaySel == RTC_AlarmDateWeekDaySel_Date)
1115:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
1116:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_ALARM_DATE_WEEKDAY_DATE(RTC_AlarmStruct->RTC_AlarmDateWeekDay));
1117:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
1118:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     else
1119:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
1120:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_AlarmStruct->RTC_AlarmDateWeekDay));
1121:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
1122:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1123:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
1124:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1125:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if ((RTC->CR & RTC_CR_FMT) != (uint32_t)RESET)
 1551              		.loc 1 1125 0
 1552 002e 494B     		ldr	r3, .L96
 1553 0030 9B68     		ldr	r3, [r3, #8]
 1554 0032 03F04003 		and	r3, r3, #64
 1555 0036 002B     		cmp	r3, #0
 1556 0038 07D0     		beq	.L89
1126:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
1127:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       tmpreg = RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours);
 1557              		.loc 1 1127 0
 1558 003a 7B68     		ldr	r3, [r7, #4]
 1559 003c 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1560 003e 1846     		mov	r0, r3
 1561 0040 FFF7FEFF 		bl	RTC_Bcd2ToByte
 1562 0044 0346     		mov	r3, r0
 1563 0046 7B61     		str	r3, [r7, #20]
 1564 0048 03E0     		b	.L90
 1565              	.L89:
1128:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_HOUR12(tmpreg));
1129:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_H12(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12));
1130:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     } 
1131:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     else
1132:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
1133:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC_AlarmStruct->RTC_AlarmTime.RTC_H12 = 0x00;
 1566              		.loc 1 1133 0
 1567 004a 7B68     		ldr	r3, [r7, #4]
 1568 004c 4FF00002 		mov	r2, #0
 1569 0050 DA70     		strb	r2, [r3, #3]
 1570              	.L90:
1134:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours)));
1135:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
1136:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
1137:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes)));
1138:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds)));
1139:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
1140:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if(RTC_AlarmStruct->RTC_AlarmDateWeekDaySel == RTC_AlarmDateWeekDaySel_Date)
 1571              		.loc 1 1140 0
 1572 0052 7B68     		ldr	r3, [r7, #4]
 1573 0054 9B68     		ldr	r3, [r3, #8]
 1574 0056 002B     		cmp	r3, #0
 1575 0058 07D1     		bne	.L91
1141:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
1142:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       tmpreg = RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmDateWeekDay);
 1576              		.loc 1 1142 0
 1577 005a 7B68     		ldr	r3, [r7, #4]
 1578 005c 1B7B     		ldrb	r3, [r3, #12]	@ zero_extendqisi2
 1579 005e 1846     		mov	r0, r3
 1580 0060 FFF7FEFF 		bl	RTC_Bcd2ToByte
 1581 0064 0346     		mov	r3, r0
 1582 0066 7B61     		str	r3, [r7, #20]
 1583 0068 06E0     		b	.L88
 1584              	.L91:
1143:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_ALARM_DATE_WEEKDAY_DATE(tmpreg));    
1144:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
1145:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     else
1146:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
1147:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       tmpreg = RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmDateWeekDay);
 1585              		.loc 1 1147 0
 1586 006a 7B68     		ldr	r3, [r7, #4]
 1587 006c 1B7B     		ldrb	r3, [r3, #12]	@ zero_extendqisi2
 1588 006e 1846     		mov	r0, r3
 1589 0070 FFF7FEFF 		bl	RTC_Bcd2ToByte
 1590 0074 0346     		mov	r3, r0
 1591 0076 7B61     		str	r3, [r7, #20]
 1592              	.L88:
1148:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(tmpreg));      
1149:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }    
1150:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1151:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1152:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the input parameters format */
1153:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_Format != RTC_Format_BIN)
 1593              		.loc 1 1153 0
 1594 0078 FB68     		ldr	r3, [r7, #12]
 1595 007a 002B     		cmp	r3, #0
 1596 007c 1ED0     		beq	.L92
1154:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1155:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
 1597              		.loc 1 1155 0
 1598 007e 7B68     		ldr	r3, [r7, #4]
 1599 0080 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1600 0082 4FEA0342 		lsl	r2, r3, #16
1156:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
 1601              		.loc 1 1156 0
 1602 0086 7B68     		ldr	r3, [r7, #4]
 1603 0088 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1604 008a 4FEA0323 		lsl	r3, r3, #8
1155:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
 1605              		.loc 1 1155 0
 1606 008e 1A43     		orrs	r2, r2, r3
1157:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds) | \
 1607              		.loc 1 1157 0
 1608 0090 7B68     		ldr	r3, [r7, #4]
 1609 0092 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
1156:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
 1610              		.loc 1 1156 0
 1611 0094 1A43     		orrs	r2, r2, r3
1158:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12) << 16) | \
 1612              		.loc 1 1158 0
 1613 0096 7B68     		ldr	r3, [r7, #4]
 1614 0098 DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 1615 009a 4FEA0343 		lsl	r3, r3, #16
1157:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds) | \
 1616              		.loc 1 1157 0
 1617 009e 1A43     		orrs	r2, r2, r3
1159:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmDateWeekDay) << 24) | \
 1618              		.loc 1 1159 0
 1619 00a0 7B68     		ldr	r3, [r7, #4]
 1620 00a2 1B7B     		ldrb	r3, [r3, #12]	@ zero_extendqisi2
 1621 00a4 4FEA0363 		lsl	r3, r3, #24
1158:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12) << 16) | \
 1622              		.loc 1 1158 0
 1623 00a8 1A43     		orrs	r2, r2, r3
1160:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_AlarmStruct->RTC_AlarmDateWeekDaySel) | \
 1624              		.loc 1 1160 0
 1625 00aa 7B68     		ldr	r3, [r7, #4]
 1626 00ac 9B68     		ldr	r3, [r3, #8]
1159:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmDateWeekDay) << 24) | \
 1627              		.loc 1 1159 0
 1628 00ae 1A43     		orrs	r2, r2, r3
1161:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_AlarmStruct->RTC_AlarmMask)); 
 1629              		.loc 1 1161 0
 1630 00b0 7B68     		ldr	r3, [r7, #4]
 1631 00b2 5B68     		ldr	r3, [r3, #4]
1155:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
 1632              		.loc 1 1155 0
 1633 00b4 42EA0303 		orr	r3, r2, r3
 1634 00b8 7B61     		str	r3, [r7, #20]
 1635 00ba 30E0     		b	.L93
 1636              	.L92:
1162:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }  
1163:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
1164:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1165:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
 1637              		.loc 1 1165 0
 1638 00bc 7B68     		ldr	r3, [r7, #4]
 1639 00be 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1640 00c0 1846     		mov	r0, r3
 1641 00c2 FFF7FEFF 		bl	RTC_ByteToBcd2
 1642 00c6 0346     		mov	r3, r0
 1643 00c8 4FEA0344 		lsl	r4, r3, #16
1166:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
 1644              		.loc 1 1166 0
 1645 00cc 7B68     		ldr	r3, [r7, #4]
 1646 00ce 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1647 00d0 1846     		mov	r0, r3
 1648 00d2 FFF7FEFF 		bl	RTC_ByteToBcd2
 1649 00d6 0346     		mov	r3, r0
 1650 00d8 4FEA0323 		lsl	r3, r3, #8
1165:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
 1651              		.loc 1 1165 0
 1652 00dc 1C43     		orrs	r4, r4, r3
1167:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds)) | \
 1653              		.loc 1 1167 0
 1654 00de 7B68     		ldr	r3, [r7, #4]
 1655 00e0 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 1656 00e2 1846     		mov	r0, r3
 1657 00e4 FFF7FEFF 		bl	RTC_ByteToBcd2
 1658 00e8 0346     		mov	r3, r0
1166:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
 1659              		.loc 1 1166 0
 1660 00ea 44EA0302 		orr	r2, r4, r3
1168:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12) << 16) | \
 1661              		.loc 1 1168 0
 1662 00ee 7B68     		ldr	r3, [r7, #4]
 1663 00f0 DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 1664 00f2 4FEA0343 		lsl	r3, r3, #16
1167:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds)) | \
 1665              		.loc 1 1167 0
 1666 00f6 42EA0304 		orr	r4, r2, r3
1169:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmDateWeekDay) << 24) | \
 1667              		.loc 1 1169 0
 1668 00fa 7B68     		ldr	r3, [r7, #4]
 1669 00fc 1B7B     		ldrb	r3, [r3, #12]	@ zero_extendqisi2
 1670 00fe 1846     		mov	r0, r3
 1671 0100 FFF7FEFF 		bl	RTC_ByteToBcd2
 1672 0104 0346     		mov	r3, r0
 1673 0106 4FEA0363 		lsl	r3, r3, #24
1168:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12) << 16) | \
 1674              		.loc 1 1168 0
 1675 010a 44EA0302 		orr	r2, r4, r3
1170:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_AlarmStruct->RTC_AlarmDateWeekDaySel) | \
 1676              		.loc 1 1170 0
 1677 010e 7B68     		ldr	r3, [r7, #4]
 1678 0110 9B68     		ldr	r3, [r3, #8]
1169:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmDateWeekDay) << 24) | \
 1679              		.loc 1 1169 0
 1680 0112 1A43     		orrs	r2, r2, r3
1171:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_AlarmStruct->RTC_AlarmMask)); 
 1681              		.loc 1 1171 0
 1682 0114 7B68     		ldr	r3, [r7, #4]
 1683 0116 5B68     		ldr	r3, [r3, #4]
1165:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
 1684              		.loc 1 1165 0
 1685 0118 42EA0303 		orr	r3, r2, r3
 1686 011c 7B61     		str	r3, [r7, #20]
 1687              	.L93:
1172:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   } 
1173:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1174:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1175:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 1688              		.loc 1 1175 0
 1689 011e 0D4B     		ldr	r3, .L96
 1690 0120 4FF0CA02 		mov	r2, #202
 1691 0124 5A62     		str	r2, [r3, #36]
1176:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 1692              		.loc 1 1176 0
 1693 0126 0B4B     		ldr	r3, .L96
 1694 0128 4FF05302 		mov	r2, #83
 1695 012c 5A62     		str	r2, [r3, #36]
1177:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1178:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Configure the Alarm register */
1179:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_Alarm == RTC_Alarm_A)
 1696              		.loc 1 1179 0
 1697 012e BB68     		ldr	r3, [r7, #8]
 1698 0130 B3F5807F 		cmp	r3, #256
 1699 0134 03D1     		bne	.L94
1180:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1181:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->ALRMAR = (uint32_t)tmpreg;
 1700              		.loc 1 1181 0
 1701 0136 074B     		ldr	r3, .L96
 1702 0138 7A69     		ldr	r2, [r7, #20]
 1703 013a DA61     		str	r2, [r3, #28]
 1704 013c 02E0     		b	.L95
 1705              	.L94:
1182:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1183:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
1184:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1185:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->ALRMBR = (uint32_t)tmpreg;
 1706              		.loc 1 1185 0
 1707 013e 054B     		ldr	r3, .L96
 1708 0140 7A69     		ldr	r2, [r7, #20]
 1709 0142 1A62     		str	r2, [r3, #32]
 1710              	.L95:
1186:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1187:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1188:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1189:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF;   
 1711              		.loc 1 1189 0
 1712 0144 034B     		ldr	r3, .L96
 1713 0146 4FF0FF02 		mov	r2, #255
 1714 014a 5A62     		str	r2, [r3, #36]
1190:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 1715              		.loc 1 1190 0
 1716 014c 07F11C07 		add	r7, r7, #28
 1717 0150 BD46     		mov	sp, r7
 1718 0152 90BD     		pop	{r4, r7, pc}
 1719              	.L97:
 1720              		.align	2
 1721              	.L96:
 1722 0154 00280040 		.word	1073752064
 1723              		.cfi_endproc
 1724              	.LFE126:
 1726              		.section	.text.RTC_AlarmStructInit,"ax",%progbits
 1727              		.align	2
 1728              		.global	RTC_AlarmStructInit
 1729              		.thumb
 1730              		.thumb_func
 1732              	RTC_AlarmStructInit:
 1733              	.LFB127:
1191:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1192:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1193:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Fills each RTC_AlarmStruct member with its default value
1194:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         (Time = 00h:00mn:00sec / Date = 1st day of the month/Mask =
1195:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         all fields are masked).
1196:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_AlarmStruct: pointer to a @ref RTC_AlarmTypeDef structure which
1197:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         will be initialized.
1198:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
1199:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1200:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_AlarmStructInit(RTC_AlarmTypeDef* RTC_AlarmStruct)
1201:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 1734              		.loc 1 1201 0
 1735              		.cfi_startproc
 1736              		@ args = 0, pretend = 0, frame = 8
 1737              		@ frame_needed = 1, uses_anonymous_args = 0
 1738              		@ link register save eliminated.
 1739 0000 80B4     		push	{r7}
 1740              	.LCFI50:
 1741              		.cfi_def_cfa_offset 4
 1742 0002 83B0     		sub	sp, sp, #12
 1743              	.LCFI51:
 1744              		.cfi_def_cfa_offset 16
 1745 0004 00AF     		add	r7, sp, #0
 1746              		.cfi_offset 7, -4
 1747              	.LCFI52:
 1748              		.cfi_def_cfa_register 7
 1749 0006 7860     		str	r0, [r7, #4]
1202:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Alarm Time Settings : Time = 00h:00mn:00sec */
1203:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_H12 = RTC_H12_AM;
 1750              		.loc 1 1203 0
 1751 0008 7B68     		ldr	r3, [r7, #4]
 1752 000a 4FF00002 		mov	r2, #0
 1753 000e DA70     		strb	r2, [r3, #3]
1204:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours = 0;
 1754              		.loc 1 1204 0
 1755 0010 7B68     		ldr	r3, [r7, #4]
 1756 0012 4FF00002 		mov	r2, #0
 1757 0016 1A70     		strb	r2, [r3, #0]
1205:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes = 0;
 1758              		.loc 1 1205 0
 1759 0018 7B68     		ldr	r3, [r7, #4]
 1760 001a 4FF00002 		mov	r2, #0
 1761 001e 5A70     		strb	r2, [r3, #1]
1206:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds = 0;
 1762              		.loc 1 1206 0
 1763 0020 7B68     		ldr	r3, [r7, #4]
 1764 0022 4FF00002 		mov	r2, #0
 1765 0026 9A70     		strb	r2, [r3, #2]
1207:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1208:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Alarm Date Settings : Date = 1st day of the month */
1209:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmDateWeekDaySel = RTC_AlarmDateWeekDaySel_Date;
 1766              		.loc 1 1209 0
 1767 0028 7B68     		ldr	r3, [r7, #4]
 1768 002a 4FF00002 		mov	r2, #0
 1769 002e 9A60     		str	r2, [r3, #8]
1210:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmDateWeekDay = 1;
 1770              		.loc 1 1210 0
 1771 0030 7B68     		ldr	r3, [r7, #4]
 1772 0032 4FF00102 		mov	r2, #1
 1773 0036 1A73     		strb	r2, [r3, #12]
1211:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1212:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Alarm Masks Settings : Mask =  all fields are not masked */
1213:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmMask = RTC_AlarmMask_None;
 1774              		.loc 1 1213 0
 1775 0038 7B68     		ldr	r3, [r7, #4]
 1776 003a 4FF00002 		mov	r2, #0
 1777 003e 5A60     		str	r2, [r3, #4]
1214:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 1778              		.loc 1 1214 0
 1779 0040 07F10C07 		add	r7, r7, #12
 1780 0044 BD46     		mov	sp, r7
 1781 0046 80BC     		pop	{r7}
 1782 0048 7047     		bx	lr
 1783              		.cfi_endproc
 1784              	.LFE127:
 1786 004a 00BF     		.section	.text.RTC_GetAlarm,"ax",%progbits
 1787              		.align	2
 1788              		.global	RTC_GetAlarm
 1789              		.thumb
 1790              		.thumb_func
 1792              	RTC_GetAlarm:
 1793              	.LFB128:
1215:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1216:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1217:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Get the RTC Alarm value and masks.
1218:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_Format: specifies the format of the output parameters.
1219:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
1220:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BIN: Binary data format 
1221:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BCD: BCD data format
1222:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_Alarm: specifies the alarm to be read.
1223:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
1224:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Alarm_A: to select Alarm A
1225:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Alarm_B: to select Alarm B  
1226:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_AlarmStruct: pointer to a RTC_AlarmTypeDef structure that will 
1227:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                          contains the output alarm configuration values.     
1228:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
1229:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1230:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_GetAlarm(uint32_t RTC_Format, uint32_t RTC_Alarm, RTC_AlarmTypeDef* RTC_AlarmStruct)
1231:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 1794              		.loc 1 1231 0
 1795              		.cfi_startproc
 1796              		@ args = 0, pretend = 0, frame = 24
 1797              		@ frame_needed = 1, uses_anonymous_args = 0
 1798 0000 80B5     		push	{r7, lr}
 1799              	.LCFI53:
 1800              		.cfi_def_cfa_offset 8
 1801 0002 86B0     		sub	sp, sp, #24
 1802              	.LCFI54:
 1803              		.cfi_def_cfa_offset 32
 1804 0004 00AF     		add	r7, sp, #0
 1805              		.cfi_offset 14, -4
 1806              		.cfi_offset 7, -8
 1807              	.LCFI55:
 1808              		.cfi_def_cfa_register 7
 1809 0006 F860     		str	r0, [r7, #12]
 1810 0008 B960     		str	r1, [r7, #8]
 1811 000a 7A60     		str	r2, [r7, #4]
1232:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 1812              		.loc 1 1232 0
 1813 000c 4FF00003 		mov	r3, #0
 1814 0010 7B61     		str	r3, [r7, #20]
1233:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1234:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1235:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_FORMAT(RTC_Format));
1236:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_ALARM(RTC_Alarm)); 
1237:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1238:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Get the RTC_ALRMxR register */
1239:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_Alarm == RTC_Alarm_A)
 1815              		.loc 1 1239 0
 1816 0012 BB68     		ldr	r3, [r7, #8]
 1817 0014 B3F5807F 		cmp	r3, #256
 1818 0018 03D1     		bne	.L100
1240:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1241:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (uint32_t)(RTC->ALRMAR);
 1819              		.loc 1 1241 0
 1820 001a 314B     		ldr	r3, .L103
 1821 001c DB69     		ldr	r3, [r3, #28]
 1822 001e 7B61     		str	r3, [r7, #20]
 1823 0020 02E0     		b	.L101
 1824              	.L100:
1242:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1243:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
1244:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1245:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (uint32_t)(RTC->ALRMBR);
 1825              		.loc 1 1245 0
 1826 0022 2F4B     		ldr	r3, .L103
 1827 0024 1B6A     		ldr	r3, [r3, #32]
 1828 0026 7B61     		str	r3, [r7, #20]
 1829              	.L101:
1246:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1247:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1248:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Fill the structure with the read parameters */
1249:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours = (uint32_t)((tmpreg & (RTC_ALRMAR_HT | \
 1830              		.loc 1 1249 0
 1831 0028 7B69     		ldr	r3, [r7, #20]
 1832 002a 03F47C13 		and	r3, r3, #4128768
 1833 002e 4FEA1343 		lsr	r3, r3, #16
 1834 0032 DAB2     		uxtb	r2, r3
 1835 0034 7B68     		ldr	r3, [r7, #4]
 1836 0036 1A70     		strb	r2, [r3, #0]
1250:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                                                      RTC_ALRMAR_HU)) >> 16);
1251:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes = (uint32_t)((tmpreg & (RTC_ALRMAR_MNT | \
 1837              		.loc 1 1251 0
 1838 0038 7B69     		ldr	r3, [r7, #20]
 1839 003a 03F4FE43 		and	r3, r3, #32512
 1840 003e 4FEA1323 		lsr	r3, r3, #8
 1841 0042 DAB2     		uxtb	r2, r3
 1842 0044 7B68     		ldr	r3, [r7, #4]
 1843 0046 5A70     		strb	r2, [r3, #1]
1252:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                                                      RTC_ALRMAR_MNU)) >> 8);
1253:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds = (uint32_t)(tmpreg & (RTC_ALRMAR_ST | \
 1844              		.loc 1 1253 0
 1845 0048 7B69     		ldr	r3, [r7, #20]
 1846 004a DBB2     		uxtb	r3, r3
 1847 004c 03F07F03 		and	r3, r3, #127
 1848 0050 DAB2     		uxtb	r2, r3
 1849 0052 7B68     		ldr	r3, [r7, #4]
 1850 0054 9A70     		strb	r2, [r3, #2]
1254:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                                                      RTC_ALRMAR_SU));
1255:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_H12 = (uint32_t)((tmpreg & RTC_ALRMAR_PM) >> 16);
 1851              		.loc 1 1255 0
 1852 0056 7B69     		ldr	r3, [r7, #20]
 1853 0058 03F48003 		and	r3, r3, #4194304
 1854 005c 4FEA1343 		lsr	r3, r3, #16
 1855 0060 DAB2     		uxtb	r2, r3
 1856 0062 7B68     		ldr	r3, [r7, #4]
 1857 0064 DA70     		strb	r2, [r3, #3]
1256:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmDateWeekDay = (uint32_t)((tmpreg & (RTC_ALRMAR_DT | RTC_ALRMAR_DU)) >> 
 1858              		.loc 1 1256 0
 1859 0066 7B69     		ldr	r3, [r7, #20]
 1860 0068 03F07C53 		and	r3, r3, #1056964608
 1861 006c 4FEA1363 		lsr	r3, r3, #24
 1862 0070 DAB2     		uxtb	r2, r3
 1863 0072 7B68     		ldr	r3, [r7, #4]
 1864 0074 1A73     		strb	r2, [r3, #12]
1257:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmDateWeekDaySel = (uint32_t)(tmpreg & RTC_ALRMAR_WDSEL);
 1865              		.loc 1 1257 0
 1866 0076 7B69     		ldr	r3, [r7, #20]
 1867 0078 03F08042 		and	r2, r3, #1073741824
 1868 007c 7B68     		ldr	r3, [r7, #4]
 1869 007e 9A60     		str	r2, [r3, #8]
1258:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmMask = (uint32_t)(tmpreg & RTC_AlarmMask_All);
 1870              		.loc 1 1258 0
 1871 0080 7B69     		ldr	r3, [r7, #20]
 1872 0082 03F08032 		and	r2, r3, #-2139062144
 1873 0086 7B68     		ldr	r3, [r7, #4]
 1874 0088 5A60     		str	r2, [r3, #4]
1259:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1260:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_Format == RTC_Format_BIN)
 1875              		.loc 1 1260 0
 1876 008a FB68     		ldr	r3, [r7, #12]
 1877 008c 002B     		cmp	r3, #0
 1878 008e 23D1     		bne	.L99
1261:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1262:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours = RTC_Bcd2ToByte(RTC_AlarmStruct-> \
 1879              		.loc 1 1262 0
 1880 0090 7B68     		ldr	r3, [r7, #4]
 1881 0092 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1882 0094 1846     		mov	r0, r3
 1883 0096 FFF7FEFF 		bl	RTC_Bcd2ToByte
 1884 009a 0346     		mov	r3, r0
 1885 009c 1A46     		mov	r2, r3
 1886 009e 7B68     		ldr	r3, [r7, #4]
 1887 00a0 1A70     		strb	r2, [r3, #0]
1263:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                                                         RTC_AlarmTime.RTC_Hours);
1264:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes = RTC_Bcd2ToByte(RTC_AlarmStruct-> \
 1888              		.loc 1 1264 0
 1889 00a2 7B68     		ldr	r3, [r7, #4]
 1890 00a4 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1891 00a6 1846     		mov	r0, r3
 1892 00a8 FFF7FEFF 		bl	RTC_Bcd2ToByte
 1893 00ac 0346     		mov	r3, r0
 1894 00ae 1A46     		mov	r2, r3
 1895 00b0 7B68     		ldr	r3, [r7, #4]
 1896 00b2 5A70     		strb	r2, [r3, #1]
1265:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                                                         RTC_AlarmTime.RTC_Minutes);
1266:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds = RTC_Bcd2ToByte(RTC_AlarmStruct-> \
 1897              		.loc 1 1266 0
 1898 00b4 7B68     		ldr	r3, [r7, #4]
 1899 00b6 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 1900 00b8 1846     		mov	r0, r3
 1901 00ba FFF7FEFF 		bl	RTC_Bcd2ToByte
 1902 00be 0346     		mov	r3, r0
 1903 00c0 1A46     		mov	r2, r3
 1904 00c2 7B68     		ldr	r3, [r7, #4]
 1905 00c4 9A70     		strb	r2, [r3, #2]
1267:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                                                         RTC_AlarmTime.RTC_Seconds);
1268:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_AlarmStruct->RTC_AlarmDateWeekDay = RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmDateWeekDay);
 1906              		.loc 1 1268 0
 1907 00c6 7B68     		ldr	r3, [r7, #4]
 1908 00c8 1B7B     		ldrb	r3, [r3, #12]	@ zero_extendqisi2
 1909 00ca 1846     		mov	r0, r3
 1910 00cc FFF7FEFF 		bl	RTC_Bcd2ToByte
 1911 00d0 0346     		mov	r3, r0
 1912 00d2 1A46     		mov	r2, r3
 1913 00d4 7B68     		ldr	r3, [r7, #4]
 1914 00d6 1A73     		strb	r2, [r3, #12]
 1915              	.L99:
1269:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }  
1270:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 1916              		.loc 1 1270 0
 1917 00d8 07F11807 		add	r7, r7, #24
 1918 00dc BD46     		mov	sp, r7
 1919 00de 80BD     		pop	{r7, pc}
 1920              	.L104:
 1921              		.align	2
 1922              	.L103:
 1923 00e0 00280040 		.word	1073752064
 1924              		.cfi_endproc
 1925              	.LFE128:
 1927              		.section	.text.RTC_AlarmCmd,"ax",%progbits
 1928              		.align	2
 1929              		.global	RTC_AlarmCmd
 1930              		.thumb
 1931              		.thumb_func
 1933              	RTC_AlarmCmd:
 1934              	.LFB129:
1271:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1272:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1273:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Enables or disables the specified RTC Alarm.
1274:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_Alarm: specifies the alarm to be configured.
1275:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be any combination of the following values:
1276:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Alarm_A: to select Alarm A
1277:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Alarm_B: to select Alarm B  
1278:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  NewState: new state of the specified alarm.
1279:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be: ENABLE or DISABLE.
1280:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
1281:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC Alarm is enabled/disabled
1282:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - ERROR: RTC Alarm is not enabled/disabled  
1283:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1284:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** ErrorStatus RTC_AlarmCmd(uint32_t RTC_Alarm, FunctionalState NewState)
1285:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 1935              		.loc 1 1285 0
 1936              		.cfi_startproc
 1937              		@ args = 0, pretend = 0, frame = 24
 1938              		@ frame_needed = 1, uses_anonymous_args = 0
 1939              		@ link register save eliminated.
 1940 0000 80B4     		push	{r7}
 1941              	.LCFI56:
 1942              		.cfi_def_cfa_offset 4
 1943 0002 87B0     		sub	sp, sp, #28
 1944              	.LCFI57:
 1945              		.cfi_def_cfa_offset 32
 1946 0004 00AF     		add	r7, sp, #0
 1947              		.cfi_offset 7, -4
 1948              	.LCFI58:
 1949              		.cfi_def_cfa_register 7
 1950 0006 7860     		str	r0, [r7, #4]
 1951 0008 0B46     		mov	r3, r1
 1952 000a FB70     		strb	r3, [r7, #3]
1286:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   __IO uint32_t alarmcounter = 0x00;
 1953              		.loc 1 1286 0
 1954 000c 4FF00003 		mov	r3, #0
 1955 0010 FB60     		str	r3, [r7, #12]
1287:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t alarmstatus = 0x00;
 1956              		.loc 1 1287 0
 1957 0012 4FF00003 		mov	r3, #0
 1958 0016 3B61     		str	r3, [r7, #16]
1288:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 1959              		.loc 1 1288 0
 1960 0018 4FF00003 		mov	r3, #0
 1961 001c FB75     		strb	r3, [r7, #23]
1289:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
1290:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1291:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_CMD_ALARM(RTC_Alarm));
1292:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1293:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1294:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1295:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 1962              		.loc 1 1295 0
 1963 001e 264B     		ldr	r3, .L111
 1964 0020 4FF0CA02 		mov	r2, #202
 1965 0024 5A62     		str	r2, [r3, #36]
1296:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 1966              		.loc 1 1296 0
 1967 0026 244B     		ldr	r3, .L111
 1968 0028 4FF05302 		mov	r2, #83
 1969 002c 5A62     		str	r2, [r3, #36]
1297:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1298:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Configure the Alarm state */
1299:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (NewState != DISABLE)
 1970              		.loc 1 1299 0
 1971 002e FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1972 0030 002B     		cmp	r3, #0
 1973 0032 0AD0     		beq	.L106
1300:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1301:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CR |= (uint32_t)RTC_Alarm;
 1974              		.loc 1 1301 0
 1975 0034 204B     		ldr	r3, .L111
 1976 0036 204A     		ldr	r2, .L111
 1977 0038 9168     		ldr	r1, [r2, #8]
 1978 003a 7A68     		ldr	r2, [r7, #4]
 1979 003c 41EA0202 		orr	r2, r1, r2
 1980 0040 9A60     		str	r2, [r3, #8]
1302:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1303:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = SUCCESS;    
 1981              		.loc 1 1303 0
 1982 0042 4FF00103 		mov	r3, #1
 1983 0046 FB75     		strb	r3, [r7, #23]
 1984 0048 2BE0     		b	.L107
 1985              	.L106:
1304:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1305:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
1306:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   { 
1307:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Disable the Alarm in RTC_CR register */
1308:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CR &= (uint32_t)~RTC_Alarm;
 1986              		.loc 1 1308 0
 1987 004a 1B4B     		ldr	r3, .L111
 1988 004c 1A4A     		ldr	r2, .L111
 1989 004e 9168     		ldr	r1, [r2, #8]
 1990 0050 7A68     		ldr	r2, [r7, #4]
 1991 0052 6FEA0202 		mvn	r2, r2
 1992 0056 01EA0202 		and	r2, r1, r2
 1993 005a 9A60     		str	r2, [r3, #8]
 1994              	.L109:
1309:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    
1310:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Wait till RTC ALRxWF flag is set and if Time out is reached exit */
1311:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     do
1312:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
1313:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       alarmstatus = RTC->ISR & (RTC_Alarm >> 8);
 1995              		.loc 1 1313 0 discriminator 1
 1996 005c 164B     		ldr	r3, .L111
 1997 005e DA68     		ldr	r2, [r3, #12]
 1998 0060 7B68     		ldr	r3, [r7, #4]
 1999 0062 4FEA1323 		lsr	r3, r3, #8
 2000 0066 02EA0303 		and	r3, r2, r3
 2001 006a 3B61     		str	r3, [r7, #16]
1314:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       alarmcounter++;  
 2002              		.loc 1 1314 0 discriminator 1
 2003 006c FB68     		ldr	r3, [r7, #12]
 2004 006e 03F10103 		add	r3, r3, #1
 2005 0072 FB60     		str	r3, [r7, #12]
1315:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     } while((alarmcounter != INITMODE_TIMEOUT) && (alarmstatus == 0x00));
 2006              		.loc 1 1315 0 discriminator 1
 2007 0074 FB68     		ldr	r3, [r7, #12]
 2008 0076 B3F5803F 		cmp	r3, #65536
 2009 007a 02D0     		beq	.L108
 2010 007c 3B69     		ldr	r3, [r7, #16]
 2011 007e 002B     		cmp	r3, #0
 2012 0080 ECD0     		beq	.L109
 2013              	.L108:
1316:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
1317:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if ((RTC->ISR & (RTC_Alarm >> 8)) == RESET)
 2014              		.loc 1 1317 0
 2015 0082 0D4B     		ldr	r3, .L111
 2016 0084 DA68     		ldr	r2, [r3, #12]
 2017 0086 7B68     		ldr	r3, [r7, #4]
 2018 0088 4FEA1323 		lsr	r3, r3, #8
 2019 008c 02EA0303 		and	r3, r2, r3
 2020 0090 002B     		cmp	r3, #0
 2021 0092 03D1     		bne	.L110
1318:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
1319:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       status = ERROR;
 2022              		.loc 1 1319 0
 2023 0094 4FF00003 		mov	r3, #0
 2024 0098 FB75     		strb	r3, [r7, #23]
 2025 009a 02E0     		b	.L107
 2026              	.L110:
1320:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     } 
1321:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     else
1322:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
1323:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       status = SUCCESS;
 2027              		.loc 1 1323 0
 2028 009c 4FF00103 		mov	r3, #1
 2029 00a0 FB75     		strb	r3, [r7, #23]
 2030              	.L107:
1324:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }        
1325:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   } 
1326:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1327:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1328:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 2031              		.loc 1 1328 0
 2032 00a2 054B     		ldr	r3, .L111
 2033 00a4 4FF0FF02 		mov	r2, #255
 2034 00a8 5A62     		str	r2, [r3, #36]
1329:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1330:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return status;
 2035              		.loc 1 1330 0
 2036 00aa FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
1331:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 2037              		.loc 1 1331 0
 2038 00ac 1846     		mov	r0, r3
 2039 00ae 07F11C07 		add	r7, r7, #28
 2040 00b2 BD46     		mov	sp, r7
 2041 00b4 80BC     		pop	{r7}
 2042 00b6 7047     		bx	lr
 2043              	.L112:
 2044              		.align	2
 2045              	.L111:
 2046 00b8 00280040 		.word	1073752064
 2047              		.cfi_endproc
 2048              	.LFE129:
 2050              		.section	.text.RTC_AlarmSubSecondConfig,"ax",%progbits
 2051              		.align	2
 2052              		.global	RTC_AlarmSubSecondConfig
 2053              		.thumb
 2054              		.thumb_func
 2056              	RTC_AlarmSubSecondConfig:
 2057              	.LFB130:
1332:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1333:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1334:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Configure the RTC AlarmA/B Subseconds value and mask.*
1335:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   This function is performed only when the Alarm is disabled. 
1336:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_Alarm: specifies the alarm to be configured.
1337:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *   This parameter can be one of the following values:
1338:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_Alarm_A: to select Alarm A
1339:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_Alarm_B: to select Alarm B
1340:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_AlarmSubSecondValue: specifies the Subseconds value.
1341:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *   This parameter can be a value from 0 to 0x00007FFF.
1342:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_AlarmSubSecondMask:  specifies the Subseconds Mask.
1343:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *   This parameter can be any combination of the following values:
1344:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_All    : All Alarm SS fields are masked.
1345:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                          There is no comparison on sub seconds for Alarm.
1346:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_1 : SS[14:1] are don't care in Alarm comparison.
1347:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                          Only SS[0] is compared
1348:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_2 : SS[14:2] are don't care in Alarm comparison.
1349:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                          Only SS[1:0] are compared
1350:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_3 : SS[14:3] are don't care in Alarm comparison.
1351:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                          Only SS[2:0] are compared
1352:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_4 : SS[14:4] are don't care in Alarm comparison.
1353:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                          Only SS[3:0] are compared
1354:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_5 : SS[14:5] are don't care in Alarm comparison.
1355:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                          Only SS[4:0] are compared
1356:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_6 : SS[14:6] are don't care in Alarm comparison.
1357:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                          Only SS[5:0] are compared
1358:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_7 : SS[14:7] are don't care in Alarm comparison.
1359:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                          Only SS[6:0] are compared
1360:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_8 : SS[14:8] are don't care in Alarm comparison.
1361:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                          Only SS[7:0] are compared
1362:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_9 : SS[14:9] are don't care in Alarm comparison.
1363:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                          Only SS[8:0] are compared
1364:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_10: SS[14:10] are don't care in Alarm comparison.
1365:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                          Only SS[9:0] are compared
1366:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_11: SS[14:11] are don't care in Alarm comparison.
1367:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                          Only SS[10:0] are compared
1368:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_12: SS[14:12] are don't care in Alarm comparison.
1369:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                          Only SS[11:0] are compared
1370:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_13: SS[14:13] are don't care in Alarm comparison.
1371:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                          Only SS[12:0] are compared
1372:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14   : SS[14] is don't care in Alarm comparison.
1373:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                          Only SS[13:0] are compared
1374:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_None   : SS[14:0] are compared and must match
1375:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                          to activate alarm
1376:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
1377:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1378:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_AlarmSubSecondConfig(uint32_t RTC_Alarm, uint32_t RTC_AlarmSubSecondValue, uint32_t RTC_Al
1379:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 2058              		.loc 1 1379 0
 2059              		.cfi_startproc
 2060              		@ args = 0, pretend = 0, frame = 24
 2061              		@ frame_needed = 1, uses_anonymous_args = 0
 2062              		@ link register save eliminated.
 2063 0000 80B4     		push	{r7}
 2064              	.LCFI59:
 2065              		.cfi_def_cfa_offset 4
 2066 0002 87B0     		sub	sp, sp, #28
 2067              	.LCFI60:
 2068              		.cfi_def_cfa_offset 32
 2069 0004 00AF     		add	r7, sp, #0
 2070              		.cfi_offset 7, -4
 2071              	.LCFI61:
 2072              		.cfi_def_cfa_register 7
 2073 0006 F860     		str	r0, [r7, #12]
 2074 0008 B960     		str	r1, [r7, #8]
 2075 000a 7A60     		str	r2, [r7, #4]
1380:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 2076              		.loc 1 1380 0
 2077 000c 4FF00003 		mov	r3, #0
 2078 0010 7B61     		str	r3, [r7, #20]
1381:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1382:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1383:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_ALARM(RTC_Alarm));
1384:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(RTC_AlarmSubSecondValue));
1385:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(RTC_AlarmSubSecondMask));
1386:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1387:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1388:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 2079              		.loc 1 1388 0
 2080 0012 104B     		ldr	r3, .L116
 2081 0014 4FF0CA02 		mov	r2, #202
 2082 0018 5A62     		str	r2, [r3, #36]
1389:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 2083              		.loc 1 1389 0
 2084 001a 0E4B     		ldr	r3, .L116
 2085 001c 4FF05302 		mov	r2, #83
 2086 0020 5A62     		str	r2, [r3, #36]
1390:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1391:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Configure the Alarm A or Alarm B SubSecond registers */
1392:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmpreg = (uint32_t) (uint32_t)(RTC_AlarmSubSecondValue) | (uint32_t)(RTC_AlarmSubSecondMask);
 2087              		.loc 1 1392 0
 2088 0022 BA68     		ldr	r2, [r7, #8]
 2089 0024 7B68     		ldr	r3, [r7, #4]
 2090 0026 42EA0303 		orr	r3, r2, r3
 2091 002a 7B61     		str	r3, [r7, #20]
1393:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1394:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_Alarm == RTC_Alarm_A)
 2092              		.loc 1 1394 0
 2093 002c FB68     		ldr	r3, [r7, #12]
 2094 002e B3F5807F 		cmp	r3, #256
 2095 0032 03D1     		bne	.L114
1395:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1396:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Configure the AlarmA SubSecond register */
1397:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->ALRMASSR = tmpreg;
 2096              		.loc 1 1397 0
 2097 0034 074B     		ldr	r3, .L116
 2098 0036 7A69     		ldr	r2, [r7, #20]
 2099 0038 5A64     		str	r2, [r3, #68]
 2100 003a 02E0     		b	.L115
 2101              	.L114:
1398:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1399:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
1400:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1401:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Configure the Alarm B SubSecond register */
1402:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->ALRMBSSR = tmpreg;
 2102              		.loc 1 1402 0
 2103 003c 054B     		ldr	r3, .L116
 2104 003e 7A69     		ldr	r2, [r7, #20]
 2105 0040 9A64     		str	r2, [r3, #72]
 2106              	.L115:
1403:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1404:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1405:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1406:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF;
 2107              		.loc 1 1406 0
 2108 0042 044B     		ldr	r3, .L116
 2109 0044 4FF0FF02 		mov	r2, #255
 2110 0048 5A62     		str	r2, [r3, #36]
1407:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1408:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 2111              		.loc 1 1408 0
 2112 004a 07F11C07 		add	r7, r7, #28
 2113 004e BD46     		mov	sp, r7
 2114 0050 80BC     		pop	{r7}
 2115 0052 7047     		bx	lr
 2116              	.L117:
 2117              		.align	2
 2118              	.L116:
 2119 0054 00280040 		.word	1073752064
 2120              		.cfi_endproc
 2121              	.LFE130:
 2123              		.section	.text.RTC_GetAlarmSubSecond,"ax",%progbits
 2124              		.align	2
 2125              		.global	RTC_GetAlarmSubSecond
 2126              		.thumb
 2127              		.thumb_func
 2129              	RTC_GetAlarmSubSecond:
 2130              	.LFB131:
1409:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1410:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1411:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Gets the RTC Alarm Subseconds value.
1412:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_Alarm: specifies the alarm to be read.
1413:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *   This parameter can be one of the following values:
1414:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_Alarm_A: to select Alarm A
1415:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_Alarm_B: to select Alarm B
1416:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  None
1417:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval RTC Alarm Subseconds value.
1418:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1419:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** uint32_t RTC_GetAlarmSubSecond(uint32_t RTC_Alarm)
1420:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 2131              		.loc 1 1420 0
 2132              		.cfi_startproc
 2133              		@ args = 0, pretend = 0, frame = 16
 2134              		@ frame_needed = 1, uses_anonymous_args = 0
 2135              		@ link register save eliminated.
 2136 0000 80B4     		push	{r7}
 2137              	.LCFI62:
 2138              		.cfi_def_cfa_offset 4
 2139 0002 85B0     		sub	sp, sp, #20
 2140              	.LCFI63:
 2141              		.cfi_def_cfa_offset 24
 2142 0004 00AF     		add	r7, sp, #0
 2143              		.cfi_offset 7, -4
 2144              	.LCFI64:
 2145              		.cfi_def_cfa_register 7
 2146 0006 7860     		str	r0, [r7, #4]
1421:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 2147              		.loc 1 1421 0
 2148 0008 4FF00003 		mov	r3, #0
 2149 000c FB60     		str	r3, [r7, #12]
1422:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1423:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Get the RTC_ALRMxR register */
1424:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_Alarm == RTC_Alarm_A)
 2150              		.loc 1 1424 0
 2151 000e 7B68     		ldr	r3, [r7, #4]
 2152 0010 B3F5807F 		cmp	r3, #256
 2153 0014 07D1     		bne	.L119
1425:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1426:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (uint32_t)((RTC->ALRMASSR) & RTC_ALRMASSR_SS);
 2154              		.loc 1 1426 0
 2155 0016 0B4B     		ldr	r3, .L121
 2156 0018 5B6C     		ldr	r3, [r3, #68]
 2157 001a 4FEA4343 		lsl	r3, r3, #17
 2158 001e 4FEA5343 		lsr	r3, r3, #17
 2159 0022 FB60     		str	r3, [r7, #12]
 2160 0024 06E0     		b	.L120
 2161              	.L119:
1427:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1428:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
1429:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1430:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (uint32_t)((RTC->ALRMBSSR) & RTC_ALRMBSSR_SS);
 2162              		.loc 1 1430 0
 2163 0026 074B     		ldr	r3, .L121
 2164 0028 9B6C     		ldr	r3, [r3, #72]
 2165 002a 4FEA4343 		lsl	r3, r3, #17
 2166 002e 4FEA5343 		lsr	r3, r3, #17
 2167 0032 FB60     		str	r3, [r7, #12]
 2168              	.L120:
1431:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   } 
1432:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1433:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return (tmpreg);
 2169              		.loc 1 1433 0
 2170 0034 FB68     		ldr	r3, [r7, #12]
1434:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 2171              		.loc 1 1434 0
 2172 0036 1846     		mov	r0, r3
 2173 0038 07F11407 		add	r7, r7, #20
 2174 003c BD46     		mov	sp, r7
 2175 003e 80BC     		pop	{r7}
 2176 0040 7047     		bx	lr
 2177              	.L122:
 2178 0042 00BF     		.align	2
 2179              	.L121:
 2180 0044 00280040 		.word	1073752064
 2181              		.cfi_endproc
 2182              	.LFE131:
 2184              		.section	.text.RTC_WakeUpClockConfig,"ax",%progbits
 2185              		.align	2
 2186              		.global	RTC_WakeUpClockConfig
 2187              		.thumb
 2188              		.thumb_func
 2190              	RTC_WakeUpClockConfig:
 2191              	.LFB132:
1435:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1436:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1437:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @}
1438:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1439:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1440:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group4 WakeUp Timer configuration functions
1441:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *  @brief   WakeUp Timer configuration functions 
1442:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *
1443:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @verbatim   
1444:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================
1445:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                      WakeUp Timer configuration functions
1446:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================  
1447:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1448:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   This section provide functions allowing to program and read the RTC WakeUp.
1449:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1450:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @endverbatim
1451:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @{
1452:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1453:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1454:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1455:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Configures the RTC Wakeup clock source.
1456:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   The WakeUp Clock source can only be changed when the RTC WakeUp
1457:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         is disabled (Use the RTC_WakeUpCmd(DISABLE)).      
1458:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_WakeUpClock: Wakeup Clock source.
1459:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
1460:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_WakeUpClock_RTCCLK_Div16: RTC Wakeup Counter Clock = RTCCLK/16
1461:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_WakeUpClock_RTCCLK_Div8: RTC Wakeup Counter Clock = RTCCLK/8
1462:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_WakeUpClock_RTCCLK_Div4: RTC Wakeup Counter Clock = RTCCLK/4
1463:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_WakeUpClock_RTCCLK_Div2: RTC Wakeup Counter Clock = RTCCLK/2
1464:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_WakeUpClock_CK_SPRE_16bits: RTC Wakeup Counter Clock = CK_SPRE
1465:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_WakeUpClock_CK_SPRE_17bits: RTC Wakeup Counter Clock = CK_SPRE
1466:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
1467:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1468:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_WakeUpClockConfig(uint32_t RTC_WakeUpClock)
1469:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 2192              		.loc 1 1469 0
 2193              		.cfi_startproc
 2194              		@ args = 0, pretend = 0, frame = 8
 2195              		@ frame_needed = 1, uses_anonymous_args = 0
 2196              		@ link register save eliminated.
 2197 0000 80B4     		push	{r7}
 2198              	.LCFI65:
 2199              		.cfi_def_cfa_offset 4
 2200 0002 83B0     		sub	sp, sp, #12
 2201              	.LCFI66:
 2202              		.cfi_def_cfa_offset 16
 2203 0004 00AF     		add	r7, sp, #0
 2204              		.cfi_offset 7, -4
 2205              	.LCFI67:
 2206              		.cfi_def_cfa_register 7
 2207 0006 7860     		str	r0, [r7, #4]
1470:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1471:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_WAKEUP_CLOCK(RTC_WakeUpClock));
1472:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1473:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1474:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 2208              		.loc 1 1474 0
 2209 0008 0E4B     		ldr	r3, .L124
 2210 000a 4FF0CA02 		mov	r2, #202
 2211 000e 5A62     		str	r2, [r3, #36]
1475:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 2212              		.loc 1 1475 0
 2213 0010 0C4B     		ldr	r3, .L124
 2214 0012 4FF05302 		mov	r2, #83
 2215 0016 5A62     		str	r2, [r3, #36]
1476:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1477:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Clear the Wakeup Timer clock source bits in CR register */
1478:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 2216              		.loc 1 1478 0
 2217 0018 0A4B     		ldr	r3, .L124
 2218 001a 0A4A     		ldr	r2, .L124
 2219 001c 9268     		ldr	r2, [r2, #8]
 2220 001e 22F00702 		bic	r2, r2, #7
 2221 0022 9A60     		str	r2, [r3, #8]
1479:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1480:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Configure the clock source */
1481:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->CR |= (uint32_t)RTC_WakeUpClock;
 2222              		.loc 1 1481 0
 2223 0024 074B     		ldr	r3, .L124
 2224 0026 074A     		ldr	r2, .L124
 2225 0028 9168     		ldr	r1, [r2, #8]
 2226 002a 7A68     		ldr	r2, [r7, #4]
 2227 002c 41EA0202 		orr	r2, r1, r2
 2228 0030 9A60     		str	r2, [r3, #8]
1482:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1483:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1484:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 2229              		.loc 1 1484 0
 2230 0032 044B     		ldr	r3, .L124
 2231 0034 4FF0FF02 		mov	r2, #255
 2232 0038 5A62     		str	r2, [r3, #36]
1485:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 2233              		.loc 1 1485 0
 2234 003a 07F10C07 		add	r7, r7, #12
 2235 003e BD46     		mov	sp, r7
 2236 0040 80BC     		pop	{r7}
 2237 0042 7047     		bx	lr
 2238              	.L125:
 2239              		.align	2
 2240              	.L124:
 2241 0044 00280040 		.word	1073752064
 2242              		.cfi_endproc
 2243              	.LFE132:
 2245              		.section	.text.RTC_SetWakeUpCounter,"ax",%progbits
 2246              		.align	2
 2247              		.global	RTC_SetWakeUpCounter
 2248              		.thumb
 2249              		.thumb_func
 2251              	RTC_SetWakeUpCounter:
 2252              	.LFB133:
1486:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1487:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1488:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Configures the RTC Wakeup counter.
1489:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   The RTC WakeUp counter can only be written when the RTC WakeUp
1490:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         is disabled (Use the RTC_WakeUpCmd(DISABLE)).        
1491:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_WakeUpCounter: specifies the WakeUp counter.
1492:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be a value from 0x0000 to 0xFFFF. 
1493:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
1494:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1495:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_SetWakeUpCounter(uint32_t RTC_WakeUpCounter)
1496:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 2253              		.loc 1 1496 0
 2254              		.cfi_startproc
 2255              		@ args = 0, pretend = 0, frame = 8
 2256              		@ frame_needed = 1, uses_anonymous_args = 0
 2257              		@ link register save eliminated.
 2258 0000 80B4     		push	{r7}
 2259              	.LCFI68:
 2260              		.cfi_def_cfa_offset 4
 2261 0002 83B0     		sub	sp, sp, #12
 2262              	.LCFI69:
 2263              		.cfi_def_cfa_offset 16
 2264 0004 00AF     		add	r7, sp, #0
 2265              		.cfi_offset 7, -4
 2266              	.LCFI70:
 2267              		.cfi_def_cfa_register 7
 2268 0006 7860     		str	r0, [r7, #4]
1497:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1498:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_WAKEUP_COUNTER(RTC_WakeUpCounter));
1499:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1500:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1501:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 2269              		.loc 1 1501 0
 2270 0008 094B     		ldr	r3, .L127
 2271 000a 4FF0CA02 		mov	r2, #202
 2272 000e 5A62     		str	r2, [r3, #36]
1502:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 2273              		.loc 1 1502 0
 2274 0010 074B     		ldr	r3, .L127
 2275 0012 4FF05302 		mov	r2, #83
 2276 0016 5A62     		str	r2, [r3, #36]
1503:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1504:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Configure the Wakeup Timer counter */
1505:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WUTR = (uint32_t)RTC_WakeUpCounter;
 2277              		.loc 1 1505 0
 2278 0018 054B     		ldr	r3, .L127
 2279 001a 7A68     		ldr	r2, [r7, #4]
 2280 001c 5A61     		str	r2, [r3, #20]
1506:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1507:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1508:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 2281              		.loc 1 1508 0
 2282 001e 044B     		ldr	r3, .L127
 2283 0020 4FF0FF02 		mov	r2, #255
 2284 0024 5A62     		str	r2, [r3, #36]
1509:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 2285              		.loc 1 1509 0
 2286 0026 07F10C07 		add	r7, r7, #12
 2287 002a BD46     		mov	sp, r7
 2288 002c 80BC     		pop	{r7}
 2289 002e 7047     		bx	lr
 2290              	.L128:
 2291              		.align	2
 2292              	.L127:
 2293 0030 00280040 		.word	1073752064
 2294              		.cfi_endproc
 2295              	.LFE133:
 2297              		.section	.text.RTC_GetWakeUpCounter,"ax",%progbits
 2298              		.align	2
 2299              		.global	RTC_GetWakeUpCounter
 2300              		.thumb
 2301              		.thumb_func
 2303              	RTC_GetWakeUpCounter:
 2304              	.LFB134:
1510:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1511:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1512:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Returns the RTC WakeUp timer counter value.
1513:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  None
1514:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval The RTC WakeUp Counter value.
1515:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1516:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** uint32_t RTC_GetWakeUpCounter(void)
1517:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 2305              		.loc 1 1517 0
 2306              		.cfi_startproc
 2307              		@ args = 0, pretend = 0, frame = 0
 2308              		@ frame_needed = 1, uses_anonymous_args = 0
 2309              		@ link register save eliminated.
 2310 0000 80B4     		push	{r7}
 2311              	.LCFI71:
 2312              		.cfi_def_cfa_offset 4
 2313 0002 00AF     		add	r7, sp, #0
 2314              		.cfi_offset 7, -4
 2315              	.LCFI72:
 2316              		.cfi_def_cfa_register 7
1518:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Get the counter value */
1519:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return ((uint32_t)(RTC->WUTR & RTC_WUTR_WUT));
 2317              		.loc 1 1519 0
 2318 0004 044B     		ldr	r3, .L130
 2319 0006 5B69     		ldr	r3, [r3, #20]
 2320 0008 4FEA0343 		lsl	r3, r3, #16
 2321 000c 4FEA1343 		lsr	r3, r3, #16
1520:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 2322              		.loc 1 1520 0
 2323 0010 1846     		mov	r0, r3
 2324 0012 BD46     		mov	sp, r7
 2325 0014 80BC     		pop	{r7}
 2326 0016 7047     		bx	lr
 2327              	.L131:
 2328              		.align	2
 2329              	.L130:
 2330 0018 00280040 		.word	1073752064
 2331              		.cfi_endproc
 2332              	.LFE134:
 2334              		.section	.text.RTC_WakeUpCmd,"ax",%progbits
 2335              		.align	2
 2336              		.global	RTC_WakeUpCmd
 2337              		.thumb
 2338              		.thumb_func
 2340              	RTC_WakeUpCmd:
 2341              	.LFB135:
1521:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1522:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1523:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Enables or Disables the RTC WakeUp timer.
1524:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  NewState: new state of the WakeUp timer.
1525:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be: ENABLE or DISABLE.
1526:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
1527:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1528:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** ErrorStatus RTC_WakeUpCmd(FunctionalState NewState)
1529:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 2342              		.loc 1 1529 0
 2343              		.cfi_startproc
 2344              		@ args = 0, pretend = 0, frame = 24
 2345              		@ frame_needed = 1, uses_anonymous_args = 0
 2346              		@ link register save eliminated.
 2347 0000 80B4     		push	{r7}
 2348              	.LCFI73:
 2349              		.cfi_def_cfa_offset 4
 2350 0002 87B0     		sub	sp, sp, #28
 2351              	.LCFI74:
 2352              		.cfi_def_cfa_offset 32
 2353 0004 00AF     		add	r7, sp, #0
 2354              		.cfi_offset 7, -4
 2355              	.LCFI75:
 2356              		.cfi_def_cfa_register 7
 2357 0006 0346     		mov	r3, r0
 2358 0008 FB71     		strb	r3, [r7, #7]
1530:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   __IO uint32_t wutcounter = 0x00;
 2359              		.loc 1 1530 0
 2360 000a 4FF00003 		mov	r3, #0
 2361 000e FB60     		str	r3, [r7, #12]
1531:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t wutwfstatus = 0x00;
 2362              		.loc 1 1531 0
 2363 0010 4FF00003 		mov	r3, #0
 2364 0014 3B61     		str	r3, [r7, #16]
1532:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 2365              		.loc 1 1532 0
 2366 0016 4FF00003 		mov	r3, #0
 2367 001a FB75     		strb	r3, [r7, #23]
1533:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1534:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1535:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1536:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1537:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1538:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 2368              		.loc 1 1538 0
 2369 001c 214B     		ldr	r3, .L138
 2370 001e 4FF0CA02 		mov	r2, #202
 2371 0022 5A62     		str	r2, [r3, #36]
1539:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 2372              		.loc 1 1539 0
 2373 0024 1F4B     		ldr	r3, .L138
 2374 0026 4FF05302 		mov	r2, #83
 2375 002a 5A62     		str	r2, [r3, #36]
1540:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1541:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (NewState != DISABLE)
 2376              		.loc 1 1541 0
 2377 002c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 2378 002e 002B     		cmp	r3, #0
 2379 0030 09D0     		beq	.L133
1542:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1543:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Enable the Wakeup Timer */
1544:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CR |= (uint32_t)RTC_CR_WUTE;
 2380              		.loc 1 1544 0
 2381 0032 1C4B     		ldr	r3, .L138
 2382 0034 1B4A     		ldr	r2, .L138
 2383 0036 9268     		ldr	r2, [r2, #8]
 2384 0038 42F48062 		orr	r2, r2, #1024
 2385 003c 9A60     		str	r2, [r3, #8]
1545:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = SUCCESS;    
 2386              		.loc 1 1545 0
 2387 003e 4FF00103 		mov	r3, #1
 2388 0042 FB75     		strb	r3, [r7, #23]
 2389 0044 22E0     		b	.L134
 2390              	.L133:
1546:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1547:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
1548:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1549:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Disable the Wakeup Timer */
1550:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CR &= (uint32_t)~RTC_CR_WUTE;
 2391              		.loc 1 1550 0
 2392 0046 174B     		ldr	r3, .L138
 2393 0048 164A     		ldr	r2, .L138
 2394 004a 9268     		ldr	r2, [r2, #8]
 2395 004c 22F48062 		bic	r2, r2, #1024
 2396 0050 9A60     		str	r2, [r3, #8]
 2397              	.L136:
1551:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
1552:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     do
1553:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
1554:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       wutwfstatus = RTC->ISR & RTC_ISR_WUTWF;
 2398              		.loc 1 1554 0 discriminator 1
 2399 0052 144B     		ldr	r3, .L138
 2400 0054 DB68     		ldr	r3, [r3, #12]
 2401 0056 03F00403 		and	r3, r3, #4
 2402 005a 3B61     		str	r3, [r7, #16]
1555:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       wutcounter++;  
 2403              		.loc 1 1555 0 discriminator 1
 2404 005c FB68     		ldr	r3, [r7, #12]
 2405 005e 03F10103 		add	r3, r3, #1
 2406 0062 FB60     		str	r3, [r7, #12]
1556:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     } while((wutcounter != INITMODE_TIMEOUT) && (wutwfstatus == 0x00));
 2407              		.loc 1 1556 0 discriminator 1
 2408 0064 FB68     		ldr	r3, [r7, #12]
 2409 0066 B3F5803F 		cmp	r3, #65536
 2410 006a 02D0     		beq	.L135
 2411 006c 3B69     		ldr	r3, [r7, #16]
 2412 006e 002B     		cmp	r3, #0
 2413 0070 EFD0     		beq	.L136
 2414              	.L135:
1557:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
1558:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if ((RTC->ISR & RTC_ISR_WUTWF) == RESET)
 2415              		.loc 1 1558 0
 2416 0072 0C4B     		ldr	r3, .L138
 2417 0074 DB68     		ldr	r3, [r3, #12]
 2418 0076 03F00403 		and	r3, r3, #4
 2419 007a 002B     		cmp	r3, #0
 2420 007c 03D1     		bne	.L137
1559:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
1560:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       status = ERROR;
 2421              		.loc 1 1560 0
 2422 007e 4FF00003 		mov	r3, #0
 2423 0082 FB75     		strb	r3, [r7, #23]
 2424 0084 02E0     		b	.L134
 2425              	.L137:
1561:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
1562:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     else
1563:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
1564:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       status = SUCCESS;
 2426              		.loc 1 1564 0
 2427 0086 4FF00103 		mov	r3, #1
 2428 008a FB75     		strb	r3, [r7, #23]
 2429              	.L134:
1565:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }    
1566:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1567:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1568:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1569:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 2430              		.loc 1 1569 0
 2431 008c 054B     		ldr	r3, .L138
 2432 008e 4FF0FF02 		mov	r2, #255
 2433 0092 5A62     		str	r2, [r3, #36]
1570:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1571:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return status;
 2434              		.loc 1 1571 0
 2435 0094 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
1572:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 2436              		.loc 1 1572 0
 2437 0096 1846     		mov	r0, r3
 2438 0098 07F11C07 		add	r7, r7, #28
 2439 009c BD46     		mov	sp, r7
 2440 009e 80BC     		pop	{r7}
 2441 00a0 7047     		bx	lr
 2442              	.L139:
 2443 00a2 00BF     		.align	2
 2444              	.L138:
 2445 00a4 00280040 		.word	1073752064
 2446              		.cfi_endproc
 2447              	.LFE135:
 2449              		.section	.text.RTC_DayLightSavingConfig,"ax",%progbits
 2450              		.align	2
 2451              		.global	RTC_DayLightSavingConfig
 2452              		.thumb
 2453              		.thumb_func
 2455              	RTC_DayLightSavingConfig:
 2456              	.LFB136:
1573:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1574:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1575:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @}
1576:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1577:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1578:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group5 Daylight Saving configuration functions
1579:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *  @brief   Daylight Saving configuration functions 
1580:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *
1581:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @verbatim   
1582:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================
1583:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                     Daylight Saving configuration functions
1584:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================  
1585:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1586:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   This section provide functions allowing to configure the RTC DayLight Saving.
1587:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1588:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @endverbatim
1589:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @{
1590:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1591:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1592:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1593:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Adds or substract one hour from the current time.
1594:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_DayLightSaveOperation: the value of hour adjustment. 
1595:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
1596:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_DayLightSaving_SUB1H: Substract one hour (winter time)
1597:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_DayLightSaving_ADD1H: Add one hour (summer time)
1598:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_StoreOperation: Specifies the value to be written in the BCK bit 
1599:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                            in CR register to store the operation.
1600:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
1601:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_StoreOperation_Reset: BCK Bit Reset
1602:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_StoreOperation_Set: BCK Bit Set
1603:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
1604:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1605:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_DayLightSavingConfig(uint32_t RTC_DayLightSaving, uint32_t RTC_StoreOperation)
1606:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 2457              		.loc 1 1606 0
 2458              		.cfi_startproc
 2459              		@ args = 0, pretend = 0, frame = 8
 2460              		@ frame_needed = 1, uses_anonymous_args = 0
 2461              		@ link register save eliminated.
 2462 0000 80B4     		push	{r7}
 2463              	.LCFI76:
 2464              		.cfi_def_cfa_offset 4
 2465 0002 83B0     		sub	sp, sp, #12
 2466              	.LCFI77:
 2467              		.cfi_def_cfa_offset 16
 2468 0004 00AF     		add	r7, sp, #0
 2469              		.cfi_offset 7, -4
 2470              	.LCFI78:
 2471              		.cfi_def_cfa_register 7
 2472 0006 7860     		str	r0, [r7, #4]
 2473 0008 3960     		str	r1, [r7, #0]
1607:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1608:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_DAYLIGHT_SAVING(RTC_DayLightSaving));
1609:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_STORE_OPERATION(RTC_StoreOperation));
1610:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1611:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1612:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 2474              		.loc 1 1612 0
 2475 000a 104B     		ldr	r3, .L141
 2476 000c 4FF0CA02 		mov	r2, #202
 2477 0010 5A62     		str	r2, [r3, #36]
1613:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 2478              		.loc 1 1613 0
 2479 0012 0E4B     		ldr	r3, .L141
 2480 0014 4FF05302 		mov	r2, #83
 2481 0018 5A62     		str	r2, [r3, #36]
1614:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1615:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Clear the bits to be configured */
1616:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->CR &= (uint32_t)~(RTC_CR_BCK);
 2482              		.loc 1 1616 0
 2483 001a 0C4B     		ldr	r3, .L141
 2484 001c 0B4A     		ldr	r2, .L141
 2485 001e 9268     		ldr	r2, [r2, #8]
 2486 0020 22F48022 		bic	r2, r2, #262144
 2487 0024 9A60     		str	r2, [r3, #8]
1617:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1618:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Configure the RTC_CR register */
1619:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->CR |= (uint32_t)(RTC_DayLightSaving | RTC_StoreOperation);
 2488              		.loc 1 1619 0
 2489 0026 094B     		ldr	r3, .L141
 2490 0028 084A     		ldr	r2, .L141
 2491 002a 9168     		ldr	r1, [r2, #8]
 2492 002c 7868     		ldr	r0, [r7, #4]
 2493 002e 3A68     		ldr	r2, [r7, #0]
 2494 0030 40EA0202 		orr	r2, r0, r2
 2495 0034 41EA0202 		orr	r2, r1, r2
 2496 0038 9A60     		str	r2, [r3, #8]
1620:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1621:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1622:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 2497              		.loc 1 1622 0
 2498 003a 044B     		ldr	r3, .L141
 2499 003c 4FF0FF02 		mov	r2, #255
 2500 0040 5A62     		str	r2, [r3, #36]
1623:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 2501              		.loc 1 1623 0
 2502 0042 07F10C07 		add	r7, r7, #12
 2503 0046 BD46     		mov	sp, r7
 2504 0048 80BC     		pop	{r7}
 2505 004a 7047     		bx	lr
 2506              	.L142:
 2507              		.align	2
 2508              	.L141:
 2509 004c 00280040 		.word	1073752064
 2510              		.cfi_endproc
 2511              	.LFE136:
 2513              		.section	.text.RTC_GetStoreOperation,"ax",%progbits
 2514              		.align	2
 2515              		.global	RTC_GetStoreOperation
 2516              		.thumb
 2517              		.thumb_func
 2519              	RTC_GetStoreOperation:
 2520              	.LFB137:
1624:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1625:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1626:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Returns the RTC Day Light Saving stored operation.
1627:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  None
1628:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval RTC Day Light Saving stored operation.
1629:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - RTC_StoreOperation_Reset
1630:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - RTC_StoreOperation_Set       
1631:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1632:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** uint32_t RTC_GetStoreOperation(void)
1633:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 2521              		.loc 1 1633 0
 2522              		.cfi_startproc
 2523              		@ args = 0, pretend = 0, frame = 0
 2524              		@ frame_needed = 1, uses_anonymous_args = 0
 2525              		@ link register save eliminated.
 2526 0000 80B4     		push	{r7}
 2527              	.LCFI79:
 2528              		.cfi_def_cfa_offset 4
 2529 0002 00AF     		add	r7, sp, #0
 2530              		.cfi_offset 7, -4
 2531              	.LCFI80:
 2532              		.cfi_def_cfa_register 7
1634:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return (RTC->CR & RTC_CR_BCK);
 2533              		.loc 1 1634 0
 2534 0004 034B     		ldr	r3, .L144
 2535 0006 9B68     		ldr	r3, [r3, #8]
 2536 0008 03F48023 		and	r3, r3, #262144
1635:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 2537              		.loc 1 1635 0
 2538 000c 1846     		mov	r0, r3
 2539 000e BD46     		mov	sp, r7
 2540 0010 80BC     		pop	{r7}
 2541 0012 7047     		bx	lr
 2542              	.L145:
 2543              		.align	2
 2544              	.L144:
 2545 0014 00280040 		.word	1073752064
 2546              		.cfi_endproc
 2547              	.LFE137:
 2549              		.section	.text.RTC_OutputConfig,"ax",%progbits
 2550              		.align	2
 2551              		.global	RTC_OutputConfig
 2552              		.thumb
 2553              		.thumb_func
 2555              	RTC_OutputConfig:
 2556              	.LFB138:
1636:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1637:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1638:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @}
1639:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1640:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1641:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group6 Output pin Configuration function
1642:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *  @brief   Output pin Configuration function 
1643:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *
1644:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @verbatim   
1645:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================
1646:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                          Output pin Configuration function
1647:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================  
1648:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1649:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   This section provide functions allowing to configure the RTC Output source.
1650:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1651:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @endverbatim
1652:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @{
1653:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1654:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1655:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1656:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Configures the RTC output source (AFO_ALARM).
1657:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_Output: Specifies which signal will be routed to the RTC output. 
1658:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
1659:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Output_Disable: No output selected
1660:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Output_AlarmA: signal of AlarmA mapped to output
1661:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Output_AlarmB: signal of AlarmB mapped to output
1662:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Output_WakeUp: signal of WakeUp mapped to output
1663:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_OutputPolarity: Specifies the polarity of the output signal. 
1664:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following:
1665:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_OutputPolarity_High: The output pin is high when the 
1666:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                 ALRAF/ALRBF/WUTF is high (depending on OSEL)
1667:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_OutputPolarity_Low: The output pin is low when the 
1668:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                 ALRAF/ALRBF/WUTF is high (depending on OSEL)
1669:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
1670:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1671:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_OutputConfig(uint32_t RTC_Output, uint32_t RTC_OutputPolarity)
1672:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 2557              		.loc 1 1672 0
 2558              		.cfi_startproc
 2559              		@ args = 0, pretend = 0, frame = 8
 2560              		@ frame_needed = 1, uses_anonymous_args = 0
 2561              		@ link register save eliminated.
 2562 0000 80B4     		push	{r7}
 2563              	.LCFI81:
 2564              		.cfi_def_cfa_offset 4
 2565 0002 83B0     		sub	sp, sp, #12
 2566              	.LCFI82:
 2567              		.cfi_def_cfa_offset 16
 2568 0004 00AF     		add	r7, sp, #0
 2569              		.cfi_offset 7, -4
 2570              	.LCFI83:
 2571              		.cfi_def_cfa_register 7
 2572 0006 7860     		str	r0, [r7, #4]
 2573 0008 3960     		str	r1, [r7, #0]
1673:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1674:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_OUTPUT(RTC_Output));
1675:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_OUTPUT_POL(RTC_OutputPolarity));
1676:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1677:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1678:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 2574              		.loc 1 1678 0
 2575 000a 104B     		ldr	r3, .L147
 2576 000c 4FF0CA02 		mov	r2, #202
 2577 0010 5A62     		str	r2, [r3, #36]
1679:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 2578              		.loc 1 1679 0
 2579 0012 0E4B     		ldr	r3, .L147
 2580 0014 4FF05302 		mov	r2, #83
 2581 0018 5A62     		str	r2, [r3, #36]
1680:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1681:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Clear the bits to be configured */
1682:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->CR &= (uint32_t)~(RTC_CR_OSEL | RTC_CR_POL);
 2582              		.loc 1 1682 0
 2583 001a 0C4B     		ldr	r3, .L147
 2584 001c 0B4A     		ldr	r2, .L147
 2585 001e 9268     		ldr	r2, [r2, #8]
 2586 0020 22F4E002 		bic	r2, r2, #7340032
 2587 0024 9A60     		str	r2, [r3, #8]
1683:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1684:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Configure the output selection and polarity */
1685:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->CR |= (uint32_t)(RTC_Output | RTC_OutputPolarity);
 2588              		.loc 1 1685 0
 2589 0026 094B     		ldr	r3, .L147
 2590 0028 084A     		ldr	r2, .L147
 2591 002a 9168     		ldr	r1, [r2, #8]
 2592 002c 7868     		ldr	r0, [r7, #4]
 2593 002e 3A68     		ldr	r2, [r7, #0]
 2594 0030 40EA0202 		orr	r2, r0, r2
 2595 0034 41EA0202 		orr	r2, r1, r2
 2596 0038 9A60     		str	r2, [r3, #8]
1686:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1687:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1688:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 2597              		.loc 1 1688 0
 2598 003a 044B     		ldr	r3, .L147
 2599 003c 4FF0FF02 		mov	r2, #255
 2600 0040 5A62     		str	r2, [r3, #36]
1689:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 2601              		.loc 1 1689 0
 2602 0042 07F10C07 		add	r7, r7, #12
 2603 0046 BD46     		mov	sp, r7
 2604 0048 80BC     		pop	{r7}
 2605 004a 7047     		bx	lr
 2606              	.L148:
 2607              		.align	2
 2608              	.L147:
 2609 004c 00280040 		.word	1073752064
 2610              		.cfi_endproc
 2611              	.LFE138:
 2613              		.section	.text.RTC_CoarseCalibConfig,"ax",%progbits
 2614              		.align	2
 2615              		.global	RTC_CoarseCalibConfig
 2616              		.thumb
 2617              		.thumb_func
 2619              	RTC_CoarseCalibConfig:
 2620              	.LFB139:
1690:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1691:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1692:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @}
1693:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1694:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1695:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group7 Digital Calibration configuration functions
1696:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *  @brief   Coarse Calibration configuration functions 
1697:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *
1698:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @verbatim   
1699:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================
1700:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                   Digital Calibration configuration functions
1701:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================  
1702:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1703:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @endverbatim
1704:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @{
1705:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1706:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1707:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1708:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Configures the Coarse calibration parameters.
1709:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_CalibSign: specifies the sign of the coarse calibration value.
1710:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be  one of the following values:
1711:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_CalibSign_Positive: The value sign is positive 
1712:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_CalibSign_Negative: The value sign is negative
1713:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  Value: value of coarse calibration expressed in ppm (coded on 5 bits).
1714:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *    
1715:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   This Calibration value should be between 0 and 63 when using negative
1716:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         sign with a 2-ppm step.
1717:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           
1718:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   This Calibration value should be between 0 and 126 when using positive
1719:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         sign with a 4-ppm step.
1720:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           
1721:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
1722:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC Coarse calibration are initialized
1723:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - ERROR: RTC Coarse calibration are not initialized     
1724:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1725:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** ErrorStatus RTC_CoarseCalibConfig(uint32_t RTC_CalibSign, uint32_t Value)
1726:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 2621              		.loc 1 1726 0
 2622              		.cfi_startproc
 2623              		@ args = 0, pretend = 0, frame = 16
 2624              		@ frame_needed = 1, uses_anonymous_args = 0
 2625 0000 80B5     		push	{r7, lr}
 2626              	.LCFI84:
 2627              		.cfi_def_cfa_offset 8
 2628 0002 84B0     		sub	sp, sp, #16
 2629              	.LCFI85:
 2630              		.cfi_def_cfa_offset 24
 2631 0004 00AF     		add	r7, sp, #0
 2632              		.cfi_offset 14, -4
 2633              		.cfi_offset 7, -8
 2634              	.LCFI86:
 2635              		.cfi_def_cfa_register 7
 2636 0006 7860     		str	r0, [r7, #4]
 2637 0008 3960     		str	r1, [r7, #0]
1727:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 2638              		.loc 1 1727 0
 2639 000a 4FF00003 		mov	r3, #0
 2640 000e FB73     		strb	r3, [r7, #15]
1728:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    
1729:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1730:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_CALIB_SIGN(RTC_CalibSign));
1731:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_CALIB_VALUE(Value)); 
1732:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1733:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1734:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 2641              		.loc 1 1734 0
 2642 0010 124B     		ldr	r3, .L152
 2643 0012 4FF0CA02 		mov	r2, #202
 2644 0016 5A62     		str	r2, [r3, #36]
1735:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 2645              		.loc 1 1735 0
 2646 0018 104B     		ldr	r3, .L152
 2647 001a 4FF05302 		mov	r2, #83
 2648 001e 5A62     		str	r2, [r3, #36]
1736:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1737:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Set Initialization mode */
1738:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_EnterInitMode() == ERROR)
 2649              		.loc 1 1738 0
 2650 0020 FFF7FEFF 		bl	RTC_EnterInitMode
 2651 0024 0346     		mov	r3, r0
 2652 0026 002B     		cmp	r3, #0
 2653 0028 03D1     		bne	.L150
1739:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1740:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = ERROR;
 2654              		.loc 1 1740 0
 2655 002a 4FF00003 		mov	r3, #0
 2656 002e FB73     		strb	r3, [r7, #15]
 2657 0030 0AE0     		b	.L151
 2658              	.L150:
1741:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   } 
1742:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
1743:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1744:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Set the coarse calibration value */
1745:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CALIBR = (uint32_t)(RTC_CalibSign | Value);
 2659              		.loc 1 1745 0
 2660 0032 0A4B     		ldr	r3, .L152
 2661 0034 7968     		ldr	r1, [r7, #4]
 2662 0036 3A68     		ldr	r2, [r7, #0]
 2663 0038 41EA0202 		orr	r2, r1, r2
 2664 003c 9A61     		str	r2, [r3, #24]
1746:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Exit Initialization mode */
1747:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_ExitInitMode();
 2665              		.loc 1 1747 0
 2666 003e FFF7FEFF 		bl	RTC_ExitInitMode
1748:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
1749:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = SUCCESS;
 2667              		.loc 1 1749 0
 2668 0042 4FF00103 		mov	r3, #1
 2669 0046 FB73     		strb	r3, [r7, #15]
 2670              	.L151:
1750:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   } 
1751:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1752:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1753:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 2671              		.loc 1 1753 0
 2672 0048 044B     		ldr	r3, .L152
 2673 004a 4FF0FF02 		mov	r2, #255
 2674 004e 5A62     		str	r2, [r3, #36]
1754:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1755:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return status;
 2675              		.loc 1 1755 0
 2676 0050 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
1756:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 2677              		.loc 1 1756 0
 2678 0052 1846     		mov	r0, r3
 2679 0054 07F11007 		add	r7, r7, #16
 2680 0058 BD46     		mov	sp, r7
 2681 005a 80BD     		pop	{r7, pc}
 2682              	.L153:
 2683              		.align	2
 2684              	.L152:
 2685 005c 00280040 		.word	1073752064
 2686              		.cfi_endproc
 2687              	.LFE139:
 2689              		.section	.text.RTC_CoarseCalibCmd,"ax",%progbits
 2690              		.align	2
 2691              		.global	RTC_CoarseCalibCmd
 2692              		.thumb
 2693              		.thumb_func
 2695              	RTC_CoarseCalibCmd:
 2696              	.LFB140:
1757:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1758:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1759:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Enables or disables the Coarse calibration process.
1760:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  NewState: new state of the Coarse calibration.
1761:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be: ENABLE or DISABLE.
1762:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
1763:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC Coarse calibration are enabled/disabled
1764:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - ERROR: RTC Coarse calibration are not enabled/disabled    
1765:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1766:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** ErrorStatus RTC_CoarseCalibCmd(FunctionalState NewState)
1767:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 2697              		.loc 1 1767 0
 2698              		.cfi_startproc
 2699              		@ args = 0, pretend = 0, frame = 16
 2700              		@ frame_needed = 1, uses_anonymous_args = 0
 2701 0000 80B5     		push	{r7, lr}
 2702              	.LCFI87:
 2703              		.cfi_def_cfa_offset 8
 2704 0002 84B0     		sub	sp, sp, #16
 2705              	.LCFI88:
 2706              		.cfi_def_cfa_offset 24
 2707 0004 00AF     		add	r7, sp, #0
 2708              		.cfi_offset 14, -4
 2709              		.cfi_offset 7, -8
 2710              	.LCFI89:
 2711              		.cfi_def_cfa_register 7
 2712 0006 0346     		mov	r3, r0
 2713 0008 FB71     		strb	r3, [r7, #7]
1768:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 2714              		.loc 1 1768 0
 2715 000a 4FF00003 		mov	r3, #0
 2716 000e FB73     		strb	r3, [r7, #15]
1769:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1770:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1771:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1772:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1773:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1774:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 2717              		.loc 1 1774 0
 2718 0010 174B     		ldr	r3, .L159
 2719 0012 4FF0CA02 		mov	r2, #202
 2720 0016 5A62     		str	r2, [r3, #36]
1775:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 2721              		.loc 1 1775 0
 2722 0018 154B     		ldr	r3, .L159
 2723 001a 4FF05302 		mov	r2, #83
 2724 001e 5A62     		str	r2, [r3, #36]
1776:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1777:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Set Initialization mode */
1778:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_EnterInitMode() == ERROR)
 2725              		.loc 1 1778 0
 2726 0020 FFF7FEFF 		bl	RTC_EnterInitMode
 2727 0024 0346     		mov	r3, r0
 2728 0026 002B     		cmp	r3, #0
 2729 0028 03D1     		bne	.L155
1779:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1780:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status =  ERROR;
 2730              		.loc 1 1780 0
 2731 002a 4FF00003 		mov	r3, #0
 2732 002e FB73     		strb	r3, [r7, #15]
 2733 0030 14E0     		b	.L156
 2734              	.L155:
1781:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1782:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
1783:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1784:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if (NewState != DISABLE)
 2735              		.loc 1 1784 0
 2736 0032 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 2737 0034 002B     		cmp	r3, #0
 2738 0036 06D0     		beq	.L157
1785:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
1786:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       /* Enable the Coarse Calibration */
1787:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->CR |= (uint32_t)RTC_CR_DCE;
 2739              		.loc 1 1787 0
 2740 0038 0D4B     		ldr	r3, .L159
 2741 003a 0D4A     		ldr	r2, .L159
 2742 003c 9268     		ldr	r2, [r2, #8]
 2743 003e 42F08002 		orr	r2, r2, #128
 2744 0042 9A60     		str	r2, [r3, #8]
 2745 0044 05E0     		b	.L158
 2746              	.L157:
1788:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
1789:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     else
1790:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     { 
1791:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       /* Disable the Coarse Calibration */
1792:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->CR &= (uint32_t)~RTC_CR_DCE;
 2747              		.loc 1 1792 0
 2748 0046 0A4B     		ldr	r3, .L159
 2749 0048 094A     		ldr	r2, .L159
 2750 004a 9268     		ldr	r2, [r2, #8]
 2751 004c 22F08002 		bic	r2, r2, #128
 2752 0050 9A60     		str	r2, [r3, #8]
 2753              	.L158:
1793:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
1794:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Exit Initialization mode */
1795:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_ExitInitMode();
 2754              		.loc 1 1795 0
 2755 0052 FFF7FEFF 		bl	RTC_ExitInitMode
1796:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
1797:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = SUCCESS;
 2756              		.loc 1 1797 0
 2757 0056 4FF00103 		mov	r3, #1
 2758 005a FB73     		strb	r3, [r7, #15]
 2759              	.L156:
1798:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   } 
1799:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1800:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1801:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 2760              		.loc 1 1801 0
 2761 005c 044B     		ldr	r3, .L159
 2762 005e 4FF0FF02 		mov	r2, #255
 2763 0062 5A62     		str	r2, [r3, #36]
1802:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1803:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return status;
 2764              		.loc 1 1803 0
 2765 0064 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
1804:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 2766              		.loc 1 1804 0
 2767 0066 1846     		mov	r0, r3
 2768 0068 07F11007 		add	r7, r7, #16
 2769 006c BD46     		mov	sp, r7
 2770 006e 80BD     		pop	{r7, pc}
 2771              	.L160:
 2772              		.align	2
 2773              	.L159:
 2774 0070 00280040 		.word	1073752064
 2775              		.cfi_endproc
 2776              	.LFE140:
 2778              		.section	.text.RTC_CalibOutputCmd,"ax",%progbits
 2779              		.align	2
 2780              		.global	RTC_CalibOutputCmd
 2781              		.thumb
 2782              		.thumb_func
 2784              	RTC_CalibOutputCmd:
 2785              	.LFB141:
1805:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1806:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1807:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Enables or disables the RTC clock to be output through the relative pin.
1808:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  NewState: new state of the digital calibration Output.
1809:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be: ENABLE or DISABLE.
1810:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
1811:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1812:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_CalibOutputCmd(FunctionalState NewState)
1813:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 2786              		.loc 1 1813 0
 2787              		.cfi_startproc
 2788              		@ args = 0, pretend = 0, frame = 8
 2789              		@ frame_needed = 1, uses_anonymous_args = 0
 2790              		@ link register save eliminated.
 2791 0000 80B4     		push	{r7}
 2792              	.LCFI90:
 2793              		.cfi_def_cfa_offset 4
 2794 0002 83B0     		sub	sp, sp, #12
 2795              	.LCFI91:
 2796              		.cfi_def_cfa_offset 16
 2797 0004 00AF     		add	r7, sp, #0
 2798              		.cfi_offset 7, -4
 2799              	.LCFI92:
 2800              		.cfi_def_cfa_register 7
 2801 0006 0346     		mov	r3, r0
 2802 0008 FB71     		strb	r3, [r7, #7]
1814:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1815:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1816:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1817:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1818:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 2803              		.loc 1 1818 0
 2804 000a 104B     		ldr	r3, .L164
 2805 000c 4FF0CA02 		mov	r2, #202
 2806 0010 5A62     		str	r2, [r3, #36]
1819:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 2807              		.loc 1 1819 0
 2808 0012 0E4B     		ldr	r3, .L164
 2809 0014 4FF05302 		mov	r2, #83
 2810 0018 5A62     		str	r2, [r3, #36]
1820:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1821:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (NewState != DISABLE)
 2811              		.loc 1 1821 0
 2812 001a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 2813 001c 002B     		cmp	r3, #0
 2814 001e 06D0     		beq	.L162
1822:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1823:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Enable the RTC clock output */
1824:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CR |= (uint32_t)RTC_CR_COE;
 2815              		.loc 1 1824 0
 2816 0020 0A4B     		ldr	r3, .L164
 2817 0022 0A4A     		ldr	r2, .L164
 2818 0024 9268     		ldr	r2, [r2, #8]
 2819 0026 42F40002 		orr	r2, r2, #8388608
 2820 002a 9A60     		str	r2, [r3, #8]
 2821 002c 05E0     		b	.L163
 2822              	.L162:
1825:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1826:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
1827:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   { 
1828:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Disable the RTC clock output */
1829:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CR &= (uint32_t)~RTC_CR_COE;
 2823              		.loc 1 1829 0
 2824 002e 074B     		ldr	r3, .L164
 2825 0030 064A     		ldr	r2, .L164
 2826 0032 9268     		ldr	r2, [r2, #8]
 2827 0034 22F40002 		bic	r2, r2, #8388608
 2828 0038 9A60     		str	r2, [r3, #8]
 2829              	.L163:
1830:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1831:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1832:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1833:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 2830              		.loc 1 1833 0
 2831 003a 044B     		ldr	r3, .L164
 2832 003c 4FF0FF02 		mov	r2, #255
 2833 0040 5A62     		str	r2, [r3, #36]
1834:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 2834              		.loc 1 1834 0
 2835 0042 07F10C07 		add	r7, r7, #12
 2836 0046 BD46     		mov	sp, r7
 2837 0048 80BC     		pop	{r7}
 2838 004a 7047     		bx	lr
 2839              	.L165:
 2840              		.align	2
 2841              	.L164:
 2842 004c 00280040 		.word	1073752064
 2843              		.cfi_endproc
 2844              	.LFE141:
 2846              		.section	.text.RTC_CalibOutputConfig,"ax",%progbits
 2847              		.align	2
 2848              		.global	RTC_CalibOutputConfig
 2849              		.thumb
 2850              		.thumb_func
 2852              	RTC_CalibOutputConfig:
 2853              	.LFB142:
1835:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1836:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1837:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Configure the Calibration Pinout (RTC_CALIB) Selection (1Hz or 512Hz).
1838:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_CalibOutput : Select the Calibration output Selection .
1839:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *   This parameter can be one of the following values:
1840:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_CalibOutput_512Hz: A signal has a regular waveform at 512Hz. 
1841:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_CalibOutput_1Hz  : A signal has a regular waveform at 1Hz.
1842:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
1843:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** */
1844:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_CalibOutputConfig(uint32_t RTC_CalibOutput)
1845:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 2854              		.loc 1 1845 0
 2855              		.cfi_startproc
 2856              		@ args = 0, pretend = 0, frame = 8
 2857              		@ frame_needed = 1, uses_anonymous_args = 0
 2858              		@ link register save eliminated.
 2859 0000 80B4     		push	{r7}
 2860              	.LCFI93:
 2861              		.cfi_def_cfa_offset 4
 2862 0002 83B0     		sub	sp, sp, #12
 2863              	.LCFI94:
 2864              		.cfi_def_cfa_offset 16
 2865 0004 00AF     		add	r7, sp, #0
 2866              		.cfi_offset 7, -4
 2867              	.LCFI95:
 2868              		.cfi_def_cfa_register 7
 2869 0006 7860     		str	r0, [r7, #4]
1846:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1847:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_CALIB_OUTPUT(RTC_CalibOutput));
1848:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1849:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1850:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 2870              		.loc 1 1850 0
 2871 0008 0E4B     		ldr	r3, .L167
 2872 000a 4FF0CA02 		mov	r2, #202
 2873 000e 5A62     		str	r2, [r3, #36]
1851:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 2874              		.loc 1 1851 0
 2875 0010 0C4B     		ldr	r3, .L167
 2876 0012 4FF05302 		mov	r2, #83
 2877 0016 5A62     		str	r2, [r3, #36]
1852:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1853:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /*clear flags before config*/
1854:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->CR &= (uint32_t)~(RTC_CR_COSEL);
 2878              		.loc 1 1854 0
 2879 0018 0A4B     		ldr	r3, .L167
 2880 001a 0A4A     		ldr	r2, .L167
 2881 001c 9268     		ldr	r2, [r2, #8]
 2882 001e 22F40022 		bic	r2, r2, #524288
 2883 0022 9A60     		str	r2, [r3, #8]
1855:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1856:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Configure the RTC_CR register */
1857:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->CR |= (uint32_t)RTC_CalibOutput;
 2884              		.loc 1 1857 0
 2885 0024 074B     		ldr	r3, .L167
 2886 0026 074A     		ldr	r2, .L167
 2887 0028 9168     		ldr	r1, [r2, #8]
 2888 002a 7A68     		ldr	r2, [r7, #4]
 2889 002c 41EA0202 		orr	r2, r1, r2
 2890 0030 9A60     		str	r2, [r3, #8]
1858:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1859:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1860:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF;
 2891              		.loc 1 1860 0
 2892 0032 044B     		ldr	r3, .L167
 2893 0034 4FF0FF02 		mov	r2, #255
 2894 0038 5A62     		str	r2, [r3, #36]
1861:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 2895              		.loc 1 1861 0
 2896 003a 07F10C07 		add	r7, r7, #12
 2897 003e BD46     		mov	sp, r7
 2898 0040 80BC     		pop	{r7}
 2899 0042 7047     		bx	lr
 2900              	.L168:
 2901              		.align	2
 2902              	.L167:
 2903 0044 00280040 		.word	1073752064
 2904              		.cfi_endproc
 2905              	.LFE142:
 2907              		.section	.text.RTC_SmoothCalibConfig,"ax",%progbits
 2908              		.align	2
 2909              		.global	RTC_SmoothCalibConfig
 2910              		.thumb
 2911              		.thumb_func
 2913              	RTC_SmoothCalibConfig:
 2914              	.LFB143:
1862:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1863:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1864:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Configures the Smooth Calibration Settings.
1865:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_SmoothCalibPeriod : Select the Smooth Calibration Period.
1866:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *   This parameter can be can be one of the following values:
1867:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_SmoothCalibPeriod_32sec : The smooth calibration periode is 32s.
1868:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_SmoothCalibPeriod_16sec : The smooth calibration periode is 16s.
1869:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_SmoothCalibPeriod_8sec  : The smooth calibartion periode is 8s.
1870:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_SmoothCalibPlusPulses : Select to Set or reset the CALP bit.
1871:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *   This parameter can be one of the following values:
1872:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_SmoothCalibPlusPulses_Set  : Add one RTCCLK puls every 2**11 pulses.
1873:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_SmoothCalibPlusPulses_Reset: No RTCCLK pulses are added.
1874:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_SmouthCalibMinusPulsesValue: Select the value of CALM[8:0] bits.
1875:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *   This parameter can be one any value from 0 to 0x000001FF.
1876:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
1877:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC Calib registers are configured
1878:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - ERROR: RTC Calib registers are not configured
1879:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** */
1880:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** ErrorStatus RTC_SmoothCalibConfig(uint32_t RTC_SmoothCalibPeriod,
1881:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                                   uint32_t RTC_SmoothCalibPlusPulses,
1882:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                                   uint32_t RTC_SmouthCalibMinusPulsesValue)
1883:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 2915              		.loc 1 1883 0
 2916              		.cfi_startproc
 2917              		@ args = 0, pretend = 0, frame = 24
 2918              		@ frame_needed = 1, uses_anonymous_args = 0
 2919              		@ link register save eliminated.
 2920 0000 80B4     		push	{r7}
 2921              	.LCFI96:
 2922              		.cfi_def_cfa_offset 4
 2923 0002 87B0     		sub	sp, sp, #28
 2924              	.LCFI97:
 2925              		.cfi_def_cfa_offset 32
 2926 0004 00AF     		add	r7, sp, #0
 2927              		.cfi_offset 7, -4
 2928              	.LCFI98:
 2929              		.cfi_def_cfa_register 7
 2930 0006 F860     		str	r0, [r7, #12]
 2931 0008 B960     		str	r1, [r7, #8]
 2932 000a 7A60     		str	r2, [r7, #4]
1884:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 2933              		.loc 1 1884 0
 2934 000c 4FF00003 		mov	r3, #0
 2935 0010 FB75     		strb	r3, [r7, #23]
1885:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t recalpfcount = 0;
 2936              		.loc 1 1885 0
 2937 0012 4FF00003 		mov	r3, #0
 2938 0016 3B61     		str	r3, [r7, #16]
1886:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1887:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1888:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_SMOOTH_CALIB_PERIOD(RTC_SmoothCalibPeriod));
1889:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_SMOOTH_CALIB_PLUS(RTC_SmoothCalibPlusPulses));
1890:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_SMOOTH_CALIB_MINUS(RTC_SmouthCalibMinusPulsesValue));
1891:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1892:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1893:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 2939              		.loc 1 1893 0
 2940 0018 1E4B     		ldr	r3, .L175
 2941 001a 4FF0CA02 		mov	r2, #202
 2942 001e 5A62     		str	r2, [r3, #36]
1894:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 2943              		.loc 1 1894 0
 2944 0020 1C4B     		ldr	r3, .L175
 2945 0022 4FF05302 		mov	r2, #83
 2946 0026 5A62     		str	r2, [r3, #36]
1895:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1896:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* check if a calibration is pending*/
1897:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if ((RTC->ISR & RTC_ISR_RECALPF) != RESET)
 2947              		.loc 1 1897 0
 2948 0028 1A4B     		ldr	r3, .L175
 2949 002a DB68     		ldr	r3, [r3, #12]
 2950 002c 03F48033 		and	r3, r3, #65536
 2951 0030 002B     		cmp	r3, #0
 2952 0032 0ED0     		beq	.L170
1898:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1899:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* wait until the Calibration is completed*/
1900:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     while (((RTC->ISR & RTC_ISR_RECALPF) != RESET) && (recalpfcount != RECALPF_TIMEOUT))
 2953              		.loc 1 1900 0
 2954 0034 03E0     		b	.L171
 2955              	.L172:
1901:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
1902:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       recalpfcount++;
 2956              		.loc 1 1902 0
 2957 0036 3B69     		ldr	r3, [r7, #16]
 2958 0038 03F10103 		add	r3, r3, #1
 2959 003c 3B61     		str	r3, [r7, #16]
 2960              	.L171:
1900:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     while (((RTC->ISR & RTC_ISR_RECALPF) != RESET) && (recalpfcount != RECALPF_TIMEOUT))
 2961              		.loc 1 1900 0 discriminator 1
 2962 003e 154B     		ldr	r3, .L175
 2963 0040 DB68     		ldr	r3, [r3, #12]
 2964 0042 03F48033 		and	r3, r3, #65536
 2965 0046 002B     		cmp	r3, #0
 2966 0048 03D0     		beq	.L170
1900:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     while (((RTC->ISR & RTC_ISR_RECALPF) != RESET) && (recalpfcount != RECALPF_TIMEOUT))
 2967              		.loc 1 1900 0 is_stmt 0 discriminator 2
 2968 004a 3B69     		ldr	r3, [r7, #16]
 2969 004c B3F5003F 		cmp	r3, #131072
 2970 0050 F1D1     		bne	.L172
 2971              	.L170:
1903:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
1904:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1905:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1906:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* check if the calibration pending is completed or if there is no calibration operation at all*/
1907:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if ((RTC->ISR & RTC_ISR_RECALPF) == RESET)
 2972              		.loc 1 1907 0 is_stmt 1
 2973 0052 104B     		ldr	r3, .L175
 2974 0054 DB68     		ldr	r3, [r3, #12]
 2975 0056 03F48033 		and	r3, r3, #65536
 2976 005a 002B     		cmp	r3, #0
 2977 005c 0BD1     		bne	.L173
1908:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1909:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Configure the Smooth calibration settings */
1910:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CALR = (uint32_t)((uint32_t)RTC_SmoothCalibPeriod | (uint32_t)RTC_SmoothCalibPlusPulses | 
 2978              		.loc 1 1910 0
 2979 005e 0D4B     		ldr	r3, .L175
 2980 0060 F968     		ldr	r1, [r7, #12]
 2981 0062 BA68     		ldr	r2, [r7, #8]
 2982 0064 1143     		orrs	r1, r1, r2
 2983 0066 7A68     		ldr	r2, [r7, #4]
 2984 0068 41EA0202 		orr	r2, r1, r2
 2985 006c DA63     		str	r2, [r3, #60]
1911:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1912:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = SUCCESS;
 2986              		.loc 1 1912 0
 2987 006e 4FF00103 		mov	r3, #1
 2988 0072 FB75     		strb	r3, [r7, #23]
 2989 0074 02E0     		b	.L174
 2990              	.L173:
1913:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1914:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
1915:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1916:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = ERROR;
 2991              		.loc 1 1916 0
 2992 0076 4FF00003 		mov	r3, #0
 2993 007a FB75     		strb	r3, [r7, #23]
 2994              	.L174:
1917:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1918:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1919:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1920:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF;
 2995              		.loc 1 1920 0
 2996 007c 054B     		ldr	r3, .L175
 2997 007e 4FF0FF02 		mov	r2, #255
 2998 0082 5A62     		str	r2, [r3, #36]
1921:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1922:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return (ErrorStatus)(status);
 2999              		.loc 1 1922 0
 3000 0084 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
1923:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 3001              		.loc 1 1923 0
 3002 0086 1846     		mov	r0, r3
 3003 0088 07F11C07 		add	r7, r7, #28
 3004 008c BD46     		mov	sp, r7
 3005 008e 80BC     		pop	{r7}
 3006 0090 7047     		bx	lr
 3007              	.L176:
 3008 0092 00BF     		.align	2
 3009              	.L175:
 3010 0094 00280040 		.word	1073752064
 3011              		.cfi_endproc
 3012              	.LFE143:
 3014              		.section	.text.RTC_TimeStampCmd,"ax",%progbits
 3015              		.align	2
 3016              		.global	RTC_TimeStampCmd
 3017              		.thumb
 3018              		.thumb_func
 3020              	RTC_TimeStampCmd:
 3021              	.LFB144:
1924:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1925:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1926:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @}
1927:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1928:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1929:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1930:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group8 TimeStamp configuration functions
1931:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *  @brief   TimeStamp configuration functions 
1932:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *
1933:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @verbatim   
1934:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================
1935:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                        TimeStamp configuration functions
1936:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================  
1937:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1938:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @endverbatim
1939:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @{
1940:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1941:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1942:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1943:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Enables or Disables the RTC TimeStamp functionality with the 
1944:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         specified time stamp pin stimulating edge.
1945:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_TimeStampEdge: Specifies the pin edge on which the TimeStamp is 
1946:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         activated.
1947:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following:
1948:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_TimeStampEdge_Rising: the Time stamp event occurs on the rising 
1949:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                    edge of the related pin.
1950:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_TimeStampEdge_Falling: the Time stamp event occurs on the 
1951:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                     falling edge of the related pin.
1952:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  NewState: new state of the TimeStamp.
1953:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be: ENABLE or DISABLE.
1954:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
1955:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1956:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_TimeStampCmd(uint32_t RTC_TimeStampEdge, FunctionalState NewState)
1957:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 3022              		.loc 1 1957 0
 3023              		.cfi_startproc
 3024              		@ args = 0, pretend = 0, frame = 16
 3025              		@ frame_needed = 1, uses_anonymous_args = 0
 3026              		@ link register save eliminated.
 3027 0000 80B4     		push	{r7}
 3028              	.LCFI99:
 3029              		.cfi_def_cfa_offset 4
 3030 0002 85B0     		sub	sp, sp, #20
 3031              	.LCFI100:
 3032              		.cfi_def_cfa_offset 24
 3033 0004 00AF     		add	r7, sp, #0
 3034              		.cfi_offset 7, -4
 3035              	.LCFI101:
 3036              		.cfi_def_cfa_register 7
 3037 0006 7860     		str	r0, [r7, #4]
 3038 0008 0B46     		mov	r3, r1
 3039 000a FB70     		strb	r3, [r7, #3]
1958:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 3040              		.loc 1 1958 0
 3041 000c 4FF00003 		mov	r3, #0
 3042 0010 FB60     		str	r3, [r7, #12]
1959:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1960:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1961:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_TIMESTAMP_EDGE(RTC_TimeStampEdge));
1962:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1963:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1964:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Get the RTC_CR register and clear the bits to be configured */
1965:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmpreg = (uint32_t)(RTC->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 3043              		.loc 1 1965 0
 3044 0012 154B     		ldr	r3, .L180
 3045 0014 9B68     		ldr	r3, [r3, #8]
 3046 0016 23F40063 		bic	r3, r3, #2048
 3047 001a 23F00803 		bic	r3, r3, #8
 3048 001e FB60     		str	r3, [r7, #12]
1966:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1967:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Get the new configuration */
1968:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (NewState != DISABLE)
 3049              		.loc 1 1968 0
 3050 0020 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 3051 0022 002B     		cmp	r3, #0
 3052 0024 07D0     		beq	.L178
1969:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1970:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg |= (uint32_t)(RTC_TimeStampEdge | RTC_CR_TSE);
 3053              		.loc 1 1970 0
 3054 0026 7A68     		ldr	r2, [r7, #4]
 3055 0028 FB68     		ldr	r3, [r7, #12]
 3056 002a 42EA0303 		orr	r3, r2, r3
 3057 002e 43F40063 		orr	r3, r3, #2048
 3058 0032 FB60     		str	r3, [r7, #12]
 3059 0034 04E0     		b	.L179
 3060              	.L178:
1971:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1972:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
1973:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1974:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg |= (uint32_t)(RTC_TimeStampEdge);
 3061              		.loc 1 1974 0
 3062 0036 FA68     		ldr	r2, [r7, #12]
 3063 0038 7B68     		ldr	r3, [r7, #4]
 3064 003a 42EA0303 		orr	r3, r2, r3
 3065 003e FB60     		str	r3, [r7, #12]
 3066              	.L179:
1975:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1976:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1977:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1978:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 3067              		.loc 1 1978 0
 3068 0040 094B     		ldr	r3, .L180
 3069 0042 4FF0CA02 		mov	r2, #202
 3070 0046 5A62     		str	r2, [r3, #36]
1979:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 3071              		.loc 1 1979 0
 3072 0048 074B     		ldr	r3, .L180
 3073 004a 4FF05302 		mov	r2, #83
 3074 004e 5A62     		str	r2, [r3, #36]
1980:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1981:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Configure the Time Stamp TSEDGE and Enable bits */
1982:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->CR = (uint32_t)tmpreg;
 3075              		.loc 1 1982 0
 3076 0050 054B     		ldr	r3, .L180
 3077 0052 FA68     		ldr	r2, [r7, #12]
 3078 0054 9A60     		str	r2, [r3, #8]
1983:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1984:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1985:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 3079              		.loc 1 1985 0
 3080 0056 044B     		ldr	r3, .L180
 3081 0058 4FF0FF02 		mov	r2, #255
 3082 005c 5A62     		str	r2, [r3, #36]
1986:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 3083              		.loc 1 1986 0
 3084 005e 07F11407 		add	r7, r7, #20
 3085 0062 BD46     		mov	sp, r7
 3086 0064 80BC     		pop	{r7}
 3087 0066 7047     		bx	lr
 3088              	.L181:
 3089              		.align	2
 3090              	.L180:
 3091 0068 00280040 		.word	1073752064
 3092              		.cfi_endproc
 3093              	.LFE144:
 3095              		.section	.text.RTC_GetTimeStamp,"ax",%progbits
 3096              		.align	2
 3097              		.global	RTC_GetTimeStamp
 3098              		.thumb
 3099              		.thumb_func
 3101              	RTC_GetTimeStamp:
 3102              	.LFB145:
1987:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1988:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1989:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Get the RTC TimeStamp value and masks.
1990:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_Format: specifies the format of the output parameters.
1991:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
1992:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BIN: Binary data format 
1993:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BCD: BCD data format
1994:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param RTC_StampTimeStruct: pointer to a RTC_TimeTypeDef structure that will 
1995:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                             contains the TimeStamp time values. 
1996:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param RTC_StampDateStruct: pointer to a RTC_DateTypeDef structure that will 
1997:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                             contains the TimeStamp date values.     
1998:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
1999:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2000:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_GetTimeStamp(uint32_t RTC_Format, RTC_TimeTypeDef* RTC_StampTimeStruct, 
2001:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                                       RTC_DateTypeDef* RTC_StampDateStruct)
2002:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 3103              		.loc 1 2002 0
 3104              		.cfi_startproc
 3105              		@ args = 0, pretend = 0, frame = 24
 3106              		@ frame_needed = 1, uses_anonymous_args = 0
 3107 0000 80B5     		push	{r7, lr}
 3108              	.LCFI102:
 3109              		.cfi_def_cfa_offset 8
 3110 0002 86B0     		sub	sp, sp, #24
 3111              	.LCFI103:
 3112              		.cfi_def_cfa_offset 32
 3113 0004 00AF     		add	r7, sp, #0
 3114              		.cfi_offset 14, -4
 3115              		.cfi_offset 7, -8
 3116              	.LCFI104:
 3117              		.cfi_def_cfa_register 7
 3118 0006 F860     		str	r0, [r7, #12]
 3119 0008 B960     		str	r1, [r7, #8]
 3120 000a 7A60     		str	r2, [r7, #4]
2003:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t tmptime = 0, tmpdate = 0;
 3121              		.loc 1 2003 0
 3122 000c 4FF00003 		mov	r3, #0
 3123 0010 7B61     		str	r3, [r7, #20]
 3124 0012 4FF00003 		mov	r3, #0
 3125 0016 3B61     		str	r3, [r7, #16]
2004:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2005:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2006:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_FORMAT(RTC_Format));
2007:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2008:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Get the TimeStamp time and date registers values */
2009:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmptime = (uint32_t)(RTC->TSTR & RTC_TR_RESERVED_MASK);
 3126              		.loc 1 2009 0
 3127 0018 414B     		ldr	r3, .L184
 3128 001a 1A6B     		ldr	r2, [r3, #48]
 3129 001c 414B     		ldr	r3, .L184+4
 3130 001e 02EA0303 		and	r3, r2, r3
 3131 0022 7B61     		str	r3, [r7, #20]
2010:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmpdate = (uint32_t)(RTC->TSDR & RTC_DR_RESERVED_MASK);
 3132              		.loc 1 2010 0
 3133 0024 3E4B     		ldr	r3, .L184
 3134 0026 5B6B     		ldr	r3, [r3, #52]
 3135 0028 23F07F43 		bic	r3, r3, #-16777216
 3136 002c 23F0C003 		bic	r3, r3, #192
 3137 0030 3B61     		str	r3, [r7, #16]
2011:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2012:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Fill the Time structure fields with the read parameters */
2013:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_StampTimeStruct->RTC_Hours = (uint8_t)((tmptime & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 3138              		.loc 1 2013 0
 3139 0032 7B69     		ldr	r3, [r7, #20]
 3140 0034 03F47C13 		and	r3, r3, #4128768
 3141 0038 4FEA1343 		lsr	r3, r3, #16
 3142 003c DAB2     		uxtb	r2, r3
 3143 003e BB68     		ldr	r3, [r7, #8]
 3144 0040 1A70     		strb	r2, [r3, #0]
2014:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_StampTimeStruct->RTC_Minutes = (uint8_t)((tmptime & (RTC_TR_MNT | RTC_TR_MNU)) >> 8);
 3145              		.loc 1 2014 0
 3146 0042 7B69     		ldr	r3, [r7, #20]
 3147 0044 03F4FE43 		and	r3, r3, #32512
 3148 0048 4FEA1323 		lsr	r3, r3, #8
 3149 004c DAB2     		uxtb	r2, r3
 3150 004e BB68     		ldr	r3, [r7, #8]
 3151 0050 5A70     		strb	r2, [r3, #1]
2015:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_StampTimeStruct->RTC_Seconds = (uint8_t)(tmptime & (RTC_TR_ST | RTC_TR_SU));
 3152              		.loc 1 2015 0
 3153 0052 7B69     		ldr	r3, [r7, #20]
 3154 0054 DBB2     		uxtb	r3, r3
 3155 0056 03F07F03 		and	r3, r3, #127
 3156 005a DAB2     		uxtb	r2, r3
 3157 005c BB68     		ldr	r3, [r7, #8]
 3158 005e 9A70     		strb	r2, [r3, #2]
2016:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_StampTimeStruct->RTC_H12 = (uint8_t)((tmptime & (RTC_TR_PM)) >> 16);  
 3159              		.loc 1 2016 0
 3160 0060 7B69     		ldr	r3, [r7, #20]
 3161 0062 03F48003 		and	r3, r3, #4194304
 3162 0066 4FEA1343 		lsr	r3, r3, #16
 3163 006a DAB2     		uxtb	r2, r3
 3164 006c BB68     		ldr	r3, [r7, #8]
 3165 006e DA70     		strb	r2, [r3, #3]
2017:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2018:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Fill the Date structure fields with the read parameters */
2019:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_StampDateStruct->RTC_Year = 0;
 3166              		.loc 1 2019 0
 3167 0070 7B68     		ldr	r3, [r7, #4]
 3168 0072 4FF00002 		mov	r2, #0
 3169 0076 DA70     		strb	r2, [r3, #3]
2020:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_StampDateStruct->RTC_Month = (uint8_t)((tmpdate & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 3170              		.loc 1 2020 0
 3171 0078 3B69     		ldr	r3, [r7, #16]
 3172 007a 03F4F853 		and	r3, r3, #7936
 3173 007e 4FEA1323 		lsr	r3, r3, #8
 3174 0082 DAB2     		uxtb	r2, r3
 3175 0084 7B68     		ldr	r3, [r7, #4]
 3176 0086 5A70     		strb	r2, [r3, #1]
2021:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_StampDateStruct->RTC_Date = (uint8_t)(tmpdate & (RTC_DR_DT | RTC_DR_DU));
 3177              		.loc 1 2021 0
 3178 0088 3B69     		ldr	r3, [r7, #16]
 3179 008a DBB2     		uxtb	r3, r3
 3180 008c 03F03F03 		and	r3, r3, #63
 3181 0090 DAB2     		uxtb	r2, r3
 3182 0092 7B68     		ldr	r3, [r7, #4]
 3183 0094 9A70     		strb	r2, [r3, #2]
2022:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_StampDateStruct->RTC_WeekDay = (uint8_t)((tmpdate & (RTC_DR_WDU)) >> 13);
 3184              		.loc 1 2022 0
 3185 0096 3B69     		ldr	r3, [r7, #16]
 3186 0098 03F46043 		and	r3, r3, #57344
 3187 009c 4FEA5333 		lsr	r3, r3, #13
 3188 00a0 DAB2     		uxtb	r2, r3
 3189 00a2 7B68     		ldr	r3, [r7, #4]
 3190 00a4 1A70     		strb	r2, [r3, #0]
2023:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2024:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the input parameters format */
2025:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_Format == RTC_Format_BIN)
 3191              		.loc 1 2025 0
 3192 00a6 FB68     		ldr	r3, [r7, #12]
 3193 00a8 002B     		cmp	r3, #0
 3194 00aa 35D1     		bne	.L182
2026:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2027:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Convert the Time structure parameters to Binary format */
2028:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_StampTimeStruct->RTC_Hours = (uint8_t)RTC_Bcd2ToByte(RTC_StampTimeStruct->RTC_Hours);
 3195              		.loc 1 2028 0
 3196 00ac BB68     		ldr	r3, [r7, #8]
 3197 00ae 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 3198 00b0 1846     		mov	r0, r3
 3199 00b2 FFF7FEFF 		bl	RTC_Bcd2ToByte
 3200 00b6 0346     		mov	r3, r0
 3201 00b8 1A46     		mov	r2, r3
 3202 00ba BB68     		ldr	r3, [r7, #8]
 3203 00bc 1A70     		strb	r2, [r3, #0]
2029:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_StampTimeStruct->RTC_Minutes = (uint8_t)RTC_Bcd2ToByte(RTC_StampTimeStruct->RTC_Minutes);
 3204              		.loc 1 2029 0
 3205 00be BB68     		ldr	r3, [r7, #8]
 3206 00c0 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 3207 00c2 1846     		mov	r0, r3
 3208 00c4 FFF7FEFF 		bl	RTC_Bcd2ToByte
 3209 00c8 0346     		mov	r3, r0
 3210 00ca 1A46     		mov	r2, r3
 3211 00cc BB68     		ldr	r3, [r7, #8]
 3212 00ce 5A70     		strb	r2, [r3, #1]
2030:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_StampTimeStruct->RTC_Seconds = (uint8_t)RTC_Bcd2ToByte(RTC_StampTimeStruct->RTC_Seconds);
 3213              		.loc 1 2030 0
 3214 00d0 BB68     		ldr	r3, [r7, #8]
 3215 00d2 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 3216 00d4 1846     		mov	r0, r3
 3217 00d6 FFF7FEFF 		bl	RTC_Bcd2ToByte
 3218 00da 0346     		mov	r3, r0
 3219 00dc 1A46     		mov	r2, r3
 3220 00de BB68     		ldr	r3, [r7, #8]
 3221 00e0 9A70     		strb	r2, [r3, #2]
2031:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2032:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Convert the Date structure parameters to Binary format */
2033:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_StampDateStruct->RTC_Month = (uint8_t)RTC_Bcd2ToByte(RTC_StampDateStruct->RTC_Month);
 3222              		.loc 1 2033 0
 3223 00e2 7B68     		ldr	r3, [r7, #4]
 3224 00e4 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 3225 00e6 1846     		mov	r0, r3
 3226 00e8 FFF7FEFF 		bl	RTC_Bcd2ToByte
 3227 00ec 0346     		mov	r3, r0
 3228 00ee 1A46     		mov	r2, r3
 3229 00f0 7B68     		ldr	r3, [r7, #4]
 3230 00f2 5A70     		strb	r2, [r3, #1]
2034:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_StampDateStruct->RTC_Date = (uint8_t)RTC_Bcd2ToByte(RTC_StampDateStruct->RTC_Date);
 3231              		.loc 1 2034 0
 3232 00f4 7B68     		ldr	r3, [r7, #4]
 3233 00f6 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 3234 00f8 1846     		mov	r0, r3
 3235 00fa FFF7FEFF 		bl	RTC_Bcd2ToByte
 3236 00fe 0346     		mov	r3, r0
 3237 0100 1A46     		mov	r2, r3
 3238 0102 7B68     		ldr	r3, [r7, #4]
 3239 0104 9A70     		strb	r2, [r3, #2]
2035:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_StampDateStruct->RTC_WeekDay = (uint8_t)RTC_Bcd2ToByte(RTC_StampDateStruct->RTC_WeekDay);
 3240              		.loc 1 2035 0
 3241 0106 7B68     		ldr	r3, [r7, #4]
 3242 0108 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 3243 010a 1846     		mov	r0, r3
 3244 010c FFF7FEFF 		bl	RTC_Bcd2ToByte
 3245 0110 0346     		mov	r3, r0
 3246 0112 1A46     		mov	r2, r3
 3247 0114 7B68     		ldr	r3, [r7, #4]
 3248 0116 1A70     		strb	r2, [r3, #0]
 3249              	.L182:
2036:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
2037:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 3250              		.loc 1 2037 0
 3251 0118 07F11807 		add	r7, r7, #24
 3252 011c BD46     		mov	sp, r7
 3253 011e 80BD     		pop	{r7, pc}
 3254              	.L185:
 3255              		.align	2
 3256              	.L184:
 3257 0120 00280040 		.word	1073752064
 3258 0124 7F7F7F00 		.word	8355711
 3259              		.cfi_endproc
 3260              	.LFE145:
 3262              		.section	.text.RTC_GetTimeStampSubSecond,"ax",%progbits
 3263              		.align	2
 3264              		.global	RTC_GetTimeStampSubSecond
 3265              		.thumb
 3266              		.thumb_func
 3268              	RTC_GetTimeStampSubSecond:
 3269              	.LFB146:
2038:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2039:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2040:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Get the RTC timestamp Subseconds value.
2041:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  None
2042:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval RTC current timestamp Subseconds value.
2043:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2044:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** uint32_t RTC_GetTimeStampSubSecond(void)
2045:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 3270              		.loc 1 2045 0
 3271              		.cfi_startproc
 3272              		@ args = 0, pretend = 0, frame = 0
 3273              		@ frame_needed = 1, uses_anonymous_args = 0
 3274              		@ link register save eliminated.
 3275 0000 80B4     		push	{r7}
 3276              	.LCFI105:
 3277              		.cfi_def_cfa_offset 4
 3278 0002 00AF     		add	r7, sp, #0
 3279              		.cfi_offset 7, -4
 3280              	.LCFI106:
 3281              		.cfi_def_cfa_register 7
2046:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Get timestamp subseconds values from the correspondent registers */
2047:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return (uint32_t)(RTC->TSSSR);
 3282              		.loc 1 2047 0
 3283 0004 024B     		ldr	r3, .L187
 3284 0006 9B6B     		ldr	r3, [r3, #56]
2048:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 3285              		.loc 1 2048 0
 3286 0008 1846     		mov	r0, r3
 3287 000a BD46     		mov	sp, r7
 3288 000c 80BC     		pop	{r7}
 3289 000e 7047     		bx	lr
 3290              	.L188:
 3291              		.align	2
 3292              	.L187:
 3293 0010 00280040 		.word	1073752064
 3294              		.cfi_endproc
 3295              	.LFE146:
 3297              		.section	.text.RTC_TamperTriggerConfig,"ax",%progbits
 3298              		.align	2
 3299              		.global	RTC_TamperTriggerConfig
 3300              		.thumb
 3301              		.thumb_func
 3303              	RTC_TamperTriggerConfig:
 3304              	.LFB147:
2049:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2050:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2051:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @}
2052:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2053:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2054:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group9 Tampers configuration functions
2055:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *  @brief   Tampers configuration functions 
2056:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *
2057:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @verbatim   
2058:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================
2059:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                        Tampers configuration functions
2060:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================  
2061:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2062:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @endverbatim
2063:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @{
2064:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2065:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2066:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2067:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Configures the select Tamper pin edge.
2068:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_Tamper: Selected tamper pin.
2069:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be RTC_Tamper_1.
2070:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_TamperTrigger: Specifies the trigger on the tamper pin that 
2071:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         stimulates tamper event. 
2072:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *   This parameter can be one of the following values:
2073:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperTrigger_RisingEdge: Rising Edge of the tamper pin causes tamper event.
2074:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperTrigger_FallingEdge: Falling Edge of the tamper pin causes tamper event.
2075:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperTrigger_LowLevel: Low Level of the tamper pin causes tamper event.
2076:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperTrigger_HighLevel: High Level of the tamper pin causes tamper event.
2077:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
2078:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2079:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_TamperTriggerConfig(uint32_t RTC_Tamper, uint32_t RTC_TamperTrigger)
2080:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 3305              		.loc 1 2080 0
 3306              		.cfi_startproc
 3307              		@ args = 0, pretend = 0, frame = 8
 3308              		@ frame_needed = 1, uses_anonymous_args = 0
 3309              		@ link register save eliminated.
 3310 0000 80B4     		push	{r7}
 3311              	.LCFI107:
 3312              		.cfi_def_cfa_offset 4
 3313 0002 83B0     		sub	sp, sp, #12
 3314              	.LCFI108:
 3315              		.cfi_def_cfa_offset 16
 3316 0004 00AF     		add	r7, sp, #0
 3317              		.cfi_offset 7, -4
 3318              	.LCFI109:
 3319              		.cfi_def_cfa_register 7
 3320 0006 7860     		str	r0, [r7, #4]
 3321 0008 3960     		str	r1, [r7, #0]
2081:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2082:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_TAMPER(RTC_Tamper)); 
2083:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_TAMPER_TRIGGER(RTC_TamperTrigger));
2084:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  
2085:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_TamperTrigger == RTC_TamperTrigger_RisingEdge)
 3322              		.loc 1 2085 0
 3323 000a 3B68     		ldr	r3, [r7, #0]
 3324 000c 002B     		cmp	r3, #0
 3325 000e 0BD1     		bne	.L190
2086:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {  
2087:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Configure the RTC_TAFCR register */
2088:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->TAFCR &= (uint32_t)((uint32_t)~(RTC_Tamper << 1));	
 3326              		.loc 1 2088 0
 3327 0010 0C4B     		ldr	r3, .L192
 3328 0012 0C4A     		ldr	r2, .L192
 3329 0014 116C     		ldr	r1, [r2, #64]
 3330 0016 7A68     		ldr	r2, [r7, #4]
 3331 0018 4FEA4202 		lsl	r2, r2, #1
 3332 001c 6FEA0202 		mvn	r2, r2
 3333 0020 01EA0202 		and	r2, r1, r2
 3334 0024 1A64     		str	r2, [r3, #64]
 3335 0026 08E0     		b	.L189
 3336              	.L190:
2089:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
2090:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
2091:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   { 
2092:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Configure the RTC_TAFCR register */
2093:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->TAFCR |= (uint32_t)(RTC_Tamper << 1);  
 3337              		.loc 1 2093 0
 3338 0028 064B     		ldr	r3, .L192
 3339 002a 064A     		ldr	r2, .L192
 3340 002c 116C     		ldr	r1, [r2, #64]
 3341 002e 7A68     		ldr	r2, [r7, #4]
 3342 0030 4FEA4202 		lsl	r2, r2, #1
 3343 0034 41EA0202 		orr	r2, r1, r2
 3344 0038 1A64     		str	r2, [r3, #64]
 3345              	.L189:
2094:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }  
2095:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 3346              		.loc 1 2095 0
 3347 003a 07F10C07 		add	r7, r7, #12
 3348 003e BD46     		mov	sp, r7
 3349 0040 80BC     		pop	{r7}
 3350 0042 7047     		bx	lr
 3351              	.L193:
 3352              		.align	2
 3353              	.L192:
 3354 0044 00280040 		.word	1073752064
 3355              		.cfi_endproc
 3356              	.LFE147:
 3358              		.section	.text.RTC_TamperCmd,"ax",%progbits
 3359              		.align	2
 3360              		.global	RTC_TamperCmd
 3361              		.thumb
 3362              		.thumb_func
 3364              	RTC_TamperCmd:
 3365              	.LFB148:
2096:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2097:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2098:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Enables or Disables the Tamper detection.
2099:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_Tamper: Selected tamper pin.
2100:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be RTC_Tamper_1.
2101:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  NewState: new state of the tamper pin.
2102:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be: ENABLE or DISABLE.                   
2103:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
2104:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2105:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_TamperCmd(uint32_t RTC_Tamper, FunctionalState NewState)
2106:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 3366              		.loc 1 2106 0
 3367              		.cfi_startproc
 3368              		@ args = 0, pretend = 0, frame = 8
 3369              		@ frame_needed = 1, uses_anonymous_args = 0
 3370              		@ link register save eliminated.
 3371 0000 80B4     		push	{r7}
 3372              	.LCFI110:
 3373              		.cfi_def_cfa_offset 4
 3374 0002 83B0     		sub	sp, sp, #12
 3375              	.LCFI111:
 3376              		.cfi_def_cfa_offset 16
 3377 0004 00AF     		add	r7, sp, #0
 3378              		.cfi_offset 7, -4
 3379              	.LCFI112:
 3380              		.cfi_def_cfa_register 7
 3381 0006 7860     		str	r0, [r7, #4]
 3382 0008 0B46     		mov	r3, r1
 3383 000a FB70     		strb	r3, [r7, #3]
2107:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2108:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_TAMPER(RTC_Tamper));  
2109:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
2110:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2111:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (NewState != DISABLE)
 3384              		.loc 1 2111 0
 3385 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 3386 000e 002B     		cmp	r3, #0
 3387 0010 07D0     		beq	.L195
2112:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2113:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Enable the selected Tamper pin */
2114:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->TAFCR |= (uint32_t)RTC_Tamper;
 3388              		.loc 1 2114 0
 3389 0012 0B4B     		ldr	r3, .L197
 3390 0014 0A4A     		ldr	r2, .L197
 3391 0016 116C     		ldr	r1, [r2, #64]
 3392 0018 7A68     		ldr	r2, [r7, #4]
 3393 001a 41EA0202 		orr	r2, r1, r2
 3394 001e 1A64     		str	r2, [r3, #64]
 3395 0020 08E0     		b	.L194
 3396              	.L195:
2115:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
2116:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
2117:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2118:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Disable the selected Tamper pin */
2119:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->TAFCR &= (uint32_t)~RTC_Tamper;    
 3397              		.loc 1 2119 0
 3398 0022 074B     		ldr	r3, .L197
 3399 0024 064A     		ldr	r2, .L197
 3400 0026 116C     		ldr	r1, [r2, #64]
 3401 0028 7A68     		ldr	r2, [r7, #4]
 3402 002a 6FEA0202 		mvn	r2, r2
 3403 002e 01EA0202 		and	r2, r1, r2
 3404 0032 1A64     		str	r2, [r3, #64]
 3405              	.L194:
2120:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }  
2121:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 3406              		.loc 1 2121 0
 3407 0034 07F10C07 		add	r7, r7, #12
 3408 0038 BD46     		mov	sp, r7
 3409 003a 80BC     		pop	{r7}
 3410 003c 7047     		bx	lr
 3411              	.L198:
 3412 003e 00BF     		.align	2
 3413              	.L197:
 3414 0040 00280040 		.word	1073752064
 3415              		.cfi_endproc
 3416              	.LFE148:
 3418              		.section	.text.RTC_TamperFilterConfig,"ax",%progbits
 3419              		.align	2
 3420              		.global	RTC_TamperFilterConfig
 3421              		.thumb
 3422              		.thumb_func
 3424              	RTC_TamperFilterConfig:
 3425              	.LFB149:
2122:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2123:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2124:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Configures the Tampers Filter.
2125:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_TamperFilter: Specifies the tampers filter.
2126:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *   This parameter can be one of the following values:
2127:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperFilter_Disable: Tamper filter is disabled.
2128:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperFilter_2Sample: Tamper is activated after 2 consecutive 
2129:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                    samples at the active level 
2130:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperFilter_4Sample: Tamper is activated after 4 consecutive 
2131:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                    samples at the active level
2132:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperFilter_8Sample: Tamper is activated after 8 consecutive 
2133:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                    samples at the active level 
2134:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
2135:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2136:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_TamperFilterConfig(uint32_t RTC_TamperFilter)
2137:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 3426              		.loc 1 2137 0
 3427              		.cfi_startproc
 3428              		@ args = 0, pretend = 0, frame = 8
 3429              		@ frame_needed = 1, uses_anonymous_args = 0
 3430              		@ link register save eliminated.
 3431 0000 80B4     		push	{r7}
 3432              	.LCFI113:
 3433              		.cfi_def_cfa_offset 4
 3434 0002 83B0     		sub	sp, sp, #12
 3435              	.LCFI114:
 3436              		.cfi_def_cfa_offset 16
 3437 0004 00AF     		add	r7, sp, #0
 3438              		.cfi_offset 7, -4
 3439              	.LCFI115:
 3440              		.cfi_def_cfa_register 7
 3441 0006 7860     		str	r0, [r7, #4]
2138:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2139:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_TAMPER_FILTER(RTC_TamperFilter));
2140:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    
2141:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Clear TAMPFLT[1:0] bits in the RTC_TAFCR register */
2142:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_TAMPFLT);
 3442              		.loc 1 2142 0
 3443 0008 084B     		ldr	r3, .L200
 3444 000a 084A     		ldr	r2, .L200
 3445 000c 126C     		ldr	r2, [r2, #64]
 3446 000e 22F4C052 		bic	r2, r2, #6144
 3447 0012 1A64     		str	r2, [r3, #64]
2143:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2144:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Configure the RTC_TAFCR register */
2145:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->TAFCR |= (uint32_t)RTC_TamperFilter;
 3448              		.loc 1 2145 0
 3449 0014 054B     		ldr	r3, .L200
 3450 0016 054A     		ldr	r2, .L200
 3451 0018 116C     		ldr	r1, [r2, #64]
 3452 001a 7A68     		ldr	r2, [r7, #4]
 3453 001c 41EA0202 		orr	r2, r1, r2
 3454 0020 1A64     		str	r2, [r3, #64]
2146:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 3455              		.loc 1 2146 0
 3456 0022 07F10C07 		add	r7, r7, #12
 3457 0026 BD46     		mov	sp, r7
 3458 0028 80BC     		pop	{r7}
 3459 002a 7047     		bx	lr
 3460              	.L201:
 3461              		.align	2
 3462              	.L200:
 3463 002c 00280040 		.word	1073752064
 3464              		.cfi_endproc
 3465              	.LFE149:
 3467              		.section	.text.RTC_TamperSamplingFreqConfig,"ax",%progbits
 3468              		.align	2
 3469              		.global	RTC_TamperSamplingFreqConfig
 3470              		.thumb
 3471              		.thumb_func
 3473              	RTC_TamperSamplingFreqConfig:
 3474              	.LFB150:
2147:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2148:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2149:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Configures the Tampers Sampling Frequency.
2150:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_TamperSamplingFreq: Specifies the tampers Sampling Frequency.
2151:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *   This parameter can be one of the following values:
2152:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperSamplingFreq_RTCCLK_Div32768: Each of the tamper inputs are sampled
2153:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                           with a frequency =  RTCCLK / 32768
2154:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperSamplingFreq_RTCCLK_Div16384: Each of the tamper inputs are sampled
2155:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                           with a frequency =  RTCCLK / 16384
2156:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperSamplingFreq_RTCCLK_Div8192: Each of the tamper inputs are sampled
2157:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                           with a frequency =  RTCCLK / 8192
2158:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperSamplingFreq_RTCCLK_Div4096: Each of the tamper inputs are sampled
2159:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                           with a frequency =  RTCCLK / 4096
2160:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperSamplingFreq_RTCCLK_Div2048: Each of the tamper inputs are sampled
2161:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                           with a frequency =  RTCCLK / 2048
2162:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperSamplingFreq_RTCCLK_Div1024: Each of the tamper inputs are sampled
2163:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                           with a frequency =  RTCCLK / 1024
2164:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperSamplingFreq_RTCCLK_Div512: Each of the tamper inputs are sampled
2165:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                           with a frequency =  RTCCLK / 512  
2166:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperSamplingFreq_RTCCLK_Div256: Each of the tamper inputs are sampled
2167:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                           with a frequency =  RTCCLK / 256  
2168:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
2169:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2170:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_TamperSamplingFreqConfig(uint32_t RTC_TamperSamplingFreq)
2171:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 3475              		.loc 1 2171 0
 3476              		.cfi_startproc
 3477              		@ args = 0, pretend = 0, frame = 8
 3478              		@ frame_needed = 1, uses_anonymous_args = 0
 3479              		@ link register save eliminated.
 3480 0000 80B4     		push	{r7}
 3481              	.LCFI116:
 3482              		.cfi_def_cfa_offset 4
 3483 0002 83B0     		sub	sp, sp, #12
 3484              	.LCFI117:
 3485              		.cfi_def_cfa_offset 16
 3486 0004 00AF     		add	r7, sp, #0
 3487              		.cfi_offset 7, -4
 3488              	.LCFI118:
 3489              		.cfi_def_cfa_register 7
 3490 0006 7860     		str	r0, [r7, #4]
2172:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2173:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_TAMPER_SAMPLING_FREQ(RTC_TamperSamplingFreq));
2174:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  
2175:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Clear TAMPFREQ[2:0] bits in the RTC_TAFCR register */
2176:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_TAMPFREQ);
 3491              		.loc 1 2176 0
 3492 0008 084B     		ldr	r3, .L203
 3493 000a 084A     		ldr	r2, .L203
 3494 000c 126C     		ldr	r2, [r2, #64]
 3495 000e 22F4E062 		bic	r2, r2, #1792
 3496 0012 1A64     		str	r2, [r3, #64]
2177:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2178:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Configure the RTC_TAFCR register */
2179:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->TAFCR |= (uint32_t)RTC_TamperSamplingFreq;
 3497              		.loc 1 2179 0
 3498 0014 054B     		ldr	r3, .L203
 3499 0016 054A     		ldr	r2, .L203
 3500 0018 116C     		ldr	r1, [r2, #64]
 3501 001a 7A68     		ldr	r2, [r7, #4]
 3502 001c 41EA0202 		orr	r2, r1, r2
 3503 0020 1A64     		str	r2, [r3, #64]
2180:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 3504              		.loc 1 2180 0
 3505 0022 07F10C07 		add	r7, r7, #12
 3506 0026 BD46     		mov	sp, r7
 3507 0028 80BC     		pop	{r7}
 3508 002a 7047     		bx	lr
 3509              	.L204:
 3510              		.align	2
 3511              	.L203:
 3512 002c 00280040 		.word	1073752064
 3513              		.cfi_endproc
 3514              	.LFE150:
 3516              		.section	.text.RTC_TamperPinsPrechargeDuration,"ax",%progbits
 3517              		.align	2
 3518              		.global	RTC_TamperPinsPrechargeDuration
 3519              		.thumb
 3520              		.thumb_func
 3522              	RTC_TamperPinsPrechargeDuration:
 3523              	.LFB151:
2181:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2182:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2183:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Configures the Tampers Pins input Precharge Duration.
2184:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_TamperPrechargeDuration: Specifies the Tampers Pins input
2185:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         Precharge Duration.
2186:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *   This parameter can be one of the following values:
2187:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperPrechargeDuration_1RTCCLK: Tamper pins are pre-charged before sampling durin
2188:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperPrechargeDuration_2RTCCLK: Tamper pins are pre-charged before sampling durin
2189:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperPrechargeDuration_4RTCCLK: Tamper pins are pre-charged before sampling durin
2190:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperPrechargeDuration_8RTCCLK: Tamper pins are pre-charged before sampling durin
2191:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
2192:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2193:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_TamperPinsPrechargeDuration(uint32_t RTC_TamperPrechargeDuration)
2194:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 3524              		.loc 1 2194 0
 3525              		.cfi_startproc
 3526              		@ args = 0, pretend = 0, frame = 8
 3527              		@ frame_needed = 1, uses_anonymous_args = 0
 3528              		@ link register save eliminated.
 3529 0000 80B4     		push	{r7}
 3530              	.LCFI119:
 3531              		.cfi_def_cfa_offset 4
 3532 0002 83B0     		sub	sp, sp, #12
 3533              	.LCFI120:
 3534              		.cfi_def_cfa_offset 16
 3535 0004 00AF     		add	r7, sp, #0
 3536              		.cfi_offset 7, -4
 3537              	.LCFI121:
 3538              		.cfi_def_cfa_register 7
 3539 0006 7860     		str	r0, [r7, #4]
2195:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2196:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_TAMPER_PRECHARGE_DURATION(RTC_TamperPrechargeDuration));
2197:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    
2198:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Clear TAMPPRCH[1:0] bits in the RTC_TAFCR register */
2199:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_TAMPPRCH);
 3540              		.loc 1 2199 0
 3541 0008 084B     		ldr	r3, .L206
 3542 000a 084A     		ldr	r2, .L206
 3543 000c 126C     		ldr	r2, [r2, #64]
 3544 000e 22F4C042 		bic	r2, r2, #24576
 3545 0012 1A64     		str	r2, [r3, #64]
2200:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2201:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Configure the RTC_TAFCR register */
2202:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->TAFCR |= (uint32_t)RTC_TamperPrechargeDuration;
 3546              		.loc 1 2202 0
 3547 0014 054B     		ldr	r3, .L206
 3548 0016 054A     		ldr	r2, .L206
 3549 0018 116C     		ldr	r1, [r2, #64]
 3550 001a 7A68     		ldr	r2, [r7, #4]
 3551 001c 41EA0202 		orr	r2, r1, r2
 3552 0020 1A64     		str	r2, [r3, #64]
2203:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 3553              		.loc 1 2203 0
 3554 0022 07F10C07 		add	r7, r7, #12
 3555 0026 BD46     		mov	sp, r7
 3556 0028 80BC     		pop	{r7}
 3557 002a 7047     		bx	lr
 3558              	.L207:
 3559              		.align	2
 3560              	.L206:
 3561 002c 00280040 		.word	1073752064
 3562              		.cfi_endproc
 3563              	.LFE151:
 3565              		.section	.text.RTC_TimeStampOnTamperDetectionCmd,"ax",%progbits
 3566              		.align	2
 3567              		.global	RTC_TimeStampOnTamperDetectionCmd
 3568              		.thumb
 3569              		.thumb_func
 3571              	RTC_TimeStampOnTamperDetectionCmd:
 3572              	.LFB152:
2204:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2205:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2206:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Enables or Disables the TimeStamp on Tamper Detection Event.
2207:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   The timestamp is valid even the TSE bit in tamper control register 
2208:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         is reset.   
2209:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  NewState: new state of the timestamp on tamper event.
2210:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         This parameter can be: ENABLE or DISABLE.
2211:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
2212:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2213:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_TimeStampOnTamperDetectionCmd(FunctionalState NewState)
2214:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 3573              		.loc 1 2214 0
 3574              		.cfi_startproc
 3575              		@ args = 0, pretend = 0, frame = 8
 3576              		@ frame_needed = 1, uses_anonymous_args = 0
 3577              		@ link register save eliminated.
 3578 0000 80B4     		push	{r7}
 3579              	.LCFI122:
 3580              		.cfi_def_cfa_offset 4
 3581 0002 83B0     		sub	sp, sp, #12
 3582              	.LCFI123:
 3583              		.cfi_def_cfa_offset 16
 3584 0004 00AF     		add	r7, sp, #0
 3585              		.cfi_offset 7, -4
 3586              	.LCFI124:
 3587              		.cfi_def_cfa_register 7
 3588 0006 0346     		mov	r3, r0
 3589 0008 FB71     		strb	r3, [r7, #7]
2215:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2216:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
2217:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    
2218:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (NewState != DISABLE)
 3590              		.loc 1 2218 0
 3591 000a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3592 000c 002B     		cmp	r3, #0
 3593 000e 06D0     		beq	.L209
2219:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2220:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Save timestamp on tamper detection event */
2221:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->TAFCR |= (uint32_t)RTC_TAFCR_TAMPTS;
 3594              		.loc 1 2221 0
 3595 0010 084B     		ldr	r3, .L211
 3596 0012 084A     		ldr	r2, .L211
 3597 0014 126C     		ldr	r2, [r2, #64]
 3598 0016 42F08002 		orr	r2, r2, #128
 3599 001a 1A64     		str	r2, [r3, #64]
 3600 001c 05E0     		b	.L208
 3601              	.L209:
2222:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
2223:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
2224:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2225:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Tamper detection does not cause a timestamp to be saved */
2226:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->TAFCR &= (uint32_t)~RTC_TAFCR_TAMPTS;    
 3602              		.loc 1 2226 0
 3603 001e 054B     		ldr	r3, .L211
 3604 0020 044A     		ldr	r2, .L211
 3605 0022 126C     		ldr	r2, [r2, #64]
 3606 0024 22F08002 		bic	r2, r2, #128
 3607 0028 1A64     		str	r2, [r3, #64]
 3608              	.L208:
2227:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
2228:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 3609              		.loc 1 2228 0
 3610 002a 07F10C07 		add	r7, r7, #12
 3611 002e BD46     		mov	sp, r7
 3612 0030 80BC     		pop	{r7}
 3613 0032 7047     		bx	lr
 3614              	.L212:
 3615              		.align	2
 3616              	.L211:
 3617 0034 00280040 		.word	1073752064
 3618              		.cfi_endproc
 3619              	.LFE152:
 3621              		.section	.text.RTC_TamperPullUpCmd,"ax",%progbits
 3622              		.align	2
 3623              		.global	RTC_TamperPullUpCmd
 3624              		.thumb
 3625              		.thumb_func
 3627              	RTC_TamperPullUpCmd:
 3628              	.LFB153:
2229:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2230:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2231:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Enables or Disables the Precharge of Tamper pin.
2232:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  NewState: new state of tamper pull up.
2233:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *   This parameter can be: ENABLE or DISABLE.                   
2234:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
2235:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2236:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_TamperPullUpCmd(FunctionalState NewState)
2237:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 3629              		.loc 1 2237 0
 3630              		.cfi_startproc
 3631              		@ args = 0, pretend = 0, frame = 8
 3632              		@ frame_needed = 1, uses_anonymous_args = 0
 3633              		@ link register save eliminated.
 3634 0000 80B4     		push	{r7}
 3635              	.LCFI125:
 3636              		.cfi_def_cfa_offset 4
 3637 0002 83B0     		sub	sp, sp, #12
 3638              	.LCFI126:
 3639              		.cfi_def_cfa_offset 16
 3640 0004 00AF     		add	r7, sp, #0
 3641              		.cfi_offset 7, -4
 3642              	.LCFI127:
 3643              		.cfi_def_cfa_register 7
 3644 0006 0346     		mov	r3, r0
 3645 0008 FB71     		strb	r3, [r7, #7]
2238:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2239:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
2240:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2241:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  if (NewState != DISABLE)
 3646              		.loc 1 2241 0
 3647 000a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3648 000c 002B     		cmp	r3, #0
 3649 000e 06D0     		beq	.L214
2242:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2243:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Enable precharge of the selected Tamper pin */
2244:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->TAFCR &= (uint32_t)~RTC_TAFCR_TAMPPUDIS; 
 3650              		.loc 1 2244 0
 3651 0010 084B     		ldr	r3, .L216
 3652 0012 084A     		ldr	r2, .L216
 3653 0014 126C     		ldr	r2, [r2, #64]
 3654 0016 22F40042 		bic	r2, r2, #32768
 3655 001a 1A64     		str	r2, [r3, #64]
 3656 001c 05E0     		b	.L213
 3657              	.L214:
2245:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
2246:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
2247:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2248:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Disable precharge of the selected Tamper pin */
2249:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->TAFCR |= (uint32_t)RTC_TAFCR_TAMPPUDIS;    
 3658              		.loc 1 2249 0
 3659 001e 054B     		ldr	r3, .L216
 3660 0020 044A     		ldr	r2, .L216
 3661 0022 126C     		ldr	r2, [r2, #64]
 3662 0024 42F40042 		orr	r2, r2, #32768
 3663 0028 1A64     		str	r2, [r3, #64]
 3664              	.L213:
2250:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   } 
2251:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 3665              		.loc 1 2251 0
 3666 002a 07F10C07 		add	r7, r7, #12
 3667 002e BD46     		mov	sp, r7
 3668 0030 80BC     		pop	{r7}
 3669 0032 7047     		bx	lr
 3670              	.L217:
 3671              		.align	2
 3672              	.L216:
 3673 0034 00280040 		.word	1073752064
 3674              		.cfi_endproc
 3675              	.LFE153:
 3677              		.section	.text.RTC_WriteBackupRegister,"ax",%progbits
 3678              		.align	2
 3679              		.global	RTC_WriteBackupRegister
 3680              		.thumb
 3681              		.thumb_func
 3683              	RTC_WriteBackupRegister:
 3684              	.LFB154:
2252:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2253:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2254:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @}
2255:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2256:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2257:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group10 Backup Data Registers configuration functions
2258:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *  @brief   Backup Data Registers configuration functions  
2259:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *
2260:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @verbatim   
2261:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================
2262:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                        Backup Data Registers configuration functions 
2263:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================  
2264:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2265:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @endverbatim
2266:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @{
2267:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2268:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2269:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2270:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Writes a data in a specified RTC Backup data register.
2271:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_BKP_DR: RTC Backup data Register number.
2272:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be: RTC_BKP_DRx where x can be from 0 to 19 to 
2273:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                          specify the register.
2274:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  Data: Data to be written in the specified RTC Backup data register.                    
2275:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
2276:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2277:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_WriteBackupRegister(uint32_t RTC_BKP_DR, uint32_t Data)
2278:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 3685              		.loc 1 2278 0
 3686              		.cfi_startproc
 3687              		@ args = 0, pretend = 0, frame = 16
 3688              		@ frame_needed = 1, uses_anonymous_args = 0
 3689              		@ link register save eliminated.
 3690 0000 80B4     		push	{r7}
 3691              	.LCFI128:
 3692              		.cfi_def_cfa_offset 4
 3693 0002 85B0     		sub	sp, sp, #20
 3694              	.LCFI129:
 3695              		.cfi_def_cfa_offset 24
 3696 0004 00AF     		add	r7, sp, #0
 3697              		.cfi_offset 7, -4
 3698              	.LCFI130:
 3699              		.cfi_def_cfa_register 7
 3700 0006 7860     		str	r0, [r7, #4]
 3701 0008 3960     		str	r1, [r7, #0]
2279:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   __IO uint32_t tmp = 0;
 3702              		.loc 1 2279 0
 3703 000a 4FF00003 		mov	r3, #0
 3704 000e FB60     		str	r3, [r7, #12]
2280:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2281:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2282:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_BKP(RTC_BKP_DR));
2283:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2284:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmp = RTC_BASE + 0x50;
 3705              		.loc 1 2284 0
 3706 0010 074B     		ldr	r3, .L219
 3707 0012 FB60     		str	r3, [r7, #12]
2285:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmp += (RTC_BKP_DR * 4);
 3708              		.loc 1 2285 0
 3709 0014 7B68     		ldr	r3, [r7, #4]
 3710 0016 4FEA8302 		lsl	r2, r3, #2
 3711 001a FB68     		ldr	r3, [r7, #12]
 3712 001c D318     		adds	r3, r2, r3
 3713 001e FB60     		str	r3, [r7, #12]
2286:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2287:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Write the specified register */
2288:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *(__IO uint32_t *)tmp = (uint32_t)Data;
 3714              		.loc 1 2288 0
 3715 0020 FB68     		ldr	r3, [r7, #12]
 3716 0022 3A68     		ldr	r2, [r7, #0]
 3717 0024 1A60     		str	r2, [r3, #0]
2289:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 3718              		.loc 1 2289 0
 3719 0026 07F11407 		add	r7, r7, #20
 3720 002a BD46     		mov	sp, r7
 3721 002c 80BC     		pop	{r7}
 3722 002e 7047     		bx	lr
 3723              	.L220:
 3724              		.align	2
 3725              	.L219:
 3726 0030 50280040 		.word	1073752144
 3727              		.cfi_endproc
 3728              	.LFE154:
 3730              		.section	.text.RTC_ReadBackupRegister,"ax",%progbits
 3731              		.align	2
 3732              		.global	RTC_ReadBackupRegister
 3733              		.thumb
 3734              		.thumb_func
 3736              	RTC_ReadBackupRegister:
 3737              	.LFB155:
2290:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2291:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2292:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Reads data from the specified RTC Backup data Register.
2293:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_BKP_DR: RTC Backup data Register number.
2294:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be: RTC_BKP_DRx where x can be from 0 to 19 to 
2295:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                          specify the register.                   
2296:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
2297:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2298:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** uint32_t RTC_ReadBackupRegister(uint32_t RTC_BKP_DR)
2299:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 3738              		.loc 1 2299 0
 3739              		.cfi_startproc
 3740              		@ args = 0, pretend = 0, frame = 16
 3741              		@ frame_needed = 1, uses_anonymous_args = 0
 3742              		@ link register save eliminated.
 3743 0000 80B4     		push	{r7}
 3744              	.LCFI131:
 3745              		.cfi_def_cfa_offset 4
 3746 0002 85B0     		sub	sp, sp, #20
 3747              	.LCFI132:
 3748              		.cfi_def_cfa_offset 24
 3749 0004 00AF     		add	r7, sp, #0
 3750              		.cfi_offset 7, -4
 3751              	.LCFI133:
 3752              		.cfi_def_cfa_register 7
 3753 0006 7860     		str	r0, [r7, #4]
2300:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   __IO uint32_t tmp = 0;
 3754              		.loc 1 2300 0
 3755 0008 4FF00003 		mov	r3, #0
 3756 000c FB60     		str	r3, [r7, #12]
2301:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2302:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2303:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_BKP(RTC_BKP_DR));
2304:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2305:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmp = RTC_BASE + 0x50;
 3757              		.loc 1 2305 0
 3758 000e 084B     		ldr	r3, .L222
 3759 0010 FB60     		str	r3, [r7, #12]
2306:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmp += (RTC_BKP_DR * 4);
 3760              		.loc 1 2306 0
 3761 0012 7B68     		ldr	r3, [r7, #4]
 3762 0014 4FEA8302 		lsl	r2, r3, #2
 3763 0018 FB68     		ldr	r3, [r7, #12]
 3764 001a D318     		adds	r3, r2, r3
 3765 001c FB60     		str	r3, [r7, #12]
2307:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2308:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Read the specified register */
2309:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return (*(__IO uint32_t *)tmp);
 3766              		.loc 1 2309 0
 3767 001e FB68     		ldr	r3, [r7, #12]
 3768 0020 1B68     		ldr	r3, [r3, #0]
2310:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 3769              		.loc 1 2310 0
 3770 0022 1846     		mov	r0, r3
 3771 0024 07F11407 		add	r7, r7, #20
 3772 0028 BD46     		mov	sp, r7
 3773 002a 80BC     		pop	{r7}
 3774 002c 7047     		bx	lr
 3775              	.L223:
 3776 002e 00BF     		.align	2
 3777              	.L222:
 3778 0030 50280040 		.word	1073752144
 3779              		.cfi_endproc
 3780              	.LFE155:
 3782              		.section	.text.RTC_TamperPinSelection,"ax",%progbits
 3783              		.align	2
 3784              		.global	RTC_TamperPinSelection
 3785              		.thumb
 3786              		.thumb_func
 3788              	RTC_TamperPinSelection:
 3789              	.LFB156:
2311:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2312:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2313:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @}
2314:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2315:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2316:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group11 RTC Tamper and TimeStamp Pins Selection and Output Type Config configurat
2317:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *  @brief   RTC Tamper and TimeStamp Pins Selection and Output Type Config 
2318:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *           configuration functions  
2319:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *
2320:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @verbatim   
2321:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================
2322:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC Tamper and TimeStamp Pins Selection and Output Type Config configuration 
2323:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   functions 
2324:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================  
2325:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2326:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @endverbatim
2327:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @{
2328:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2329:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2330:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2331:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Selects the RTC Tamper Pin.
2332:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_TamperPin: specifies the RTC Tamper Pin.
2333:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
2334:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_TamperPin_PC13: PC13 is selected as RTC Tamper Pin.
2335:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_TamperPin_PI8: PI8 is selected as RTC Tamper Pin.    
2336:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
2337:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2338:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_TamperPinSelection(uint32_t RTC_TamperPin)
2339:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 3790              		.loc 1 2339 0
 3791              		.cfi_startproc
 3792              		@ args = 0, pretend = 0, frame = 8
 3793              		@ frame_needed = 1, uses_anonymous_args = 0
 3794              		@ link register save eliminated.
 3795 0000 80B4     		push	{r7}
 3796              	.LCFI134:
 3797              		.cfi_def_cfa_offset 4
 3798 0002 83B0     		sub	sp, sp, #12
 3799              	.LCFI135:
 3800              		.cfi_def_cfa_offset 16
 3801 0004 00AF     		add	r7, sp, #0
 3802              		.cfi_offset 7, -4
 3803              	.LCFI136:
 3804              		.cfi_def_cfa_register 7
 3805 0006 7860     		str	r0, [r7, #4]
2340:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2341:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_TAMPER_PIN(RTC_TamperPin));
2342:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2343:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_TAMPINSEL);
 3806              		.loc 1 2343 0
 3807 0008 084B     		ldr	r3, .L225
 3808 000a 084A     		ldr	r2, .L225
 3809 000c 126C     		ldr	r2, [r2, #64]
 3810 000e 22F48032 		bic	r2, r2, #65536
 3811 0012 1A64     		str	r2, [r3, #64]
2344:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->TAFCR |= (uint32_t)(RTC_TamperPin);  
 3812              		.loc 1 2344 0
 3813 0014 054B     		ldr	r3, .L225
 3814 0016 054A     		ldr	r2, .L225
 3815 0018 116C     		ldr	r1, [r2, #64]
 3816 001a 7A68     		ldr	r2, [r7, #4]
 3817 001c 41EA0202 		orr	r2, r1, r2
 3818 0020 1A64     		str	r2, [r3, #64]
2345:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 3819              		.loc 1 2345 0
 3820 0022 07F10C07 		add	r7, r7, #12
 3821 0026 BD46     		mov	sp, r7
 3822 0028 80BC     		pop	{r7}
 3823 002a 7047     		bx	lr
 3824              	.L226:
 3825              		.align	2
 3826              	.L225:
 3827 002c 00280040 		.word	1073752064
 3828              		.cfi_endproc
 3829              	.LFE156:
 3831              		.section	.text.RTC_TimeStampPinSelection,"ax",%progbits
 3832              		.align	2
 3833              		.global	RTC_TimeStampPinSelection
 3834              		.thumb
 3835              		.thumb_func
 3837              	RTC_TimeStampPinSelection:
 3838              	.LFB157:
2346:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2347:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2348:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Selects the RTC TimeStamp Pin.
2349:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_TimeStampPin: specifies the RTC TimeStamp Pin.
2350:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
2351:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_TimeStampPin_PC13: PC13 is selected as RTC TimeStamp Pin.
2352:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_TimeStampPin_PI8: PI8 is selected as RTC TimeStamp Pin.    
2353:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
2354:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2355:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_TimeStampPinSelection(uint32_t RTC_TimeStampPin)
2356:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 3839              		.loc 1 2356 0
 3840              		.cfi_startproc
 3841              		@ args = 0, pretend = 0, frame = 8
 3842              		@ frame_needed = 1, uses_anonymous_args = 0
 3843              		@ link register save eliminated.
 3844 0000 80B4     		push	{r7}
 3845              	.LCFI137:
 3846              		.cfi_def_cfa_offset 4
 3847 0002 83B0     		sub	sp, sp, #12
 3848              	.LCFI138:
 3849              		.cfi_def_cfa_offset 16
 3850 0004 00AF     		add	r7, sp, #0
 3851              		.cfi_offset 7, -4
 3852              	.LCFI139:
 3853              		.cfi_def_cfa_register 7
 3854 0006 7860     		str	r0, [r7, #4]
2357:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2358:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));
2359:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2360:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_TSINSEL);
 3855              		.loc 1 2360 0
 3856 0008 084B     		ldr	r3, .L228
 3857 000a 084A     		ldr	r2, .L228
 3858 000c 126C     		ldr	r2, [r2, #64]
 3859 000e 22F40032 		bic	r2, r2, #131072
 3860 0012 1A64     		str	r2, [r3, #64]
2361:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->TAFCR |= (uint32_t)(RTC_TimeStampPin);  
 3861              		.loc 1 2361 0
 3862 0014 054B     		ldr	r3, .L228
 3863 0016 054A     		ldr	r2, .L228
 3864 0018 116C     		ldr	r1, [r2, #64]
 3865 001a 7A68     		ldr	r2, [r7, #4]
 3866 001c 41EA0202 		orr	r2, r1, r2
 3867 0020 1A64     		str	r2, [r3, #64]
2362:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 3868              		.loc 1 2362 0
 3869 0022 07F10C07 		add	r7, r7, #12
 3870 0026 BD46     		mov	sp, r7
 3871 0028 80BC     		pop	{r7}
 3872 002a 7047     		bx	lr
 3873              	.L229:
 3874              		.align	2
 3875              	.L228:
 3876 002c 00280040 		.word	1073752064
 3877              		.cfi_endproc
 3878              	.LFE157:
 3880              		.section	.text.RTC_OutputTypeConfig,"ax",%progbits
 3881              		.align	2
 3882              		.global	RTC_OutputTypeConfig
 3883              		.thumb
 3884              		.thumb_func
 3886              	RTC_OutputTypeConfig:
 3887              	.LFB158:
2363:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2364:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2365:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Configures the RTC Output Pin mode. 
2366:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_OutputType: specifies the RTC Output (PC13) pin mode.
2367:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
2368:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_OutputType_OpenDrain: RTC Output (PC13) is configured in 
2369:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                    Open Drain mode.
2370:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_OutputType_PushPull:  RTC Output (PC13) is configured in 
2371:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                    Push Pull mode.    
2372:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
2373:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2374:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_OutputTypeConfig(uint32_t RTC_OutputType)
2375:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 3888              		.loc 1 2375 0
 3889              		.cfi_startproc
 3890              		@ args = 0, pretend = 0, frame = 8
 3891              		@ frame_needed = 1, uses_anonymous_args = 0
 3892              		@ link register save eliminated.
 3893 0000 80B4     		push	{r7}
 3894              	.LCFI140:
 3895              		.cfi_def_cfa_offset 4
 3896 0002 83B0     		sub	sp, sp, #12
 3897              	.LCFI141:
 3898              		.cfi_def_cfa_offset 16
 3899 0004 00AF     		add	r7, sp, #0
 3900              		.cfi_offset 7, -4
 3901              	.LCFI142:
 3902              		.cfi_def_cfa_register 7
 3903 0006 7860     		str	r0, [r7, #4]
2376:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2377:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_OUTPUT_TYPE(RTC_OutputType));
2378:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2379:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_ALARMOUTTYPE);
 3904              		.loc 1 2379 0
 3905 0008 084B     		ldr	r3, .L231
 3906 000a 084A     		ldr	r2, .L231
 3907 000c 126C     		ldr	r2, [r2, #64]
 3908 000e 22F48022 		bic	r2, r2, #262144
 3909 0012 1A64     		str	r2, [r3, #64]
2380:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->TAFCR |= (uint32_t)(RTC_OutputType);  
 3910              		.loc 1 2380 0
 3911 0014 054B     		ldr	r3, .L231
 3912 0016 054A     		ldr	r2, .L231
 3913 0018 116C     		ldr	r1, [r2, #64]
 3914 001a 7A68     		ldr	r2, [r7, #4]
 3915 001c 41EA0202 		orr	r2, r1, r2
 3916 0020 1A64     		str	r2, [r3, #64]
2381:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 3917              		.loc 1 2381 0
 3918 0022 07F10C07 		add	r7, r7, #12
 3919 0026 BD46     		mov	sp, r7
 3920 0028 80BC     		pop	{r7}
 3921 002a 7047     		bx	lr
 3922              	.L232:
 3923              		.align	2
 3924              	.L231:
 3925 002c 00280040 		.word	1073752064
 3926              		.cfi_endproc
 3927              	.LFE158:
 3929              		.section	.text.RTC_SynchroShiftConfig,"ax",%progbits
 3930              		.align	2
 3931              		.global	RTC_SynchroShiftConfig
 3932              		.thumb
 3933              		.thumb_func
 3935              	RTC_SynchroShiftConfig:
 3936              	.LFB159:
2382:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2383:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2384:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @}
2385:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2386:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2387:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group12 Shift control synchronisation functions
2388:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *  @brief   Shift control synchronisation functions 
2389:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *
2390:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @verbatim   
2391:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================
2392:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                    Shift control synchronisation functions
2393:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================  
2394:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2395:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @endverbatim
2396:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @{
2397:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2398:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2399:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2400:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Configures the Synchronization Shift Control Settings.
2401:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   When REFCKON is set, firmware must not write to Shift control register 
2402:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_ShiftAdd1S : Select to add or not 1 second to the time Calendar.
2403:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *   This parameter can be one of the following values :
2404:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_ShiftAdd1S_Set  : Add one second to the clock calendar. 
2405:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_ShiftAdd1S_Reset: No effect.
2406:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_ShiftSubFS: Select the number of Second Fractions to Substitute.
2407:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         This parameter can be one any value from 0 to 0x7FFF.
2408:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
2409:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC Shift registers are configured
2410:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - ERROR: RTC Shift registers are not configured
2411:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** */
2412:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** ErrorStatus RTC_SynchroShiftConfig(uint32_t RTC_ShiftAdd1S, uint32_t RTC_ShiftSubFS)
2413:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 3937              		.loc 1 2413 0
 3938              		.cfi_startproc
 3939              		@ args = 0, pretend = 0, frame = 16
 3940              		@ frame_needed = 1, uses_anonymous_args = 0
 3941 0000 80B5     		push	{r7, lr}
 3942              	.LCFI143:
 3943              		.cfi_def_cfa_offset 8
 3944 0002 84B0     		sub	sp, sp, #16
 3945              	.LCFI144:
 3946              		.cfi_def_cfa_offset 24
 3947 0004 00AF     		add	r7, sp, #0
 3948              		.cfi_offset 14, -4
 3949              		.cfi_offset 7, -8
 3950              	.LCFI145:
 3951              		.cfi_def_cfa_register 7
 3952 0006 7860     		str	r0, [r7, #4]
 3953 0008 3960     		str	r1, [r7, #0]
2414:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 3954              		.loc 1 2414 0
 3955 000a 4FF00003 		mov	r3, #0
 3956 000e FB73     		strb	r3, [r7, #15]
2415:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t shpfcount = 0;
 3957              		.loc 1 2415 0
 3958 0010 4FF00003 		mov	r3, #0
 3959 0014 BB60     		str	r3, [r7, #8]
2416:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2417:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2418:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_SHIFT_ADD1S(RTC_ShiftAdd1S));
2419:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_SHIFT_SUBFS(RTC_ShiftSubFS));
2420:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2421:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
2422:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 3960              		.loc 1 2422 0
 3961 0016 264B     		ldr	r3, .L241
 3962 0018 4FF0CA02 		mov	r2, #202
 3963 001c 5A62     		str	r2, [r3, #36]
2423:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 3964              		.loc 1 2423 0
 3965 001e 244B     		ldr	r3, .L241
 3966 0020 4FF05302 		mov	r2, #83
 3967 0024 5A62     		str	r2, [r3, #36]
2424:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2425:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check if a Shift is pending*/
2426:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if ((RTC->ISR & RTC_ISR_SHPF) != RESET)
 3968              		.loc 1 2426 0
 3969 0026 224B     		ldr	r3, .L241
 3970 0028 DB68     		ldr	r3, [r3, #12]
 3971 002a 03F00803 		and	r3, r3, #8
 3972 002e 002B     		cmp	r3, #0
 3973 0030 0ED0     		beq	.L234
2427:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2428:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Wait until the shift is completed*/
2429:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     while (((RTC->ISR & RTC_ISR_SHPF) != RESET) && (shpfcount != SHPF_TIMEOUT))
 3974              		.loc 1 2429 0
 3975 0032 03E0     		b	.L235
 3976              	.L236:
2430:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
2431:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       shpfcount++;
 3977              		.loc 1 2431 0
 3978 0034 BB68     		ldr	r3, [r7, #8]
 3979 0036 03F10103 		add	r3, r3, #1
 3980 003a BB60     		str	r3, [r7, #8]
 3981              	.L235:
2429:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     while (((RTC->ISR & RTC_ISR_SHPF) != RESET) && (shpfcount != SHPF_TIMEOUT))
 3982              		.loc 1 2429 0 discriminator 1
 3983 003c 1C4B     		ldr	r3, .L241
 3984 003e DB68     		ldr	r3, [r3, #12]
 3985 0040 03F00803 		and	r3, r3, #8
 3986 0044 002B     		cmp	r3, #0
 3987 0046 03D0     		beq	.L234
2429:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     while (((RTC->ISR & RTC_ISR_SHPF) != RESET) && (shpfcount != SHPF_TIMEOUT))
 3988              		.loc 1 2429 0 is_stmt 0 discriminator 2
 3989 0048 BB68     		ldr	r3, [r7, #8]
 3990 004a B3F5805F 		cmp	r3, #4096
 3991 004e F1D1     		bne	.L236
 3992              	.L234:
2432:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
2433:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
2434:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2435:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check if the Shift pending is completed or if there is no Shift operation at all*/
2436:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if ((RTC->ISR & RTC_ISR_SHPF) == RESET)
 3993              		.loc 1 2436 0 is_stmt 1
 3994 0050 174B     		ldr	r3, .L241
 3995 0052 DB68     		ldr	r3, [r3, #12]
 3996 0054 03F00803 		and	r3, r3, #8
 3997 0058 002B     		cmp	r3, #0
 3998 005a 1CD1     		bne	.L237
2437:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2438:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* check if the reference clock detection is disabled */
2439:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if((RTC->CR & RTC_CR_REFCKON) == RESET)
 3999              		.loc 1 2439 0
 4000 005c 144B     		ldr	r3, .L241
 4001 005e 9B68     		ldr	r3, [r3, #8]
 4002 0060 03F01003 		and	r3, r3, #16
 4003 0064 002B     		cmp	r3, #0
 4004 0066 12D1     		bne	.L238
2440:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
2441:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       /* Configure the Shift settings */
2442:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->SHIFTR = (uint32_t)(uint32_t)(RTC_ShiftSubFS) | (uint32_t)(RTC_ShiftAdd1S);
 4005              		.loc 1 2442 0
 4006 0068 114B     		ldr	r3, .L241
 4007 006a 3968     		ldr	r1, [r7, #0]
 4008 006c 7A68     		ldr	r2, [r7, #4]
 4009 006e 41EA0202 		orr	r2, r1, r2
 4010 0072 DA62     		str	r2, [r3, #44]
2443:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
2444:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       if(RTC_WaitForSynchro() == ERROR)
 4011              		.loc 1 2444 0
 4012 0074 FFF7FEFF 		bl	RTC_WaitForSynchro
 4013 0078 0346     		mov	r3, r0
 4014 007a 002B     		cmp	r3, #0
 4015 007c 03D1     		bne	.L239
2445:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       {
2446:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****         status = ERROR;
 4016              		.loc 1 2446 0
 4017 007e 4FF00003 		mov	r3, #0
 4018 0082 FB73     		strb	r3, [r7, #15]
 4019 0084 0AE0     		b	.L240
 4020              	.L239:
2447:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       }
2448:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       else
2449:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       {
2450:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****         status = SUCCESS;
 4021              		.loc 1 2450 0
 4022 0086 4FF00103 		mov	r3, #1
 4023 008a FB73     		strb	r3, [r7, #15]
 4024 008c 06E0     		b	.L240
 4025              	.L238:
2451:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       }
2452:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
2453:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     else
2454:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
2455:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       status = ERROR;
 4026              		.loc 1 2455 0
 4027 008e 4FF00003 		mov	r3, #0
 4028 0092 FB73     		strb	r3, [r7, #15]
 4029 0094 02E0     		b	.L240
 4030              	.L237:
2456:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
2457:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
2458:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
2459:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2460:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = ERROR;
 4031              		.loc 1 2460 0
 4032 0096 4FF00003 		mov	r3, #0
 4033 009a FB73     		strb	r3, [r7, #15]
 4034              	.L240:
2461:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
2462:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2463:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
2464:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF;
 4035              		.loc 1 2464 0
 4036 009c 044B     		ldr	r3, .L241
 4037 009e 4FF0FF02 		mov	r2, #255
 4038 00a2 5A62     		str	r2, [r3, #36]
2465:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2466:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return (ErrorStatus)(status);
 4039              		.loc 1 2466 0
 4040 00a4 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
2467:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 4041              		.loc 1 2467 0
 4042 00a6 1846     		mov	r0, r3
 4043 00a8 07F11007 		add	r7, r7, #16
 4044 00ac BD46     		mov	sp, r7
 4045 00ae 80BD     		pop	{r7, pc}
 4046              	.L242:
 4047              		.align	2
 4048              	.L241:
 4049 00b0 00280040 		.word	1073752064
 4050              		.cfi_endproc
 4051              	.LFE159:
 4053              		.section	.text.RTC_ITConfig,"ax",%progbits
 4054              		.align	2
 4055              		.global	RTC_ITConfig
 4056              		.thumb
 4057              		.thumb_func
 4059              	RTC_ITConfig:
 4060              	.LFB160:
2468:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2469:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2470:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @}
2471:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2472:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2473:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group13 Interrupts and flags management functions
2474:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *  @brief   Interrupts and flags management functions  
2475:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *
2476:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @verbatim   
2477:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================
2478:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                        Interrupts and flags management functions
2479:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================  
2480:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  All RTC interrupts are connected to the EXTI controller.
2481:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  
2482:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  - To enable the RTC Alarm interrupt, the following sequence is required:
2483:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    - Configure and enable the EXTI Line 17 in interrupt mode and select the rising 
2484:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      edge sensitivity using the EXTI_Init() function.
2485:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    - Configure and enable the RTC_Alarm IRQ channel in the NVIC using the NVIC_Init()
2486:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      function.
2487:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    - Configure the RTC to generate RTC alarms (Alarm A and/or Alarm B) using
2488:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      the RTC_SetAlarm() and RTC_AlarmCmd() functions.
2489:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2490:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  - To enable the RTC Wakeup interrupt, the following sequence is required:
2491:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    - Configure and enable the EXTI Line 22 in interrupt mode and select the rising 
2492:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      edge sensitivity using the EXTI_Init() function.
2493:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    - Configure and enable the RTC_WKUP IRQ channel in the NVIC using the NVIC_Init()
2494:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      function.
2495:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    - Configure the RTC to generate the RTC wakeup timer event using the 
2496:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      RTC_WakeUpClockConfig(), RTC_SetWakeUpCounter() and RTC_WakeUpCmd() functions.
2497:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2498:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  - To enable the RTC Tamper interrupt, the following sequence is required:
2499:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    - Configure and enable the EXTI Line 21 in interrupt mode and select the rising 
2500:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      edge sensitivity using the EXTI_Init() function.
2501:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    - Configure and enable the TAMP_STAMP IRQ channel in the NVIC using the NVIC_Init()
2502:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      function.
2503:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    - Configure the RTC to detect the RTC tamper event using the 
2504:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      RTC_TamperTriggerConfig() and RTC_TamperCmd() functions.
2505:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2506:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  - To enable the RTC TimeStamp interrupt, the following sequence is required:
2507:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    - Configure and enable the EXTI Line 21 in interrupt mode and select the rising 
2508:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      edge sensitivity using the EXTI_Init() function.
2509:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    - Configure and enable the TAMP_STAMP IRQ channel in the NVIC using the NVIC_Init()
2510:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      function.
2511:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    - Configure the RTC to detect the RTC time-stamp event using the 
2512:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      RTC_TimeStampCmd() functions.
2513:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2514:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @endverbatim
2515:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @{
2516:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2517:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2518:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2519:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Enables or disables the specified RTC interrupts.
2520:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_IT: specifies the RTC interrupt sources to be enabled or disabled. 
2521:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be any combination of the following values:
2522:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_TS:  Time Stamp interrupt mask
2523:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_WUT:  WakeUp Timer interrupt mask
2524:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_ALRB:  Alarm B interrupt mask
2525:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_ALRA:  Alarm A interrupt mask
2526:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_TAMP: Tamper event interrupt mask
2527:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  NewState: new state of the specified RTC interrupts.
2528:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be: ENABLE or DISABLE.
2529:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
2530:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2531:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_ITConfig(uint32_t RTC_IT, FunctionalState NewState)
2532:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 4061              		.loc 1 2532 0
 4062              		.cfi_startproc
 4063              		@ args = 0, pretend = 0, frame = 8
 4064              		@ frame_needed = 1, uses_anonymous_args = 0
 4065              		@ link register save eliminated.
 4066 0000 80B4     		push	{r7}
 4067              	.LCFI146:
 4068              		.cfi_def_cfa_offset 4
 4069 0002 83B0     		sub	sp, sp, #12
 4070              	.LCFI147:
 4071              		.cfi_def_cfa_offset 16
 4072 0004 00AF     		add	r7, sp, #0
 4073              		.cfi_offset 7, -4
 4074              	.LCFI148:
 4075              		.cfi_def_cfa_register 7
 4076 0006 7860     		str	r0, [r7, #4]
 4077 0008 0B46     		mov	r3, r1
 4078 000a FB70     		strb	r3, [r7, #3]
2533:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2534:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_CONFIG_IT(RTC_IT));
2535:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
2536:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2537:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
2538:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 4079              		.loc 1 2538 0
 4080 000c 1E4B     		ldr	r3, .L246
 4081 000e 4FF0CA02 		mov	r2, #202
 4082 0012 5A62     		str	r2, [r3, #36]
2539:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 4083              		.loc 1 2539 0
 4084 0014 1C4B     		ldr	r3, .L246
 4085 0016 4FF05302 		mov	r2, #83
 4086 001a 5A62     		str	r2, [r3, #36]
2540:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2541:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (NewState != DISABLE)
 4087              		.loc 1 2541 0
 4088 001c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 4089 001e 002B     		cmp	r3, #0
 4090 0020 12D0     		beq	.L244
2542:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2543:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Configure the Interrupts in the RTC_CR register */
2544:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CR |= (uint32_t)(RTC_IT & ~RTC_TAFCR_TAMPIE);
 4091              		.loc 1 2544 0
 4092 0022 194B     		ldr	r3, .L246
 4093 0024 184A     		ldr	r2, .L246
 4094 0026 9168     		ldr	r1, [r2, #8]
 4095 0028 7A68     		ldr	r2, [r7, #4]
 4096 002a 22F00402 		bic	r2, r2, #4
 4097 002e 41EA0202 		orr	r2, r1, r2
 4098 0032 9A60     		str	r2, [r3, #8]
2545:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Configure the Tamper Interrupt in the RTC_TAFCR */
2546:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->TAFCR |= (uint32_t)(RTC_IT & RTC_TAFCR_TAMPIE);
 4099              		.loc 1 2546 0
 4100 0034 144B     		ldr	r3, .L246
 4101 0036 144A     		ldr	r2, .L246
 4102 0038 116C     		ldr	r1, [r2, #64]
 4103 003a 7A68     		ldr	r2, [r7, #4]
 4104 003c 02F00402 		and	r2, r2, #4
 4105 0040 41EA0202 		orr	r2, r1, r2
 4106 0044 1A64     		str	r2, [r3, #64]
 4107 0046 15E0     		b	.L245
 4108              	.L244:
2547:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
2548:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
2549:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2550:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Configure the Interrupts in the RTC_CR register */
2551:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CR &= (uint32_t)~(RTC_IT & (uint32_t)~RTC_TAFCR_TAMPIE);
 4109              		.loc 1 2551 0
 4110 0048 0F4B     		ldr	r3, .L246
 4111 004a 0F4A     		ldr	r2, .L246
 4112 004c 9168     		ldr	r1, [r2, #8]
 4113 004e 7A68     		ldr	r2, [r7, #4]
 4114 0050 22F00402 		bic	r2, r2, #4
 4115 0054 6FEA0202 		mvn	r2, r2
 4116 0058 01EA0202 		and	r2, r1, r2
 4117 005c 9A60     		str	r2, [r3, #8]
2552:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Configure the Tamper Interrupt in the RTC_TAFCR */
2553:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->TAFCR &= (uint32_t)~(RTC_IT & RTC_TAFCR_TAMPIE);
 4118              		.loc 1 2553 0
 4119 005e 0A4B     		ldr	r3, .L246
 4120 0060 094A     		ldr	r2, .L246
 4121 0062 116C     		ldr	r1, [r2, #64]
 4122 0064 7A68     		ldr	r2, [r7, #4]
 4123 0066 02F00402 		and	r2, r2, #4
 4124 006a 6FEA0202 		mvn	r2, r2
 4125 006e 01EA0202 		and	r2, r1, r2
 4126 0072 1A64     		str	r2, [r3, #64]
 4127              	.L245:
2554:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
2555:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
2556:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 4128              		.loc 1 2556 0
 4129 0074 044B     		ldr	r3, .L246
 4130 0076 4FF0FF02 		mov	r2, #255
 4131 007a 5A62     		str	r2, [r3, #36]
2557:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 4132              		.loc 1 2557 0
 4133 007c 07F10C07 		add	r7, r7, #12
 4134 0080 BD46     		mov	sp, r7
 4135 0082 80BC     		pop	{r7}
 4136 0084 7047     		bx	lr
 4137              	.L247:
 4138 0086 00BF     		.align	2
 4139              	.L246:
 4140 0088 00280040 		.word	1073752064
 4141              		.cfi_endproc
 4142              	.LFE160:
 4144              		.section	.text.RTC_GetFlagStatus,"ax",%progbits
 4145              		.align	2
 4146              		.global	RTC_GetFlagStatus
 4147              		.thumb
 4148              		.thumb_func
 4150              	RTC_GetFlagStatus:
 4151              	.LFB161:
2558:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2559:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2560:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Checks whether the specified RTC flag is set or not.
2561:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_FLAG: specifies the flag to check.
2562:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
2563:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_TAMP1F: Tamper 1 event flag
2564:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_TSOVF: Time Stamp OverFlow flag
2565:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_TSF: Time Stamp event flag
2566:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_WUTF: WakeUp Timer flag
2567:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_ALRBF: Alarm B flag
2568:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_ALRAF: Alarm A flag
2569:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_INITF: Initialization mode flag
2570:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_RSF: Registers Synchronized flag
2571:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_INITS: Registers Configured flag
2572:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_WUTWF: WakeUp Timer Write flag
2573:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_ALRBWF: Alarm B Write flag
2574:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_ALRAWF: Alarm A write flag
2575:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval The new state of RTC_FLAG (SET or RESET).
2576:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2577:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** FlagStatus RTC_GetFlagStatus(uint32_t RTC_FLAG)
2578:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 4152              		.loc 1 2578 0
 4153              		.cfi_startproc
 4154              		@ args = 0, pretend = 0, frame = 16
 4155              		@ frame_needed = 1, uses_anonymous_args = 0
 4156              		@ link register save eliminated.
 4157 0000 80B4     		push	{r7}
 4158              	.LCFI149:
 4159              		.cfi_def_cfa_offset 4
 4160 0002 85B0     		sub	sp, sp, #20
 4161              	.LCFI150:
 4162              		.cfi_def_cfa_offset 24
 4163 0004 00AF     		add	r7, sp, #0
 4164              		.cfi_offset 7, -4
 4165              	.LCFI151:
 4166              		.cfi_def_cfa_register 7
 4167 0006 7860     		str	r0, [r7, #4]
2579:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   FlagStatus bitstatus = RESET;
 4168              		.loc 1 2579 0
 4169 0008 4FF00003 		mov	r3, #0
 4170 000c FB73     		strb	r3, [r7, #15]
2580:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 4171              		.loc 1 2580 0
 4172 000e 4FF00003 		mov	r3, #0
 4173 0012 BB60     		str	r3, [r7, #8]
2581:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2582:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2583:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_GET_FLAG(RTC_FLAG));
2584:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2585:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Get all the flags */
2586:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmpreg = (uint32_t)(RTC->ISR & RTC_FLAGS_MASK);
 4174              		.loc 1 2586 0
 4175 0014 0D4B     		ldr	r3, .L251
 4176 0016 DA68     		ldr	r2, [r3, #12]
 4177 0018 43F67773 		movw	r3, #16247
 4178 001c 02EA0303 		and	r3, r2, r3
 4179 0020 BB60     		str	r3, [r7, #8]
2587:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2588:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Return the status of the flag */
2589:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if ((tmpreg & RTC_FLAG) != (uint32_t)RESET)
 4180              		.loc 1 2589 0
 4181 0022 BA68     		ldr	r2, [r7, #8]
 4182 0024 7B68     		ldr	r3, [r7, #4]
 4183 0026 02EA0303 		and	r3, r2, r3
 4184 002a 002B     		cmp	r3, #0
 4185 002c 03D0     		beq	.L249
2590:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2591:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     bitstatus = SET;
 4186              		.loc 1 2591 0
 4187 002e 4FF00103 		mov	r3, #1
 4188 0032 FB73     		strb	r3, [r7, #15]
 4189 0034 02E0     		b	.L250
 4190              	.L249:
2592:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
2593:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
2594:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2595:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     bitstatus = RESET;
 4191              		.loc 1 2595 0
 4192 0036 4FF00003 		mov	r3, #0
 4193 003a FB73     		strb	r3, [r7, #15]
 4194              	.L250:
2596:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
2597:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return bitstatus;
 4195              		.loc 1 2597 0
 4196 003c FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
2598:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 4197              		.loc 1 2598 0
 4198 003e 1846     		mov	r0, r3
 4199 0040 07F11407 		add	r7, r7, #20
 4200 0044 BD46     		mov	sp, r7
 4201 0046 80BC     		pop	{r7}
 4202 0048 7047     		bx	lr
 4203              	.L252:
 4204 004a 00BF     		.align	2
 4205              	.L251:
 4206 004c 00280040 		.word	1073752064
 4207              		.cfi_endproc
 4208              	.LFE161:
 4210              		.section	.text.RTC_ClearFlag,"ax",%progbits
 4211              		.align	2
 4212              		.global	RTC_ClearFlag
 4213              		.thumb
 4214              		.thumb_func
 4216              	RTC_ClearFlag:
 4217              	.LFB162:
2599:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2600:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2601:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Clears the RTC's pending flags.
2602:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_FLAG: specifies the RTC flag to clear.
2603:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be any combination of the following values:
2604:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_TAMP1F: Tamper 1 event flag
2605:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_TSOVF: Time Stamp Overflow flag 
2606:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_TSF: Time Stamp event flag
2607:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_WUTF: WakeUp Timer flag
2608:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_ALRBF: Alarm B flag
2609:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_ALRAF: Alarm A flag
2610:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_RSF: Registers Synchronized flag
2611:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
2612:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2613:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_ClearFlag(uint32_t RTC_FLAG)
2614:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 4218              		.loc 1 2614 0
 4219              		.cfi_startproc
 4220              		@ args = 0, pretend = 0, frame = 8
 4221              		@ frame_needed = 1, uses_anonymous_args = 0
 4222              		@ link register save eliminated.
 4223 0000 80B4     		push	{r7}
 4224              	.LCFI152:
 4225              		.cfi_def_cfa_offset 4
 4226 0002 83B0     		sub	sp, sp, #12
 4227              	.LCFI153:
 4228              		.cfi_def_cfa_offset 16
 4229 0004 00AF     		add	r7, sp, #0
 4230              		.cfi_offset 7, -4
 4231              	.LCFI154:
 4232              		.cfi_def_cfa_register 7
 4233 0006 7860     		str	r0, [r7, #4]
2615:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2616:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_CLEAR_FLAG(RTC_FLAG));
2617:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2618:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Clear the Flags in the RTC_ISR register */
2619:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->ISR = (uint32_t)((uint32_t)(~((RTC_FLAG | RTC_ISR_INIT)& 0x0000FFFF) | (uint32_t)(RTC->ISR &
 4234              		.loc 1 2619 0
 4235 0008 0A4A     		ldr	r2, .L254
 4236 000a 7B68     		ldr	r3, [r7, #4]
 4237 000c 4FEA0343 		lsl	r3, r3, #16
 4238 0010 4FEA1343 		lsr	r3, r3, #16
 4239 0014 43F08003 		orr	r3, r3, #128
 4240 0018 6FEA0301 		mvn	r1, r3
 4241 001c 054B     		ldr	r3, .L254
 4242 001e DB68     		ldr	r3, [r3, #12]
 4243 0020 03F08003 		and	r3, r3, #128
 4244 0024 41EA0303 		orr	r3, r1, r3
 4245 0028 D360     		str	r3, [r2, #12]
2620:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 4246              		.loc 1 2620 0
 4247 002a 07F10C07 		add	r7, r7, #12
 4248 002e BD46     		mov	sp, r7
 4249 0030 80BC     		pop	{r7}
 4250 0032 7047     		bx	lr
 4251              	.L255:
 4252              		.align	2
 4253              	.L254:
 4254 0034 00280040 		.word	1073752064
 4255              		.cfi_endproc
 4256              	.LFE162:
 4258              		.section	.text.RTC_GetITStatus,"ax",%progbits
 4259              		.align	2
 4260              		.global	RTC_GetITStatus
 4261              		.thumb
 4262              		.thumb_func
 4264              	RTC_GetITStatus:
 4265              	.LFB163:
2621:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2622:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2623:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Checks whether the specified RTC interrupt has occurred or not.
2624:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_IT: specifies the RTC interrupt source to check.
2625:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
2626:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_TS: Time Stamp interrupt 
2627:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_WUT: WakeUp Timer interrupt 
2628:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_ALRB: Alarm B interrupt 
2629:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_ALRA: Alarm A interrupt 
2630:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_TAMP1: Tamper 1 event interrupt 
2631:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval The new state of RTC_IT (SET or RESET).
2632:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2633:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** ITStatus RTC_GetITStatus(uint32_t RTC_IT)
2634:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 4266              		.loc 1 2634 0
 4267              		.cfi_startproc
 4268              		@ args = 0, pretend = 0, frame = 24
 4269              		@ frame_needed = 1, uses_anonymous_args = 0
 4270              		@ link register save eliminated.
 4271 0000 80B4     		push	{r7}
 4272              	.LCFI155:
 4273              		.cfi_def_cfa_offset 4
 4274 0002 87B0     		sub	sp, sp, #28
 4275              	.LCFI156:
 4276              		.cfi_def_cfa_offset 32
 4277 0004 00AF     		add	r7, sp, #0
 4278              		.cfi_offset 7, -4
 4279              	.LCFI157:
 4280              		.cfi_def_cfa_register 7
 4281 0006 7860     		str	r0, [r7, #4]
2635:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ITStatus bitstatus = RESET;
 4282              		.loc 1 2635 0
 4283 0008 4FF00003 		mov	r3, #0
 4284 000c FB75     		strb	r3, [r7, #23]
2636:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0, enablestatus = 0;
 4285              		.loc 1 2636 0
 4286 000e 4FF00003 		mov	r3, #0
 4287 0012 3B61     		str	r3, [r7, #16]
 4288 0014 4FF00003 		mov	r3, #0
 4289 0018 FB60     		str	r3, [r7, #12]
2637:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  
2638:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2639:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_GET_IT(RTC_IT));
2640:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2641:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Get the TAMPER Interrupt enable bit and pending bit */
2642:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmpreg = (uint32_t)(RTC->TAFCR & (RTC_TAFCR_TAMPIE));
 4290              		.loc 1 2642 0
 4291 001a 194B     		ldr	r3, .L259
 4292 001c 1B6C     		ldr	r3, [r3, #64]
 4293 001e 03F00403 		and	r3, r3, #4
 4294 0022 3B61     		str	r3, [r7, #16]
2643:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  
2644:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Get the Interrupt enable Status */
2645:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   enablestatus = (uint32_t)((RTC->CR & RTC_IT) | (tmpreg & (RTC_IT >> 15)));
 4295              		.loc 1 2645 0
 4296 0024 164B     		ldr	r3, .L259
 4297 0026 9A68     		ldr	r2, [r3, #8]
 4298 0028 7B68     		ldr	r3, [r7, #4]
 4299 002a 1A40     		ands	r2, r2, r3
 4300 002c 7B68     		ldr	r3, [r7, #4]
 4301 002e 4FEAD331 		lsr	r1, r3, #15
 4302 0032 3B69     		ldr	r3, [r7, #16]
 4303 0034 01EA0303 		and	r3, r1, r3
 4304 0038 42EA0303 		orr	r3, r2, r3
 4305 003c FB60     		str	r3, [r7, #12]
2646:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2647:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Get the Interrupt pending bit */
2648:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmpreg = (uint32_t)((RTC->ISR & (uint32_t)(RTC_IT >> 4)));
 4306              		.loc 1 2648 0
 4307 003e 104B     		ldr	r3, .L259
 4308 0040 DA68     		ldr	r2, [r3, #12]
 4309 0042 7B68     		ldr	r3, [r7, #4]
 4310 0044 4FEA1313 		lsr	r3, r3, #4
 4311 0048 02EA0303 		and	r3, r2, r3
 4312 004c 3B61     		str	r3, [r7, #16]
2649:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2650:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Get the status of the Interrupt */
2651:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if ((enablestatus != (uint32_t)RESET) && ((tmpreg & 0x0000FFFF) != (uint32_t)RESET))
 4313              		.loc 1 2651 0
 4314 004e FB68     		ldr	r3, [r7, #12]
 4315 0050 002B     		cmp	r3, #0
 4316 0052 0AD0     		beq	.L257
 4317              		.loc 1 2651 0 is_stmt 0 discriminator 1
 4318 0054 3B69     		ldr	r3, [r7, #16]
 4319 0056 4FEA0343 		lsl	r3, r3, #16
 4320 005a 4FEA1343 		lsr	r3, r3, #16
 4321 005e 002B     		cmp	r3, #0
 4322 0060 03D0     		beq	.L257
2652:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2653:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     bitstatus = SET;
 4323              		.loc 1 2653 0 is_stmt 1
 4324 0062 4FF00103 		mov	r3, #1
 4325 0066 FB75     		strb	r3, [r7, #23]
 4326 0068 02E0     		b	.L258
 4327              	.L257:
2654:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
2655:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
2656:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2657:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     bitstatus = RESET;
 4328              		.loc 1 2657 0
 4329 006a 4FF00003 		mov	r3, #0
 4330 006e FB75     		strb	r3, [r7, #23]
 4331              	.L258:
2658:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
2659:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return bitstatus;
 4332              		.loc 1 2659 0
 4333 0070 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
2660:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 4334              		.loc 1 2660 0
 4335 0072 1846     		mov	r0, r3
 4336 0074 07F11C07 		add	r7, r7, #28
 4337 0078 BD46     		mov	sp, r7
 4338 007a 80BC     		pop	{r7}
 4339 007c 7047     		bx	lr
 4340              	.L260:
 4341 007e 00BF     		.align	2
 4342              	.L259:
 4343 0080 00280040 		.word	1073752064
 4344              		.cfi_endproc
 4345              	.LFE163:
 4347              		.section	.text.RTC_ClearITPendingBit,"ax",%progbits
 4348              		.align	2
 4349              		.global	RTC_ClearITPendingBit
 4350              		.thumb
 4351              		.thumb_func
 4353              	RTC_ClearITPendingBit:
 4354              	.LFB164:
2661:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2662:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2663:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Clears the RTC's interrupt pending bits.
2664:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_IT: specifies the RTC interrupt pending bit to clear.
2665:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be any combination of the following values:
2666:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_TS: Time Stamp interrupt 
2667:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_WUT: WakeUp Timer interrupt 
2668:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_ALRB: Alarm B interrupt 
2669:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_ALRA: Alarm A interrupt 
2670:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_TAMP1: Tamper 1 event interrupt 
2671:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
2672:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2673:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_ClearITPendingBit(uint32_t RTC_IT)
2674:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 4355              		.loc 1 2674 0
 4356              		.cfi_startproc
 4357              		@ args = 0, pretend = 0, frame = 16
 4358              		@ frame_needed = 1, uses_anonymous_args = 0
 4359              		@ link register save eliminated.
 4360 0000 80B4     		push	{r7}
 4361              	.LCFI158:
 4362              		.cfi_def_cfa_offset 4
 4363 0002 85B0     		sub	sp, sp, #20
 4364              	.LCFI159:
 4365              		.cfi_def_cfa_offset 24
 4366 0004 00AF     		add	r7, sp, #0
 4367              		.cfi_offset 7, -4
 4368              	.LCFI160:
 4369              		.cfi_def_cfa_register 7
 4370 0006 7860     		str	r0, [r7, #4]
2675:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 4371              		.loc 1 2675 0
 4372 0008 4FF00003 		mov	r3, #0
 4373 000c FB60     		str	r3, [r7, #12]
2676:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2677:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2678:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_CLEAR_IT(RTC_IT));
2679:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2680:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Get the RTC_ISR Interrupt pending bits mask */
2681:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmpreg = (uint32_t)(RTC_IT >> 4);
 4374              		.loc 1 2681 0
 4375 000e 7B68     		ldr	r3, [r7, #4]
 4376 0010 4FEA1313 		lsr	r3, r3, #4
 4377 0014 FB60     		str	r3, [r7, #12]
2682:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2683:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Clear the interrupt pending bits in the RTC_ISR register */
2684:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->ISR = (uint32_t)((uint32_t)(~((tmpreg | RTC_ISR_INIT)& 0x0000FFFF) | (uint32_t)(RTC->ISR & R
 4378              		.loc 1 2684 0
 4379 0016 0B4A     		ldr	r2, .L262
 4380 0018 FB68     		ldr	r3, [r7, #12]
 4381 001a 4FEA0343 		lsl	r3, r3, #16
 4382 001e 4FEA1343 		lsr	r3, r3, #16
 4383 0022 43F08003 		orr	r3, r3, #128
 4384 0026 6FEA0301 		mvn	r1, r3
 4385 002a 064B     		ldr	r3, .L262
 4386 002c DB68     		ldr	r3, [r3, #12]
 4387 002e 03F08003 		and	r3, r3, #128
 4388 0032 41EA0303 		orr	r3, r1, r3
 4389 0036 D360     		str	r3, [r2, #12]
2685:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 4390              		.loc 1 2685 0
 4391 0038 07F11407 		add	r7, r7, #20
 4392 003c BD46     		mov	sp, r7
 4393 003e 80BC     		pop	{r7}
 4394 0040 7047     		bx	lr
 4395              	.L263:
 4396 0042 00BF     		.align	2
 4397              	.L262:
 4398 0044 00280040 		.word	1073752064
 4399              		.cfi_endproc
 4400              	.LFE164:
 4402              		.section	.text.RTC_ByteToBcd2,"ax",%progbits
 4403              		.align	2
 4404              		.thumb
 4405              		.thumb_func
 4407              	RTC_ByteToBcd2:
 4408              	.LFB165:
2686:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2687:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2688:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @}
2689:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2690:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2691:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2692:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Converts a 2 digit decimal to BCD format.
2693:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  Value: Byte to be converted.
2694:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval Converted byte
2695:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2696:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** static uint8_t RTC_ByteToBcd2(uint8_t Value)
2697:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 4409              		.loc 1 2697 0
 4410              		.cfi_startproc
 4411              		@ args = 0, pretend = 0, frame = 16
 4412              		@ frame_needed = 1, uses_anonymous_args = 0
 4413              		@ link register save eliminated.
 4414 0000 80B4     		push	{r7}
 4415              	.LCFI161:
 4416              		.cfi_def_cfa_offset 4
 4417 0002 85B0     		sub	sp, sp, #20
 4418              	.LCFI162:
 4419              		.cfi_def_cfa_offset 24
 4420 0004 00AF     		add	r7, sp, #0
 4421              		.cfi_offset 7, -4
 4422              	.LCFI163:
 4423              		.cfi_def_cfa_register 7
 4424 0006 0346     		mov	r3, r0
 4425 0008 FB71     		strb	r3, [r7, #7]
2698:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint8_t bcdhigh = 0;
 4426              		.loc 1 2698 0
 4427 000a 4FF00003 		mov	r3, #0
 4428 000e FB73     		strb	r3, [r7, #15]
2699:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2700:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   while (Value >= 10)
 4429              		.loc 1 2700 0
 4430 0010 07E0     		b	.L265
 4431              	.L266:
2701:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2702:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     bcdhigh++;
 4432              		.loc 1 2702 0
 4433 0012 FB7B     		ldrb	r3, [r7, #15]
 4434 0014 03F10103 		add	r3, r3, #1
 4435 0018 FB73     		strb	r3, [r7, #15]
2703:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     Value -= 10;
 4436              		.loc 1 2703 0
 4437 001a FB79     		ldrb	r3, [r7, #7]
 4438 001c A3F10A03 		sub	r3, r3, #10
 4439 0020 FB71     		strb	r3, [r7, #7]
 4440              	.L265:
2700:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   while (Value >= 10)
 4441              		.loc 1 2700 0 discriminator 1
 4442 0022 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4443 0024 092B     		cmp	r3, #9
 4444 0026 F4D8     		bhi	.L266
2704:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
2705:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2706:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return  ((uint8_t)(bcdhigh << 4) | Value);
 4445              		.loc 1 2706 0
 4446 0028 FB7B     		ldrb	r3, [r7, #15]
 4447 002a 4FEA0313 		lsl	r3, r3, #4
 4448 002e DAB2     		uxtb	r2, r3
 4449 0030 FB79     		ldrb	r3, [r7, #7]
 4450 0032 42EA0303 		orr	r3, r2, r3
 4451 0036 DBB2     		uxtb	r3, r3
2707:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 4452              		.loc 1 2707 0
 4453 0038 1846     		mov	r0, r3
 4454 003a 07F11407 		add	r7, r7, #20
 4455 003e BD46     		mov	sp, r7
 4456 0040 80BC     		pop	{r7}
 4457 0042 7047     		bx	lr
 4458              		.cfi_endproc
 4459              	.LFE165:
 4461              		.section	.text.RTC_Bcd2ToByte,"ax",%progbits
 4462              		.align	2
 4463              		.thumb
 4464              		.thumb_func
 4466              	RTC_Bcd2ToByte:
 4467              	.LFB166:
2708:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2709:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2710:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Convert from 2 digit BCD to Binary.
2711:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  Value: BCD value to be converted.
2712:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval Converted word
2713:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2714:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** static uint8_t RTC_Bcd2ToByte(uint8_t Value)
2715:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 4468              		.loc 1 2715 0
 4469              		.cfi_startproc
 4470              		@ args = 0, pretend = 0, frame = 16
 4471              		@ frame_needed = 1, uses_anonymous_args = 0
 4472              		@ link register save eliminated.
 4473 0000 80B4     		push	{r7}
 4474              	.LCFI164:
 4475              		.cfi_def_cfa_offset 4
 4476 0002 85B0     		sub	sp, sp, #20
 4477              	.LCFI165:
 4478              		.cfi_def_cfa_offset 24
 4479 0004 00AF     		add	r7, sp, #0
 4480              		.cfi_offset 7, -4
 4481              	.LCFI166:
 4482              		.cfi_def_cfa_register 7
 4483 0006 0346     		mov	r3, r0
 4484 0008 FB71     		strb	r3, [r7, #7]
2716:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint8_t tmp = 0;
 4485              		.loc 1 2716 0
 4486 000a 4FF00003 		mov	r3, #0
 4487 000e FB73     		strb	r3, [r7, #15]
2717:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 4488              		.loc 1 2717 0
 4489 0010 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4490 0012 4FEA1313 		lsr	r3, r3, #4
 4491 0016 DBB2     		uxtb	r3, r3
 4492 0018 1A46     		mov	r2, r3
 4493 001a 4FEA8202 		lsl	r2, r2, #2
 4494 001e D318     		adds	r3, r2, r3
 4495 0020 4FEA4303 		lsl	r3, r3, #1
 4496 0024 FB73     		strb	r3, [r7, #15]
2718:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return (tmp + (Value & (uint8_t)0x0F));
 4497              		.loc 1 2718 0
 4498 0026 FB79     		ldrb	r3, [r7, #7]
 4499 0028 03F00F03 		and	r3, r3, #15
 4500 002c DAB2     		uxtb	r2, r3
 4501 002e FB7B     		ldrb	r3, [r7, #15]
 4502 0030 D318     		adds	r3, r2, r3
 4503 0032 DBB2     		uxtb	r3, r3
2719:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 4504              		.loc 1 2719 0
 4505 0034 1846     		mov	r0, r3
 4506 0036 07F11407 		add	r7, r7, #20
 4507 003a BD46     		mov	sp, r7
 4508 003c 80BC     		pop	{r7}
 4509 003e 7047     		bx	lr
 4510              		.cfi_endproc
 4511              	.LFE166:
 4513              		.text
 4514              	.Letext0:
DEFINED SYMBOLS
                            *ABS*:00000000 stm32f4xx_rtc.c
     /tmp/ccSUwPBB.s:25     .text.RTC_DeInit:00000000 $t
     /tmp/ccSUwPBB.s:30     .text.RTC_DeInit:00000000 RTC_DeInit
     /tmp/ccSUwPBB.s:388    .text.RTC_EnterInitMode:00000000 RTC_EnterInitMode
     /tmp/ccSUwPBB.s:520    .text.RTC_WaitForSynchro:00000000 RTC_WaitForSynchro
     /tmp/ccSUwPBB.s:180    .text.RTC_DeInit:000000f8 $d
     /tmp/ccSUwPBB.s:186    .text.RTC_Init:00000000 $t
     /tmp/ccSUwPBB.s:191    .text.RTC_Init:00000000 RTC_Init
     /tmp/ccSUwPBB.s:483    .text.RTC_ExitInitMode:00000000 RTC_ExitInitMode
     /tmp/ccSUwPBB.s:278    .text.RTC_Init:00000088 $d
     /tmp/ccSUwPBB.s:283    .text.RTC_StructInit:00000000 $t
     /tmp/ccSUwPBB.s:288    .text.RTC_StructInit:00000000 RTC_StructInit
     /tmp/ccSUwPBB.s:327    .text.RTC_WriteProtectionCmd:00000000 $t
     /tmp/ccSUwPBB.s:332    .text.RTC_WriteProtectionCmd:00000000 RTC_WriteProtectionCmd
     /tmp/ccSUwPBB.s:378    .text.RTC_WriteProtectionCmd:00000034 $d
     /tmp/ccSUwPBB.s:383    .text.RTC_EnterInitMode:00000000 $t
     /tmp/ccSUwPBB.s:473    .text.RTC_EnterInitMode:0000007c $d
     /tmp/ccSUwPBB.s:478    .text.RTC_ExitInitMode:00000000 $t
     /tmp/ccSUwPBB.s:510    .text.RTC_ExitInitMode:00000018 $d
     /tmp/ccSUwPBB.s:515    .text.RTC_WaitForSynchro:00000000 $t
     /tmp/ccSUwPBB.s:608    .text.RTC_WaitForSynchro:00000084 $d
     /tmp/ccSUwPBB.s:613    .text.RTC_RefClockCmd:00000000 $t
     /tmp/ccSUwPBB.s:618    .text.RTC_RefClockCmd:00000000 RTC_RefClockCmd
     /tmp/ccSUwPBB.s:697    .text.RTC_RefClockCmd:00000070 $d
     /tmp/ccSUwPBB.s:702    .text.RTC_BypassShadowCmd:00000000 $t
     /tmp/ccSUwPBB.s:707    .text.RTC_BypassShadowCmd:00000000 RTC_BypassShadowCmd
     /tmp/ccSUwPBB.s:765    .text.RTC_BypassShadowCmd:0000004c $d
     /tmp/ccSUwPBB.s:770    .text.RTC_SetTime:00000000 $t
     /tmp/ccSUwPBB.s:775    .text.RTC_SetTime:00000000 RTC_SetTime
     /tmp/ccSUwPBB.s:4466   .text.RTC_Bcd2ToByte:00000000 RTC_Bcd2ToByte
     /tmp/ccSUwPBB.s:4407   .text.RTC_ByteToBcd2:00000000 RTC_ByteToBcd2
     /tmp/ccSUwPBB.s:951    .text.RTC_SetTime:00000124 $d
     /tmp/ccSUwPBB.s:957    .text.RTC_TimeStructInit:00000000 $t
     /tmp/ccSUwPBB.s:962    .text.RTC_TimeStructInit:00000000 RTC_TimeStructInit
     /tmp/ccSUwPBB.s:1005   .text.RTC_GetTime:00000000 $t
     /tmp/ccSUwPBB.s:1010   .text.RTC_GetTime:00000000 RTC_GetTime
     /tmp/ccSUwPBB.s:1105   .text.RTC_GetTime:000000a0 $d
     /tmp/ccSUwPBB.s:1111   .text.RTC_GetSubSecond:00000000 $t
     /tmp/ccSUwPBB.s:1116   .text.RTC_GetSubSecond:00000000 RTC_GetSubSecond
     /tmp/ccSUwPBB.s:1154   .text.RTC_GetSubSecond:00000024 $d
     /tmp/ccSUwPBB.s:1159   .text.RTC_SetDate:00000000 $t
     /tmp/ccSUwPBB.s:1164   .text.RTC_SetDate:00000000 RTC_SetDate
     /tmp/ccSUwPBB.s:1343   .text.RTC_SetDate:0000012c $d
     /tmp/ccSUwPBB.s:1348   .text.RTC_DateStructInit:00000000 $t
     /tmp/ccSUwPBB.s:1353   .text.RTC_DateStructInit:00000000 RTC_DateStructInit
     /tmp/ccSUwPBB.s:1396   .text.RTC_GetDate:00000000 $t
     /tmp/ccSUwPBB.s:1401   .text.RTC_GetDate:00000000 RTC_GetDate
     /tmp/ccSUwPBB.s:1501   .text.RTC_GetDate:000000a8 $d
     /tmp/ccSUwPBB.s:1506   .text.RTC_SetAlarm:00000000 $t
     /tmp/ccSUwPBB.s:1511   .text.RTC_SetAlarm:00000000 RTC_SetAlarm
     /tmp/ccSUwPBB.s:1722   .text.RTC_SetAlarm:00000154 $d
     /tmp/ccSUwPBB.s:1727   .text.RTC_AlarmStructInit:00000000 $t
     /tmp/ccSUwPBB.s:1732   .text.RTC_AlarmStructInit:00000000 RTC_AlarmStructInit
     /tmp/ccSUwPBB.s:1787   .text.RTC_GetAlarm:00000000 $t
     /tmp/ccSUwPBB.s:1792   .text.RTC_GetAlarm:00000000 RTC_GetAlarm
     /tmp/ccSUwPBB.s:1923   .text.RTC_GetAlarm:000000e0 $d
     /tmp/ccSUwPBB.s:1928   .text.RTC_AlarmCmd:00000000 $t
     /tmp/ccSUwPBB.s:1933   .text.RTC_AlarmCmd:00000000 RTC_AlarmCmd
     /tmp/ccSUwPBB.s:2046   .text.RTC_AlarmCmd:000000b8 $d
     /tmp/ccSUwPBB.s:2051   .text.RTC_AlarmSubSecondConfig:00000000 $t
     /tmp/ccSUwPBB.s:2056   .text.RTC_AlarmSubSecondConfig:00000000 RTC_AlarmSubSecondConfig
     /tmp/ccSUwPBB.s:2119   .text.RTC_AlarmSubSecondConfig:00000054 $d
     /tmp/ccSUwPBB.s:2124   .text.RTC_GetAlarmSubSecond:00000000 $t
     /tmp/ccSUwPBB.s:2129   .text.RTC_GetAlarmSubSecond:00000000 RTC_GetAlarmSubSecond
     /tmp/ccSUwPBB.s:2180   .text.RTC_GetAlarmSubSecond:00000044 $d
     /tmp/ccSUwPBB.s:2185   .text.RTC_WakeUpClockConfig:00000000 $t
     /tmp/ccSUwPBB.s:2190   .text.RTC_WakeUpClockConfig:00000000 RTC_WakeUpClockConfig
     /tmp/ccSUwPBB.s:2241   .text.RTC_WakeUpClockConfig:00000044 $d
     /tmp/ccSUwPBB.s:2246   .text.RTC_SetWakeUpCounter:00000000 $t
     /tmp/ccSUwPBB.s:2251   .text.RTC_SetWakeUpCounter:00000000 RTC_SetWakeUpCounter
     /tmp/ccSUwPBB.s:2293   .text.RTC_SetWakeUpCounter:00000030 $d
     /tmp/ccSUwPBB.s:2298   .text.RTC_GetWakeUpCounter:00000000 $t
     /tmp/ccSUwPBB.s:2303   .text.RTC_GetWakeUpCounter:00000000 RTC_GetWakeUpCounter
     /tmp/ccSUwPBB.s:2330   .text.RTC_GetWakeUpCounter:00000018 $d
     /tmp/ccSUwPBB.s:2335   .text.RTC_WakeUpCmd:00000000 $t
     /tmp/ccSUwPBB.s:2340   .text.RTC_WakeUpCmd:00000000 RTC_WakeUpCmd
     /tmp/ccSUwPBB.s:2445   .text.RTC_WakeUpCmd:000000a4 $d
     /tmp/ccSUwPBB.s:2450   .text.RTC_DayLightSavingConfig:00000000 $t
     /tmp/ccSUwPBB.s:2455   .text.RTC_DayLightSavingConfig:00000000 RTC_DayLightSavingConfig
     /tmp/ccSUwPBB.s:2509   .text.RTC_DayLightSavingConfig:0000004c $d
     /tmp/ccSUwPBB.s:2514   .text.RTC_GetStoreOperation:00000000 $t
     /tmp/ccSUwPBB.s:2519   .text.RTC_GetStoreOperation:00000000 RTC_GetStoreOperation
     /tmp/ccSUwPBB.s:2545   .text.RTC_GetStoreOperation:00000014 $d
     /tmp/ccSUwPBB.s:2550   .text.RTC_OutputConfig:00000000 $t
     /tmp/ccSUwPBB.s:2555   .text.RTC_OutputConfig:00000000 RTC_OutputConfig
     /tmp/ccSUwPBB.s:2609   .text.RTC_OutputConfig:0000004c $d
     /tmp/ccSUwPBB.s:2614   .text.RTC_CoarseCalibConfig:00000000 $t
     /tmp/ccSUwPBB.s:2619   .text.RTC_CoarseCalibConfig:00000000 RTC_CoarseCalibConfig
     /tmp/ccSUwPBB.s:2685   .text.RTC_CoarseCalibConfig:0000005c $d
     /tmp/ccSUwPBB.s:2690   .text.RTC_CoarseCalibCmd:00000000 $t
     /tmp/ccSUwPBB.s:2695   .text.RTC_CoarseCalibCmd:00000000 RTC_CoarseCalibCmd
     /tmp/ccSUwPBB.s:2774   .text.RTC_CoarseCalibCmd:00000070 $d
     /tmp/ccSUwPBB.s:2779   .text.RTC_CalibOutputCmd:00000000 $t
     /tmp/ccSUwPBB.s:2784   .text.RTC_CalibOutputCmd:00000000 RTC_CalibOutputCmd
     /tmp/ccSUwPBB.s:2842   .text.RTC_CalibOutputCmd:0000004c $d
     /tmp/ccSUwPBB.s:2847   .text.RTC_CalibOutputConfig:00000000 $t
     /tmp/ccSUwPBB.s:2852   .text.RTC_CalibOutputConfig:00000000 RTC_CalibOutputConfig
     /tmp/ccSUwPBB.s:2903   .text.RTC_CalibOutputConfig:00000044 $d
     /tmp/ccSUwPBB.s:2908   .text.RTC_SmoothCalibConfig:00000000 $t
     /tmp/ccSUwPBB.s:2913   .text.RTC_SmoothCalibConfig:00000000 RTC_SmoothCalibConfig
     /tmp/ccSUwPBB.s:3010   .text.RTC_SmoothCalibConfig:00000094 $d
     /tmp/ccSUwPBB.s:3015   .text.RTC_TimeStampCmd:00000000 $t
     /tmp/ccSUwPBB.s:3020   .text.RTC_TimeStampCmd:00000000 RTC_TimeStampCmd
     /tmp/ccSUwPBB.s:3091   .text.RTC_TimeStampCmd:00000068 $d
     /tmp/ccSUwPBB.s:3096   .text.RTC_GetTimeStamp:00000000 $t
     /tmp/ccSUwPBB.s:3101   .text.RTC_GetTimeStamp:00000000 RTC_GetTimeStamp
     /tmp/ccSUwPBB.s:3257   .text.RTC_GetTimeStamp:00000120 $d
     /tmp/ccSUwPBB.s:3263   .text.RTC_GetTimeStampSubSecond:00000000 $t
     /tmp/ccSUwPBB.s:3268   .text.RTC_GetTimeStampSubSecond:00000000 RTC_GetTimeStampSubSecond
     /tmp/ccSUwPBB.s:3293   .text.RTC_GetTimeStampSubSecond:00000010 $d
     /tmp/ccSUwPBB.s:3298   .text.RTC_TamperTriggerConfig:00000000 $t
     /tmp/ccSUwPBB.s:3303   .text.RTC_TamperTriggerConfig:00000000 RTC_TamperTriggerConfig
     /tmp/ccSUwPBB.s:3354   .text.RTC_TamperTriggerConfig:00000044 $d
     /tmp/ccSUwPBB.s:3359   .text.RTC_TamperCmd:00000000 $t
     /tmp/ccSUwPBB.s:3364   .text.RTC_TamperCmd:00000000 RTC_TamperCmd
     /tmp/ccSUwPBB.s:3414   .text.RTC_TamperCmd:00000040 $d
     /tmp/ccSUwPBB.s:3419   .text.RTC_TamperFilterConfig:00000000 $t
     /tmp/ccSUwPBB.s:3424   .text.RTC_TamperFilterConfig:00000000 RTC_TamperFilterConfig
     /tmp/ccSUwPBB.s:3463   .text.RTC_TamperFilterConfig:0000002c $d
     /tmp/ccSUwPBB.s:3468   .text.RTC_TamperSamplingFreqConfig:00000000 $t
     /tmp/ccSUwPBB.s:3473   .text.RTC_TamperSamplingFreqConfig:00000000 RTC_TamperSamplingFreqConfig
     /tmp/ccSUwPBB.s:3512   .text.RTC_TamperSamplingFreqConfig:0000002c $d
     /tmp/ccSUwPBB.s:3517   .text.RTC_TamperPinsPrechargeDuration:00000000 $t
     /tmp/ccSUwPBB.s:3522   .text.RTC_TamperPinsPrechargeDuration:00000000 RTC_TamperPinsPrechargeDuration
     /tmp/ccSUwPBB.s:3561   .text.RTC_TamperPinsPrechargeDuration:0000002c $d
     /tmp/ccSUwPBB.s:3566   .text.RTC_TimeStampOnTamperDetectionCmd:00000000 $t
     /tmp/ccSUwPBB.s:3571   .text.RTC_TimeStampOnTamperDetectionCmd:00000000 RTC_TimeStampOnTamperDetectionCmd
     /tmp/ccSUwPBB.s:3617   .text.RTC_TimeStampOnTamperDetectionCmd:00000034 $d
     /tmp/ccSUwPBB.s:3622   .text.RTC_TamperPullUpCmd:00000000 $t
     /tmp/ccSUwPBB.s:3627   .text.RTC_TamperPullUpCmd:00000000 RTC_TamperPullUpCmd
     /tmp/ccSUwPBB.s:3673   .text.RTC_TamperPullUpCmd:00000034 $d
     /tmp/ccSUwPBB.s:3678   .text.RTC_WriteBackupRegister:00000000 $t
     /tmp/ccSUwPBB.s:3683   .text.RTC_WriteBackupRegister:00000000 RTC_WriteBackupRegister
     /tmp/ccSUwPBB.s:3726   .text.RTC_WriteBackupRegister:00000030 $d
     /tmp/ccSUwPBB.s:3731   .text.RTC_ReadBackupRegister:00000000 $t
     /tmp/ccSUwPBB.s:3736   .text.RTC_ReadBackupRegister:00000000 RTC_ReadBackupRegister
     /tmp/ccSUwPBB.s:3778   .text.RTC_ReadBackupRegister:00000030 $d
     /tmp/ccSUwPBB.s:3783   .text.RTC_TamperPinSelection:00000000 $t
     /tmp/ccSUwPBB.s:3788   .text.RTC_TamperPinSelection:00000000 RTC_TamperPinSelection
     /tmp/ccSUwPBB.s:3827   .text.RTC_TamperPinSelection:0000002c $d
     /tmp/ccSUwPBB.s:3832   .text.RTC_TimeStampPinSelection:00000000 $t
     /tmp/ccSUwPBB.s:3837   .text.RTC_TimeStampPinSelection:00000000 RTC_TimeStampPinSelection
     /tmp/ccSUwPBB.s:3876   .text.RTC_TimeStampPinSelection:0000002c $d
     /tmp/ccSUwPBB.s:3881   .text.RTC_OutputTypeConfig:00000000 $t
     /tmp/ccSUwPBB.s:3886   .text.RTC_OutputTypeConfig:00000000 RTC_OutputTypeConfig
     /tmp/ccSUwPBB.s:3925   .text.RTC_OutputTypeConfig:0000002c $d
     /tmp/ccSUwPBB.s:3930   .text.RTC_SynchroShiftConfig:00000000 $t
     /tmp/ccSUwPBB.s:3935   .text.RTC_SynchroShiftConfig:00000000 RTC_SynchroShiftConfig
     /tmp/ccSUwPBB.s:4049   .text.RTC_SynchroShiftConfig:000000b0 $d
     /tmp/ccSUwPBB.s:4054   .text.RTC_ITConfig:00000000 $t
     /tmp/ccSUwPBB.s:4059   .text.RTC_ITConfig:00000000 RTC_ITConfig
     /tmp/ccSUwPBB.s:4140   .text.RTC_ITConfig:00000088 $d
     /tmp/ccSUwPBB.s:4145   .text.RTC_GetFlagStatus:00000000 $t
     /tmp/ccSUwPBB.s:4150   .text.RTC_GetFlagStatus:00000000 RTC_GetFlagStatus
     /tmp/ccSUwPBB.s:4206   .text.RTC_GetFlagStatus:0000004c $d
     /tmp/ccSUwPBB.s:4211   .text.RTC_ClearFlag:00000000 $t
     /tmp/ccSUwPBB.s:4216   .text.RTC_ClearFlag:00000000 RTC_ClearFlag
     /tmp/ccSUwPBB.s:4254   .text.RTC_ClearFlag:00000034 $d
     /tmp/ccSUwPBB.s:4259   .text.RTC_GetITStatus:00000000 $t
     /tmp/ccSUwPBB.s:4264   .text.RTC_GetITStatus:00000000 RTC_GetITStatus
     /tmp/ccSUwPBB.s:4343   .text.RTC_GetITStatus:00000080 $d
     /tmp/ccSUwPBB.s:4348   .text.RTC_ClearITPendingBit:00000000 $t
     /tmp/ccSUwPBB.s:4353   .text.RTC_ClearITPendingBit:00000000 RTC_ClearITPendingBit
     /tmp/ccSUwPBB.s:4398   .text.RTC_ClearITPendingBit:00000044 $d
     /tmp/ccSUwPBB.s:4403   .text.RTC_ByteToBcd2:00000000 $t
     /tmp/ccSUwPBB.s:4462   .text.RTC_Bcd2ToByte:00000000 $t
                     .debug_frame:00000010 $d

NO UNDEFINED SYMBOLS
