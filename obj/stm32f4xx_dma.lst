   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 3
   4              		.fpu fpv4-sp-d16
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 6
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"stm32f4xx_dma.c"
  22              	.Ltext0:
  23              		.cfi_sections	.debug_frame
  24              		.section	.text.DMA_DeInit,"ax",%progbits
  25              		.align	2
  26              		.global	DMA_DeInit
  27              		.thumb
  28              		.thumb_func
  30              	DMA_DeInit:
  31              	.LFB110:
  32              		.file 1 "libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c"
   1:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /**
   2:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   ******************************************************************************
   3:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @file    stm32f4xx_dma.c
   4:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @author  MCD Application Team
   5:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @version V1.0.0RC1
   6:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @date    25-August-2011
   7:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @brief   This file provides firmware functions to manage the following 
   8:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          functionalities of the Direct Memory Access controller (DMA):           
   9:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *           - Initialization and Configuration
  10:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *           - Data Counter
  11:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *           - Double Buffer mode configuration and command  
  12:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *           - Interrupts and flags management
  13:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *           
  14:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *  @verbatim
  15:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *      
  16:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          ===================================================================      
  17:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *                                 How to use this driver
  18:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          =================================================================== 
  19:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          1. Enable The DMA controller clock using RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_DMA1, E
  20:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *             function for DMA1 or using RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_DMA2, ENABLE)
  21:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *             function for DMA2.
  22:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *
  23:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          2. Enable and configure the peripheral to be connected to the DMA Stream
  24:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *             (except for internal SRAM / FLASH memories: no initialization is 
  25:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *             necessary). 
  26:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *        
  27:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          3. For a given Stream, program the required configuration through following parameters
  28:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *             Source and Destination addresses, Transfer Direction, Transfer size, Source and Des
  29:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *             data formats, Circular or Normal mode, Stream Priority level, Source and Destinatio
  30:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *             Incrementation mode, FIFO mode and its Threshold (if needed), Burst mode for Source
  31:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *             Destination (if needed) using the DMA_Init() function.
  32:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *             To avoid filling un-nesecessary fields, you can call DMA_StructInit() function
  33:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *             to initialize a given structure with default values (reset values), the modify
  34:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *             only necessary fields (ie. Source and Destination addresses, Transfer size and Data
  35:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *
  36:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          4. Enable the NVIC and the corresponding interrupt(s) using the function 
  37:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *             DMA_ITConfig() if you need to use DMA interrupts. 
  38:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *
  39:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          5. Optionally, if the Circular mode is enabled, you can use the Double buffer mode by 
  40:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *             the second Memory address and the first Memory to be used through the function 
  41:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *             DMA_DoubleBufferModeConfig(). Then enable the Double buffer mode through the functi
  42:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *             DMA_DoubleBufferModeCmd(). These operations must be done before step 6.
  43:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *    
  44:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          6. Enable the DMA stream using the DMA_Cmd() function. 
  45:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *                
  46:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          7. Activate the needed Stream Request using PPP_DMACmd() function for
  47:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *             any PPP peripheral except internal SRAM and FLASH (ie. SPI, USART ...)
  48:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *             The function allowing this operation is provided in each PPP peripheral
  49:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *             driver (ie. SPI_DMACmd for SPI peripheral).
  50:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *             Once the Stream is enabled, it is not possible to modify its configuration
  51:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *             unless the stream is stopped and disabled.
  52:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *             After enabling the Stream, it is advised to monitor the EN bit status using
  53:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *             the function DMA_GetCmdStatus(). In case of configuration errors or bus errors
  54:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *             this bit will remain reset and all transfers on this Stream will remain on hold.   
  55:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *
  56:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          8. Optionally, you can configure the number of data to be transferred
  57:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *             when the Stream is disabled (ie. after each Transfer Complete event
  58:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *             or when a Transfer Error occurs) using the function DMA_SetCurrDataCounter().
  59:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *             And you can get the number of remaining data to be transferred using 
  60:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *             the function DMA_GetCurrDataCounter() at run time (when the DMA Stream is
  61:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *             enabled and running).  
  62:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *                   
  63:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          9. To control DMA events you can use one of the following 
  64:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *              two methods:
  65:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *               a- Check on DMA Stream flags using the function DMA_GetFlagStatus().  
  66:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *               b- Use DMA interrupts through the function DMA_ITConfig() at initialization
  67:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *                  phase and DMA_GetITStatus() function into interrupt routines in
  68:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *                  communication phase.  
  69:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *              After checking on a flag you should clear it using DMA_ClearFlag()
  70:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *              function. And after checking on an interrupt event you should 
  71:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *              clear it using DMA_ClearITPendingBit() function.    
  72:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *              
  73:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          10. Optionally, if Circular mode and Double Buffer mode are enabled, you can modify
  74:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *              the Memory Addresses using the function DMA_MemoryTargetConfig(). Make sure that
  75:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *              the Memory Address to be modified is not the one currently in use by DMA Stream.
  76:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *              This condition can be monitored using the function DMA_GetCurrentMemoryTarget().
  77:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *              
  78:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          11. Optionally, Pause-Resume operations may be performed:
  79:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *              The DMA_Cmd() function may be used to perform Pause-Resume operation. When a 
  80:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *              transfer is ongoing, calling this function to disable the Stream will cause the 
  81:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *              transfer to be paused. All configuration registers and the number of remaining 
  82:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *              data will be preserved. When calling again this function to re-enable the Stream, 
  83:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *              the transfer will be resumed from the point where it was paused.          
  84:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *                 
  85:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @note   Memory-to-Memory transfer is possible by setting the address of the memory into
  86:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *         the Peripheral registers. In this mode, Circular mode and Double Buffer mode
  87:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *         are not allowed.
  88:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *  
  89:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @note   The FIFO is used mainly to reduce bus usage and to allow data packing/unpacking: it is
  90:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *         possible to set different Data Sizes for the Peripheral and the Memory (ie. you can set
  91:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *         Half-Word data size for the peripheral to access its data register and set Word data si
  92:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *         for the Memory to gain in access time. Each two Half-words will be packed and written i
  93:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *         a single access to a Word in the Memory).
  94:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *    
  95:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @note  When FIFO is disabled, it is not allowed to configure different Data Sizes for Source
  96:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *        and Destination. In this case the Peripheral Data Size will be applied to both Source
  97:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *        and Destination.               
  98:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *
  99:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *  @endverbatim
 100:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *                                  
 101:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   ******************************************************************************
 102:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @attention
 103:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *
 104:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
 105:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
 106:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
 107:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
 108:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
 109:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
 110:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *
 111:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * <h2><center>&copy; COPYRIGHT 2011 STMicroelectronics</center></h2>
 112:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   ******************************************************************************  
 113:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   */ 
 114:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 115:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /* Includes ------------------------------------------------------------------*/
 116:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** #include "stm32f4xx_dma.h"
 117:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** #include "stm32f4xx_rcc.h"
 118:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 119:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /** @addtogroup STM32F4xx_StdPeriph_Driver
 120:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @{
 121:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   */
 122:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 123:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /** @defgroup DMA 
 124:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @brief DMA driver modules
 125:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @{
 126:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   */ 
 127:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 128:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /* Private typedef -----------------------------------------------------------*/
 129:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /* Private define ------------------------------------------------------------*/
 130:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 131:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /* Masks Definition */
 132:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** #define TRANSFER_IT_ENABLE_MASK (uint32_t)(DMA_SxCR_TCIE | DMA_SxCR_HTIE | \
 133:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****                                            DMA_SxCR_TEIE | DMA_SxCR_DMEIE)
 134:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 135:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** #define DMA_Stream0_IT_MASK     (uint32_t)(DMA_LISR_FEIF0 | DMA_LISR_DMEIF0 | \
 136:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****                                            DMA_LISR_TEIF0 | DMA_LISR_HTIF0 | \
 137:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****                                            DMA_LISR_TCIF0)
 138:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 139:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** #define DMA_Stream1_IT_MASK     (uint32_t)(DMA_Stream0_IT_MASK << 6)
 140:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** #define DMA_Stream2_IT_MASK     (uint32_t)(DMA_Stream0_IT_MASK << 16)
 141:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** #define DMA_Stream3_IT_MASK     (uint32_t)(DMA_Stream0_IT_MASK << 22)
 142:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** #define DMA_Stream4_IT_MASK     (uint32_t)(DMA_Stream0_IT_MASK | (uint32_t)0x20000000)
 143:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** #define DMA_Stream5_IT_MASK     (uint32_t)(DMA_Stream1_IT_MASK | (uint32_t)0x20000000)
 144:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** #define DMA_Stream6_IT_MASK     (uint32_t)(DMA_Stream2_IT_MASK | (uint32_t)0x20000000)
 145:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** #define DMA_Stream7_IT_MASK     (uint32_t)(DMA_Stream3_IT_MASK | (uint32_t)0x20000000)
 146:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** #define TRANSFER_IT_MASK        (uint32_t)0x0F3C0F3C
 147:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** #define HIGH_ISR_MASK           (uint32_t)0x20000000
 148:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** #define RESERVED_MASK           (uint32_t)0x0F7D0F7D  
 149:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 150:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /* Private macro -------------------------------------------------------------*/
 151:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /* Private variables ---------------------------------------------------------*/
 152:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /* Private function prototypes -----------------------------------------------*/
 153:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /* Private functions ---------------------------------------------------------*/
 154:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 155:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 156:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /** @defgroup DMA_Private_Functions
 157:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @{
 158:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   */
 159:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 160:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /** @defgroup DMA_Group1 Initialization and Configuration functions
 161:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****  *  @brief   Initialization and Configuration functions
 162:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****  *
 163:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** @verbatim   
 164:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****  ===============================================================================
 165:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****                  Initialization and Configuration functions
 166:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****  ===============================================================================  
 167:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 168:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   This subsection provides functions allowing to initialize the DMA Stream source
 169:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   and destination addresses, incrementation and data sizes, transfer direction, 
 170:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   buffer size, circular/normal mode selection, memory-to-memory mode selection 
 171:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   and Stream priority value.
 172:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   
 173:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   The DMA_Init() function follows the DMA configuration procedures as described in
 174:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   reference manual (RM0090) except the first point: waiting on EN bit to be reset.
 175:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   This condition should be checked by user application using the function DMA_GetCmdStatus()
 176:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   before calling the DMA_Init() function.
 177:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 178:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** @endverbatim
 179:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @{
 180:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   */
 181:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 182:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /**
 183:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @brief  Deinitialize the DMAy Streamx registers to their default reset values.
 184:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
 185:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *         to 7 to select the DMA Stream.
 186:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @retval None
 187:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   */
 188:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** void DMA_DeInit(DMA_Stream_TypeDef* DMAy_Streamx)
 189:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** {
  33              		.loc 1 189 0
  34              		.cfi_startproc
  35              		@ args = 0, pretend = 0, frame = 8
  36              		@ frame_needed = 1, uses_anonymous_args = 0
  37              		@ link register save eliminated.
  38 0000 80B4     		push	{r7}
  39              	.LCFI0:
  40              		.cfi_def_cfa_offset 4
  41 0002 83B0     		sub	sp, sp, #12
  42              	.LCFI1:
  43              		.cfi_def_cfa_offset 16
  44 0004 00AF     		add	r7, sp, #0
  45              		.cfi_offset 7, -4
  46              	.LCFI2:
  47              		.cfi_def_cfa_register 7
  48 0006 7860     		str	r0, [r7, #4]
 190:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Check the parameters */
 191:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
 192:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 193:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Disable the selected DMAy Streamx */
 194:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMAy_Streamx->CR &= ~((uint32_t)DMA_SxCR_EN);
  49              		.loc 1 194 0
  50 0008 7B68     		ldr	r3, [r7, #4]
  51 000a 1B68     		ldr	r3, [r3, #0]
  52 000c 23F00102 		bic	r2, r3, #1
  53 0010 7B68     		ldr	r3, [r7, #4]
  54 0012 1A60     		str	r2, [r3, #0]
 195:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 196:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Reset DMAy Streamx control register */
 197:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMAy_Streamx->CR  = 0;
  55              		.loc 1 197 0
  56 0014 7B68     		ldr	r3, [r7, #4]
  57 0016 4FF00002 		mov	r2, #0
  58 001a 1A60     		str	r2, [r3, #0]
 198:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   
 199:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Reset DMAy Streamx Number of Data to Transfer register */
 200:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMAy_Streamx->NDTR = 0;
  59              		.loc 1 200 0
  60 001c 7B68     		ldr	r3, [r7, #4]
  61 001e 4FF00002 		mov	r2, #0
  62 0022 5A60     		str	r2, [r3, #4]
 201:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   
 202:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Reset DMAy Streamx peripheral address register */
 203:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMAy_Streamx->PAR  = 0;
  63              		.loc 1 203 0
  64 0024 7B68     		ldr	r3, [r7, #4]
  65 0026 4FF00002 		mov	r2, #0
  66 002a 9A60     		str	r2, [r3, #8]
 204:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   
 205:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Reset DMAy Streamx memory 0 address register */
 206:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMAy_Streamx->M0AR = 0;
  67              		.loc 1 206 0
  68 002c 7B68     		ldr	r3, [r7, #4]
  69 002e 4FF00002 		mov	r2, #0
  70 0032 DA60     		str	r2, [r3, #12]
 207:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 208:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Reset DMAy Streamx memory 1 address register */
 209:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMAy_Streamx->M1AR = 0;
  71              		.loc 1 209 0
  72 0034 7B68     		ldr	r3, [r7, #4]
  73 0036 4FF00002 		mov	r2, #0
  74 003a 1A61     		str	r2, [r3, #16]
 210:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 211:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Reset DMAy Streamx FIFO control register */
 212:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMAy_Streamx->FCR = (uint32_t)0x00000021; 
  75              		.loc 1 212 0
  76 003c 7B68     		ldr	r3, [r7, #4]
  77 003e 4FF02102 		mov	r2, #33
  78 0042 5A61     		str	r2, [r3, #20]
 213:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 214:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Reset interrupt pending bits for the selected stream */
 215:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   if (DMAy_Streamx == DMA1_Stream0)
  79              		.loc 1 215 0
  80 0044 7A68     		ldr	r2, [r7, #4]
  81 0046 464B     		ldr	r3, .L18
  82 0048 9A42     		cmp	r2, r3
  83 004a 04D1     		bne	.L2
 216:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
 217:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Reset interrupt pending bits for DMA1 Stream0 */
 218:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMA1->LIFCR = DMA_Stream0_IT_MASK;
  84              		.loc 1 218 0
  85 004c 454B     		ldr	r3, .L18+4
  86 004e 4FF03D02 		mov	r2, #61
  87 0052 9A60     		str	r2, [r3, #8]
  88 0054 7FE0     		b	.L1
  89              	.L2:
 219:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
 220:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else if (DMAy_Streamx == DMA1_Stream1)
  90              		.loc 1 220 0
  91 0056 7A68     		ldr	r2, [r7, #4]
  92 0058 434B     		ldr	r3, .L18+8
  93 005a 9A42     		cmp	r2, r3
  94 005c 04D1     		bne	.L4
 221:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
 222:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Reset interrupt pending bits for DMA1 Stream1 */
 223:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMA1->LIFCR = DMA_Stream1_IT_MASK;
  95              		.loc 1 223 0
  96 005e 414B     		ldr	r3, .L18+4
  97 0060 4FF47462 		mov	r2, #3904
  98 0064 9A60     		str	r2, [r3, #8]
  99 0066 76E0     		b	.L1
 100              	.L4:
 224:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
 225:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else if (DMAy_Streamx == DMA1_Stream2)
 101              		.loc 1 225 0
 102 0068 7A68     		ldr	r2, [r7, #4]
 103 006a 404B     		ldr	r3, .L18+12
 104 006c 9A42     		cmp	r2, r3
 105 006e 04D1     		bne	.L5
 226:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
 227:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Reset interrupt pending bits for DMA1 Stream2 */
 228:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMA1->LIFCR = DMA_Stream2_IT_MASK;
 106              		.loc 1 228 0
 107 0070 3C4B     		ldr	r3, .L18+4
 108 0072 4FF47412 		mov	r2, #3997696
 109 0076 9A60     		str	r2, [r3, #8]
 110 0078 6DE0     		b	.L1
 111              	.L5:
 229:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
 230:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else if (DMAy_Streamx == DMA1_Stream3)
 112              		.loc 1 230 0
 113 007a 7A68     		ldr	r2, [r7, #4]
 114 007c 3C4B     		ldr	r3, .L18+16
 115 007e 9A42     		cmp	r2, r3
 116 0080 04D1     		bne	.L6
 231:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
 232:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Reset interrupt pending bits for DMA1 Stream3 */
 233:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMA1->LIFCR = DMA_Stream3_IT_MASK;
 117              		.loc 1 233 0
 118 0082 384B     		ldr	r3, .L18+4
 119 0084 4FF07462 		mov	r2, #255852544
 120 0088 9A60     		str	r2, [r3, #8]
 121 008a 64E0     		b	.L1
 122              	.L6:
 234:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
 235:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else if (DMAy_Streamx == DMA1_Stream4)
 123              		.loc 1 235 0
 124 008c 7A68     		ldr	r2, [r7, #4]
 125 008e 394B     		ldr	r3, .L18+20
 126 0090 9A42     		cmp	r2, r3
 127 0092 03D1     		bne	.L7
 236:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
 237:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Reset interrupt pending bits for DMA1 Stream4 */
 238:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMA1->HIFCR = DMA_Stream4_IT_MASK;
 128              		.loc 1 238 0
 129 0094 334B     		ldr	r3, .L18+4
 130 0096 384A     		ldr	r2, .L18+24
 131 0098 DA60     		str	r2, [r3, #12]
 132 009a 5CE0     		b	.L1
 133              	.L7:
 239:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
 240:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else if (DMAy_Streamx == DMA1_Stream5)
 134              		.loc 1 240 0
 135 009c 7A68     		ldr	r2, [r7, #4]
 136 009e 374B     		ldr	r3, .L18+28
 137 00a0 9A42     		cmp	r2, r3
 138 00a2 03D1     		bne	.L8
 241:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
 242:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Reset interrupt pending bits for DMA1 Stream5 */
 243:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMA1->HIFCR = DMA_Stream5_IT_MASK;
 139              		.loc 1 243 0
 140 00a4 2F4B     		ldr	r3, .L18+4
 141 00a6 364A     		ldr	r2, .L18+32
 142 00a8 DA60     		str	r2, [r3, #12]
 143 00aa 54E0     		b	.L1
 144              	.L8:
 244:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
 245:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else if (DMAy_Streamx == DMA1_Stream6)
 145              		.loc 1 245 0
 146 00ac 7A68     		ldr	r2, [r7, #4]
 147 00ae 354B     		ldr	r3, .L18+36
 148 00b0 9A42     		cmp	r2, r3
 149 00b2 03D1     		bne	.L9
 246:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
 247:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Reset interrupt pending bits for DMA1 Stream6 */
 248:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMA1->HIFCR = (uint32_t)DMA_Stream6_IT_MASK;
 150              		.loc 1 248 0
 151 00b4 2B4B     		ldr	r3, .L18+4
 152 00b6 344A     		ldr	r2, .L18+40
 153 00b8 DA60     		str	r2, [r3, #12]
 154 00ba 4CE0     		b	.L1
 155              	.L9:
 249:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
 250:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else if (DMAy_Streamx == DMA1_Stream7)
 156              		.loc 1 250 0
 157 00bc 7A68     		ldr	r2, [r7, #4]
 158 00be 334B     		ldr	r3, .L18+44
 159 00c0 9A42     		cmp	r2, r3
 160 00c2 04D1     		bne	.L10
 251:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
 252:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Reset interrupt pending bits for DMA1 Stream7 */
 253:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMA1->HIFCR = DMA_Stream7_IT_MASK;
 161              		.loc 1 253 0
 162 00c4 274B     		ldr	r3, .L18+4
 163 00c6 4FF03D52 		mov	r2, #792723456
 164 00ca DA60     		str	r2, [r3, #12]
 165 00cc 43E0     		b	.L1
 166              	.L10:
 254:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
 255:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else if (DMAy_Streamx == DMA2_Stream0)
 167              		.loc 1 255 0
 168 00ce 7A68     		ldr	r2, [r7, #4]
 169 00d0 2F4B     		ldr	r3, .L18+48
 170 00d2 9A42     		cmp	r2, r3
 171 00d4 04D1     		bne	.L11
 256:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
 257:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Reset interrupt pending bits for DMA2 Stream0 */
 258:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMA2->LIFCR = DMA_Stream0_IT_MASK;
 172              		.loc 1 258 0
 173 00d6 2F4B     		ldr	r3, .L18+52
 174 00d8 4FF03D02 		mov	r2, #61
 175 00dc 9A60     		str	r2, [r3, #8]
 176 00de 3AE0     		b	.L1
 177              	.L11:
 259:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
 260:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else if (DMAy_Streamx == DMA2_Stream1)
 178              		.loc 1 260 0
 179 00e0 7A68     		ldr	r2, [r7, #4]
 180 00e2 2D4B     		ldr	r3, .L18+56
 181 00e4 9A42     		cmp	r2, r3
 182 00e6 04D1     		bne	.L12
 261:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
 262:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Reset interrupt pending bits for DMA2 Stream1 */
 263:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMA2->LIFCR = DMA_Stream1_IT_MASK;
 183              		.loc 1 263 0
 184 00e8 2A4B     		ldr	r3, .L18+52
 185 00ea 4FF47462 		mov	r2, #3904
 186 00ee 9A60     		str	r2, [r3, #8]
 187 00f0 31E0     		b	.L1
 188              	.L12:
 264:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
 265:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else if (DMAy_Streamx == DMA2_Stream2)
 189              		.loc 1 265 0
 190 00f2 7A68     		ldr	r2, [r7, #4]
 191 00f4 294B     		ldr	r3, .L18+60
 192 00f6 9A42     		cmp	r2, r3
 193 00f8 04D1     		bne	.L13
 266:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
 267:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Reset interrupt pending bits for DMA2 Stream2 */
 268:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMA2->LIFCR = DMA_Stream2_IT_MASK;
 194              		.loc 1 268 0
 195 00fa 264B     		ldr	r3, .L18+52
 196 00fc 4FF47412 		mov	r2, #3997696
 197 0100 9A60     		str	r2, [r3, #8]
 198 0102 28E0     		b	.L1
 199              	.L13:
 269:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
 270:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else if (DMAy_Streamx == DMA2_Stream3)
 200              		.loc 1 270 0
 201 0104 7A68     		ldr	r2, [r7, #4]
 202 0106 264B     		ldr	r3, .L18+64
 203 0108 9A42     		cmp	r2, r3
 204 010a 04D1     		bne	.L14
 271:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
 272:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Reset interrupt pending bits for DMA2 Stream3 */
 273:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMA2->LIFCR = DMA_Stream3_IT_MASK;
 205              		.loc 1 273 0
 206 010c 214B     		ldr	r3, .L18+52
 207 010e 4FF07462 		mov	r2, #255852544
 208 0112 9A60     		str	r2, [r3, #8]
 209 0114 1FE0     		b	.L1
 210              	.L14:
 274:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
 275:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else if (DMAy_Streamx == DMA2_Stream4)
 211              		.loc 1 275 0
 212 0116 7A68     		ldr	r2, [r7, #4]
 213 0118 224B     		ldr	r3, .L18+68
 214 011a 9A42     		cmp	r2, r3
 215 011c 03D1     		bne	.L15
 276:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
 277:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Reset interrupt pending bits for DMA2 Stream4 */
 278:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMA2->HIFCR = DMA_Stream4_IT_MASK;
 216              		.loc 1 278 0
 217 011e 1D4B     		ldr	r3, .L18+52
 218 0120 154A     		ldr	r2, .L18+24
 219 0122 DA60     		str	r2, [r3, #12]
 220 0124 17E0     		b	.L1
 221              	.L15:
 279:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
 280:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else if (DMAy_Streamx == DMA2_Stream5)
 222              		.loc 1 280 0
 223 0126 7A68     		ldr	r2, [r7, #4]
 224 0128 1F4B     		ldr	r3, .L18+72
 225 012a 9A42     		cmp	r2, r3
 226 012c 03D1     		bne	.L16
 281:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
 282:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Reset interrupt pending bits for DMA2 Stream5 */
 283:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMA2->HIFCR = DMA_Stream5_IT_MASK;
 227              		.loc 1 283 0
 228 012e 194B     		ldr	r3, .L18+52
 229 0130 134A     		ldr	r2, .L18+32
 230 0132 DA60     		str	r2, [r3, #12]
 231 0134 0FE0     		b	.L1
 232              	.L16:
 284:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
 285:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else if (DMAy_Streamx == DMA2_Stream6)
 233              		.loc 1 285 0
 234 0136 7A68     		ldr	r2, [r7, #4]
 235 0138 1C4B     		ldr	r3, .L18+76
 236 013a 9A42     		cmp	r2, r3
 237 013c 03D1     		bne	.L17
 286:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
 287:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Reset interrupt pending bits for DMA2 Stream6 */
 288:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMA2->HIFCR = DMA_Stream6_IT_MASK;
 238              		.loc 1 288 0
 239 013e 154B     		ldr	r3, .L18+52
 240 0140 114A     		ldr	r2, .L18+40
 241 0142 DA60     		str	r2, [r3, #12]
 242 0144 07E0     		b	.L1
 243              	.L17:
 289:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
 290:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else 
 291:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
 292:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     if (DMAy_Streamx == DMA2_Stream7)
 244              		.loc 1 292 0
 245 0146 7A68     		ldr	r2, [r7, #4]
 246 0148 194B     		ldr	r3, .L18+80
 247 014a 9A42     		cmp	r2, r3
 248 014c 03D1     		bne	.L1
 293:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     {
 294:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****       /* Reset interrupt pending bits for DMA2 Stream7 */
 295:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****       DMA2->HIFCR = DMA_Stream7_IT_MASK;
 249              		.loc 1 295 0
 250 014e 114B     		ldr	r3, .L18+52
 251 0150 4FF03D52 		mov	r2, #792723456
 252 0154 DA60     		str	r2, [r3, #12]
 253              	.L1:
 296:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     }
 297:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
 298:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** }
 254              		.loc 1 298 0
 255 0156 07F10C07 		add	r7, r7, #12
 256 015a BD46     		mov	sp, r7
 257 015c 80BC     		pop	{r7}
 258 015e 7047     		bx	lr
 259              	.L19:
 260              		.align	2
 261              	.L18:
 262 0160 10600240 		.word	1073897488
 263 0164 00600240 		.word	1073897472
 264 0168 28600240 		.word	1073897512
 265 016c 40600240 		.word	1073897536
 266 0170 58600240 		.word	1073897560
 267 0174 70600240 		.word	1073897584
 268 0178 3D000020 		.word	536870973
 269 017c 88600240 		.word	1073897608
 270 0180 400F0020 		.word	536874816
 271 0184 A0600240 		.word	1073897632
 272 0188 00003D20 		.word	540868608
 273 018c B8600240 		.word	1073897656
 274 0190 10640240 		.word	1073898512
 275 0194 00640240 		.word	1073898496
 276 0198 28640240 		.word	1073898536
 277 019c 40640240 		.word	1073898560
 278 01a0 58640240 		.word	1073898584
 279 01a4 70640240 		.word	1073898608
 280 01a8 88640240 		.word	1073898632
 281 01ac A0640240 		.word	1073898656
 282 01b0 B8640240 		.word	1073898680
 283              		.cfi_endproc
 284              	.LFE110:
 286              		.section	.text.DMA_Init,"ax",%progbits
 287              		.align	2
 288              		.global	DMA_Init
 289              		.thumb
 290              		.thumb_func
 292              	DMA_Init:
 293              	.LFB111:
 299:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 300:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /**
 301:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @brief  Initializes the DMAy Streamx according to the specified parameters in 
 302:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *         the DMA_InitStruct structure.
 303:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @note   Before calling this function, it is recommended to check that the Stream 
 304:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *         is actually disabled using the function DMA_GetCmdStatus().  
 305:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
 306:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *         to 7 to select the DMA Stream.
 307:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that contains
 308:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *         the configuration information for the specified DMA Stream.  
 309:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @retval None
 310:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   */
 311:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** void DMA_Init(DMA_Stream_TypeDef* DMAy_Streamx, DMA_InitTypeDef* DMA_InitStruct)
 312:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** {
 294              		.loc 1 312 0
 295              		.cfi_startproc
 296              		@ args = 0, pretend = 0, frame = 16
 297              		@ frame_needed = 1, uses_anonymous_args = 0
 298              		@ link register save eliminated.
 299 0000 80B4     		push	{r7}
 300              	.LCFI3:
 301              		.cfi_def_cfa_offset 4
 302 0002 85B0     		sub	sp, sp, #20
 303              	.LCFI4:
 304              		.cfi_def_cfa_offset 24
 305 0004 00AF     		add	r7, sp, #0
 306              		.cfi_offset 7, -4
 307              	.LCFI5:
 308              		.cfi_def_cfa_register 7
 309 0006 7860     		str	r0, [r7, #4]
 310 0008 3960     		str	r1, [r7, #0]
 313:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   uint32_t tmpreg = 0;
 311              		.loc 1 313 0
 312 000a 4FF00003 		mov	r3, #0
 313 000e FB60     		str	r3, [r7, #12]
 314:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 315:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Check the parameters */
 316:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
 317:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_CHANNEL(DMA_InitStruct->DMA_Channel));
 318:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_DIRECTION(DMA_InitStruct->DMA_DIR));
 319:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_BUFFER_SIZE(DMA_InitStruct->DMA_BufferSize));
 320:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_PERIPHERAL_INC_STATE(DMA_InitStruct->DMA_PeripheralInc));
 321:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_MEMORY_INC_STATE(DMA_InitStruct->DMA_MemoryInc));
 322:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(DMA_InitStruct->DMA_PeripheralDataSize));
 323:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_MEMORY_DATA_SIZE(DMA_InitStruct->DMA_MemoryDataSize));
 324:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_MODE(DMA_InitStruct->DMA_Mode));
 325:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_PRIORITY(DMA_InitStruct->DMA_Priority));
 326:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_FIFO_MODE_STATE(DMA_InitStruct->DMA_FIFOMode));
 327:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_FIFO_THRESHOLD(DMA_InitStruct->DMA_FIFOThreshold));
 328:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_MEMORY_BURST(DMA_InitStruct->DMA_MemoryBurst));
 329:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_PERIPHERAL_BURST(DMA_InitStruct->DMA_PeripheralBurst));
 330:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 331:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /*------------------------- DMAy Streamx CR Configuration ------------------*/
 332:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Get the DMAy_Streamx CR value */
 333:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   tmpreg = DMAy_Streamx->CR;
 314              		.loc 1 333 0
 315 0010 7B68     		ldr	r3, [r7, #4]
 316 0012 1B68     		ldr	r3, [r3, #0]
 317 0014 FB60     		str	r3, [r7, #12]
 334:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 335:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
 336:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   tmpreg &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 318              		.loc 1 336 0
 319 0016 FA68     		ldr	r2, [r7, #12]
 320 0018 264B     		ldr	r3, .L21
 321 001a 02EA0303 		and	r3, r2, r3
 322 001e FB60     		str	r3, [r7, #12]
 337:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****                          DMA_SxCR_PL | DMA_SxCR_MSIZE | DMA_SxCR_PSIZE | \
 338:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****                          DMA_SxCR_MINC | DMA_SxCR_PINC | DMA_SxCR_CIRC | \
 339:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****                          DMA_SxCR_DIR));
 340:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 341:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Configure DMAy Streamx: */
 342:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Set CHSEL bits according to DMA_CHSEL value */
 343:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Set DIR bits according to DMA_DIR value */
 344:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Set PINC bit according to DMA_PeripheralInc value */
 345:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Set MINC bit according to DMA_MemoryInc value */
 346:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Set PSIZE bits according to DMA_PeripheralDataSize value */
 347:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Set MSIZE bits according to DMA_MemoryDataSize value */
 348:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Set CIRC bit according to DMA_Mode value */
 349:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Set PL bits according to DMA_Priority value */
 350:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Set MBURST bits according to DMA_MemoryBurst value */
 351:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Set PBURST bits according to DMA_PeripheralBurst value */
 352:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 323              		.loc 1 352 0
 324 0020 3B68     		ldr	r3, [r7, #0]
 325 0022 1A68     		ldr	r2, [r3, #0]
 326 0024 3B68     		ldr	r3, [r7, #0]
 327 0026 DB68     		ldr	r3, [r3, #12]
 328 0028 1A43     		orrs	r2, r2, r3
 353:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****             DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 329              		.loc 1 353 0
 330 002a 3B68     		ldr	r3, [r7, #0]
 331 002c 5B69     		ldr	r3, [r3, #20]
 352:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 332              		.loc 1 352 0
 333 002e 1A43     		orrs	r2, r2, r3
 334              		.loc 1 353 0
 335 0030 3B68     		ldr	r3, [r7, #0]
 336 0032 9B69     		ldr	r3, [r3, #24]
 337 0034 1A43     		orrs	r2, r2, r3
 354:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****             DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 338              		.loc 1 354 0
 339 0036 3B68     		ldr	r3, [r7, #0]
 340 0038 DB69     		ldr	r3, [r3, #28]
 353:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****             DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 341              		.loc 1 353 0
 342 003a 1A43     		orrs	r2, r2, r3
 343              		.loc 1 354 0
 344 003c 3B68     		ldr	r3, [r7, #0]
 345 003e 1B6A     		ldr	r3, [r3, #32]
 346 0040 1A43     		orrs	r2, r2, r3
 355:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****             DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 347              		.loc 1 355 0
 348 0042 3B68     		ldr	r3, [r7, #0]
 349 0044 5B6A     		ldr	r3, [r3, #36]
 354:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****             DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 350              		.loc 1 354 0
 351 0046 1A43     		orrs	r2, r2, r3
 352              		.loc 1 355 0
 353 0048 3B68     		ldr	r3, [r7, #0]
 354 004a 9B6A     		ldr	r3, [r3, #40]
 355 004c 1A43     		orrs	r2, r2, r3
 356:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****             DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 356              		.loc 1 356 0
 357 004e 3B68     		ldr	r3, [r7, #0]
 358 0050 5B6B     		ldr	r3, [r3, #52]
 355:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****             DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 359              		.loc 1 355 0
 360 0052 1A43     		orrs	r2, r2, r3
 361              		.loc 1 356 0
 362 0054 3B68     		ldr	r3, [r7, #0]
 363 0056 9B6B     		ldr	r3, [r3, #56]
 364 0058 42EA0303 		orr	r3, r2, r3
 352:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 365              		.loc 1 352 0
 366 005c FA68     		ldr	r2, [r7, #12]
 367 005e 42EA0303 		orr	r3, r2, r3
 368 0062 FB60     		str	r3, [r7, #12]
 357:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 358:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Write to DMAy Streamx CR register */
 359:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMAy_Streamx->CR = tmpreg;
 369              		.loc 1 359 0
 370 0064 7B68     		ldr	r3, [r7, #4]
 371 0066 FA68     		ldr	r2, [r7, #12]
 372 0068 1A60     		str	r2, [r3, #0]
 360:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 361:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /*------------------------- DMAy Streamx FCR Configuration -----------------*/
 362:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Get the DMAy_Streamx FCR value */
 363:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   tmpreg = DMAy_Streamx->FCR;
 373              		.loc 1 363 0
 374 006a 7B68     		ldr	r3, [r7, #4]
 375 006c 5B69     		ldr	r3, [r3, #20]
 376 006e FB60     		str	r3, [r7, #12]
 364:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 365:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Clear DMDIS and FTH bits */
 366:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   tmpreg &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 377              		.loc 1 366 0
 378 0070 FB68     		ldr	r3, [r7, #12]
 379 0072 23F00703 		bic	r3, r3, #7
 380 0076 FB60     		str	r3, [r7, #12]
 367:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 368:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Configure DMAy Streamx FIFO: 
 369:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     Set DMDIS bits according to DMA_FIFOMode value 
 370:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     Set FTH bits according to DMA_FIFOThreshold value */
 371:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   tmpreg |= DMA_InitStruct->DMA_FIFOMode | DMA_InitStruct->DMA_FIFOThreshold;
 381              		.loc 1 371 0
 382 0078 3B68     		ldr	r3, [r7, #0]
 383 007a DA6A     		ldr	r2, [r3, #44]
 384 007c 3B68     		ldr	r3, [r7, #0]
 385 007e 1B6B     		ldr	r3, [r3, #48]
 386 0080 42EA0303 		orr	r3, r2, r3
 387 0084 FA68     		ldr	r2, [r7, #12]
 388 0086 42EA0303 		orr	r3, r2, r3
 389 008a FB60     		str	r3, [r7, #12]
 372:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 373:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Write to DMAy Streamx CR */
 374:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMAy_Streamx->FCR = tmpreg;
 390              		.loc 1 374 0
 391 008c 7B68     		ldr	r3, [r7, #4]
 392 008e FA68     		ldr	r2, [r7, #12]
 393 0090 5A61     		str	r2, [r3, #20]
 375:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 376:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /*------------------------- DMAy Streamx NDTR Configuration ----------------*/
 377:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Write to DMAy Streamx NDTR register */
 378:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMAy_Streamx->NDTR = DMA_InitStruct->DMA_BufferSize;
 394              		.loc 1 378 0
 395 0092 3B68     		ldr	r3, [r7, #0]
 396 0094 1A69     		ldr	r2, [r3, #16]
 397 0096 7B68     		ldr	r3, [r7, #4]
 398 0098 5A60     		str	r2, [r3, #4]
 379:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 380:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /*------------------------- DMAy Streamx PAR Configuration -----------------*/
 381:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Write to DMAy Streamx PAR */
 382:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMAy_Streamx->PAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 399              		.loc 1 382 0
 400 009a 3B68     		ldr	r3, [r7, #0]
 401 009c 5A68     		ldr	r2, [r3, #4]
 402 009e 7B68     		ldr	r3, [r7, #4]
 403 00a0 9A60     		str	r2, [r3, #8]
 383:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 384:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /*------------------------- DMAy Streamx M0AR Configuration ----------------*/
 385:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Write to DMAy Streamx M0AR */
 386:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMAy_Streamx->M0AR = DMA_InitStruct->DMA_Memory0BaseAddr;
 404              		.loc 1 386 0
 405 00a2 3B68     		ldr	r3, [r7, #0]
 406 00a4 9A68     		ldr	r2, [r3, #8]
 407 00a6 7B68     		ldr	r3, [r7, #4]
 408 00a8 DA60     		str	r2, [r3, #12]
 387:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** }
 409              		.loc 1 387 0
 410 00aa 07F11407 		add	r7, r7, #20
 411 00ae BD46     		mov	sp, r7
 412 00b0 80BC     		pop	{r7}
 413 00b2 7047     		bx	lr
 414              	.L22:
 415              		.align	2
 416              	.L21:
 417 00b4 3F801CF0 		.word	-266567617
 418              		.cfi_endproc
 419              	.LFE111:
 421              		.section	.text.DMA_StructInit,"ax",%progbits
 422              		.align	2
 423              		.global	DMA_StructInit
 424              		.thumb
 425              		.thumb_func
 427              	DMA_StructInit:
 428              	.LFB112:
 388:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 389:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /**
 390:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @brief  Fills each DMA_InitStruct member with its default value.
 391:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  DMA_InitStruct : pointer to a DMA_InitTypeDef structure which will 
 392:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *         be initialized.
 393:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @retval None
 394:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   */
 395:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** void DMA_StructInit(DMA_InitTypeDef* DMA_InitStruct)
 396:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** {
 429              		.loc 1 396 0
 430              		.cfi_startproc
 431              		@ args = 0, pretend = 0, frame = 8
 432              		@ frame_needed = 1, uses_anonymous_args = 0
 433              		@ link register save eliminated.
 434 0000 80B4     		push	{r7}
 435              	.LCFI6:
 436              		.cfi_def_cfa_offset 4
 437 0002 83B0     		sub	sp, sp, #12
 438              	.LCFI7:
 439              		.cfi_def_cfa_offset 16
 440 0004 00AF     		add	r7, sp, #0
 441              		.cfi_offset 7, -4
 442              	.LCFI8:
 443              		.cfi_def_cfa_register 7
 444 0006 7860     		str	r0, [r7, #4]
 397:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /*-------------- Reset DMA init structure parameters values ----------------*/
 398:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Initialize the DMA_Channel member */
 399:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMA_InitStruct->DMA_Channel = 0;
 445              		.loc 1 399 0
 446 0008 7B68     		ldr	r3, [r7, #4]
 447 000a 4FF00002 		mov	r2, #0
 448 000e 1A60     		str	r2, [r3, #0]
 400:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 401:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Initialize the DMA_PeripheralBaseAddr member */
 402:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMA_InitStruct->DMA_PeripheralBaseAddr = 0;
 449              		.loc 1 402 0
 450 0010 7B68     		ldr	r3, [r7, #4]
 451 0012 4FF00002 		mov	r2, #0
 452 0016 5A60     		str	r2, [r3, #4]
 403:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 404:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Initialize the DMA_Memory0BaseAddr member */
 405:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMA_InitStruct->DMA_Memory0BaseAddr = 0;
 453              		.loc 1 405 0
 454 0018 7B68     		ldr	r3, [r7, #4]
 455 001a 4FF00002 		mov	r2, #0
 456 001e 9A60     		str	r2, [r3, #8]
 406:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 407:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Initialize the DMA_DIR member */
 408:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMA_InitStruct->DMA_DIR = DMA_DIR_PeripheralToMemory;
 457              		.loc 1 408 0
 458 0020 7B68     		ldr	r3, [r7, #4]
 459 0022 4FF00002 		mov	r2, #0
 460 0026 DA60     		str	r2, [r3, #12]
 409:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 410:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Initialize the DMA_BufferSize member */
 411:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMA_InitStruct->DMA_BufferSize = 0;
 461              		.loc 1 411 0
 462 0028 7B68     		ldr	r3, [r7, #4]
 463 002a 4FF00002 		mov	r2, #0
 464 002e 1A61     		str	r2, [r3, #16]
 412:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 413:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Initialize the DMA_PeripheralInc member */
 414:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMA_InitStruct->DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 465              		.loc 1 414 0
 466 0030 7B68     		ldr	r3, [r7, #4]
 467 0032 4FF00002 		mov	r2, #0
 468 0036 5A61     		str	r2, [r3, #20]
 415:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 416:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Initialize the DMA_MemoryInc member */
 417:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMA_InitStruct->DMA_MemoryInc = DMA_MemoryInc_Disable;
 469              		.loc 1 417 0
 470 0038 7B68     		ldr	r3, [r7, #4]
 471 003a 4FF00002 		mov	r2, #0
 472 003e 9A61     		str	r2, [r3, #24]
 418:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 419:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Initialize the DMA_PeripheralDataSize member */
 420:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMA_InitStruct->DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
 473              		.loc 1 420 0
 474 0040 7B68     		ldr	r3, [r7, #4]
 475 0042 4FF00002 		mov	r2, #0
 476 0046 DA61     		str	r2, [r3, #28]
 421:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 422:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Initialize the DMA_MemoryDataSize member */
 423:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMA_InitStruct->DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
 477              		.loc 1 423 0
 478 0048 7B68     		ldr	r3, [r7, #4]
 479 004a 4FF00002 		mov	r2, #0
 480 004e 1A62     		str	r2, [r3, #32]
 424:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 425:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Initialize the DMA_Mode member */
 426:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMA_InitStruct->DMA_Mode = DMA_Mode_Normal;
 481              		.loc 1 426 0
 482 0050 7B68     		ldr	r3, [r7, #4]
 483 0052 4FF00002 		mov	r2, #0
 484 0056 5A62     		str	r2, [r3, #36]
 427:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 428:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Initialize the DMA_Priority member */
 429:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMA_InitStruct->DMA_Priority = DMA_Priority_Low;
 485              		.loc 1 429 0
 486 0058 7B68     		ldr	r3, [r7, #4]
 487 005a 4FF00002 		mov	r2, #0
 488 005e 9A62     		str	r2, [r3, #40]
 430:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 431:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Initialize the DMA_FIFOMode member */
 432:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMA_InitStruct->DMA_FIFOMode = DMA_FIFOMode_Disable;
 489              		.loc 1 432 0
 490 0060 7B68     		ldr	r3, [r7, #4]
 491 0062 4FF00002 		mov	r2, #0
 492 0066 DA62     		str	r2, [r3, #44]
 433:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 434:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Initialize the DMA_FIFOThreshold member */
 435:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMA_InitStruct->DMA_FIFOThreshold = DMA_FIFOThreshold_1QuarterFull;
 493              		.loc 1 435 0
 494 0068 7B68     		ldr	r3, [r7, #4]
 495 006a 4FF00002 		mov	r2, #0
 496 006e 1A63     		str	r2, [r3, #48]
 436:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 437:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Initialize the DMA_MemoryBurst member */
 438:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMA_InitStruct->DMA_MemoryBurst = DMA_MemoryBurst_Single;
 497              		.loc 1 438 0
 498 0070 7B68     		ldr	r3, [r7, #4]
 499 0072 4FF00002 		mov	r2, #0
 500 0076 5A63     		str	r2, [r3, #52]
 439:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 440:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Initialize the DMA_PeripheralBurst member */
 441:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMA_InitStruct->DMA_PeripheralBurst = DMA_PeripheralBurst_Single;
 501              		.loc 1 441 0
 502 0078 7B68     		ldr	r3, [r7, #4]
 503 007a 4FF00002 		mov	r2, #0
 504 007e 9A63     		str	r2, [r3, #56]
 442:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** }
 505              		.loc 1 442 0
 506 0080 07F10C07 		add	r7, r7, #12
 507 0084 BD46     		mov	sp, r7
 508 0086 80BC     		pop	{r7}
 509 0088 7047     		bx	lr
 510              		.cfi_endproc
 511              	.LFE112:
 513 008a 00BF     		.section	.text.DMA_Cmd,"ax",%progbits
 514              		.align	2
 515              		.global	DMA_Cmd
 516              		.thumb
 517              		.thumb_func
 519              	DMA_Cmd:
 520              	.LFB113:
 443:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 444:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /**
 445:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @brief  Enables or disables the specified DMAy Streamx.
 446:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
 447:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *         to 7 to select the DMA Stream.
 448:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  NewState: new state of the DMAy Streamx. 
 449:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          This parameter can be: ENABLE or DISABLE.
 450:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *
 451:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @note  This function may be used to perform Pause-Resume operation. When a
 452:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *        transfer is ongoing, calling this function to disable the Stream will
 453:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *        cause the transfer to be paused. All configuration registers and the
 454:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *        number of remaining data will be preserved. When calling again this
 455:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *        function to re-enable the Stream, the transfer will be resumed from
 456:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *        the point where it was paused.          
 457:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *    
 458:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @note  After configuring the DMA Stream (DMA_Init() function) and enabling the
 459:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *        stream, it is recommended to check (or wait until) the DMA Stream is
 460:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *        effectively enabled. A Stream may remain disabled if a configuration 
 461:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *        parameter is wrong.
 462:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *        After disabling a DMA Stream, it is also recommended to check (or wait
 463:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *        until) the DMA Stream is effectively disabled. If a Stream is disabled 
 464:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *        while a data transfer is ongoing, the current data will be transferred
 465:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *        and the Stream will be effectively disabled only after the transfer of
 466:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *        this single data is finished.            
 467:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *    
 468:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @retval None
 469:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   */
 470:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** void DMA_Cmd(DMA_Stream_TypeDef* DMAy_Streamx, FunctionalState NewState)
 471:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** {
 521              		.loc 1 471 0
 522              		.cfi_startproc
 523              		@ args = 0, pretend = 0, frame = 8
 524              		@ frame_needed = 1, uses_anonymous_args = 0
 525              		@ link register save eliminated.
 526 0000 80B4     		push	{r7}
 527              	.LCFI9:
 528              		.cfi_def_cfa_offset 4
 529 0002 83B0     		sub	sp, sp, #12
 530              	.LCFI10:
 531              		.cfi_def_cfa_offset 16
 532 0004 00AF     		add	r7, sp, #0
 533              		.cfi_offset 7, -4
 534              	.LCFI11:
 535              		.cfi_def_cfa_register 7
 536 0006 7860     		str	r0, [r7, #4]
 537 0008 0B46     		mov	r3, r1
 538 000a FB70     		strb	r3, [r7, #3]
 472:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Check the parameters */
 473:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
 474:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 475:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 476:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   if (NewState != DISABLE)
 539              		.loc 1 476 0
 540 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 541 000e 002B     		cmp	r3, #0
 542 0010 06D0     		beq	.L25
 477:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
 478:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Enable the selected DMAy Streamx by setting EN bit */
 479:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
 543              		.loc 1 479 0
 544 0012 7B68     		ldr	r3, [r7, #4]
 545 0014 1B68     		ldr	r3, [r3, #0]
 546 0016 43F00102 		orr	r2, r3, #1
 547 001a 7B68     		ldr	r3, [r7, #4]
 548 001c 1A60     		str	r2, [r3, #0]
 549 001e 05E0     		b	.L24
 550              	.L25:
 480:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
 481:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else
 482:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
 483:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Disable the selected DMAy Streamx by clearing EN bit */
 484:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
 551              		.loc 1 484 0
 552 0020 7B68     		ldr	r3, [r7, #4]
 553 0022 1B68     		ldr	r3, [r3, #0]
 554 0024 23F00102 		bic	r2, r3, #1
 555 0028 7B68     		ldr	r3, [r7, #4]
 556 002a 1A60     		str	r2, [r3, #0]
 557              	.L24:
 485:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
 486:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** }
 558              		.loc 1 486 0
 559 002c 07F10C07 		add	r7, r7, #12
 560 0030 BD46     		mov	sp, r7
 561 0032 80BC     		pop	{r7}
 562 0034 7047     		bx	lr
 563              		.cfi_endproc
 564              	.LFE113:
 566 0036 00BF     		.section	.text.DMA_PeriphIncOffsetSizeConfig,"ax",%progbits
 567              		.align	2
 568              		.global	DMA_PeriphIncOffsetSizeConfig
 569              		.thumb
 570              		.thumb_func
 572              	DMA_PeriphIncOffsetSizeConfig:
 573              	.LFB114:
 487:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 488:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /**
 489:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @brief  Configures, when the PINC (Peripheral Increment address mode) bit is
 490:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *         set, if the peripheral address should be incremented with the data 
 491:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *         size (configured with PSIZE bits) or by a fixed offset equal to 4
 492:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *         (32-bit aligned addresses).
 493:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *   
 494:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @note   This function has no effect if the Peripheral Increment mode is disabled.
 495:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *     
 496:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
 497:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          to 7 to select the DMA Stream.
 498:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  DMA_Pincos: specifies the Peripheral increment offset size.
 499:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          This parameter can be one of the following values:
 500:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *            @arg DMA_PINCOS_Psize: Peripheral address increment is done  
 501:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *                                   accordingly to PSIZE parameter.
 502:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *            @arg DMA_PINCOS_WordAligned: Peripheral address increment offset is 
 503:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *                                         fixed to 4 (32-bit aligned addresses). 
 504:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @retval None
 505:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   */
 506:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** void DMA_PeriphIncOffsetSizeConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_Pincos)
 507:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** {
 574              		.loc 1 507 0
 575              		.cfi_startproc
 576              		@ args = 0, pretend = 0, frame = 8
 577              		@ frame_needed = 1, uses_anonymous_args = 0
 578              		@ link register save eliminated.
 579 0000 80B4     		push	{r7}
 580              	.LCFI12:
 581              		.cfi_def_cfa_offset 4
 582 0002 83B0     		sub	sp, sp, #12
 583              	.LCFI13:
 584              		.cfi_def_cfa_offset 16
 585 0004 00AF     		add	r7, sp, #0
 586              		.cfi_offset 7, -4
 587              	.LCFI14:
 588              		.cfi_def_cfa_register 7
 589 0006 7860     		str	r0, [r7, #4]
 590 0008 3960     		str	r1, [r7, #0]
 508:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Check the parameters */
 509:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
 510:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_PINCOS_SIZE(DMA_Pincos));
 511:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 512:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Check the needed Peripheral increment offset */
 513:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   if(DMA_Pincos != DMA_PINCOS_Psize)
 591              		.loc 1 513 0
 592 000a 3B68     		ldr	r3, [r7, #0]
 593 000c 002B     		cmp	r3, #0
 594 000e 06D0     		beq	.L28
 514:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
 515:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Configure DMA_SxCR_PINCOS bit with the input parameter */
 516:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_PINCOS;     
 595              		.loc 1 516 0
 596 0010 7B68     		ldr	r3, [r7, #4]
 597 0012 1B68     		ldr	r3, [r3, #0]
 598 0014 43F40042 		orr	r2, r3, #32768
 599 0018 7B68     		ldr	r3, [r7, #4]
 600 001a 1A60     		str	r2, [r3, #0]
 601 001c 05E0     		b	.L27
 602              	.L28:
 517:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
 518:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else
 519:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
 520:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Clear the PINCOS bit: Peripheral address incremented according to PSIZE */
 521:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_PINCOS;    
 603              		.loc 1 521 0
 604 001e 7B68     		ldr	r3, [r7, #4]
 605 0020 1B68     		ldr	r3, [r3, #0]
 606 0022 23F40042 		bic	r2, r3, #32768
 607 0026 7B68     		ldr	r3, [r7, #4]
 608 0028 1A60     		str	r2, [r3, #0]
 609              	.L27:
 522:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
 523:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** }
 610              		.loc 1 523 0
 611 002a 07F10C07 		add	r7, r7, #12
 612 002e BD46     		mov	sp, r7
 613 0030 80BC     		pop	{r7}
 614 0032 7047     		bx	lr
 615              		.cfi_endproc
 616              	.LFE114:
 618              		.section	.text.DMA_FlowControllerConfig,"ax",%progbits
 619              		.align	2
 620              		.global	DMA_FlowControllerConfig
 621              		.thumb
 622              		.thumb_func
 624              	DMA_FlowControllerConfig:
 625              	.LFB115:
 524:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 525:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /**
 526:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @brief  Configures, when the DMAy Streamx is disabled, the flow controller for
 527:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *         the next transactions (Peripheral or Memory).
 528:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *       
 529:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @note   Before enabling this feature, check if the used peripheral supports 
 530:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *         the Flow Controller mode or not.    
 531:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *  
 532:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
 533:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          to 7 to select the DMA Stream.
 534:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  DMA_FlowCtrl: specifies the DMA flow controller.
 535:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          This parameter can be one of the following values:
 536:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *            @arg DMA_FlowCtrl_Memory: DMAy_Streamx transactions flow controller is 
 537:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *                                      the DMA controller.
 538:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *            @arg DMA_FlowCtrl_Peripheral: DMAy_Streamx transactions flow controller 
 539:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *                                          is the peripheral.    
 540:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @retval None
 541:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   */
 542:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** void DMA_FlowControllerConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FlowCtrl)
 543:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** {
 626              		.loc 1 543 0
 627              		.cfi_startproc
 628              		@ args = 0, pretend = 0, frame = 8
 629              		@ frame_needed = 1, uses_anonymous_args = 0
 630              		@ link register save eliminated.
 631 0000 80B4     		push	{r7}
 632              	.LCFI15:
 633              		.cfi_def_cfa_offset 4
 634 0002 83B0     		sub	sp, sp, #12
 635              	.LCFI16:
 636              		.cfi_def_cfa_offset 16
 637 0004 00AF     		add	r7, sp, #0
 638              		.cfi_offset 7, -4
 639              	.LCFI17:
 640              		.cfi_def_cfa_register 7
 641 0006 7860     		str	r0, [r7, #4]
 642 0008 3960     		str	r1, [r7, #0]
 544:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Check the parameters */
 545:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
 546:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_FLOW_CTRL(DMA_FlowCtrl));
 547:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 548:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Check the needed flow controller  */
 549:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   if(DMA_FlowCtrl != DMA_FlowCtrl_Memory)
 643              		.loc 1 549 0
 644 000a 3B68     		ldr	r3, [r7, #0]
 645 000c 002B     		cmp	r3, #0
 646 000e 06D0     		beq	.L31
 550:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
 551:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Configure DMA_SxCR_PFCTRL bit with the input parameter */
 552:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_PFCTRL;   
 647              		.loc 1 552 0
 648 0010 7B68     		ldr	r3, [r7, #4]
 649 0012 1B68     		ldr	r3, [r3, #0]
 650 0014 43F02002 		orr	r2, r3, #32
 651 0018 7B68     		ldr	r3, [r7, #4]
 652 001a 1A60     		str	r2, [r3, #0]
 653 001c 05E0     		b	.L30
 654              	.L31:
 553:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
 554:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else
 555:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
 556:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Clear the PFCTRL bit: Memory is the flow controller */
 557:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_PFCTRL;    
 655              		.loc 1 557 0
 656 001e 7B68     		ldr	r3, [r7, #4]
 657 0020 1B68     		ldr	r3, [r3, #0]
 658 0022 23F02002 		bic	r2, r3, #32
 659 0026 7B68     		ldr	r3, [r7, #4]
 660 0028 1A60     		str	r2, [r3, #0]
 661              	.L30:
 558:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
 559:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** }
 662              		.loc 1 559 0
 663 002a 07F10C07 		add	r7, r7, #12
 664 002e BD46     		mov	sp, r7
 665 0030 80BC     		pop	{r7}
 666 0032 7047     		bx	lr
 667              		.cfi_endproc
 668              	.LFE115:
 670              		.section	.text.DMA_SetCurrDataCounter,"ax",%progbits
 671              		.align	2
 672              		.global	DMA_SetCurrDataCounter
 673              		.thumb
 674              		.thumb_func
 676              	DMA_SetCurrDataCounter:
 677              	.LFB116:
 560:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /**
 561:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @}
 562:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   */
 563:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 564:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /** @defgroup DMA_Group2 Data Counter functions
 565:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****  *  @brief   Data Counter functions 
 566:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****  *
 567:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** @verbatim   
 568:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****  ===============================================================================
 569:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****                            Data Counter functions
 570:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****  ===============================================================================  
 571:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 572:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   This subsection provides function allowing to configure and read the buffer size
 573:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   (number of data to be transferred). 
 574:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 575:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   The DMA data counter can be written only when the DMA Stream is disabled 
 576:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   (ie. after transfer complete event).
 577:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 578:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   The following function can be used to write the Stream data counter value:
 579:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     - void DMA_SetCurrDataCounter(DMA_Stream_TypeDef* DMAy_Streamx, uint16_t Counter);
 580:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 581:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** @note It is advised to use this function rather than DMA_Init() in situations where
 582:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****       only the Data buffer needs to be reloaded.
 583:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 584:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** @note If the Source and Destination Data Sizes are different, then the value written in
 585:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****       data counter, expressing the number of transfers, is relative to the number of 
 586:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****       transfers from the Peripheral point of view.
 587:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****       ie. If Memory data size is Word, Peripheral data size is Half-Words, then the value
 588:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****       to be configured in the data counter is the number of Half-Words to be transferred
 589:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****       from/to the peripheral.
 590:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 591:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   The DMA data counter can be read to indicate the number of remaining transfers for
 592:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   the relative DMA Stream. This counter is decremented at the end of each data 
 593:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   transfer and when the transfer is complete: 
 594:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****    - If Normal mode is selected: the counter is set to 0.
 595:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****    - If Circular mode is selected: the counter is reloaded with the initial value
 596:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****      (configured before enabling the DMA Stream)
 597:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****    
 598:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   The following function can be used to read the Stream data counter value:
 599:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****      - uint16_t DMA_GetCurrDataCounter(DMA_Stream_TypeDef* DMAy_Streamx);
 600:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 601:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** @endverbatim
 602:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @{
 603:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   */
 604:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 605:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /**
 606:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @brief  Writes the number of data units to be transferred on the DMAy Streamx.
 607:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
 608:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          to 7 to select the DMA Stream.
 609:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  Counter: Number of data units to be transferred (from 0 to 65535) 
 610:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          Number of data items depends only on the Peripheral data format.
 611:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *            
 612:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @note   If Peripheral data format is Bytes: number of data units is equal 
 613:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *         to total number of bytes to be transferred.
 614:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *           
 615:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @note   If Peripheral data format is Half-Word: number of data units is  
 616:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *         equal to total number of bytes to be transferred / 2.
 617:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *           
 618:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @note   If Peripheral data format is Word: number of data units is equal 
 619:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *         to total  number of bytes to be transferred / 4.
 620:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *      
 621:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @note   In Memory-to-Memory transfer mode, the memory buffer pointed by 
 622:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *         DMAy_SxPAR register is considered as Peripheral.
 623:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *      
 624:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @retval The number of remaining data units in the current DMAy Streamx transfer.
 625:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   */
 626:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** void DMA_SetCurrDataCounter(DMA_Stream_TypeDef* DMAy_Streamx, uint16_t Counter)
 627:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** {
 678              		.loc 1 627 0
 679              		.cfi_startproc
 680              		@ args = 0, pretend = 0, frame = 8
 681              		@ frame_needed = 1, uses_anonymous_args = 0
 682              		@ link register save eliminated.
 683 0000 80B4     		push	{r7}
 684              	.LCFI18:
 685              		.cfi_def_cfa_offset 4
 686 0002 83B0     		sub	sp, sp, #12
 687              	.LCFI19:
 688              		.cfi_def_cfa_offset 16
 689 0004 00AF     		add	r7, sp, #0
 690              		.cfi_offset 7, -4
 691              	.LCFI20:
 692              		.cfi_def_cfa_register 7
 693 0006 7860     		str	r0, [r7, #4]
 694 0008 0B46     		mov	r3, r1
 695 000a 7B80     		strh	r3, [r7, #2]	@ movhi
 628:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Check the parameters */
 629:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
 630:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 631:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Write the number of data units to be transferred */
 632:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMAy_Streamx->NDTR = (uint16_t)Counter;
 696              		.loc 1 632 0
 697 000c 7A88     		ldrh	r2, [r7, #2]
 698 000e 7B68     		ldr	r3, [r7, #4]
 699 0010 5A60     		str	r2, [r3, #4]
 633:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** }
 700              		.loc 1 633 0
 701 0012 07F10C07 		add	r7, r7, #12
 702 0016 BD46     		mov	sp, r7
 703 0018 80BC     		pop	{r7}
 704 001a 7047     		bx	lr
 705              		.cfi_endproc
 706              	.LFE116:
 708              		.section	.text.DMA_GetCurrDataCounter,"ax",%progbits
 709              		.align	2
 710              		.global	DMA_GetCurrDataCounter
 711              		.thumb
 712              		.thumb_func
 714              	DMA_GetCurrDataCounter:
 715              	.LFB117:
 634:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 635:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /**
 636:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @brief  Returns the number of remaining data units in the current DMAy Streamx transfer.
 637:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
 638:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          to 7 to select the DMA Stream.
 639:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @retval The number of remaining data units in the current DMAy Streamx transfer.
 640:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   */
 641:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** uint16_t DMA_GetCurrDataCounter(DMA_Stream_TypeDef* DMAy_Streamx)
 642:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** {
 716              		.loc 1 642 0
 717              		.cfi_startproc
 718              		@ args = 0, pretend = 0, frame = 8
 719              		@ frame_needed = 1, uses_anonymous_args = 0
 720              		@ link register save eliminated.
 721 0000 80B4     		push	{r7}
 722              	.LCFI21:
 723              		.cfi_def_cfa_offset 4
 724 0002 83B0     		sub	sp, sp, #12
 725              	.LCFI22:
 726              		.cfi_def_cfa_offset 16
 727 0004 00AF     		add	r7, sp, #0
 728              		.cfi_offset 7, -4
 729              	.LCFI23:
 730              		.cfi_def_cfa_register 7
 731 0006 7860     		str	r0, [r7, #4]
 643:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Check the parameters */
 644:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
 645:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 646:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Return the number of remaining data units for DMAy Streamx */
 647:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   return ((uint16_t)(DMAy_Streamx->NDTR));
 732              		.loc 1 647 0
 733 0008 7B68     		ldr	r3, [r7, #4]
 734 000a 5B68     		ldr	r3, [r3, #4]
 735 000c 9BB2     		uxth	r3, r3
 648:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** }
 736              		.loc 1 648 0
 737 000e 1846     		mov	r0, r3
 738 0010 07F10C07 		add	r7, r7, #12
 739 0014 BD46     		mov	sp, r7
 740 0016 80BC     		pop	{r7}
 741 0018 7047     		bx	lr
 742              		.cfi_endproc
 743              	.LFE117:
 745 001a 00BF     		.section	.text.DMA_DoubleBufferModeConfig,"ax",%progbits
 746              		.align	2
 747              		.global	DMA_DoubleBufferModeConfig
 748              		.thumb
 749              		.thumb_func
 751              	DMA_DoubleBufferModeConfig:
 752              	.LFB118:
 649:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /**
 650:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @}
 651:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   */
 652:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 653:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /** @defgroup DMA_Group3 Double Buffer mode functions
 654:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****  *  @brief   Double Buffer mode functions 
 655:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****  *
 656:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** @verbatim   
 657:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****  ===============================================================================
 658:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****                          Double Buffer mode functions
 659:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****  ===============================================================================  
 660:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 661:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   This subsection provides function allowing to configure and control the double 
 662:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   buffer mode parameters.
 663:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   
 664:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   The Double Buffer mode can be used only when Circular mode is enabled.
 665:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   The Double Buffer mode cannot be used when transferring data from Memory to Memory.
 666:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   
 667:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   The Double Buffer mode allows to set two different Memory addresses from/to which
 668:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   the DMA controller will access alternatively (after completing transfer to/from target
 669:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   memory 0, it will start transfer to/from target memory 1).
 670:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   This allows to reduce software overhead for double buffering and reduce the CPU
 671:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   access time.
 672:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 673:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   Two functions must be called before calling the DMA_Init() function:
 674:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****    - void DMA_DoubleBufferModeConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t Memory1BaseAddr,
 675:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****                                 uint32_t DMA_CurrentMemory);
 676:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****    - void DMA_DoubleBufferModeCmd(DMA_Stream_TypeDef* DMAy_Streamx, FunctionalState NewState);
 677:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****    
 678:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMA_DoubleBufferModeConfig() is called to configure the Memory 1 base address and the first
 679:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   Memory target from/to which the transfer will start after enabling the DMA Stream.
 680:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   Then DMA_DoubleBufferModeCmd() must be called to enable the Double Buffer mode (or disable 
 681:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   it when it should not be used).
 682:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   
 683:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****    
 684:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   Two functions can be called dynamically when the transfer is ongoing (or when the DMA Stream is 
 685:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   stopped) to modify on of the target Memories addresses or to check wich Memory target is currentl
 686:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****    used:
 687:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     - void DMA_MemoryTargetConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t MemoryBaseAddr,
 688:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****                             uint32_t DMA_MemoryTarget);
 689:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     - uint32_t DMA_GetCurrentMemoryTarget(DMA_Stream_TypeDef* DMAy_Streamx);
 690:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 691:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMA_MemoryTargetConfig() can be called to modify the base address of one of the two target Memori
 692:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   The Memory of which the base address will be modified must not be currently be used by the DMA St
 693:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   (ie. if the DMA Stream is currently transferring from Memory 1 then you can only modify base addr
 694:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   of target Memory 0 and vice versa).
 695:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   To check this condition, it is recommended to use the function DMA_GetCurrentMemoryTarget() which
 696:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   returns the index of the Memory target currently in use by the DMA Stream.
 697:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 698:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** @endverbatim
 699:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @{
 700:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   */
 701:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   
 702:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /**
 703:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @brief  Configures, when the DMAy Streamx is disabled, the double buffer mode 
 704:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *         and the current memory target.
 705:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
 706:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          to 7 to select the DMA Stream.
 707:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  Memory1BaseAddr: the base address of the second buffer (Memory 1)  
 708:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  DMA_CurrentMemory: specifies which memory will be first buffer for
 709:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *         the transactions when the Stream will be enabled. 
 710:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          This parameter can be one of the following values:
 711:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *            @arg DMA_Memory_0: Memory 0 is the current buffer.
 712:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *            @arg DMA_Memory_1: Memory 1 is the current buffer.  
 713:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *       
 714:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @note   Memory0BaseAddr is set by the DMA structure configuration in DMA_Init().
 715:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *   
 716:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @retval None
 717:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   */
 718:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** void DMA_DoubleBufferModeConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t Memory1BaseAddr,
 719:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****                                 uint32_t DMA_CurrentMemory)
 720:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** {  
 753              		.loc 1 720 0
 754              		.cfi_startproc
 755              		@ args = 0, pretend = 0, frame = 16
 756              		@ frame_needed = 1, uses_anonymous_args = 0
 757              		@ link register save eliminated.
 758 0000 80B4     		push	{r7}
 759              	.LCFI24:
 760              		.cfi_def_cfa_offset 4
 761 0002 85B0     		sub	sp, sp, #20
 762              	.LCFI25:
 763              		.cfi_def_cfa_offset 24
 764 0004 00AF     		add	r7, sp, #0
 765              		.cfi_offset 7, -4
 766              	.LCFI26:
 767              		.cfi_def_cfa_register 7
 768 0006 F860     		str	r0, [r7, #12]
 769 0008 B960     		str	r1, [r7, #8]
 770 000a 7A60     		str	r2, [r7, #4]
 721:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Check the parameters */
 722:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
 723:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_CURRENT_MEM(DMA_CurrentMemory));
 724:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 725:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   if (DMA_CurrentMemory != DMA_Memory_0)
 771              		.loc 1 725 0
 772 000c 7B68     		ldr	r3, [r7, #4]
 773 000e 002B     		cmp	r3, #0
 774 0010 06D0     		beq	.L36
 726:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
 727:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Set Memory 1 as current memory address */
 728:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMAy_Streamx->CR |= (uint32_t)(DMA_SxCR_CT);    
 775              		.loc 1 728 0
 776 0012 FB68     		ldr	r3, [r7, #12]
 777 0014 1B68     		ldr	r3, [r3, #0]
 778 0016 43F40022 		orr	r2, r3, #524288
 779 001a FB68     		ldr	r3, [r7, #12]
 780 001c 1A60     		str	r2, [r3, #0]
 781 001e 05E0     		b	.L37
 782              	.L36:
 729:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
 730:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else
 731:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
 732:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Set Memory 0 as current memory address */
 733:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMAy_Streamx->CR &= ~(uint32_t)(DMA_SxCR_CT);    
 783              		.loc 1 733 0
 784 0020 FB68     		ldr	r3, [r7, #12]
 785 0022 1B68     		ldr	r3, [r3, #0]
 786 0024 23F40022 		bic	r2, r3, #524288
 787 0028 FB68     		ldr	r3, [r7, #12]
 788 002a 1A60     		str	r2, [r3, #0]
 789              	.L37:
 734:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
 735:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 736:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Write to DMAy Streamx M1AR */
 737:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMAy_Streamx->M1AR = Memory1BaseAddr;
 790              		.loc 1 737 0
 791 002c FB68     		ldr	r3, [r7, #12]
 792 002e BA68     		ldr	r2, [r7, #8]
 793 0030 1A61     		str	r2, [r3, #16]
 738:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** }
 794              		.loc 1 738 0
 795 0032 07F11407 		add	r7, r7, #20
 796 0036 BD46     		mov	sp, r7
 797 0038 80BC     		pop	{r7}
 798 003a 7047     		bx	lr
 799              		.cfi_endproc
 800              	.LFE118:
 802              		.section	.text.DMA_DoubleBufferModeCmd,"ax",%progbits
 803              		.align	2
 804              		.global	DMA_DoubleBufferModeCmd
 805              		.thumb
 806              		.thumb_func
 808              	DMA_DoubleBufferModeCmd:
 809              	.LFB119:
 739:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 740:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /**
 741:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @brief  Enables or disables the double buffer mode for the selected DMA stream.
 742:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @note   This function can be called only when the DMA Stream is disabled.  
 743:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
 744:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          to 7 to select the DMA Stream.
 745:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  NewState: new state of the DMAy Streamx double buffer mode. 
 746:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          This parameter can be: ENABLE or DISABLE.
 747:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @retval None
 748:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   */
 749:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** void DMA_DoubleBufferModeCmd(DMA_Stream_TypeDef* DMAy_Streamx, FunctionalState NewState)
 750:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** {  
 810              		.loc 1 750 0
 811              		.cfi_startproc
 812              		@ args = 0, pretend = 0, frame = 8
 813              		@ frame_needed = 1, uses_anonymous_args = 0
 814              		@ link register save eliminated.
 815 0000 80B4     		push	{r7}
 816              	.LCFI27:
 817              		.cfi_def_cfa_offset 4
 818 0002 83B0     		sub	sp, sp, #12
 819              	.LCFI28:
 820              		.cfi_def_cfa_offset 16
 821 0004 00AF     		add	r7, sp, #0
 822              		.cfi_offset 7, -4
 823              	.LCFI29:
 824              		.cfi_def_cfa_register 7
 825 0006 7860     		str	r0, [r7, #4]
 826 0008 0B46     		mov	r3, r1
 827 000a FB70     		strb	r3, [r7, #3]
 751:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Check the parameters */
 752:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
 753:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 754:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 755:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Configure the Double Buffer mode */
 756:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   if (NewState != DISABLE)
 828              		.loc 1 756 0
 829 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 830 000e 002B     		cmp	r3, #0
 831 0010 06D0     		beq	.L39
 757:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
 758:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Enable the Double buffer mode */
 759:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_DBM;
 832              		.loc 1 759 0
 833 0012 7B68     		ldr	r3, [r7, #4]
 834 0014 1B68     		ldr	r3, [r3, #0]
 835 0016 43F48022 		orr	r2, r3, #262144
 836 001a 7B68     		ldr	r3, [r7, #4]
 837 001c 1A60     		str	r2, [r3, #0]
 838 001e 05E0     		b	.L38
 839              	.L39:
 760:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
 761:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else
 762:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
 763:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Disable the Double buffer mode */
 764:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_DBM;
 840              		.loc 1 764 0
 841 0020 7B68     		ldr	r3, [r7, #4]
 842 0022 1B68     		ldr	r3, [r3, #0]
 843 0024 23F48022 		bic	r2, r3, #262144
 844 0028 7B68     		ldr	r3, [r7, #4]
 845 002a 1A60     		str	r2, [r3, #0]
 846              	.L38:
 765:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
 766:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** }
 847              		.loc 1 766 0
 848 002c 07F10C07 		add	r7, r7, #12
 849 0030 BD46     		mov	sp, r7
 850 0032 80BC     		pop	{r7}
 851 0034 7047     		bx	lr
 852              		.cfi_endproc
 853              	.LFE119:
 855 0036 00BF     		.section	.text.DMA_MemoryTargetConfig,"ax",%progbits
 856              		.align	2
 857              		.global	DMA_MemoryTargetConfig
 858              		.thumb
 859              		.thumb_func
 861              	DMA_MemoryTargetConfig:
 862              	.LFB120:
 767:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 768:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /**
 769:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @brief  Configures the Memory address for the next buffer transfer in double
 770:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *         buffer mode (for dynamic use). This function can be called when the
 771:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *         DMA Stream is enabled and when the transfer is ongoing.  
 772:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
 773:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          to 7 to select the DMA Stream.
 774:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  MemoryBaseAddr: The base address of the target memory buffer
 775:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  DMA_MemoryTarget: Next memory target to be used. 
 776:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *         This parameter can be one of the following values:
 777:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *            @arg DMA_Memory_0: To use the memory address 0
 778:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *            @arg DMA_Memory_1: To use the memory address 1
 779:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * 
 780:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @note    It is not allowed to modify the Base Address of a target Memory when
 781:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          this target is involved in the current transfer. ie. If the DMA Stream
 782:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          is currently transferring to/from Memory 1, then it not possible to
 783:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          modify Base address of Memory 1, but it is possible to modify Base
 784:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          address of Memory 0.
 785:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          To know which Memory is currently used, you can use the function
 786:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          DMA_GetCurrentMemoryTarget().             
 787:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *  
 788:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @retval None
 789:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   */
 790:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** void DMA_MemoryTargetConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t MemoryBaseAddr,
 791:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****                            uint32_t DMA_MemoryTarget)
 792:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** {
 863              		.loc 1 792 0
 864              		.cfi_startproc
 865              		@ args = 0, pretend = 0, frame = 16
 866              		@ frame_needed = 1, uses_anonymous_args = 0
 867              		@ link register save eliminated.
 868 0000 80B4     		push	{r7}
 869              	.LCFI30:
 870              		.cfi_def_cfa_offset 4
 871 0002 85B0     		sub	sp, sp, #20
 872              	.LCFI31:
 873              		.cfi_def_cfa_offset 24
 874 0004 00AF     		add	r7, sp, #0
 875              		.cfi_offset 7, -4
 876              	.LCFI32:
 877              		.cfi_def_cfa_register 7
 878 0006 F860     		str	r0, [r7, #12]
 879 0008 B960     		str	r1, [r7, #8]
 880 000a 7A60     		str	r2, [r7, #4]
 793:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Check the parameters */
 794:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
 795:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_CURRENT_MEM(DMA_MemoryTarget));
 796:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     
 797:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Check the Memory target to be configured */
 798:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   if (DMA_MemoryTarget != DMA_Memory_0)
 881              		.loc 1 798 0
 882 000c 7B68     		ldr	r3, [r7, #4]
 883 000e 002B     		cmp	r3, #0
 884 0010 03D0     		beq	.L42
 799:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
 800:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Write to DMAy Streamx M1AR */
 801:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMAy_Streamx->M1AR = MemoryBaseAddr;    
 885              		.loc 1 801 0
 886 0012 FB68     		ldr	r3, [r7, #12]
 887 0014 BA68     		ldr	r2, [r7, #8]
 888 0016 1A61     		str	r2, [r3, #16]
 889 0018 02E0     		b	.L41
 890              	.L42:
 802:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }  
 803:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else
 804:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
 805:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Write to DMAy Streamx M0AR */
 806:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMAy_Streamx->M0AR = MemoryBaseAddr;  
 891              		.loc 1 806 0
 892 001a FB68     		ldr	r3, [r7, #12]
 893 001c BA68     		ldr	r2, [r7, #8]
 894 001e DA60     		str	r2, [r3, #12]
 895              	.L41:
 807:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
 808:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** }
 896              		.loc 1 808 0
 897 0020 07F11407 		add	r7, r7, #20
 898 0024 BD46     		mov	sp, r7
 899 0026 80BC     		pop	{r7}
 900 0028 7047     		bx	lr
 901              		.cfi_endproc
 902              	.LFE120:
 904 002a 00BF     		.section	.text.DMA_GetCurrentMemoryTarget,"ax",%progbits
 905              		.align	2
 906              		.global	DMA_GetCurrentMemoryTarget
 907              		.thumb
 908              		.thumb_func
 910              	DMA_GetCurrentMemoryTarget:
 911              	.LFB121:
 809:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 810:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /**
 811:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @brief  Returns the current memory target used by double buffer transfer.
 812:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
 813:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          to 7 to select the DMA Stream.
 814:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @retval The memory target number: 0 for Memory0 or 1 for Memory1. 
 815:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   */
 816:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** uint32_t DMA_GetCurrentMemoryTarget(DMA_Stream_TypeDef* DMAy_Streamx)
 817:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** {
 912              		.loc 1 817 0
 913              		.cfi_startproc
 914              		@ args = 0, pretend = 0, frame = 16
 915              		@ frame_needed = 1, uses_anonymous_args = 0
 916              		@ link register save eliminated.
 917 0000 80B4     		push	{r7}
 918              	.LCFI33:
 919              		.cfi_def_cfa_offset 4
 920 0002 85B0     		sub	sp, sp, #20
 921              	.LCFI34:
 922              		.cfi_def_cfa_offset 24
 923 0004 00AF     		add	r7, sp, #0
 924              		.cfi_offset 7, -4
 925              	.LCFI35:
 926              		.cfi_def_cfa_register 7
 927 0006 7860     		str	r0, [r7, #4]
 818:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   uint32_t tmp = 0;
 928              		.loc 1 818 0
 929 0008 4FF00003 		mov	r3, #0
 930 000c FB60     		str	r3, [r7, #12]
 819:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   
 820:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Check the parameters */
 821:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
 822:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 823:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Get the current memory target */
 824:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   if ((DMAy_Streamx->CR & DMA_SxCR_CT) != 0)
 931              		.loc 1 824 0
 932 000e 7B68     		ldr	r3, [r7, #4]
 933 0010 1B68     		ldr	r3, [r3, #0]
 934 0012 03F40023 		and	r3, r3, #524288
 935 0016 002B     		cmp	r3, #0
 936 0018 03D0     		beq	.L45
 825:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
 826:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Current memory buffer used is Memory 1 */
 827:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     tmp = 1;
 937              		.loc 1 827 0
 938 001a 4FF00103 		mov	r3, #1
 939 001e FB60     		str	r3, [r7, #12]
 940 0020 02E0     		b	.L46
 941              	.L45:
 828:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }  
 829:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else
 830:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
 831:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Current memory buffer used is Memory 0 */
 832:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     tmp = 0;    
 942              		.loc 1 832 0
 943 0022 4FF00003 		mov	r3, #0
 944 0026 FB60     		str	r3, [r7, #12]
 945              	.L46:
 833:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
 834:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   return tmp;
 946              		.loc 1 834 0
 947 0028 FB68     		ldr	r3, [r7, #12]
 835:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** }
 948              		.loc 1 835 0
 949 002a 1846     		mov	r0, r3
 950 002c 07F11407 		add	r7, r7, #20
 951 0030 BD46     		mov	sp, r7
 952 0032 80BC     		pop	{r7}
 953 0034 7047     		bx	lr
 954              		.cfi_endproc
 955              	.LFE121:
 957 0036 00BF     		.section	.text.DMA_GetCmdStatus,"ax",%progbits
 958              		.align	2
 959              		.global	DMA_GetCmdStatus
 960              		.thumb
 961              		.thumb_func
 963              	DMA_GetCmdStatus:
 964              	.LFB122:
 836:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /**
 837:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @}
 838:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   */
 839:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 840:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /** @defgroup DMA_Group4 Interrupts and flags management functions
 841:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****  *  @brief   Interrupts and flags management functions 
 842:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****  *
 843:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** @verbatim   
 844:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****  ===============================================================================
 845:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****                   Interrupts and flags management functions
 846:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****  ===============================================================================  
 847:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 848:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   This subsection provides functions allowing to
 849:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****    - Check the DMA enable status
 850:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****    - Check the FIFO status 
 851:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****    - Configure the DMA Interrupts sources and check or clear the flags or pending bits status.   
 852:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****    
 853:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****  1. DMA Enable status:
 854:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****    After configuring the DMA Stream (DMA_Init() function) and enabling the stream,
 855:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****    it is recommended to check (or wait until) the DMA Stream is effectively enabled.
 856:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****    A Stream may remain disabled if a configuration parameter is wrong.
 857:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****    After disabling a DMA Stream, it is also recommended to check (or wait until) the DMA
 858:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****    Stream is effectively disabled. If a Stream is disabled while a data transfer is ongoing, 
 859:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****    the current data will be transferred and the Stream will be effectively disabled only after
 860:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****    this data transfer completion.
 861:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****    To monitor this state it is possible to use the following function:
 862:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****      - FunctionalState DMA_GetCmdStatus(DMA_Stream_TypeDef* DMAy_Streamx); 
 863:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****  
 864:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****  2. FIFO Status:
 865:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****    It is possible to monitor the FIFO status when a transfer is ongoing using the following 
 866:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****    function:
 867:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****      - uint32_t DMA_GetFIFOStatus(DMA_Stream_TypeDef* DMAy_Streamx); 
 868:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****  
 869:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****  3. DMA Interrupts and Flags:
 870:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   The user should identify which mode will be used in his application to manage the
 871:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMA controller events: Polling mode or Interrupt mode. 
 872:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     
 873:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   Polling Mode
 874:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   =============
 875:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     Each DMA stream can be managed through 4 event Flags:
 876:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     (x : DMA Stream number )
 877:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****        1. DMA_FLAG_FEIFx  : to indicate that a FIFO Mode Transfer Error event occurred.
 878:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****        2. DMA_FLAG_DMEIFx : to indicate that a Direct Mode Transfer Error event occurred.
 879:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****        3. DMA_FLAG_TEIFx  : to indicate that a Transfer Error event occurred.
 880:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****        4. DMA_FLAG_HTIFx  : to indicate that a Half-Transfer Complete event occurred.
 881:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****        5. DMA_FLAG_TCIFx  : to indicate that a Transfer Complete event occurred .       
 882:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 883:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****    In this Mode it is advised to use the following functions:
 884:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****       - FlagStatus DMA_GetFlagStatus(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG);
 885:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****       - void DMA_ClearFlag(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG);
 886:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 887:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   Interrupt Mode
 888:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   ===============
 889:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     Each DMA Stream can be managed through 4 Interrupts:
 890:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 891:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     Interrupt Source
 892:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     ----------------
 893:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****        1. DMA_IT_FEIFx  : specifies the interrupt source for the  FIFO Mode Transfer Error event.
 894:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****        2. DMA_IT_DMEIFx : specifies the interrupt source for the Direct Mode Transfer Error event.
 895:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****        3. DMA_IT_TEIFx  : specifies the interrupt source for the Transfer Error event.
 896:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****        4. DMA_IT_HTIFx  : specifies the interrupt source for the Half-Transfer Complete event.
 897:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****        5. DMA_IT_TCIFx  : specifies the interrupt source for the a Transfer Complete event. 
 898:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****      
 899:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   In this Mode it is advised to use the following functions:
 900:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****      - void DMA_ITConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT, FunctionalState NewStat
 901:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****      - ITStatus DMA_GetITStatus(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT);
 902:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****      - void DMA_ClearITPendingBit(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT);
 903:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 904:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** @endverbatim
 905:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @{
 906:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   */
 907:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 908:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /**
 909:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @brief  Returns the status of EN bit for the specified DMAy Streamx.
 910:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
 911:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          to 7 to select the DMA Stream.
 912:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *   
 913:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @note    After configuring the DMA Stream (DMA_Init() function) and enabling
 914:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          the stream, it is recommended to check (or wait until) the DMA Stream
 915:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          is effectively enabled. A Stream may remain disabled if a configuration
 916:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          parameter is wrong.
 917:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          After disabling a DMA Stream, it is also recommended to check (or wait 
 918:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          until) the DMA Stream is effectively disabled. If a Stream is disabled
 919:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          while a data transfer is ongoing, the current data will be transferred
 920:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          and the Stream will be effectively disabled only after the transfer
 921:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          of this single data is finished.  
 922:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *      
 923:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @retval Current state of the DMAy Streamx (ENABLE or DISABLE).
 924:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   */
 925:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** FunctionalState DMA_GetCmdStatus(DMA_Stream_TypeDef* DMAy_Streamx)
 926:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** {
 965              		.loc 1 926 0
 966              		.cfi_startproc
 967              		@ args = 0, pretend = 0, frame = 16
 968              		@ frame_needed = 1, uses_anonymous_args = 0
 969              		@ link register save eliminated.
 970 0000 80B4     		push	{r7}
 971              	.LCFI36:
 972              		.cfi_def_cfa_offset 4
 973 0002 85B0     		sub	sp, sp, #20
 974              	.LCFI37:
 975              		.cfi_def_cfa_offset 24
 976 0004 00AF     		add	r7, sp, #0
 977              		.cfi_offset 7, -4
 978              	.LCFI38:
 979              		.cfi_def_cfa_register 7
 980 0006 7860     		str	r0, [r7, #4]
 927:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   FunctionalState state = DISABLE;
 981              		.loc 1 927 0
 982 0008 4FF00003 		mov	r3, #0
 983 000c FB73     		strb	r3, [r7, #15]
 928:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 929:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Check the parameters */
 930:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
 931:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 932:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   if ((DMAy_Streamx->CR & (uint32_t)DMA_SxCR_EN) != 0)
 984              		.loc 1 932 0
 985 000e 7B68     		ldr	r3, [r7, #4]
 986 0010 1B68     		ldr	r3, [r3, #0]
 987 0012 03F00103 		and	r3, r3, #1
 988 0016 DBB2     		uxtb	r3, r3
 989 0018 002B     		cmp	r3, #0
 990 001a 03D0     		beq	.L48
 933:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
 934:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* The selected DMAy Streamx EN bit is set (DMA is still transferring) */
 935:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     state = ENABLE;
 991              		.loc 1 935 0
 992 001c 4FF00103 		mov	r3, #1
 993 0020 FB73     		strb	r3, [r7, #15]
 994 0022 02E0     		b	.L49
 995              	.L48:
 936:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
 937:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else
 938:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
 939:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* The selected DMAy Streamx EN bit is cleared (DMA is disabled and 
 940:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****         all transfers are complete) */
 941:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     state = DISABLE;
 996              		.loc 1 941 0
 997 0024 4FF00003 		mov	r3, #0
 998 0028 FB73     		strb	r3, [r7, #15]
 999              	.L49:
 942:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
 943:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   return state;
 1000              		.loc 1 943 0
 1001 002a FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 944:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** }
 1002              		.loc 1 944 0
 1003 002c 1846     		mov	r0, r3
 1004 002e 07F11407 		add	r7, r7, #20
 1005 0032 BD46     		mov	sp, r7
 1006 0034 80BC     		pop	{r7}
 1007 0036 7047     		bx	lr
 1008              		.cfi_endproc
 1009              	.LFE122:
 1011              		.section	.text.DMA_GetFIFOStatus,"ax",%progbits
 1012              		.align	2
 1013              		.global	DMA_GetFIFOStatus
 1014              		.thumb
 1015              		.thumb_func
 1017              	DMA_GetFIFOStatus:
 1018              	.LFB123:
 945:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 946:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /**
 947:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @brief  Returns the current DMAy Streamx FIFO filled level.
 948:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0 
 949:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *         to 7 to select the DMA Stream.
 950:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @retval The FIFO filling state.
 951:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *           - DMA_FIFOStatus_Less1QuarterFull: when FIFO is less than 1 quarter-full 
 952:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *                                               and not empty.
 953:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *           - DMA_FIFOStatus_1QuarterFull: if more than 1 quarter-full.
 954:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *           - DMA_FIFOStatus_HalfFull: if more than 1 half-full.
 955:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *           - DMA_FIFOStatus_3QuartersFull: if more than 3 quarters-full.
 956:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *           - DMA_FIFOStatus_Empty: when FIFO is empty
 957:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *           - DMA_FIFOStatus_Full: when FIFO is full
 958:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   */
 959:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** uint32_t DMA_GetFIFOStatus(DMA_Stream_TypeDef* DMAy_Streamx)
 960:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** {
 1019              		.loc 1 960 0
 1020              		.cfi_startproc
 1021              		@ args = 0, pretend = 0, frame = 16
 1022              		@ frame_needed = 1, uses_anonymous_args = 0
 1023              		@ link register save eliminated.
 1024 0000 80B4     		push	{r7}
 1025              	.LCFI39:
 1026              		.cfi_def_cfa_offset 4
 1027 0002 85B0     		sub	sp, sp, #20
 1028              	.LCFI40:
 1029              		.cfi_def_cfa_offset 24
 1030 0004 00AF     		add	r7, sp, #0
 1031              		.cfi_offset 7, -4
 1032              	.LCFI41:
 1033              		.cfi_def_cfa_register 7
 1034 0006 7860     		str	r0, [r7, #4]
 961:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   uint32_t tmpreg = 0;
 1035              		.loc 1 961 0
 1036 0008 4FF00003 		mov	r3, #0
 1037 000c FB60     		str	r3, [r7, #12]
 962:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****  
 963:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Check the parameters */
 964:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
 965:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   
 966:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Get the FIFO level bits */
 967:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   tmpreg = (uint32_t)((DMAy_Streamx->FCR & DMA_SxFCR_FS));
 1038              		.loc 1 967 0
 1039 000e 7B68     		ldr	r3, [r7, #4]
 1040 0010 5B69     		ldr	r3, [r3, #20]
 1041 0012 03F03803 		and	r3, r3, #56
 1042 0016 FB60     		str	r3, [r7, #12]
 968:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   
 969:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   return tmpreg;
 1043              		.loc 1 969 0
 1044 0018 FB68     		ldr	r3, [r7, #12]
 970:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** }
 1045              		.loc 1 970 0
 1046 001a 1846     		mov	r0, r3
 1047 001c 07F11407 		add	r7, r7, #20
 1048 0020 BD46     		mov	sp, r7
 1049 0022 80BC     		pop	{r7}
 1050 0024 7047     		bx	lr
 1051              		.cfi_endproc
 1052              	.LFE123:
 1054 0026 00BF     		.section	.text.DMA_GetFlagStatus,"ax",%progbits
 1055              		.align	2
 1056              		.global	DMA_GetFlagStatus
 1057              		.thumb
 1058              		.thumb_func
 1060              	DMA_GetFlagStatus:
 1061              	.LFB124:
 971:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 972:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /**
 973:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @brief  Checks whether the specified DMAy Streamx flag is set or not.
 974:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
 975:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          to 7 to select the DMA Stream.
 976:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  DMA_FLAG: specifies the flag to check.
 977:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          This parameter can be one of the following values:
 978:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *            @arg DMA_FLAG_TCIFx:  Streamx transfer complete flag
 979:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *            @arg DMA_FLAG_HTIFx:  Streamx half transfer complete flag
 980:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *            @arg DMA_FLAG_TEIFx:  Streamx transfer error flag
 981:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *            @arg DMA_FLAG_DMEIFx: Streamx direct mode error flag
 982:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
 983:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *         Where x can be 0 to 7 to select the DMA Stream.
 984:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @retval The new state of DMA_FLAG (SET or RESET).
 985:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   */
 986:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** FlagStatus DMA_GetFlagStatus(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
 987:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** {
 1062              		.loc 1 987 0
 1063              		.cfi_startproc
 1064              		@ args = 0, pretend = 0, frame = 24
 1065              		@ frame_needed = 1, uses_anonymous_args = 0
 1066              		@ link register save eliminated.
 1067 0000 80B4     		push	{r7}
 1068              	.LCFI42:
 1069              		.cfi_def_cfa_offset 4
 1070 0002 87B0     		sub	sp, sp, #28
 1071              	.LCFI43:
 1072              		.cfi_def_cfa_offset 32
 1073 0004 00AF     		add	r7, sp, #0
 1074              		.cfi_offset 7, -4
 1075              	.LCFI44:
 1076              		.cfi_def_cfa_register 7
 1077 0006 7860     		str	r0, [r7, #4]
 1078 0008 3960     		str	r1, [r7, #0]
 988:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   FlagStatus bitstatus = RESET;
 1079              		.loc 1 988 0
 1080 000a 4FF00003 		mov	r3, #0
 1081 000e FB75     		strb	r3, [r7, #23]
 989:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMA_TypeDef* DMAy;
 990:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   uint32_t tmpreg = 0;
 1082              		.loc 1 990 0
 1083 0010 4FF00003 		mov	r3, #0
 1084 0014 FB60     		str	r3, [r7, #12]
 991:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 992:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Check the parameters */
 993:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
 994:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_GET_FLAG(DMA_FLAG));
 995:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 996:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Determine the DMA to which belongs the stream */
 997:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   if (DMAy_Streamx < DMA2_Stream0)
 1085              		.loc 1 997 0
 1086 0016 7A68     		ldr	r2, [r7, #4]
 1087 0018 164B     		ldr	r3, .L58
 1088 001a 9A42     		cmp	r2, r3
 1089 001c 02D8     		bhi	.L52
 998:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
 999:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* DMAy_Streamx belongs to DMA1 */
1000:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMAy = DMA1; 
 1090              		.loc 1 1000 0
 1091 001e 164B     		ldr	r3, .L58+4
 1092 0020 3B61     		str	r3, [r7, #16]
 1093 0022 01E0     		b	.L53
 1094              	.L52:
1001:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   } 
1002:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else 
1003:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
1004:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* DMAy_Streamx belongs to DMA2 */
1005:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMAy = DMA2; 
 1095              		.loc 1 1005 0
 1096 0024 154B     		ldr	r3, .L58+8
 1097 0026 3B61     		str	r3, [r7, #16]
 1098              	.L53:
1006:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
1007:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
1008:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Check if the flag is in HISR or LISR */
1009:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 1099              		.loc 1 1009 0
 1100 0028 3B68     		ldr	r3, [r7, #0]
 1101 002a 03F00053 		and	r3, r3, #536870912
 1102 002e 002B     		cmp	r3, #0
 1103 0030 03D0     		beq	.L54
1010:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
1011:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Get DMAy HISR register value */
1012:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     tmpreg = DMAy->HISR;
 1104              		.loc 1 1012 0
 1105 0032 3B69     		ldr	r3, [r7, #16]
 1106 0034 5B68     		ldr	r3, [r3, #4]
 1107 0036 FB60     		str	r3, [r7, #12]
 1108 0038 02E0     		b	.L55
 1109              	.L54:
1013:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
1014:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else
1015:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
1016:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Get DMAy LISR register value */
1017:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     tmpreg = DMAy->LISR;
 1110              		.loc 1 1017 0
 1111 003a 3B69     		ldr	r3, [r7, #16]
 1112 003c 1B68     		ldr	r3, [r3, #0]
 1113 003e FB60     		str	r3, [r7, #12]
 1114              	.L55:
1018:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }   
1019:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****  
1020:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Mask the reserved bits */
1021:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   tmpreg &= (uint32_t)RESERVED_MASK;
 1115              		.loc 1 1021 0
 1116 0040 FA68     		ldr	r2, [r7, #12]
 1117 0042 0F4B     		ldr	r3, .L58+12
 1118 0044 02EA0303 		and	r3, r2, r3
 1119 0048 FB60     		str	r3, [r7, #12]
1022:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
1023:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Check the status of the specified DMA flag */
1024:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   if ((tmpreg & DMA_FLAG) != (uint32_t)RESET)
 1120              		.loc 1 1024 0
 1121 004a FA68     		ldr	r2, [r7, #12]
 1122 004c 3B68     		ldr	r3, [r7, #0]
 1123 004e 02EA0303 		and	r3, r2, r3
 1124 0052 002B     		cmp	r3, #0
 1125 0054 03D0     		beq	.L56
1025:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
1026:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* DMA_FLAG is set */
1027:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     bitstatus = SET;
 1126              		.loc 1 1027 0
 1127 0056 4FF00103 		mov	r3, #1
 1128 005a FB75     		strb	r3, [r7, #23]
 1129 005c 02E0     		b	.L57
 1130              	.L56:
1028:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
1029:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else
1030:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
1031:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* DMA_FLAG is reset */
1032:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     bitstatus = RESET;
 1131              		.loc 1 1032 0
 1132 005e 4FF00003 		mov	r3, #0
 1133 0062 FB75     		strb	r3, [r7, #23]
 1134              	.L57:
1033:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
1034:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
1035:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Return the DMA_FLAG status */
1036:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   return  bitstatus;
 1135              		.loc 1 1036 0
 1136 0064 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
1037:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** }
 1137              		.loc 1 1037 0
 1138 0066 1846     		mov	r0, r3
 1139 0068 07F11C07 		add	r7, r7, #28
 1140 006c BD46     		mov	sp, r7
 1141 006e 80BC     		pop	{r7}
 1142 0070 7047     		bx	lr
 1143              	.L59:
 1144 0072 00BF     		.align	2
 1145              	.L58:
 1146 0074 0F640240 		.word	1073898511
 1147 0078 00600240 		.word	1073897472
 1148 007c 00640240 		.word	1073898496
 1149 0080 7D0F7D0F 		.word	259854205
 1150              		.cfi_endproc
 1151              	.LFE124:
 1153              		.section	.text.DMA_ClearFlag,"ax",%progbits
 1154              		.align	2
 1155              		.global	DMA_ClearFlag
 1156              		.thumb
 1157              		.thumb_func
 1159              	DMA_ClearFlag:
 1160              	.LFB125:
1038:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
1039:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /**
1040:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @brief  Clears the DMAy Streamx's pending flags.
1041:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
1042:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          to 7 to select the DMA Stream.
1043:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  DMA_FLAG: specifies the flag to clear.
1044:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          This parameter can be any combination of the following values:
1045:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *            @arg DMA_FLAG_TCIFx:  Streamx transfer complete flag
1046:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *            @arg DMA_FLAG_HTIFx:  Streamx half transfer complete flag
1047:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *            @arg DMA_FLAG_TEIFx:  Streamx transfer error flag
1048:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *            @arg DMA_FLAG_DMEIFx: Streamx direct mode error flag
1049:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
1050:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *         Where x can be 0 to 7 to select the DMA Stream.   
1051:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @retval None
1052:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   */
1053:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** void DMA_ClearFlag(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
1054:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** {
 1161              		.loc 1 1054 0
 1162              		.cfi_startproc
 1163              		@ args = 0, pretend = 0, frame = 16
 1164              		@ frame_needed = 1, uses_anonymous_args = 0
 1165              		@ link register save eliminated.
 1166 0000 80B4     		push	{r7}
 1167              	.LCFI45:
 1168              		.cfi_def_cfa_offset 4
 1169 0002 85B0     		sub	sp, sp, #20
 1170              	.LCFI46:
 1171              		.cfi_def_cfa_offset 24
 1172 0004 00AF     		add	r7, sp, #0
 1173              		.cfi_offset 7, -4
 1174              	.LCFI47:
 1175              		.cfi_def_cfa_register 7
 1176 0006 7860     		str	r0, [r7, #4]
 1177 0008 3960     		str	r1, [r7, #0]
1055:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMA_TypeDef* DMAy;
1056:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
1057:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Check the parameters */
1058:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
1059:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_CLEAR_FLAG(DMA_FLAG));
1060:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
1061:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Determine the DMA to which belongs the stream */
1062:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   if (DMAy_Streamx < DMA2_Stream0)
 1178              		.loc 1 1062 0
 1179 000a 7A68     		ldr	r2, [r7, #4]
 1180 000c 0F4B     		ldr	r3, .L65
 1181 000e 9A42     		cmp	r2, r3
 1182 0010 02D8     		bhi	.L61
1063:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
1064:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* DMAy_Streamx belongs to DMA1 */
1065:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMAy = DMA1; 
 1183              		.loc 1 1065 0
 1184 0012 0F4B     		ldr	r3, .L65+4
 1185 0014 FB60     		str	r3, [r7, #12]
 1186 0016 01E0     		b	.L62
 1187              	.L61:
1066:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   } 
1067:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else 
1068:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
1069:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* DMAy_Streamx belongs to DMA2 */
1070:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMAy = DMA2; 
 1188              		.loc 1 1070 0
 1189 0018 0E4B     		ldr	r3, .L65+8
 1190 001a FB60     		str	r3, [r7, #12]
 1191              	.L62:
1071:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
1072:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
1073:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Check if LIFCR or HIFCR register is targeted */
1074:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 1192              		.loc 1 1074 0
 1193 001c 3B68     		ldr	r3, [r7, #0]
 1194 001e 03F00053 		and	r3, r3, #536870912
 1195 0022 002B     		cmp	r3, #0
 1196 0024 06D0     		beq	.L63
1075:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
1076:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Set DMAy HIFCR register clear flag bits */
1077:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMAy->HIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 1197              		.loc 1 1077 0
 1198 0026 3A68     		ldr	r2, [r7, #0]
 1199 0028 0B4B     		ldr	r3, .L65+12
 1200 002a 02EA0303 		and	r3, r2, r3
 1201 002e FA68     		ldr	r2, [r7, #12]
 1202 0030 D360     		str	r3, [r2, #12]
 1203 0032 05E0     		b	.L60
 1204              	.L63:
1078:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
1079:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else 
1080:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
1081:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Set DMAy LIFCR register clear flag bits */
1082:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 1205              		.loc 1 1082 0
 1206 0034 3A68     		ldr	r2, [r7, #0]
 1207 0036 084B     		ldr	r3, .L65+12
 1208 0038 02EA0303 		and	r3, r2, r3
 1209 003c FA68     		ldr	r2, [r7, #12]
 1210 003e 9360     		str	r3, [r2, #8]
 1211              	.L60:
1083:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }    
1084:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** }
 1212              		.loc 1 1084 0
 1213 0040 07F11407 		add	r7, r7, #20
 1214 0044 BD46     		mov	sp, r7
 1215 0046 80BC     		pop	{r7}
 1216 0048 7047     		bx	lr
 1217              	.L66:
 1218 004a 00BF     		.align	2
 1219              	.L65:
 1220 004c 0F640240 		.word	1073898511
 1221 0050 00600240 		.word	1073897472
 1222 0054 00640240 		.word	1073898496
 1223 0058 7D0F7D0F 		.word	259854205
 1224              		.cfi_endproc
 1225              	.LFE125:
 1227              		.section	.text.DMA_ITConfig,"ax",%progbits
 1228              		.align	2
 1229              		.global	DMA_ITConfig
 1230              		.thumb
 1231              		.thumb_func
 1233              	DMA_ITConfig:
 1234              	.LFB126:
1085:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
1086:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /**
1087:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @brief  Enables or disables the specified DMAy Streamx interrupts.
1088:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
1089:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          to 7 to select the DMA Stream.
1090:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param DMA_IT: specifies the DMA interrupt sources to be enabled or disabled. 
1091:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          This parameter can be any combination of the following values:
1092:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *            @arg DMA_IT_TC:  Transfer complete interrupt mask
1093:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *            @arg DMA_IT_HT:  Half transfer complete interrupt mask
1094:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *            @arg DMA_IT_TE:  Transfer error interrupt mask
1095:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *            @arg DMA_IT_FE:  FIFO error interrupt mask
1096:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  NewState: new state of the specified DMA interrupts.
1097:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          This parameter can be: ENABLE or DISABLE.
1098:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @retval None
1099:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   */
1100:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** void DMA_ITConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT, FunctionalState NewState)
1101:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** {
 1235              		.loc 1 1101 0
 1236              		.cfi_startproc
 1237              		@ args = 0, pretend = 0, frame = 16
 1238              		@ frame_needed = 1, uses_anonymous_args = 0
 1239              		@ link register save eliminated.
 1240 0000 80B4     		push	{r7}
 1241              	.LCFI48:
 1242              		.cfi_def_cfa_offset 4
 1243 0002 85B0     		sub	sp, sp, #20
 1244              	.LCFI49:
 1245              		.cfi_def_cfa_offset 24
 1246 0004 00AF     		add	r7, sp, #0
 1247              		.cfi_offset 7, -4
 1248              	.LCFI50:
 1249              		.cfi_def_cfa_register 7
 1250 0006 F860     		str	r0, [r7, #12]
 1251 0008 B960     		str	r1, [r7, #8]
 1252 000a 1346     		mov	r3, r2
 1253 000c FB71     		strb	r3, [r7, #7]
1102:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Check the parameters */
1103:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
1104:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_CONFIG_IT(DMA_IT));
1105:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1106:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
1107:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Check if the DMA_IT parameter contains a FIFO interrupt */
1108:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   if ((DMA_IT & DMA_IT_FE) != 0)
 1254              		.loc 1 1108 0
 1255 000e BB68     		ldr	r3, [r7, #8]
 1256 0010 03F08003 		and	r3, r3, #128
 1257 0014 002B     		cmp	r3, #0
 1258 0016 0FD0     		beq	.L68
1109:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
1110:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     if (NewState != DISABLE)
 1259              		.loc 1 1110 0
 1260 0018 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1261 001a 002B     		cmp	r3, #0
 1262 001c 06D0     		beq	.L69
1111:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     {
1112:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****       /* Enable the selected DMA FIFO interrupts */
1113:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****       DMAy_Streamx->FCR |= (uint32_t)DMA_IT_FE;
 1263              		.loc 1 1113 0
 1264 001e FB68     		ldr	r3, [r7, #12]
 1265 0020 5B69     		ldr	r3, [r3, #20]
 1266 0022 43F08002 		orr	r2, r3, #128
 1267 0026 FB68     		ldr	r3, [r7, #12]
 1268 0028 5A61     		str	r2, [r3, #20]
 1269 002a 05E0     		b	.L68
 1270              	.L69:
1114:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     }    
1115:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     else 
1116:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     {
1117:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****       /* Disable the selected DMA FIFO interrupts */
1118:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****       DMAy_Streamx->FCR &= ~(uint32_t)DMA_IT_FE;  
 1271              		.loc 1 1118 0
 1272 002c FB68     		ldr	r3, [r7, #12]
 1273 002e 5B69     		ldr	r3, [r3, #20]
 1274 0030 23F08002 		bic	r2, r3, #128
 1275 0034 FB68     		ldr	r3, [r7, #12]
 1276 0036 5A61     		str	r2, [r3, #20]
 1277              	.L68:
1119:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     }
1120:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
1121:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
1122:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Check if the DMA_IT parameter contains a Transfer interrupt */
1123:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   if (DMA_IT != DMA_IT_FE)
 1278              		.loc 1 1123 0
 1279 0038 BB68     		ldr	r3, [r7, #8]
 1280 003a 802B     		cmp	r3, #128
 1281 003c 15D0     		beq	.L67
1124:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
1125:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     if (NewState != DISABLE)
 1282              		.loc 1 1125 0
 1283 003e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1284 0040 002B     		cmp	r3, #0
 1285 0042 08D0     		beq	.L71
1126:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     {
1127:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****       /* Enable the selected DMA transfer interrupts */
1128:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****       DMAy_Streamx->CR |= (uint32_t)(DMA_IT  & TRANSFER_IT_ENABLE_MASK);
 1286              		.loc 1 1128 0
 1287 0044 FB68     		ldr	r3, [r7, #12]
 1288 0046 1A68     		ldr	r2, [r3, #0]
 1289 0048 BB68     		ldr	r3, [r7, #8]
 1290 004a 03F01E03 		and	r3, r3, #30
 1291 004e 1A43     		orrs	r2, r2, r3
 1292 0050 FB68     		ldr	r3, [r7, #12]
 1293 0052 1A60     		str	r2, [r3, #0]
 1294 0054 09E0     		b	.L67
 1295              	.L71:
1129:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     }
1130:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     else
1131:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     {
1132:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****       /* Disable the selected DMA transfer interrupts */
1133:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****       DMAy_Streamx->CR &= ~(uint32_t)(DMA_IT & TRANSFER_IT_ENABLE_MASK);
 1296              		.loc 1 1133 0
 1297 0056 FB68     		ldr	r3, [r7, #12]
 1298 0058 1A68     		ldr	r2, [r3, #0]
 1299 005a BB68     		ldr	r3, [r7, #8]
 1300 005c 03F01E03 		and	r3, r3, #30
 1301 0060 6FEA0303 		mvn	r3, r3
 1302 0064 1A40     		ands	r2, r2, r3
 1303 0066 FB68     		ldr	r3, [r7, #12]
 1304 0068 1A60     		str	r2, [r3, #0]
 1305              	.L67:
1134:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     }    
1135:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
1136:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** }
 1306              		.loc 1 1136 0
 1307 006a 07F11407 		add	r7, r7, #20
 1308 006e BD46     		mov	sp, r7
 1309 0070 80BC     		pop	{r7}
 1310 0072 7047     		bx	lr
 1311              		.cfi_endproc
 1312              	.LFE126:
 1314              		.section	.text.DMA_GetITStatus,"ax",%progbits
 1315              		.align	2
 1316              		.global	DMA_GetITStatus
 1317              		.thumb
 1318              		.thumb_func
 1320              	DMA_GetITStatus:
 1321              	.LFB127:
1137:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
1138:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /**
1139:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @brief  Checks whether the specified DMAy Streamx interrupt has occurred or not.
1140:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
1141:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          to 7 to select the DMA Stream.
1142:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  DMA_IT: specifies the DMA interrupt source to check.
1143:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          This parameter can be one of the following values:
1144:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *            @arg DMA_IT_TCIFx:  Streamx transfer complete interrupt
1145:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *            @arg DMA_IT_HTIFx:  Streamx half transfer complete interrupt
1146:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *            @arg DMA_IT_TEIFx:  Streamx transfer error interrupt
1147:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *            @arg DMA_IT_DMEIFx: Streamx direct mode error interrupt
1148:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *            @arg DMA_IT_FEIFx:  Streamx FIFO error interrupt
1149:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *         Where x can be 0 to 7 to select the DMA Stream.
1150:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @retval The new state of DMA_IT (SET or RESET).
1151:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   */
1152:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** ITStatus DMA_GetITStatus(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT)
1153:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** {
 1322              		.loc 1 1153 0
 1323              		.cfi_startproc
 1324              		@ args = 0, pretend = 0, frame = 24
 1325              		@ frame_needed = 1, uses_anonymous_args = 0
 1326              		@ link register save eliminated.
 1327 0000 80B4     		push	{r7}
 1328              	.LCFI51:
 1329              		.cfi_def_cfa_offset 4
 1330 0002 87B0     		sub	sp, sp, #28
 1331              	.LCFI52:
 1332              		.cfi_def_cfa_offset 32
 1333 0004 00AF     		add	r7, sp, #0
 1334              		.cfi_offset 7, -4
 1335              	.LCFI53:
 1336              		.cfi_def_cfa_register 7
 1337 0006 7860     		str	r0, [r7, #4]
 1338 0008 3960     		str	r1, [r7, #0]
1154:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   ITStatus bitstatus = RESET;
 1339              		.loc 1 1154 0
 1340 000a 4FF00003 		mov	r3, #0
 1341 000e FB75     		strb	r3, [r7, #23]
1155:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMA_TypeDef* DMAy;
1156:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   uint32_t tmpreg = 0, enablestatus = 0;
 1342              		.loc 1 1156 0
 1343 0010 4FF00003 		mov	r3, #0
 1344 0014 FB60     		str	r3, [r7, #12]
 1345 0016 4FF00003 		mov	r3, #0
 1346 001a BB60     		str	r3, [r7, #8]
1157:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
1158:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Check the parameters */
1159:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
1160:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_GET_IT(DMA_IT));
1161:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****  
1162:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Determine the DMA to which belongs the stream */
1163:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   if (DMAy_Streamx < DMA2_Stream0)
 1347              		.loc 1 1163 0
 1348 001c 7A68     		ldr	r2, [r7, #4]
 1349 001e 244B     		ldr	r3, .L81
 1350 0020 9A42     		cmp	r2, r3
 1351 0022 02D8     		bhi	.L73
1164:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
1165:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* DMAy_Streamx belongs to DMA1 */
1166:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMAy = DMA1; 
 1352              		.loc 1 1166 0
 1353 0024 234B     		ldr	r3, .L81+4
 1354 0026 3B61     		str	r3, [r7, #16]
 1355 0028 01E0     		b	.L74
 1356              	.L73:
1167:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   } 
1168:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else 
1169:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
1170:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* DMAy_Streamx belongs to DMA2 */
1171:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMAy = DMA2; 
 1357              		.loc 1 1171 0
 1358 002a 234B     		ldr	r3, .L81+8
 1359 002c 3B61     		str	r3, [r7, #16]
 1360              	.L74:
1172:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
1173:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
1174:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Check if the interrupt enable bit is in the CR or FCR register */
1175:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   if ((DMA_IT & TRANSFER_IT_MASK) != (uint32_t)RESET)
 1361              		.loc 1 1175 0
 1362 002e 3A68     		ldr	r2, [r7, #0]
 1363 0030 224B     		ldr	r3, .L81+12
 1364 0032 02EA0303 		and	r3, r2, r3
 1365 0036 002B     		cmp	r3, #0
 1366 0038 0CD0     		beq	.L75
1176:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
1177:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Get the interrupt enable position mask in CR register */
1178:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     tmpreg = (uint32_t)((DMA_IT >> 11) & TRANSFER_IT_ENABLE_MASK);   
 1367              		.loc 1 1178 0
 1368 003a 3B68     		ldr	r3, [r7, #0]
 1369 003c 4FEAD323 		lsr	r3, r3, #11
 1370 0040 03F01E03 		and	r3, r3, #30
 1371 0044 FB60     		str	r3, [r7, #12]
1179:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     
1180:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Check the enable bit in CR register */
1181:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     enablestatus = (uint32_t)(DMAy_Streamx->CR & tmpreg);
 1372              		.loc 1 1181 0
 1373 0046 7B68     		ldr	r3, [r7, #4]
 1374 0048 1A68     		ldr	r2, [r3, #0]
 1375 004a FB68     		ldr	r3, [r7, #12]
 1376 004c 02EA0303 		and	r3, r2, r3
 1377 0050 BB60     		str	r3, [r7, #8]
 1378 0052 04E0     		b	.L76
 1379              	.L75:
1182:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
1183:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else 
1184:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
1185:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Check the enable bit in FCR register */
1186:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     enablestatus = (uint32_t)(DMAy_Streamx->FCR & DMA_IT_FE); 
 1380              		.loc 1 1186 0
 1381 0054 7B68     		ldr	r3, [r7, #4]
 1382 0056 5B69     		ldr	r3, [r3, #20]
 1383 0058 03F08003 		and	r3, r3, #128
 1384 005c BB60     		str	r3, [r7, #8]
 1385              	.L76:
1187:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
1188:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****  
1189:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Check if the interrupt pending flag is in LISR or HISR */
1190:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   if ((DMA_IT & HIGH_ISR_MASK) != (uint32_t)RESET)
 1386              		.loc 1 1190 0
 1387 005e 3B68     		ldr	r3, [r7, #0]
 1388 0060 03F00053 		and	r3, r3, #536870912
 1389 0064 002B     		cmp	r3, #0
 1390 0066 03D0     		beq	.L77
1191:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
1192:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Get DMAy HISR register value */
1193:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     tmpreg = DMAy->HISR ;
 1391              		.loc 1 1193 0
 1392 0068 3B69     		ldr	r3, [r7, #16]
 1393 006a 5B68     		ldr	r3, [r3, #4]
 1394 006c FB60     		str	r3, [r7, #12]
 1395 006e 02E0     		b	.L78
 1396              	.L77:
1194:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
1195:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else
1196:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
1197:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Get DMAy LISR register value */
1198:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     tmpreg = DMAy->LISR ;
 1397              		.loc 1 1198 0
 1398 0070 3B69     		ldr	r3, [r7, #16]
 1399 0072 1B68     		ldr	r3, [r3, #0]
 1400 0074 FB60     		str	r3, [r7, #12]
 1401              	.L78:
1199:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   } 
1200:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
1201:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* mask all reserved bits */
1202:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   tmpreg &= (uint32_t)RESERVED_MASK;
 1402              		.loc 1 1202 0
 1403 0076 FA68     		ldr	r2, [r7, #12]
 1404 0078 114B     		ldr	r3, .L81+16
 1405 007a 02EA0303 		and	r3, r2, r3
 1406 007e FB60     		str	r3, [r7, #12]
1203:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
1204:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Check the status of the specified DMA interrupt */
1205:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   if (((tmpreg & DMA_IT) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
 1407              		.loc 1 1205 0
 1408 0080 FA68     		ldr	r2, [r7, #12]
 1409 0082 3B68     		ldr	r3, [r7, #0]
 1410 0084 02EA0303 		and	r3, r2, r3
 1411 0088 002B     		cmp	r3, #0
 1412 008a 06D0     		beq	.L79
 1413              		.loc 1 1205 0 is_stmt 0 discriminator 1
 1414 008c BB68     		ldr	r3, [r7, #8]
 1415 008e 002B     		cmp	r3, #0
 1416 0090 03D0     		beq	.L79
1206:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
1207:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* DMA_IT is set */
1208:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     bitstatus = SET;
 1417              		.loc 1 1208 0 is_stmt 1
 1418 0092 4FF00103 		mov	r3, #1
 1419 0096 FB75     		strb	r3, [r7, #23]
 1420 0098 02E0     		b	.L80
 1421              	.L79:
1209:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
1210:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else
1211:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
1212:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* DMA_IT is reset */
1213:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     bitstatus = RESET;
 1422              		.loc 1 1213 0
 1423 009a 4FF00003 		mov	r3, #0
 1424 009e FB75     		strb	r3, [r7, #23]
 1425              	.L80:
1214:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
1215:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
1216:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Return the DMA_IT status */
1217:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   return  bitstatus;
 1426              		.loc 1 1217 0
 1427 00a0 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
1218:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** }
 1428              		.loc 1 1218 0
 1429 00a2 1846     		mov	r0, r3
 1430 00a4 07F11C07 		add	r7, r7, #28
 1431 00a8 BD46     		mov	sp, r7
 1432 00aa 80BC     		pop	{r7}
 1433 00ac 7047     		bx	lr
 1434              	.L82:
 1435 00ae 00BF     		.align	2
 1436              	.L81:
 1437 00b0 0F640240 		.word	1073898511
 1438 00b4 00600240 		.word	1073897472
 1439 00b8 00640240 		.word	1073898496
 1440 00bc 3C0F3C0F 		.word	255594300
 1441 00c0 7D0F7D0F 		.word	259854205
 1442              		.cfi_endproc
 1443              	.LFE127:
 1445              		.section	.text.DMA_ClearITPendingBit,"ax",%progbits
 1446              		.align	2
 1447              		.global	DMA_ClearITPendingBit
 1448              		.thumb
 1449              		.thumb_func
 1451              	DMA_ClearITPendingBit:
 1452              	.LFB128:
1219:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
1220:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /**
1221:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @brief  Clears the DMAy Streamx's interrupt pending bits.
1222:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
1223:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          to 7 to select the DMA Stream.
1224:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  DMA_IT: specifies the DMA interrupt pending bit to clear.
1225:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          This parameter can be any combination of the following values:
1226:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *            @arg DMA_IT_TCIFx:  Streamx transfer complete interrupt
1227:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *            @arg DMA_IT_HTIFx:  Streamx half transfer complete interrupt
1228:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *            @arg DMA_IT_TEIFx:  Streamx transfer error interrupt
1229:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *            @arg DMA_IT_DMEIFx: Streamx direct mode error interrupt
1230:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *            @arg DMA_IT_FEIFx:  Streamx FIFO error interrupt
1231:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *         Where x can be 0 to 7 to select the DMA Stream.
1232:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @retval None
1233:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   */
1234:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** void DMA_ClearITPendingBit(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT)
1235:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** {
 1453              		.loc 1 1235 0
 1454              		.cfi_startproc
 1455              		@ args = 0, pretend = 0, frame = 16
 1456              		@ frame_needed = 1, uses_anonymous_args = 0
 1457              		@ link register save eliminated.
 1458 0000 80B4     		push	{r7}
 1459              	.LCFI54:
 1460              		.cfi_def_cfa_offset 4
 1461 0002 85B0     		sub	sp, sp, #20
 1462              	.LCFI55:
 1463              		.cfi_def_cfa_offset 24
 1464 0004 00AF     		add	r7, sp, #0
 1465              		.cfi_offset 7, -4
 1466              	.LCFI56:
 1467              		.cfi_def_cfa_register 7
 1468 0006 7860     		str	r0, [r7, #4]
 1469 0008 3960     		str	r1, [r7, #0]
1236:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMA_TypeDef* DMAy;
1237:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
1238:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Check the parameters */
1239:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
1240:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_CLEAR_IT(DMA_IT));
1241:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
1242:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Determine the DMA to which belongs the stream */
1243:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   if (DMAy_Streamx < DMA2_Stream0)
 1470              		.loc 1 1243 0
 1471 000a 7A68     		ldr	r2, [r7, #4]
 1472 000c 0F4B     		ldr	r3, .L88
 1473 000e 9A42     		cmp	r2, r3
 1474 0010 02D8     		bhi	.L84
1244:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
1245:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* DMAy_Streamx belongs to DMA1 */
1246:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMAy = DMA1; 
 1475              		.loc 1 1246 0
 1476 0012 0F4B     		ldr	r3, .L88+4
 1477 0014 FB60     		str	r3, [r7, #12]
 1478 0016 01E0     		b	.L85
 1479              	.L84:
1247:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   } 
1248:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else 
1249:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
1250:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* DMAy_Streamx belongs to DMA2 */
1251:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMAy = DMA2; 
 1480              		.loc 1 1251 0
 1481 0018 0E4B     		ldr	r3, .L88+8
 1482 001a FB60     		str	r3, [r7, #12]
 1483              	.L85:
1252:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
1253:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
1254:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Check if LIFCR or HIFCR register is targeted */
1255:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   if ((DMA_IT & HIGH_ISR_MASK) != (uint32_t)RESET)
 1484              		.loc 1 1255 0
 1485 001c 3B68     		ldr	r3, [r7, #0]
 1486 001e 03F00053 		and	r3, r3, #536870912
 1487 0022 002B     		cmp	r3, #0
 1488 0024 06D0     		beq	.L86
1256:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
1257:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Set DMAy HIFCR register clear interrupt bits */
1258:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMAy->HIFCR = (uint32_t)(DMA_IT & RESERVED_MASK);
 1489              		.loc 1 1258 0
 1490 0026 3A68     		ldr	r2, [r7, #0]
 1491 0028 0B4B     		ldr	r3, .L88+12
 1492 002a 02EA0303 		and	r3, r2, r3
 1493 002e FA68     		ldr	r2, [r7, #12]
 1494 0030 D360     		str	r3, [r2, #12]
 1495 0032 05E0     		b	.L83
 1496              	.L86:
1259:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
1260:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else 
1261:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
1262:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Set DMAy LIFCR register clear interrupt bits */
1263:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMAy->LIFCR = (uint32_t)(DMA_IT & RESERVED_MASK);
 1497              		.loc 1 1263 0
 1498 0034 3A68     		ldr	r2, [r7, #0]
 1499 0036 084B     		ldr	r3, .L88+12
 1500 0038 02EA0303 		and	r3, r2, r3
 1501 003c FA68     		ldr	r2, [r7, #12]
 1502 003e 9360     		str	r3, [r2, #8]
 1503              	.L83:
1264:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }   
1265:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** }
 1504              		.loc 1 1265 0
 1505 0040 07F11407 		add	r7, r7, #20
 1506 0044 BD46     		mov	sp, r7
 1507 0046 80BC     		pop	{r7}
 1508 0048 7047     		bx	lr
 1509              	.L89:
 1510 004a 00BF     		.align	2
 1511              	.L88:
 1512 004c 0F640240 		.word	1073898511
 1513 0050 00600240 		.word	1073897472
 1514 0054 00640240 		.word	1073898496
 1515 0058 7D0F7D0F 		.word	259854205
 1516              		.cfi_endproc
 1517              	.LFE128:
 1519              		.text
 1520              	.Letext0:
DEFINED SYMBOLS
                            *ABS*:00000000 stm32f4xx_dma.c
     /tmp/ccTUKUk1.s:25     .text.DMA_DeInit:00000000 $t
     /tmp/ccTUKUk1.s:30     .text.DMA_DeInit:00000000 DMA_DeInit
     /tmp/ccTUKUk1.s:262    .text.DMA_DeInit:00000160 $d
     /tmp/ccTUKUk1.s:287    .text.DMA_Init:00000000 $t
     /tmp/ccTUKUk1.s:292    .text.DMA_Init:00000000 DMA_Init
     /tmp/ccTUKUk1.s:417    .text.DMA_Init:000000b4 $d
     /tmp/ccTUKUk1.s:422    .text.DMA_StructInit:00000000 $t
     /tmp/ccTUKUk1.s:427    .text.DMA_StructInit:00000000 DMA_StructInit
     /tmp/ccTUKUk1.s:514    .text.DMA_Cmd:00000000 $t
     /tmp/ccTUKUk1.s:519    .text.DMA_Cmd:00000000 DMA_Cmd
     /tmp/ccTUKUk1.s:567    .text.DMA_PeriphIncOffsetSizeConfig:00000000 $t
     /tmp/ccTUKUk1.s:572    .text.DMA_PeriphIncOffsetSizeConfig:00000000 DMA_PeriphIncOffsetSizeConfig
     /tmp/ccTUKUk1.s:619    .text.DMA_FlowControllerConfig:00000000 $t
     /tmp/ccTUKUk1.s:624    .text.DMA_FlowControllerConfig:00000000 DMA_FlowControllerConfig
     /tmp/ccTUKUk1.s:671    .text.DMA_SetCurrDataCounter:00000000 $t
     /tmp/ccTUKUk1.s:676    .text.DMA_SetCurrDataCounter:00000000 DMA_SetCurrDataCounter
     /tmp/ccTUKUk1.s:709    .text.DMA_GetCurrDataCounter:00000000 $t
     /tmp/ccTUKUk1.s:714    .text.DMA_GetCurrDataCounter:00000000 DMA_GetCurrDataCounter
     /tmp/ccTUKUk1.s:746    .text.DMA_DoubleBufferModeConfig:00000000 $t
     /tmp/ccTUKUk1.s:751    .text.DMA_DoubleBufferModeConfig:00000000 DMA_DoubleBufferModeConfig
     /tmp/ccTUKUk1.s:803    .text.DMA_DoubleBufferModeCmd:00000000 $t
     /tmp/ccTUKUk1.s:808    .text.DMA_DoubleBufferModeCmd:00000000 DMA_DoubleBufferModeCmd
     /tmp/ccTUKUk1.s:856    .text.DMA_MemoryTargetConfig:00000000 $t
     /tmp/ccTUKUk1.s:861    .text.DMA_MemoryTargetConfig:00000000 DMA_MemoryTargetConfig
     /tmp/ccTUKUk1.s:905    .text.DMA_GetCurrentMemoryTarget:00000000 $t
     /tmp/ccTUKUk1.s:910    .text.DMA_GetCurrentMemoryTarget:00000000 DMA_GetCurrentMemoryTarget
     /tmp/ccTUKUk1.s:958    .text.DMA_GetCmdStatus:00000000 $t
     /tmp/ccTUKUk1.s:963    .text.DMA_GetCmdStatus:00000000 DMA_GetCmdStatus
     /tmp/ccTUKUk1.s:1012   .text.DMA_GetFIFOStatus:00000000 $t
     /tmp/ccTUKUk1.s:1017   .text.DMA_GetFIFOStatus:00000000 DMA_GetFIFOStatus
     /tmp/ccTUKUk1.s:1055   .text.DMA_GetFlagStatus:00000000 $t
     /tmp/ccTUKUk1.s:1060   .text.DMA_GetFlagStatus:00000000 DMA_GetFlagStatus
     /tmp/ccTUKUk1.s:1146   .text.DMA_GetFlagStatus:00000074 $d
     /tmp/ccTUKUk1.s:1154   .text.DMA_ClearFlag:00000000 $t
     /tmp/ccTUKUk1.s:1159   .text.DMA_ClearFlag:00000000 DMA_ClearFlag
     /tmp/ccTUKUk1.s:1220   .text.DMA_ClearFlag:0000004c $d
     /tmp/ccTUKUk1.s:1228   .text.DMA_ITConfig:00000000 $t
     /tmp/ccTUKUk1.s:1233   .text.DMA_ITConfig:00000000 DMA_ITConfig
     /tmp/ccTUKUk1.s:1315   .text.DMA_GetITStatus:00000000 $t
     /tmp/ccTUKUk1.s:1320   .text.DMA_GetITStatus:00000000 DMA_GetITStatus
     /tmp/ccTUKUk1.s:1437   .text.DMA_GetITStatus:000000b0 $d
     /tmp/ccTUKUk1.s:1446   .text.DMA_ClearITPendingBit:00000000 $t
     /tmp/ccTUKUk1.s:1451   .text.DMA_ClearITPendingBit:00000000 DMA_ClearITPendingBit
     /tmp/ccTUKUk1.s:1512   .text.DMA_ClearITPendingBit:0000004c $d
                     .debug_frame:00000010 $d

NO UNDEFINED SYMBOLS
